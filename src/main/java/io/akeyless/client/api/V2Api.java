/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.api;

import io.akeyless.client.ApiCallback;
import io.akeyless.client.ApiClient;
import io.akeyless.client.ApiException;
import io.akeyless.client.ApiResponse;
import io.akeyless.client.Configuration;
import io.akeyless.client.Pair;
import io.akeyless.client.ProgressRequestBody;
import io.akeyless.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.akeyless.client.model.AkeylessGatewayConfig;
import io.akeyless.client.model.AliasDetails;
import io.akeyless.client.model.AllAnalyticsData;
import io.akeyless.client.model.AllowedAccess;
import io.akeyless.client.model.AssocRoleAuthMethod;
import io.akeyless.client.model.AssocTargetItem;
import io.akeyless.client.model.Auth;
import io.akeyless.client.model.AuthMethod;
import io.akeyless.client.model.AuthMethodCreateApiKey;
import io.akeyless.client.model.AuthMethodCreateAwsIam;
import io.akeyless.client.model.AuthMethodCreateAzureAD;
import io.akeyless.client.model.AuthMethodCreateCert;
import io.akeyless.client.model.AuthMethodCreateEmail;
import io.akeyless.client.model.AuthMethodCreateGcp;
import io.akeyless.client.model.AuthMethodCreateK8s;
import io.akeyless.client.model.AuthMethodCreateKerberos;
import io.akeyless.client.model.AuthMethodCreateLdap;
import io.akeyless.client.model.AuthMethodCreateOCI;
import io.akeyless.client.model.AuthMethodCreateOIDC;
import io.akeyless.client.model.AuthMethodCreateOauth2;
import io.akeyless.client.model.AuthMethodCreateOutput;
import io.akeyless.client.model.AuthMethodCreateSAML;
import io.akeyless.client.model.AuthMethodCreateUniversalIdentity;
import io.akeyless.client.model.AuthMethodDelete;
import io.akeyless.client.model.AuthMethodDeleteOutput;
import io.akeyless.client.model.AuthMethodGet;
import io.akeyless.client.model.AuthMethodList;
import io.akeyless.client.model.AuthMethodUpdateApiKey;
import io.akeyless.client.model.AuthMethodUpdateAwsIam;
import io.akeyless.client.model.AuthMethodUpdateAzureAD;
import io.akeyless.client.model.AuthMethodUpdateCert;
import io.akeyless.client.model.AuthMethodUpdateEmail;
import io.akeyless.client.model.AuthMethodUpdateGcp;
import io.akeyless.client.model.AuthMethodUpdateK8s;
import io.akeyless.client.model.AuthMethodUpdateKerberos;
import io.akeyless.client.model.AuthMethodUpdateLdap;
import io.akeyless.client.model.AuthMethodUpdateOCI;
import io.akeyless.client.model.AuthMethodUpdateOIDC;
import io.akeyless.client.model.AuthMethodUpdateOauth2;
import io.akeyless.client.model.AuthMethodUpdateOutput;
import io.akeyless.client.model.AuthMethodUpdateSAML;
import io.akeyless.client.model.AuthMethodUpdateUniversalIdentity;
import io.akeyless.client.model.AuthOutput;
import io.akeyless.client.model.BastionConfigReplyObj;
import io.akeyless.client.model.BastionsList;
import io.akeyless.client.model.BatchEncryptionRequestLine;
import io.akeyless.client.model.BatchTokenizationRequestLine;
import io.akeyless.client.model.CacheConfigPart;
import io.akeyless.client.model.CalcPasswordSecurityInfo;
import io.akeyless.client.model.ChangeAdminAccountPassword;
import io.akeyless.client.model.Configure;
import io.akeyless.client.model.ConfigureOutput;
import io.akeyless.client.model.Connect;
import io.akeyless.client.model.CreateAWSTarget;
import io.akeyless.client.model.CreateAWSTargetOutput;
import io.akeyless.client.model.CreateArtifactoryTarget;
import io.akeyless.client.model.CreateArtifactoryTargetOutput;
import io.akeyless.client.model.CreateAuthMethod;
import io.akeyless.client.model.CreateAuthMethodAWSIAM;
import io.akeyless.client.model.CreateAuthMethodAWSIAMOutput;
import io.akeyless.client.model.CreateAuthMethodAzureAD;
import io.akeyless.client.model.CreateAuthMethodAzureADOutput;
import io.akeyless.client.model.CreateAuthMethodCert;
import io.akeyless.client.model.CreateAuthMethodCertOutput;
import io.akeyless.client.model.CreateAuthMethodEmail;
import io.akeyless.client.model.CreateAuthMethodEmailOutput;
import io.akeyless.client.model.CreateAuthMethodGCP;
import io.akeyless.client.model.CreateAuthMethodGCPOutput;
import io.akeyless.client.model.CreateAuthMethodHuawei;
import io.akeyless.client.model.CreateAuthMethodHuaweiOutput;
import io.akeyless.client.model.CreateAuthMethodK8S;
import io.akeyless.client.model.CreateAuthMethodK8SOutput;
import io.akeyless.client.model.CreateAuthMethodLDAP;
import io.akeyless.client.model.CreateAuthMethodLDAPOutput;
import io.akeyless.client.model.CreateAuthMethodOAuth2;
import io.akeyless.client.model.CreateAuthMethodOAuth2Output;
import io.akeyless.client.model.CreateAuthMethodOCI;
import io.akeyless.client.model.CreateAuthMethodOCIOutput;
import io.akeyless.client.model.CreateAuthMethodOIDC;
import io.akeyless.client.model.CreateAuthMethodOIDCOutput;
import io.akeyless.client.model.CreateAuthMethodOutput;
import io.akeyless.client.model.CreateAuthMethodSAML;
import io.akeyless.client.model.CreateAuthMethodSAMLOutput;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentity;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentityOutput;
import io.akeyless.client.model.CreateAzureTarget;
import io.akeyless.client.model.CreateAzureTargetOutput;
import io.akeyless.client.model.CreateCertificate;
import io.akeyless.client.model.CreateCertificateOutput;
import io.akeyless.client.model.CreateClassicKey;
import io.akeyless.client.model.CreateClassicKeyOutput;
import io.akeyless.client.model.CreateDBTarget;
import io.akeyless.client.model.CreateDBTargetOutput;
import io.akeyless.client.model.CreateDFCKey;
import io.akeyless.client.model.CreateDFCKeyOutput;
import io.akeyless.client.model.CreateDockerhubTarget;
import io.akeyless.client.model.CreateDockerhubTargetOutput;
import io.akeyless.client.model.CreateDynamicSecret;
import io.akeyless.client.model.CreateEKSTarget;
import io.akeyless.client.model.CreateEKSTargetOutput;
import io.akeyless.client.model.CreateESM;
import io.akeyless.client.model.CreateESMOutput;
import io.akeyless.client.model.CreateEventForwarder;
import io.akeyless.client.model.CreateEventForwarderOutput;
import io.akeyless.client.model.CreateGKETarget;
import io.akeyless.client.model.CreateGKETargetOutput;
import io.akeyless.client.model.CreateGcpTarget;
import io.akeyless.client.model.CreateGcpTargetOutput;
import io.akeyless.client.model.CreateGithubTarget;
import io.akeyless.client.model.CreateGithubTargetOutput;
import io.akeyless.client.model.CreateGitlabTarget;
import io.akeyless.client.model.CreateGitlabTargetOutput;
import io.akeyless.client.model.CreateGlobalSignAtlasTarget;
import io.akeyless.client.model.CreateGlobalSignAtlasTargetOutput;
import io.akeyless.client.model.CreateGlobalSignTarget;
import io.akeyless.client.model.CreateGlobalSignTargetOutput;
import io.akeyless.client.model.CreateGodaddyTarget;
import io.akeyless.client.model.CreateGodaddyTargetOutput;
import io.akeyless.client.model.CreateGroup;
import io.akeyless.client.model.CreateGroupOutput;
import io.akeyless.client.model.CreateHashiVaultTarget;
import io.akeyless.client.model.CreateHashiVaultTargetOutput;
import io.akeyless.client.model.CreateKey;
import io.akeyless.client.model.CreateKeyOutput;
import io.akeyless.client.model.CreateLdapTarget;
import io.akeyless.client.model.CreateLdapTargetOutput;
import io.akeyless.client.model.CreateLinkedTarget;
import io.akeyless.client.model.CreateLinkedTargetOutput;
import io.akeyless.client.model.CreateNativeK8STarget;
import io.akeyless.client.model.CreateNativeK8STargetOutput;
import io.akeyless.client.model.CreateOidcApp;
import io.akeyless.client.model.CreateOidcAppOutput;
import io.akeyless.client.model.CreatePKICertIssuer;
import io.akeyless.client.model.CreatePKICertIssuerOutput;
import io.akeyless.client.model.CreatePasskey;
import io.akeyless.client.model.CreatePasskeyOutput;
import io.akeyless.client.model.CreatePingTarget;
import io.akeyless.client.model.CreatePingTargetOutput;
import io.akeyless.client.model.CreateRabbitMQTarget;
import io.akeyless.client.model.CreateRabbitMQTargetOutput;
import io.akeyless.client.model.CreateRole;
import io.akeyless.client.model.CreateRoleAuthMethodAssocOutput;
import io.akeyless.client.model.CreateRotatedSecret;
import io.akeyless.client.model.CreateRotatedSecretOutput;
import io.akeyless.client.model.CreateSSHCertIssuer;
import io.akeyless.client.model.CreateSSHCertIssuerOutput;
import io.akeyless.client.model.CreateSSHTarget;
import io.akeyless.client.model.CreateSSHTargetOutput;
import io.akeyless.client.model.CreateSalesforceTarget;
import io.akeyless.client.model.CreateSalesforceTargetOutput;
import io.akeyless.client.model.CreateSecret;
import io.akeyless.client.model.CreateSecretOutput;
import io.akeyless.client.model.CreateTargetItemAssocOutput;
import io.akeyless.client.model.CreateTokenizer;
import io.akeyless.client.model.CreateTokenizerOutput;
import io.akeyless.client.model.CreateUSC;
import io.akeyless.client.model.CreateUSCOutput;
import io.akeyless.client.model.CreateUserEvent;
import io.akeyless.client.model.CreateUserEventOutput;
import io.akeyless.client.model.CreateWebTarget;
import io.akeyless.client.model.CreateWebTargetOutput;
import io.akeyless.client.model.CreateWindowsTarget;
import io.akeyless.client.model.CreateWindowsTargetOutput;
import io.akeyless.client.model.CreateZeroSSLTarget;
import io.akeyless.client.model.CreateZeroSSLTargetOutput;
import io.akeyless.client.model.DSProducerDetails;
import io.akeyless.client.model.DeactivateAcmeAccount;
import io.akeyless.client.model.Decrypt;
import io.akeyless.client.model.DecryptGPG;
import io.akeyless.client.model.DecryptGPGOutput;
import io.akeyless.client.model.DecryptOutput;
import io.akeyless.client.model.DecryptPKCS1;
import io.akeyless.client.model.DecryptPKCS1Output;
import io.akeyless.client.model.DecryptWithClassicKey;
import io.akeyless.client.model.DecryptWithClassicKeyOutput;
import io.akeyless.client.model.DeleteAuthMethod;
import io.akeyless.client.model.DeleteAuthMethodOutput;
import io.akeyless.client.model.DeleteAuthMethods;
import io.akeyless.client.model.DeleteAuthMethodsOutput;
import io.akeyless.client.model.DeleteEventForwarder;
import io.akeyless.client.model.DeleteGatewayAllowedAccessId;
import io.akeyless.client.model.DeleteGroup;
import io.akeyless.client.model.DeleteGroupOutput;
import io.akeyless.client.model.DeleteGwCluster;
import io.akeyless.client.model.DeleteItem;
import io.akeyless.client.model.DeleteItemOutput;
import io.akeyless.client.model.DeleteItems;
import io.akeyless.client.model.DeleteItemsOutput;
import io.akeyless.client.model.DeleteRole;
import io.akeyless.client.model.DeleteRoleAssociation;
import io.akeyless.client.model.DeleteRoleRule;
import io.akeyless.client.model.DeleteRoleRuleOutput;
import io.akeyless.client.model.DeleteRoles;
import io.akeyless.client.model.DeleteTarget;
import io.akeyless.client.model.DeleteTargetAssociation;
import io.akeyless.client.model.DeleteTargets;
import io.akeyless.client.model.DeriveKey;
import io.akeyless.client.model.DeriveKeyOutput;
import io.akeyless.client.model.DescribeAssoc;
import io.akeyless.client.model.DescribeItem;
import io.akeyless.client.model.DescribePermissions;
import io.akeyless.client.model.DescribePermissionsOutput;
import io.akeyless.client.model.DescribeSubClaims;
import io.akeyless.client.model.DescribeSubClaimsOutput;
import io.akeyless.client.model.Detokenize;
import io.akeyless.client.model.DetokenizeOutput;
import io.akeyless.client.model.DynamicSecretCreateArtifactory;
import io.akeyless.client.model.DynamicSecretCreateAws;
import io.akeyless.client.model.DynamicSecretCreateAzure;
import io.akeyless.client.model.DynamicSecretCreateCassandra;
import io.akeyless.client.model.DynamicSecretCreateCustom;
import io.akeyless.client.model.DynamicSecretCreateDockerhub;
import io.akeyless.client.model.DynamicSecretCreateEks;
import io.akeyless.client.model.DynamicSecretCreateGcp;
import io.akeyless.client.model.DynamicSecretCreateGithub;
import io.akeyless.client.model.DynamicSecretCreateGitlab;
import io.akeyless.client.model.DynamicSecretCreateGke;
import io.akeyless.client.model.DynamicSecretCreateGoogleWorkspace;
import io.akeyless.client.model.DynamicSecretCreateHanaDb;
import io.akeyless.client.model.DynamicSecretCreateK8s;
import io.akeyless.client.model.DynamicSecretCreateLdap;
import io.akeyless.client.model.DynamicSecretCreateMongoDb;
import io.akeyless.client.model.DynamicSecretCreateMsSql;
import io.akeyless.client.model.DynamicSecretCreateMySql;
import io.akeyless.client.model.DynamicSecretCreateOracleDb;
import io.akeyless.client.model.DynamicSecretCreateOutput;
import io.akeyless.client.model.DynamicSecretCreatePing;
import io.akeyless.client.model.DynamicSecretCreatePostgreSql;
import io.akeyless.client.model.DynamicSecretCreateRabbitMq;
import io.akeyless.client.model.DynamicSecretCreateRdp;
import io.akeyless.client.model.DynamicSecretCreateRedis;
import io.akeyless.client.model.DynamicSecretCreateRedshift;
import io.akeyless.client.model.DynamicSecretCreateSnowflake;
import io.akeyless.client.model.DynamicSecretCreateVenafi;
import io.akeyless.client.model.DynamicSecretDelete;
import io.akeyless.client.model.DynamicSecretDeleteOutput;
import io.akeyless.client.model.DynamicSecretGet;
import io.akeyless.client.model.DynamicSecretGetValue;
import io.akeyless.client.model.DynamicSecretList;
import io.akeyless.client.model.DynamicSecretTmpCredsDelete;
import io.akeyless.client.model.DynamicSecretTmpCredsGet;
import io.akeyless.client.model.DynamicSecretTmpCredsUpdate;
import io.akeyless.client.model.DynamicSecretUpdateArtifactory;
import io.akeyless.client.model.DynamicSecretUpdateAws;
import io.akeyless.client.model.DynamicSecretUpdateAzure;
import io.akeyless.client.model.DynamicSecretUpdateCassandra;
import io.akeyless.client.model.DynamicSecretUpdateCustom;
import io.akeyless.client.model.DynamicSecretUpdateDockerhub;
import io.akeyless.client.model.DynamicSecretUpdateEks;
import io.akeyless.client.model.DynamicSecretUpdateGcp;
import io.akeyless.client.model.DynamicSecretUpdateGithub;
import io.akeyless.client.model.DynamicSecretUpdateGitlab;
import io.akeyless.client.model.DynamicSecretUpdateGke;
import io.akeyless.client.model.DynamicSecretUpdateGoogleWorkspace;
import io.akeyless.client.model.DynamicSecretUpdateHanaDb;
import io.akeyless.client.model.DynamicSecretUpdateK8s;
import io.akeyless.client.model.DynamicSecretUpdateLdap;
import io.akeyless.client.model.DynamicSecretUpdateMongoDb;
import io.akeyless.client.model.DynamicSecretUpdateMsSql;
import io.akeyless.client.model.DynamicSecretUpdateMySql;
import io.akeyless.client.model.DynamicSecretUpdateOracleDb;
import io.akeyless.client.model.DynamicSecretUpdateOutput;
import io.akeyless.client.model.DynamicSecretUpdatePing;
import io.akeyless.client.model.DynamicSecretUpdatePostgreSql;
import io.akeyless.client.model.DynamicSecretUpdateRabbitMq;
import io.akeyless.client.model.DynamicSecretUpdateRdp;
import io.akeyless.client.model.DynamicSecretUpdateRedis;
import io.akeyless.client.model.DynamicSecretUpdateRedshift;
import io.akeyless.client.model.DynamicSecretUpdateSnowflake;
import io.akeyless.client.model.DynamicSecretUpdateVenafi;
import io.akeyless.client.model.Encrypt;
import io.akeyless.client.model.EncryptGPG;
import io.akeyless.client.model.EncryptGPGOutput;
import io.akeyless.client.model.EncryptOutput;
import io.akeyless.client.model.EncryptWithClassicKey;
import io.akeyless.client.model.EsmCreate;
import io.akeyless.client.model.EsmCreateSecretOutput;
import io.akeyless.client.model.EsmDelete;
import io.akeyless.client.model.EsmDeleteSecretOutput;
import io.akeyless.client.model.EsmGet;
import io.akeyless.client.model.EsmGetSecretOutput;
import io.akeyless.client.model.EsmList;
import io.akeyless.client.model.EsmListSecretsOutput;
import io.akeyless.client.model.EsmUpdate;
import io.akeyless.client.model.EsmUpdateSecretOutput;
import io.akeyless.client.model.EventAction;
import io.akeyless.client.model.EventForwarderCreateEmail;
import io.akeyless.client.model.EventForwarderCreateServiceNow;
import io.akeyless.client.model.EventForwarderCreateSlack;
import io.akeyless.client.model.EventForwarderCreateUpdateOutput;
import io.akeyless.client.model.EventForwarderCreateWebhook;
import io.akeyless.client.model.EventForwarderDelete;
import io.akeyless.client.model.EventForwarderDeleteOutput;
import io.akeyless.client.model.EventForwarderGet;
import io.akeyless.client.model.EventForwarderGetOutput;
import io.akeyless.client.model.EventForwarderUpdateEmail;
import io.akeyless.client.model.EventForwarderUpdateServiceNow;
import io.akeyless.client.model.EventForwarderUpdateSlack;
import io.akeyless.client.model.EventForwarderUpdateWebhook;
import io.akeyless.client.model.ExportClassicKey;
import io.akeyless.client.model.ExportClassicKeyOutput;
import io.akeyless.client.model.GatewayCreateAllowedAccess;
import io.akeyless.client.model.GatewayCreateK8SAuthConfig;
import io.akeyless.client.model.GatewayCreateK8SAuthConfigOutput;
import io.akeyless.client.model.GatewayCreateMigration;
import io.akeyless.client.model.GatewayCreateProducerArtifactory;
import io.akeyless.client.model.GatewayCreateProducerArtifactoryOutput;
import io.akeyless.client.model.GatewayCreateProducerAws;
import io.akeyless.client.model.GatewayCreateProducerAwsOutput;
import io.akeyless.client.model.GatewayCreateProducerAzure;
import io.akeyless.client.model.GatewayCreateProducerAzureOutput;
import io.akeyless.client.model.GatewayCreateProducerCassandra;
import io.akeyless.client.model.GatewayCreateProducerCassandraOutput;
import io.akeyless.client.model.GatewayCreateProducerChef;
import io.akeyless.client.model.GatewayCreateProducerChefOutput;
import io.akeyless.client.model.GatewayCreateProducerCustom;
import io.akeyless.client.model.GatewayCreateProducerCustomOutput;
import io.akeyless.client.model.GatewayCreateProducerDockerhub;
import io.akeyless.client.model.GatewayCreateProducerDockerhubOutput;
import io.akeyless.client.model.GatewayCreateProducerEks;
import io.akeyless.client.model.GatewayCreateProducerEksOutput;
import io.akeyless.client.model.GatewayCreateProducerGcp;
import io.akeyless.client.model.GatewayCreateProducerGcpOutput;
import io.akeyless.client.model.GatewayCreateProducerGithub;
import io.akeyless.client.model.GatewayCreateProducerGithubOutput;
import io.akeyless.client.model.GatewayCreateProducerGke;
import io.akeyless.client.model.GatewayCreateProducerGkeOutput;
import io.akeyless.client.model.GatewayCreateProducerHanaDb;
import io.akeyless.client.model.GatewayCreateProducerHanaDbOutput;
import io.akeyless.client.model.GatewayCreateProducerLdap;
import io.akeyless.client.model.GatewayCreateProducerLdapOutput;
import io.akeyless.client.model.GatewayCreateProducerMSSQL;
import io.akeyless.client.model.GatewayCreateProducerMSSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerMongo;
import io.akeyless.client.model.GatewayCreateProducerMongoOutput;
import io.akeyless.client.model.GatewayCreateProducerMySQL;
import io.akeyless.client.model.GatewayCreateProducerMySQLOutput;
import io.akeyless.client.model.GatewayCreateProducerNativeK8S;
import io.akeyless.client.model.GatewayCreateProducerNativeK8SOutput;
import io.akeyless.client.model.GatewayCreateProducerOracleDb;
import io.akeyless.client.model.GatewayCreateProducerOracleDbOutput;
import io.akeyless.client.model.GatewayCreateProducerPing;
import io.akeyless.client.model.GatewayCreateProducerPingOutput;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQL;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQ;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQOutput;
import io.akeyless.client.model.GatewayCreateProducerRdp;
import io.akeyless.client.model.GatewayCreateProducerRdpOutput;
import io.akeyless.client.model.GatewayCreateProducerRedis;
import io.akeyless.client.model.GatewayCreateProducerRedisOutput;
import io.akeyless.client.model.GatewayCreateProducerRedshift;
import io.akeyless.client.model.GatewayCreateProducerRedshiftOutput;
import io.akeyless.client.model.GatewayCreateProducerSnowflake;
import io.akeyless.client.model.GatewayCreateProducerSnowflakeOutput;
import io.akeyless.client.model.GatewayCreateProducerVenafi;
import io.akeyless.client.model.GatewayCreateProducerVenafiOutput;
import io.akeyless.client.model.GatewayDeleteAllowedAccess;
import io.akeyless.client.model.GatewayDeleteAllowedAccessOutput;
import io.akeyless.client.model.GatewayDeleteK8SAuthConfig;
import io.akeyless.client.model.GatewayDeleteK8SAuthConfigOutput;
import io.akeyless.client.model.GatewayDeleteMigration;
import io.akeyless.client.model.GatewayDeleteProducer;
import io.akeyless.client.model.GatewayDeleteProducerOutput;
import io.akeyless.client.model.GatewayDownloadCustomerFragments;
import io.akeyless.client.model.GatewayDownloadCustomerFragmentsOutput;
import io.akeyless.client.model.GatewayGetAllowedAccess;
import io.akeyless.client.model.GatewayGetCache;
import io.akeyless.client.model.GatewayGetConfig;
import io.akeyless.client.model.GatewayGetDefaults;
import io.akeyless.client.model.GatewayGetDefaultsOutput;
import io.akeyless.client.model.GatewayGetK8SAuthConfig;
import io.akeyless.client.model.GatewayGetK8SAuthConfigOutput;
import io.akeyless.client.model.GatewayGetLdapAuthConfig;
import io.akeyless.client.model.GatewayGetLdapAuthConfigOutput;
import io.akeyless.client.model.GatewayGetLogForwarding;
import io.akeyless.client.model.GatewayGetMigration;
import io.akeyless.client.model.GatewayGetProducer;
import io.akeyless.client.model.GatewayGetRemoteAccess;
import io.akeyless.client.model.GatewayGetTmpUsers;
import io.akeyless.client.model.GatewayListCustomerFragments;
import io.akeyless.client.model.GatewayListMigration;
import io.akeyless.client.model.GatewayListProducers;
import io.akeyless.client.model.GatewayListRotatedSecrets;
import io.akeyless.client.model.GatewayMigratePersonalItems;
import io.akeyless.client.model.GatewayMigratePersonalItemsOutput;
import io.akeyless.client.model.GatewayMigrationCreateOutput;
import io.akeyless.client.model.GatewayMigrationDeleteOutput;
import io.akeyless.client.model.GatewayMigrationGetOutput;
import io.akeyless.client.model.GatewayMigrationListOutput;
import io.akeyless.client.model.GatewayMigrationSyncOutput;
import io.akeyless.client.model.GatewayMigrationUpdateOutput;
import io.akeyless.client.model.GatewayRevokeTmpUsers;
import io.akeyless.client.model.GatewayStartProducer;
import io.akeyless.client.model.GatewayStartProducerOutput;
import io.akeyless.client.model.GatewayStatusMigration;
import io.akeyless.client.model.GatewayStopProducer;
import io.akeyless.client.model.GatewayStopProducerOutput;
import io.akeyless.client.model.GatewaySyncMigration;
import io.akeyless.client.model.GatewayUpdateAllowedAccess;
import io.akeyless.client.model.GatewayUpdateCache;
import io.akeyless.client.model.GatewayUpdateDefaults;
import io.akeyless.client.model.GatewayUpdateItem;
import io.akeyless.client.model.GatewayUpdateItemOutput;
import io.akeyless.client.model.GatewayUpdateK8SAuthConfig;
import io.akeyless.client.model.GatewayUpdateK8SAuthConfigOutput;
import io.akeyless.client.model.GatewayUpdateLdapAuthConfig;
import io.akeyless.client.model.GatewayUpdateLdapAuthConfigOutput;
import io.akeyless.client.model.GatewayUpdateLogForwardingAwsS3;
import io.akeyless.client.model.GatewayUpdateLogForwardingAzureAnalytics;
import io.akeyless.client.model.GatewayUpdateLogForwardingDatadog;
import io.akeyless.client.model.GatewayUpdateLogForwardingElasticsearch;
import io.akeyless.client.model.GatewayUpdateLogForwardingGoogleChronicle;
import io.akeyless.client.model.GatewayUpdateLogForwardingLogstash;
import io.akeyless.client.model.GatewayUpdateLogForwardingLogzIo;
import io.akeyless.client.model.GatewayUpdateLogForwardingOutput;
import io.akeyless.client.model.GatewayUpdateLogForwardingSplunk;
import io.akeyless.client.model.GatewayUpdateLogForwardingStdout;
import io.akeyless.client.model.GatewayUpdateLogForwardingSumologic;
import io.akeyless.client.model.GatewayUpdateLogForwardingSyslog;
import io.akeyless.client.model.GatewayUpdateMigration;
import io.akeyless.client.model.GatewayUpdateOutput;
import io.akeyless.client.model.GatewayUpdateProducerArtifactory;
import io.akeyless.client.model.GatewayUpdateProducerArtifactoryOutput;
import io.akeyless.client.model.GatewayUpdateProducerAws;
import io.akeyless.client.model.GatewayUpdateProducerAwsOutput;
import io.akeyless.client.model.GatewayUpdateProducerAzure;
import io.akeyless.client.model.GatewayUpdateProducerAzureOutput;
import io.akeyless.client.model.GatewayUpdateProducerCassandra;
import io.akeyless.client.model.GatewayUpdateProducerCassandraOutput;
import io.akeyless.client.model.GatewayUpdateProducerChef;
import io.akeyless.client.model.GatewayUpdateProducerChefOutput;
import io.akeyless.client.model.GatewayUpdateProducerCustom;
import io.akeyless.client.model.GatewayUpdateProducerCustomOutput;
import io.akeyless.client.model.GatewayUpdateProducerDockerhub;
import io.akeyless.client.model.GatewayUpdateProducerDockerhubOutput;
import io.akeyless.client.model.GatewayUpdateProducerEks;
import io.akeyless.client.model.GatewayUpdateProducerEksOutput;
import io.akeyless.client.model.GatewayUpdateProducerGcp;
import io.akeyless.client.model.GatewayUpdateProducerGcpOutput;
import io.akeyless.client.model.GatewayUpdateProducerGithub;
import io.akeyless.client.model.GatewayUpdateProducerGithubOutput;
import io.akeyless.client.model.GatewayUpdateProducerGke;
import io.akeyless.client.model.GatewayUpdateProducerGkeOutput;
import io.akeyless.client.model.GatewayUpdateProducerHanaDb;
import io.akeyless.client.model.GatewayUpdateProducerHanaDbOutput;
import io.akeyless.client.model.GatewayUpdateProducerLdap;
import io.akeyless.client.model.GatewayUpdateProducerLdapOutput;
import io.akeyless.client.model.GatewayUpdateProducerMSSQL;
import io.akeyless.client.model.GatewayUpdateProducerMSSQLOutput;
import io.akeyless.client.model.GatewayUpdateProducerMongo;
import io.akeyless.client.model.GatewayUpdateProducerMongoOutput;
import io.akeyless.client.model.GatewayUpdateProducerMySQL;
import io.akeyless.client.model.GatewayUpdateProducerMySQLOutput;
import io.akeyless.client.model.GatewayUpdateProducerNativeK8S;
import io.akeyless.client.model.GatewayUpdateProducerNativeK8SOutput;
import io.akeyless.client.model.GatewayUpdateProducerOracleDb;
import io.akeyless.client.model.GatewayUpdateProducerOracleDbOutput;
import io.akeyless.client.model.GatewayUpdateProducerPing;
import io.akeyless.client.model.GatewayUpdateProducerPingOutput;
import io.akeyless.client.model.GatewayUpdateProducerPostgreSQL;
import io.akeyless.client.model.GatewayUpdateProducerPostgreSQLOutput;
import io.akeyless.client.model.GatewayUpdateProducerRabbitMQ;
import io.akeyless.client.model.GatewayUpdateProducerRabbitMQOutput;
import io.akeyless.client.model.GatewayUpdateProducerRdp;
import io.akeyless.client.model.GatewayUpdateProducerRdpOutput;
import io.akeyless.client.model.GatewayUpdateProducerRedis;
import io.akeyless.client.model.GatewayUpdateProducerRedisOutput;
import io.akeyless.client.model.GatewayUpdateProducerRedshift;
import io.akeyless.client.model.GatewayUpdateProducerRedshiftOutput;
import io.akeyless.client.model.GatewayUpdateProducerSnowflake;
import io.akeyless.client.model.GatewayUpdateProducerSnowflakeOutput;
import io.akeyless.client.model.GatewayUpdateProducerVenafi;
import io.akeyless.client.model.GatewayUpdateProducerVenafiOutput;
import io.akeyless.client.model.GatewayUpdateRemoteAccess;
import io.akeyless.client.model.GatewayUpdateRemoteAccessRdpRecordings;
import io.akeyless.client.model.GatewayUpdateTlsCert;
import io.akeyless.client.model.GatewayUpdateTlsCertOutput;
import io.akeyless.client.model.GatewayUpdateTmpUsers;
import io.akeyless.client.model.GatewaysListResponse;
import io.akeyless.client.model.GenerateAcmeEab;
import io.akeyless.client.model.GenerateAcmeEabOutput;
import io.akeyless.client.model.GenerateCA;
import io.akeyless.client.model.GenerateCAOutput;
import io.akeyless.client.model.GenerateCsr;
import io.akeyless.client.model.GenerateCsrOutput;
import io.akeyless.client.model.GetAccountSettings;
import io.akeyless.client.model.GetAccountSettingsCommandOutput;
import io.akeyless.client.model.GetAnalyticsData;
import io.akeyless.client.model.GetAuthMethod;
import io.akeyless.client.model.GetCertificateValue;
import io.akeyless.client.model.GetCertificateValueOutput;
import io.akeyless.client.model.GetDynamicSecretValue;
import io.akeyless.client.model.GetEventForwarder;
import io.akeyless.client.model.GetEventForwarderOutput;
import io.akeyless.client.model.GetGroup;
import io.akeyless.client.model.GetGroupOutput;
import io.akeyless.client.model.GetKubeExecCreds;
import io.akeyless.client.model.GetKubeExecCredsOutput;
import io.akeyless.client.model.GetLastUserEventStatus;
import io.akeyless.client.model.GetPKICertificate;
import io.akeyless.client.model.GetPKICertificateOutput;
import io.akeyless.client.model.GetProducersListReplyObj;
import io.akeyless.client.model.GetRSAPublic;
import io.akeyless.client.model.GetRSAPublicOutput;
import io.akeyless.client.model.GetRole;
import io.akeyless.client.model.GetRotatedSecretValue;
import io.akeyless.client.model.GetSSHCertificate;
import io.akeyless.client.model.GetSSHCertificateOutput;
import io.akeyless.client.model.GetSecretValue;
import io.akeyless.client.model.GetTags;
import io.akeyless.client.model.GetTarget;
import io.akeyless.client.model.GetTargetDetails;
import io.akeyless.client.model.GetTargetDetailsOutput;
import io.akeyless.client.model.GetUserEventStatusOutput;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsAwsS3;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsAzureAnalytics;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsDatadog;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsElasticsearch;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsGoogleChronicle;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsLogstash;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsLogzIo;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsSplunk;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsStdout;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsSumologic;
import io.akeyless.client.model.GwUpdateRemoteAccessSessionLogsSyslog;
import io.akeyless.client.model.Hmac;
import io.akeyless.client.model.HmacOutput;
import io.akeyless.client.model.ImportPasswords;
import io.akeyless.client.model.ImportPasswordsOutput;
import io.akeyless.client.model.Item;
import io.akeyless.client.model.JSONError;
import io.akeyless.client.model.KMIPClientGetResponse;
import io.akeyless.client.model.KMIPClientListResponse;
import io.akeyless.client.model.KMIPClientUpdateResponse;
import io.akeyless.client.model.KMIPEnvironmentCreateResponse;
import io.akeyless.client.model.KmipClientDeleteRule;
import io.akeyless.client.model.KmipClientSetRule;
import io.akeyless.client.model.KmipCreateClient;
import io.akeyless.client.model.KmipCreateClientOutput;
import io.akeyless.client.model.KmipDeleteClient;
import io.akeyless.client.model.KmipDeleteServer;
import io.akeyless.client.model.KmipDescribeClient;
import io.akeyless.client.model.KmipDescribeServer;
import io.akeyless.client.model.KmipDescribeServerOutput;
import io.akeyless.client.model.KmipListClients;
import io.akeyless.client.model.KmipMoveServer;
import io.akeyless.client.model.KmipMoveServerOutput;
import io.akeyless.client.model.KmipRenewClientCertificate;
import io.akeyless.client.model.KmipRenewClientCertificateOutput;
import io.akeyless.client.model.KmipRenewServerCertificate;
import io.akeyless.client.model.KmipRenewServerCertificateOutput;
import io.akeyless.client.model.KmipServerSetup;
import io.akeyless.client.model.KmipSetServerState;
import io.akeyless.client.model.KmipSetServerStateOutput;
import io.akeyless.client.model.KubeconfigGenerateOutput;
import io.akeyless.client.model.ListAcmeAccounts;
import io.akeyless.client.model.ListAcmeAccountsOutput;
import io.akeyless.client.model.ListAuthMethods;
import io.akeyless.client.model.ListAuthMethodsOutput;
import io.akeyless.client.model.ListGateways;
import io.akeyless.client.model.ListGroups;
import io.akeyless.client.model.ListGroupsOutput;
import io.akeyless.client.model.ListItems;
import io.akeyless.client.model.ListItemsInPathOutput;
import io.akeyless.client.model.ListItemsOutput;
import io.akeyless.client.model.ListRoles;
import io.akeyless.client.model.ListRolesOutput;
import io.akeyless.client.model.ListSRABastions;
import io.akeyless.client.model.ListSRASessions;
import io.akeyless.client.model.ListSharedItems;
import io.akeyless.client.model.ListSraSessionsOutput;
import io.akeyless.client.model.ListTargets;
import io.akeyless.client.model.ListTargetsOutput;
import io.akeyless.client.model.LogForwardingConfigPart;
import io.akeyless.client.model.MigrationStatusReplyObj;
import io.akeyless.client.model.MoveObjects;
import io.akeyless.client.model.PasswordSecurityInfo;
import io.akeyless.client.model.ProvisionCertificate;
import io.akeyless.client.model.ProvisionCertificateOutput;
import io.akeyless.client.model.RawCreds;
import io.akeyless.client.model.RefreshKey;
import io.akeyless.client.model.RefreshKeyOutput;
import io.akeyless.client.model.RenewCertificate;
import io.akeyless.client.model.RenewCertificateOutput;
import io.akeyless.client.model.RequestAccess;
import io.akeyless.client.model.RequestAccessOutput;
import io.akeyless.client.model.ResetAccessKey;
import io.akeyless.client.model.ResetAuthMethodAccessKeyOutput;
import io.akeyless.client.model.ReverseRBAC;
import io.akeyless.client.model.ReverseRBACOutput;
import io.akeyless.client.model.RevokeCertificate;
import io.akeyless.client.model.Role;
import io.akeyless.client.model.RoleAssociationDetails;
import io.akeyless.client.model.RollbackSecret;
import io.akeyless.client.model.RollbackSecretOutput;
import io.akeyless.client.model.RotateKey;
import io.akeyless.client.model.RotateKeyOutput;
import io.akeyless.client.model.RotateOidcClientOutput;
import io.akeyless.client.model.RotateOidcClientSecret;
import io.akeyless.client.model.RotateSecret;
import io.akeyless.client.model.RotatedSecretCreateAws;
import io.akeyless.client.model.RotatedSecretCreateAzure;
import io.akeyless.client.model.RotatedSecretCreateCassandra;
import io.akeyless.client.model.RotatedSecretCreateCustom;
import io.akeyless.client.model.RotatedSecretCreateDockerhub;
import io.akeyless.client.model.RotatedSecretCreateGcp;
import io.akeyless.client.model.RotatedSecretCreateHanadb;
import io.akeyless.client.model.RotatedSecretCreateLdap;
import io.akeyless.client.model.RotatedSecretCreateMongodb;
import io.akeyless.client.model.RotatedSecretCreateMssql;
import io.akeyless.client.model.RotatedSecretCreateMysql;
import io.akeyless.client.model.RotatedSecretCreateOracledb;
import io.akeyless.client.model.RotatedSecretCreateOutput;
import io.akeyless.client.model.RotatedSecretCreatePostgresql;
import io.akeyless.client.model.RotatedSecretCreateRedis;
import io.akeyless.client.model.RotatedSecretCreateRedshift;
import io.akeyless.client.model.RotatedSecretCreateSnowflake;
import io.akeyless.client.model.RotatedSecretCreateSsh;
import io.akeyless.client.model.RotatedSecretCreateWindows;
import io.akeyless.client.model.RotatedSecretDelete;
import io.akeyless.client.model.RotatedSecretDeleteSync;
import io.akeyless.client.model.RotatedSecretGetValue;
import io.akeyless.client.model.RotatedSecretList;
import io.akeyless.client.model.RotatedSecretOutput;
import io.akeyless.client.model.RotatedSecretSync;
import io.akeyless.client.model.RotatedSecretUpdateAws;
import io.akeyless.client.model.RotatedSecretUpdateAzure;
import io.akeyless.client.model.RotatedSecretUpdateCassandra;
import io.akeyless.client.model.RotatedSecretUpdateCustom;
import io.akeyless.client.model.RotatedSecretUpdateDockerhub;
import io.akeyless.client.model.RotatedSecretUpdateGcp;
import io.akeyless.client.model.RotatedSecretUpdateHanadb;
import io.akeyless.client.model.RotatedSecretUpdateLdap;
import io.akeyless.client.model.RotatedSecretUpdateMongodb;
import io.akeyless.client.model.RotatedSecretUpdateMssql;
import io.akeyless.client.model.RotatedSecretUpdateMysql;
import io.akeyless.client.model.RotatedSecretUpdateOracledb;
import io.akeyless.client.model.RotatedSecretUpdateOutput;
import io.akeyless.client.model.RotatedSecretUpdatePostgresql;
import io.akeyless.client.model.RotatedSecretUpdateRedis;
import io.akeyless.client.model.RotatedSecretUpdateRedshift;
import io.akeyless.client.model.RotatedSecretUpdateSnowflake;
import io.akeyless.client.model.RotatedSecretUpdateSsh;
import io.akeyless.client.model.RotatedSecretUpdateWindows;
import io.akeyless.client.model.SetItemState;
import io.akeyless.client.model.SetRoleRule;
import io.akeyless.client.model.ShareItem;
import io.akeyless.client.model.ShareItemOutput;
import io.akeyless.client.model.SignDataWithClassicKey;
import io.akeyless.client.model.SignEcDsa;
import io.akeyless.client.model.SignEcDsaOutput;
import io.akeyless.client.model.SignGPG;
import io.akeyless.client.model.SignGPGOutput;
import io.akeyless.client.model.SignJWTOutput;
import io.akeyless.client.model.SignJWTWithClassicKey;
import io.akeyless.client.model.SignOutput;
import io.akeyless.client.model.SignPKCS1;
import io.akeyless.client.model.SignPKCS1Output;
import io.akeyless.client.model.SignPKICertOutput;
import io.akeyless.client.model.SignPKICertWithClassicKey;
import io.akeyless.client.model.SignRsaSsaPss;
import io.akeyless.client.model.SignRsaSsaPssOutput;
import io.akeyless.client.model.StaticCredsAuth;
import io.akeyless.client.model.StaticCredsAuthOutput;
import io.akeyless.client.model.SystemAccessCredentialsReplyObj;
import io.akeyless.client.model.Target;
import io.akeyless.client.model.TargetCreateArtifactory;
import io.akeyless.client.model.TargetCreateAws;
import io.akeyless.client.model.TargetCreateAzure;
import io.akeyless.client.model.TargetCreateDB;
import io.akeyless.client.model.TargetCreateDockerhub;
import io.akeyless.client.model.TargetCreateEks;
import io.akeyless.client.model.TargetCreateGcp;
import io.akeyless.client.model.TargetCreateGithub;
import io.akeyless.client.model.TargetCreateGitlab;
import io.akeyless.client.model.TargetCreateGke;
import io.akeyless.client.model.TargetCreateGlobalSign;
import io.akeyless.client.model.TargetCreateGlobalSignAtlas;
import io.akeyless.client.model.TargetCreateGodaddy;
import io.akeyless.client.model.TargetCreateHashiVault;
import io.akeyless.client.model.TargetCreateK8s;
import io.akeyless.client.model.TargetCreateLdap;
import io.akeyless.client.model.TargetCreateLinked;
import io.akeyless.client.model.TargetCreateOutput;
import io.akeyless.client.model.TargetCreatePing;
import io.akeyless.client.model.TargetCreateRabbitMq;
import io.akeyless.client.model.TargetCreateSalesforce;
import io.akeyless.client.model.TargetCreateSectigo;
import io.akeyless.client.model.TargetCreateSsh;
import io.akeyless.client.model.TargetCreateWeb;
import io.akeyless.client.model.TargetCreateWindows;
import io.akeyless.client.model.TargetCreateZeroSSL;
import io.akeyless.client.model.TargetDelete;
import io.akeyless.client.model.TargetGet;
import io.akeyless.client.model.TargetGetDetails;
import io.akeyless.client.model.TargetList;
import io.akeyless.client.model.TargetUpdateArtifactory;
import io.akeyless.client.model.TargetUpdateAws;
import io.akeyless.client.model.TargetUpdateAzure;
import io.akeyless.client.model.TargetUpdateDB;
import io.akeyless.client.model.TargetUpdateDockerhub;
import io.akeyless.client.model.TargetUpdateEks;
import io.akeyless.client.model.TargetUpdateGcp;
import io.akeyless.client.model.TargetUpdateGithub;
import io.akeyless.client.model.TargetUpdateGitlab;
import io.akeyless.client.model.TargetUpdateGke;
import io.akeyless.client.model.TargetUpdateGlobalSign;
import io.akeyless.client.model.TargetUpdateGlobalSignAtlas;
import io.akeyless.client.model.TargetUpdateGodaddy;
import io.akeyless.client.model.TargetUpdateHashiVault;
import io.akeyless.client.model.TargetUpdateK8s;
import io.akeyless.client.model.TargetUpdateLdap;
import io.akeyless.client.model.TargetUpdateLinked;
import io.akeyless.client.model.TargetUpdateOutput;
import io.akeyless.client.model.TargetUpdatePing;
import io.akeyless.client.model.TargetUpdateRabbitMq;
import io.akeyless.client.model.TargetUpdateSalesforce;
import io.akeyless.client.model.TargetUpdateSectigo;
import io.akeyless.client.model.TargetUpdateSsh;
import io.akeyless.client.model.TargetUpdateWeb;
import io.akeyless.client.model.TargetUpdateWindows;
import io.akeyless.client.model.TargetUpdateZeroSSL;
import io.akeyless.client.model.TmpUserData;
import io.akeyless.client.model.Tokenize;
import io.akeyless.client.model.TokenizeOutput;
import io.akeyless.client.model.UidCreateChildToken;
import io.akeyless.client.model.UidCreateChildTokenOutput;
import io.akeyless.client.model.UidGenerateToken;
import io.akeyless.client.model.UidGenerateTokenOutput;
import io.akeyless.client.model.UidListChildren;
import io.akeyless.client.model.UidRevokeToken;
import io.akeyless.client.model.UidRotateToken;
import io.akeyless.client.model.UidRotateTokenOutput;
import io.akeyless.client.model.UniversalIdentityDetails;
import io.akeyless.client.model.UnwrapToken;
import io.akeyless.client.model.UnwrapTokenOutput;
import io.akeyless.client.model.UpdateAWSTarget;
import io.akeyless.client.model.UpdateAWSTargetDetails;
import io.akeyless.client.model.UpdateAccountSettings;
import io.akeyless.client.model.UpdateAccountSettingsOutput;
import io.akeyless.client.model.UpdateArtifactoryTarget;
import io.akeyless.client.model.UpdateArtifactoryTargetOutput;
import io.akeyless.client.model.UpdateAssoc;
import io.akeyless.client.model.UpdateAuthMethod;
import io.akeyless.client.model.UpdateAuthMethodAWSIAM;
import io.akeyless.client.model.UpdateAuthMethodAzureAD;
import io.akeyless.client.model.UpdateAuthMethodCert;
import io.akeyless.client.model.UpdateAuthMethodCertOutput;
import io.akeyless.client.model.UpdateAuthMethodGCP;
import io.akeyless.client.model.UpdateAuthMethodK8S;
import io.akeyless.client.model.UpdateAuthMethodK8SOutput;
import io.akeyless.client.model.UpdateAuthMethodLDAP;
import io.akeyless.client.model.UpdateAuthMethodLDAPOutput;
import io.akeyless.client.model.UpdateAuthMethodOAuth2;
import io.akeyless.client.model.UpdateAuthMethodOCI;
import io.akeyless.client.model.UpdateAuthMethodOCIOutput;
import io.akeyless.client.model.UpdateAuthMethodOIDC;
import io.akeyless.client.model.UpdateAuthMethodOutput;
import io.akeyless.client.model.UpdateAuthMethodSAML;
import io.akeyless.client.model.UpdateAuthMethodUniversalIdentity;
import io.akeyless.client.model.UpdateAzureTarget;
import io.akeyless.client.model.UpdateAzureTargetOutput;
import io.akeyless.client.model.UpdateCertificateOutput;
import io.akeyless.client.model.UpdateCertificateValue;
import io.akeyless.client.model.UpdateClassicKeyCertificate;
import io.akeyless.client.model.UpdateDBTarget;
import io.akeyless.client.model.UpdateDBTargetDetails;
import io.akeyless.client.model.UpdateDBTargetOutput;
import io.akeyless.client.model.UpdateDockerhubTarget;
import io.akeyless.client.model.UpdateDockerhubTargetOutput;
import io.akeyless.client.model.UpdateEKSTarget;
import io.akeyless.client.model.UpdateEKSTargetOutput;
import io.akeyless.client.model.UpdateEventForwarder;
import io.akeyless.client.model.UpdateGKETarget;
import io.akeyless.client.model.UpdateGKETargetOutput;
import io.akeyless.client.model.UpdateGcpTarget;
import io.akeyless.client.model.UpdateGcpTargetOutput;
import io.akeyless.client.model.UpdateGithubTarget;
import io.akeyless.client.model.UpdateGithubTargetOutput;
import io.akeyless.client.model.UpdateGitlabTarget;
import io.akeyless.client.model.UpdateGitlabTargetOutput;
import io.akeyless.client.model.UpdateGlobalSignAtlasTarget;
import io.akeyless.client.model.UpdateGlobalSignAtlasTargetOutput;
import io.akeyless.client.model.UpdateGlobalSignTarget;
import io.akeyless.client.model.UpdateGlobalSignTargetOutput;
import io.akeyless.client.model.UpdateGodaddyTarget;
import io.akeyless.client.model.UpdateGodaddyTargetOutput;
import io.akeyless.client.model.UpdateGroup;
import io.akeyless.client.model.UpdateGroupOutput;
import io.akeyless.client.model.UpdateHashiVaultTarget;
import io.akeyless.client.model.UpdateHashiVaultTargetOutput;
import io.akeyless.client.model.UpdateItem;
import io.akeyless.client.model.UpdateItemOutput;
import io.akeyless.client.model.UpdateLdapTarget;
import io.akeyless.client.model.UpdateLdapTargetDetails;
import io.akeyless.client.model.UpdateLdapTargetOutput;
import io.akeyless.client.model.UpdateLinkedTarget;
import io.akeyless.client.model.UpdateNativeK8STarget;
import io.akeyless.client.model.UpdateNativeK8STargetOutput;
import io.akeyless.client.model.UpdateOidcApp;
import io.akeyless.client.model.UpdatePKICertIssuer;
import io.akeyless.client.model.UpdatePKICertIssuerOutput;
import io.akeyless.client.model.UpdatePingTarget;
import io.akeyless.client.model.UpdateRDPTargetDetails;
import io.akeyless.client.model.UpdateRabbitMQTarget;
import io.akeyless.client.model.UpdateRabbitMQTargetDetails;
import io.akeyless.client.model.UpdateRabbitMQTargetOutput;
import io.akeyless.client.model.UpdateRole;
import io.akeyless.client.model.UpdateRoleOutput;
import io.akeyless.client.model.UpdateRotatedSecret;
import io.akeyless.client.model.UpdateRotatedSecretOutput;
import io.akeyless.client.model.UpdateRotationSettings;
import io.akeyless.client.model.UpdateSSHCertIssuer;
import io.akeyless.client.model.UpdateSSHCertIssuerOutput;
import io.akeyless.client.model.UpdateSSHTarget;
import io.akeyless.client.model.UpdateSSHTargetDetails;
import io.akeyless.client.model.UpdateSSHTargetOutput;
import io.akeyless.client.model.UpdateSalesforceTarget;
import io.akeyless.client.model.UpdateSalesforceTargetOutput;
import io.akeyless.client.model.UpdateSecretVal;
import io.akeyless.client.model.UpdateSecretValOutput;
import io.akeyless.client.model.UpdateTarget;
import io.akeyless.client.model.UpdateTargetDetails;
import io.akeyless.client.model.UpdateTargetOutput;
import io.akeyless.client.model.UpdateWebTarget;
import io.akeyless.client.model.UpdateWebTargetDetails;
import io.akeyless.client.model.UpdateWebTargetOutput;
import io.akeyless.client.model.UpdateWindowsTarget;
import io.akeyless.client.model.UpdateZeroSSLTarget;
import io.akeyless.client.model.UpdateZeroSSLTargetOutput;
import io.akeyless.client.model.UploadRSA;
import io.akeyless.client.model.UscCreate;
import io.akeyless.client.model.UscCreateSecretOutput;
import io.akeyless.client.model.UscDelete;
import io.akeyless.client.model.UscDeleteSecretOutput;
import io.akeyless.client.model.UscGet;
import io.akeyless.client.model.UscGetSecretOutput;
import io.akeyless.client.model.UscList;
import io.akeyless.client.model.UscListSecretsOutput;
import io.akeyless.client.model.UscUpdate;
import io.akeyless.client.model.UscUpdateSecretOutput;
import io.akeyless.client.model.ValidateToken;
import io.akeyless.client.model.ValidateTokenOutput;
import io.akeyless.client.model.VerifyDataWithClassicKey;
import io.akeyless.client.model.VerifyEcDsa;
import io.akeyless.client.model.VerifyGPG;
import io.akeyless.client.model.VerifyJWTOutput;
import io.akeyless.client.model.VerifyJWTWithClassicKey;
import io.akeyless.client.model.VerifyPKCS1;
import io.akeyless.client.model.VerifyPKICertOutput;
import io.akeyless.client.model.VerifyPKICertWithClassicKey;
import io.akeyless.client.model.VerifyRsaSsaPss;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aliasDetails
     * @param aliasDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aliasDetailsCall(AliasDetails aliasDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aliasDetails;

        // create path and map variables
        String localVarPath = "/alias-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aliasDetailsValidateBeforeCall(AliasDetails aliasDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasDetails' is set
        if (aliasDetails == null) {
            throw new ApiException("Missing the required parameter 'aliasDetails' when calling aliasDetails(Async)");
        }

        return aliasDetailsCall(aliasDetails, _callback);

    }

    /**
     * 
     * 
     * @param aliasDetails  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object aliasDetails(AliasDetails aliasDetails) throws ApiException {
        ApiResponse<Object> localVarResp = aliasDetailsWithHttpInfo(aliasDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param aliasDetails  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> aliasDetailsWithHttpInfo(AliasDetails aliasDetails) throws ApiException {
        okhttp3.Call localVarCall = aliasDetailsValidateBeforeCall(aliasDetails, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param aliasDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aliasDetailsAsync(AliasDetails aliasDetails, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = aliasDetailsValidateBeforeCall(aliasDetails, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assocRoleAuthMethod
     * @param assocRoleAuthMethod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocRoleAuthMethodCall(AssocRoleAuthMethod assocRoleAuthMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assocRoleAuthMethod;

        // create path and map variables
        String localVarPath = "/assoc-role-am";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assocRoleAuthMethodValidateBeforeCall(AssocRoleAuthMethod assocRoleAuthMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assocRoleAuthMethod' is set
        if (assocRoleAuthMethod == null) {
            throw new ApiException("Missing the required parameter 'assocRoleAuthMethod' when calling assocRoleAuthMethod(Async)");
        }

        return assocRoleAuthMethodCall(assocRoleAuthMethod, _callback);

    }

    /**
     * 
     * 
     * @param assocRoleAuthMethod  (required)
     * @return CreateRoleAuthMethodAssocOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoleAuthMethodAssocOutput assocRoleAuthMethod(AssocRoleAuthMethod assocRoleAuthMethod) throws ApiException {
        ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResp = assocRoleAuthMethodWithHttpInfo(assocRoleAuthMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assocRoleAuthMethod  (required)
     * @return ApiResponse&lt;CreateRoleAuthMethodAssocOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRoleAuthMethodAssocOutput> assocRoleAuthMethodWithHttpInfo(AssocRoleAuthMethod assocRoleAuthMethod) throws ApiException {
        okhttp3.Call localVarCall = assocRoleAuthMethodValidateBeforeCall(assocRoleAuthMethod, null);
        Type localVarReturnType = new TypeToken<CreateRoleAuthMethodAssocOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assocRoleAuthMethod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocRoleAuthMethodAsync(AssocRoleAuthMethod assocRoleAuthMethod, final ApiCallback<CreateRoleAuthMethodAssocOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = assocRoleAuthMethodValidateBeforeCall(assocRoleAuthMethod, _callback);
        Type localVarReturnType = new TypeToken<CreateRoleAuthMethodAssocOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assocTargetItem
     * @param assocTargetItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocTargetItemCall(AssocTargetItem assocTargetItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assocTargetItem;

        // create path and map variables
        String localVarPath = "/assoc-target-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assocTargetItemValidateBeforeCall(AssocTargetItem assocTargetItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assocTargetItem' is set
        if (assocTargetItem == null) {
            throw new ApiException("Missing the required parameter 'assocTargetItem' when calling assocTargetItem(Async)");
        }

        return assocTargetItemCall(assocTargetItem, _callback);

    }

    /**
     * 
     * 
     * @param assocTargetItem  (required)
     * @return CreateTargetItemAssocOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTargetItemAssocOutput assocTargetItem(AssocTargetItem assocTargetItem) throws ApiException {
        ApiResponse<CreateTargetItemAssocOutput> localVarResp = assocTargetItemWithHttpInfo(assocTargetItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assocTargetItem  (required)
     * @return ApiResponse&lt;CreateTargetItemAssocOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTargetItemAssocOutput> assocTargetItemWithHttpInfo(AssocTargetItem assocTargetItem) throws ApiException {
        okhttp3.Call localVarCall = assocTargetItemValidateBeforeCall(assocTargetItem, null);
        Type localVarReturnType = new TypeToken<CreateTargetItemAssocOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assocTargetItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocTargetItemAsync(AssocTargetItem assocTargetItem, final ApiCallback<CreateTargetItemAssocOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = assocTargetItemValidateBeforeCall(assocTargetItem, _callback);
        Type localVarReturnType = new TypeToken<CreateTargetItemAssocOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auth
     * @param auth  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authCall(Auth auth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auth;

        // create path and map variables
        String localVarPath = "/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authValidateBeforeCall(Auth auth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auth' is set
        if (auth == null) {
            throw new ApiException("Missing the required parameter 'auth' when calling auth(Async)");
        }

        return authCall(auth, _callback);

    }

    /**
     * 
     * 
     * @param auth  (required)
     * @return AuthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthOutput auth(Auth auth) throws ApiException {
        ApiResponse<AuthOutput> localVarResp = authWithHttpInfo(auth);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param auth  (required)
     * @return ApiResponse&lt;AuthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthOutput> authWithHttpInfo(Auth auth) throws ApiException {
        okhttp3.Call localVarCall = authValidateBeforeCall(auth, null);
        Type localVarReturnType = new TypeToken<AuthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param auth  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAsync(Auth auth, final ApiCallback<AuthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authValidateBeforeCall(auth, _callback);
        Type localVarReturnType = new TypeToken<AuthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateApiKey
     * @param authMethodCreateApiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateApiKeyCall(AuthMethodCreateApiKey authMethodCreateApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateApiKey;

        // create path and map variables
        String localVarPath = "/auth-method-create-api-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateApiKeyValidateBeforeCall(AuthMethodCreateApiKey authMethodCreateApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateApiKey' is set
        if (authMethodCreateApiKey == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateApiKey' when calling authMethodCreateApiKey(Async)");
        }

        return authMethodCreateApiKeyCall(authMethodCreateApiKey, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateApiKey  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateApiKey(AuthMethodCreateApiKey authMethodCreateApiKey) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateApiKeyWithHttpInfo(authMethodCreateApiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateApiKey  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateApiKeyWithHttpInfo(AuthMethodCreateApiKey authMethodCreateApiKey) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateApiKeyValidateBeforeCall(authMethodCreateApiKey, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateApiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateApiKeyAsync(AuthMethodCreateApiKey authMethodCreateApiKey, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateApiKeyValidateBeforeCall(authMethodCreateApiKey, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateAwsIam
     * @param authMethodCreateAwsIam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateAwsIamCall(AuthMethodCreateAwsIam authMethodCreateAwsIam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateAwsIam;

        // create path and map variables
        String localVarPath = "/auth-method-create-aws-iam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateAwsIamValidateBeforeCall(AuthMethodCreateAwsIam authMethodCreateAwsIam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateAwsIam' is set
        if (authMethodCreateAwsIam == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateAwsIam' when calling authMethodCreateAwsIam(Async)");
        }

        return authMethodCreateAwsIamCall(authMethodCreateAwsIam, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateAwsIam  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateAwsIam(AuthMethodCreateAwsIam authMethodCreateAwsIam) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateAwsIamWithHttpInfo(authMethodCreateAwsIam);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateAwsIam  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateAwsIamWithHttpInfo(AuthMethodCreateAwsIam authMethodCreateAwsIam) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateAwsIamValidateBeforeCall(authMethodCreateAwsIam, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateAwsIam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateAwsIamAsync(AuthMethodCreateAwsIam authMethodCreateAwsIam, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateAwsIamValidateBeforeCall(authMethodCreateAwsIam, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateAzureAD
     * @param authMethodCreateAzureAD  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateAzureADCall(AuthMethodCreateAzureAD authMethodCreateAzureAD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateAzureAD;

        // create path and map variables
        String localVarPath = "/auth-method-create-azure-ad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateAzureADValidateBeforeCall(AuthMethodCreateAzureAD authMethodCreateAzureAD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateAzureAD' is set
        if (authMethodCreateAzureAD == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateAzureAD' when calling authMethodCreateAzureAD(Async)");
        }

        return authMethodCreateAzureADCall(authMethodCreateAzureAD, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateAzureAD  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateAzureAD(AuthMethodCreateAzureAD authMethodCreateAzureAD) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateAzureADWithHttpInfo(authMethodCreateAzureAD);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateAzureAD  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateAzureADWithHttpInfo(AuthMethodCreateAzureAD authMethodCreateAzureAD) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateAzureADValidateBeforeCall(authMethodCreateAzureAD, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateAzureAD  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateAzureADAsync(AuthMethodCreateAzureAD authMethodCreateAzureAD, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateAzureADValidateBeforeCall(authMethodCreateAzureAD, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateCert
     * @param authMethodCreateCert  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateCertCall(AuthMethodCreateCert authMethodCreateCert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateCert;

        // create path and map variables
        String localVarPath = "/auth-method-create-cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateCertValidateBeforeCall(AuthMethodCreateCert authMethodCreateCert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateCert' is set
        if (authMethodCreateCert == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateCert' when calling authMethodCreateCert(Async)");
        }

        return authMethodCreateCertCall(authMethodCreateCert, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateCert  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateCert(AuthMethodCreateCert authMethodCreateCert) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateCertWithHttpInfo(authMethodCreateCert);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateCert  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateCertWithHttpInfo(AuthMethodCreateCert authMethodCreateCert) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateCertValidateBeforeCall(authMethodCreateCert, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateCert  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateCertAsync(AuthMethodCreateCert authMethodCreateCert, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateCertValidateBeforeCall(authMethodCreateCert, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateEmail
     * @param authMethodCreateEmail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateEmailCall(AuthMethodCreateEmail authMethodCreateEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateEmail;

        // create path and map variables
        String localVarPath = "/auth-method-create-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateEmailValidateBeforeCall(AuthMethodCreateEmail authMethodCreateEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateEmail' is set
        if (authMethodCreateEmail == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateEmail' when calling authMethodCreateEmail(Async)");
        }

        return authMethodCreateEmailCall(authMethodCreateEmail, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateEmail  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateEmail(AuthMethodCreateEmail authMethodCreateEmail) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateEmailWithHttpInfo(authMethodCreateEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateEmail  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateEmailWithHttpInfo(AuthMethodCreateEmail authMethodCreateEmail) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateEmailValidateBeforeCall(authMethodCreateEmail, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateEmail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateEmailAsync(AuthMethodCreateEmail authMethodCreateEmail, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateEmailValidateBeforeCall(authMethodCreateEmail, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateGcp
     * @param authMethodCreateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateGcpCall(AuthMethodCreateGcp authMethodCreateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateGcp;

        // create path and map variables
        String localVarPath = "/auth-method-create-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateGcpValidateBeforeCall(AuthMethodCreateGcp authMethodCreateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateGcp' is set
        if (authMethodCreateGcp == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateGcp' when calling authMethodCreateGcp(Async)");
        }

        return authMethodCreateGcpCall(authMethodCreateGcp, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateGcp  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateGcp(AuthMethodCreateGcp authMethodCreateGcp) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateGcpWithHttpInfo(authMethodCreateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateGcp  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateGcpWithHttpInfo(AuthMethodCreateGcp authMethodCreateGcp) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateGcpValidateBeforeCall(authMethodCreateGcp, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateGcpAsync(AuthMethodCreateGcp authMethodCreateGcp, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateGcpValidateBeforeCall(authMethodCreateGcp, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateK8s
     * @param authMethodCreateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateK8sCall(AuthMethodCreateK8s authMethodCreateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateK8s;

        // create path and map variables
        String localVarPath = "/auth-method-create-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateK8sValidateBeforeCall(AuthMethodCreateK8s authMethodCreateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateK8s' is set
        if (authMethodCreateK8s == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateK8s' when calling authMethodCreateK8s(Async)");
        }

        return authMethodCreateK8sCall(authMethodCreateK8s, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateK8s  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateK8s(AuthMethodCreateK8s authMethodCreateK8s) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateK8sWithHttpInfo(authMethodCreateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateK8s  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateK8sWithHttpInfo(AuthMethodCreateK8s authMethodCreateK8s) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateK8sValidateBeforeCall(authMethodCreateK8s, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateK8sAsync(AuthMethodCreateK8s authMethodCreateK8s, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateK8sValidateBeforeCall(authMethodCreateK8s, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateKerberos
     * @param authMethodCreateKerberos  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateKerberosCall(AuthMethodCreateKerberos authMethodCreateKerberos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateKerberos;

        // create path and map variables
        String localVarPath = "/auth-method-create-kerberos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateKerberosValidateBeforeCall(AuthMethodCreateKerberos authMethodCreateKerberos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateKerberos' is set
        if (authMethodCreateKerberos == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateKerberos' when calling authMethodCreateKerberos(Async)");
        }

        return authMethodCreateKerberosCall(authMethodCreateKerberos, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateKerberos  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateKerberos(AuthMethodCreateKerberos authMethodCreateKerberos) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateKerberosWithHttpInfo(authMethodCreateKerberos);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateKerberos  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateKerberosWithHttpInfo(AuthMethodCreateKerberos authMethodCreateKerberos) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateKerberosValidateBeforeCall(authMethodCreateKerberos, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateKerberos  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateKerberosAsync(AuthMethodCreateKerberos authMethodCreateKerberos, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateKerberosValidateBeforeCall(authMethodCreateKerberos, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateLdap
     * @param authMethodCreateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateLdapCall(AuthMethodCreateLdap authMethodCreateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateLdap;

        // create path and map variables
        String localVarPath = "/auth-method-create-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateLdapValidateBeforeCall(AuthMethodCreateLdap authMethodCreateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateLdap' is set
        if (authMethodCreateLdap == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateLdap' when calling authMethodCreateLdap(Async)");
        }

        return authMethodCreateLdapCall(authMethodCreateLdap, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateLdap  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateLdap(AuthMethodCreateLdap authMethodCreateLdap) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateLdapWithHttpInfo(authMethodCreateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateLdap  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateLdapWithHttpInfo(AuthMethodCreateLdap authMethodCreateLdap) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateLdapValidateBeforeCall(authMethodCreateLdap, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateLdapAsync(AuthMethodCreateLdap authMethodCreateLdap, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateLdapValidateBeforeCall(authMethodCreateLdap, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateOCI
     * @param authMethodCreateOCI  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOCICall(AuthMethodCreateOCI authMethodCreateOCI, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateOCI;

        // create path and map variables
        String localVarPath = "/auth-method-create-oci";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateOCIValidateBeforeCall(AuthMethodCreateOCI authMethodCreateOCI, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateOCI' is set
        if (authMethodCreateOCI == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateOCI' when calling authMethodCreateOCI(Async)");
        }

        return authMethodCreateOCICall(authMethodCreateOCI, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateOCI  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateOCI(AuthMethodCreateOCI authMethodCreateOCI) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateOCIWithHttpInfo(authMethodCreateOCI);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateOCI  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateOCIWithHttpInfo(AuthMethodCreateOCI authMethodCreateOCI) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateOCIValidateBeforeCall(authMethodCreateOCI, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateOCI  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOCIAsync(AuthMethodCreateOCI authMethodCreateOCI, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateOCIValidateBeforeCall(authMethodCreateOCI, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateOIDC
     * @param authMethodCreateOIDC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOIDCCall(AuthMethodCreateOIDC authMethodCreateOIDC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateOIDC;

        // create path and map variables
        String localVarPath = "/auth-method-create-oidc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateOIDCValidateBeforeCall(AuthMethodCreateOIDC authMethodCreateOIDC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateOIDC' is set
        if (authMethodCreateOIDC == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateOIDC' when calling authMethodCreateOIDC(Async)");
        }

        return authMethodCreateOIDCCall(authMethodCreateOIDC, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateOIDC  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateOIDC(AuthMethodCreateOIDC authMethodCreateOIDC) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateOIDCWithHttpInfo(authMethodCreateOIDC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateOIDC  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateOIDCWithHttpInfo(AuthMethodCreateOIDC authMethodCreateOIDC) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateOIDCValidateBeforeCall(authMethodCreateOIDC, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateOIDC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOIDCAsync(AuthMethodCreateOIDC authMethodCreateOIDC, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateOIDCValidateBeforeCall(authMethodCreateOIDC, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateOauth2
     * @param authMethodCreateOauth2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOauth2Call(AuthMethodCreateOauth2 authMethodCreateOauth2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateOauth2;

        // create path and map variables
        String localVarPath = "/auth-method-create-oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateOauth2ValidateBeforeCall(AuthMethodCreateOauth2 authMethodCreateOauth2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateOauth2' is set
        if (authMethodCreateOauth2 == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateOauth2' when calling authMethodCreateOauth2(Async)");
        }

        return authMethodCreateOauth2Call(authMethodCreateOauth2, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateOauth2  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateOauth2(AuthMethodCreateOauth2 authMethodCreateOauth2) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateOauth2WithHttpInfo(authMethodCreateOauth2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateOauth2  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateOauth2WithHttpInfo(AuthMethodCreateOauth2 authMethodCreateOauth2) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateOauth2ValidateBeforeCall(authMethodCreateOauth2, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateOauth2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateOauth2Async(AuthMethodCreateOauth2 authMethodCreateOauth2, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateOauth2ValidateBeforeCall(authMethodCreateOauth2, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateSAML
     * @param authMethodCreateSAML  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateSAMLCall(AuthMethodCreateSAML authMethodCreateSAML, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateSAML;

        // create path and map variables
        String localVarPath = "/auth-method-create-saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateSAMLValidateBeforeCall(AuthMethodCreateSAML authMethodCreateSAML, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateSAML' is set
        if (authMethodCreateSAML == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateSAML' when calling authMethodCreateSAML(Async)");
        }

        return authMethodCreateSAMLCall(authMethodCreateSAML, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateSAML  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateSAML(AuthMethodCreateSAML authMethodCreateSAML) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateSAMLWithHttpInfo(authMethodCreateSAML);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateSAML  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateSAMLWithHttpInfo(AuthMethodCreateSAML authMethodCreateSAML) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateSAMLValidateBeforeCall(authMethodCreateSAML, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateSAML  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodCreateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateSAMLAsync(AuthMethodCreateSAML authMethodCreateSAML, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateSAMLValidateBeforeCall(authMethodCreateSAML, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodCreateUniversalIdentity
     * @param authMethodCreateUniversalIdentity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateUniversalIdentityCall(AuthMethodCreateUniversalIdentity authMethodCreateUniversalIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodCreateUniversalIdentity;

        // create path and map variables
        String localVarPath = "/auth-method-create-universal-identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodCreateUniversalIdentityValidateBeforeCall(AuthMethodCreateUniversalIdentity authMethodCreateUniversalIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodCreateUniversalIdentity' is set
        if (authMethodCreateUniversalIdentity == null) {
            throw new ApiException("Missing the required parameter 'authMethodCreateUniversalIdentity' when calling authMethodCreateUniversalIdentity(Async)");
        }

        return authMethodCreateUniversalIdentityCall(authMethodCreateUniversalIdentity, _callback);

    }

    /**
     * 
     * 
     * @param authMethodCreateUniversalIdentity  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodCreateUniversalIdentity(AuthMethodCreateUniversalIdentity authMethodCreateUniversalIdentity) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodCreateUniversalIdentityWithHttpInfo(authMethodCreateUniversalIdentity);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodCreateUniversalIdentity  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodCreateUniversalIdentityWithHttpInfo(AuthMethodCreateUniversalIdentity authMethodCreateUniversalIdentity) throws ApiException {
        okhttp3.Call localVarCall = authMethodCreateUniversalIdentityValidateBeforeCall(authMethodCreateUniversalIdentity, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodCreateUniversalIdentity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodCreateUniversalIdentityAsync(AuthMethodCreateUniversalIdentity authMethodCreateUniversalIdentity, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodCreateUniversalIdentityValidateBeforeCall(authMethodCreateUniversalIdentity, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodDelete
     * @param authMethodDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodDeleteCall(AuthMethodDelete authMethodDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodDelete;

        // create path and map variables
        String localVarPath = "/auth-method-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodDeleteValidateBeforeCall(AuthMethodDelete authMethodDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodDelete' is set
        if (authMethodDelete == null) {
            throw new ApiException("Missing the required parameter 'authMethodDelete' when calling authMethodDelete(Async)");
        }

        return authMethodDeleteCall(authMethodDelete, _callback);

    }

    /**
     * 
     * 
     * @param authMethodDelete  (required)
     * @return AuthMethodDeleteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodDeleteOutput authMethodDelete(AuthMethodDelete authMethodDelete) throws ApiException {
        ApiResponse<AuthMethodDeleteOutput> localVarResp = authMethodDeleteWithHttpInfo(authMethodDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodDelete  (required)
     * @return ApiResponse&lt;AuthMethodDeleteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodDeleteOutput> authMethodDeleteWithHttpInfo(AuthMethodDelete authMethodDelete) throws ApiException {
        okhttp3.Call localVarCall = authMethodDeleteValidateBeforeCall(authMethodDelete, null);
        Type localVarReturnType = new TypeToken<AuthMethodDeleteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodDeleteAsync(AuthMethodDelete authMethodDelete, final ApiCallback<AuthMethodDeleteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodDeleteValidateBeforeCall(authMethodDelete, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodDeleteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodGet
     * @param authMethodGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodGetCall(AuthMethodGet authMethodGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodGet;

        // create path and map variables
        String localVarPath = "/auth-method-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodGetValidateBeforeCall(AuthMethodGet authMethodGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodGet' is set
        if (authMethodGet == null) {
            throw new ApiException("Missing the required parameter 'authMethodGet' when calling authMethodGet(Async)");
        }

        return authMethodGetCall(authMethodGet, _callback);

    }

    /**
     * 
     * 
     * @param authMethodGet  (required)
     * @return AuthMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethod authMethodGet(AuthMethodGet authMethodGet) throws ApiException {
        ApiResponse<AuthMethod> localVarResp = authMethodGetWithHttpInfo(authMethodGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodGet  (required)
     * @return ApiResponse&lt;AuthMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethod> authMethodGetWithHttpInfo(AuthMethodGet authMethodGet) throws ApiException {
        okhttp3.Call localVarCall = authMethodGetValidateBeforeCall(authMethodGet, null);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodGetAsync(AuthMethodGet authMethodGet, final ApiCallback<AuthMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodGetValidateBeforeCall(authMethodGet, _callback);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodList
     * @param authMethodList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodListCall(AuthMethodList authMethodList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodList;

        // create path and map variables
        String localVarPath = "/auth-method-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodListValidateBeforeCall(AuthMethodList authMethodList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodList' is set
        if (authMethodList == null) {
            throw new ApiException("Missing the required parameter 'authMethodList' when calling authMethodList(Async)");
        }

        return authMethodListCall(authMethodList, _callback);

    }

    /**
     * 
     * 
     * @param authMethodList  (required)
     * @return ListAuthMethodsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListAuthMethodsOutput authMethodList(AuthMethodList authMethodList) throws ApiException {
        ApiResponse<ListAuthMethodsOutput> localVarResp = authMethodListWithHttpInfo(authMethodList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodList  (required)
     * @return ApiResponse&lt;ListAuthMethodsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuthMethodsOutput> authMethodListWithHttpInfo(AuthMethodList authMethodList) throws ApiException {
        okhttp3.Call localVarCall = authMethodListValidateBeforeCall(authMethodList, null);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodListAsync(AuthMethodList authMethodList, final ApiCallback<ListAuthMethodsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodListValidateBeforeCall(authMethodList, _callback);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateApiKey
     * @param authMethodUpdateApiKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateApiKeyCall(AuthMethodUpdateApiKey authMethodUpdateApiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateApiKey;

        // create path and map variables
        String localVarPath = "/auth-method-update-api-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateApiKeyValidateBeforeCall(AuthMethodUpdateApiKey authMethodUpdateApiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateApiKey' is set
        if (authMethodUpdateApiKey == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateApiKey' when calling authMethodUpdateApiKey(Async)");
        }

        return authMethodUpdateApiKeyCall(authMethodUpdateApiKey, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateApiKey  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateApiKey(AuthMethodUpdateApiKey authMethodUpdateApiKey) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateApiKeyWithHttpInfo(authMethodUpdateApiKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateApiKey  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateApiKeyWithHttpInfo(AuthMethodUpdateApiKey authMethodUpdateApiKey) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateApiKeyValidateBeforeCall(authMethodUpdateApiKey, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateApiKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateApiKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateApiKeyAsync(AuthMethodUpdateApiKey authMethodUpdateApiKey, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateApiKeyValidateBeforeCall(authMethodUpdateApiKey, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateAwsIam
     * @param authMethodUpdateAwsIam  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodUpdateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateAwsIamCall(AuthMethodUpdateAwsIam authMethodUpdateAwsIam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateAwsIam;

        // create path and map variables
        String localVarPath = "/auth-method-update-aws-iam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateAwsIamValidateBeforeCall(AuthMethodUpdateAwsIam authMethodUpdateAwsIam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateAwsIam' is set
        if (authMethodUpdateAwsIam == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateAwsIam' when calling authMethodUpdateAwsIam(Async)");
        }

        return authMethodUpdateAwsIamCall(authMethodUpdateAwsIam, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateAwsIam  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodUpdateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateAwsIam(AuthMethodUpdateAwsIam authMethodUpdateAwsIam) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateAwsIamWithHttpInfo(authMethodUpdateAwsIam);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateAwsIam  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodUpdateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateAwsIamWithHttpInfo(AuthMethodUpdateAwsIam authMethodUpdateAwsIam) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateAwsIamValidateBeforeCall(authMethodUpdateAwsIam, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateAwsIam  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authMethodUpdateAwsIamResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateAwsIamAsync(AuthMethodUpdateAwsIam authMethodUpdateAwsIam, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateAwsIamValidateBeforeCall(authMethodUpdateAwsIam, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateAzureAD
     * @param authMethodUpdateAzureAD  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateAzureADCall(AuthMethodUpdateAzureAD authMethodUpdateAzureAD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateAzureAD;

        // create path and map variables
        String localVarPath = "/auth-method-update-azure-ad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateAzureADValidateBeforeCall(AuthMethodUpdateAzureAD authMethodUpdateAzureAD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateAzureAD' is set
        if (authMethodUpdateAzureAD == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateAzureAD' when calling authMethodUpdateAzureAD(Async)");
        }

        return authMethodUpdateAzureADCall(authMethodUpdateAzureAD, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateAzureAD  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateAzureAD(AuthMethodUpdateAzureAD authMethodUpdateAzureAD) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateAzureADWithHttpInfo(authMethodUpdateAzureAD);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateAzureAD  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateAzureADWithHttpInfo(AuthMethodUpdateAzureAD authMethodUpdateAzureAD) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateAzureADValidateBeforeCall(authMethodUpdateAzureAD, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateAzureAD  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateAzureADAsync(AuthMethodUpdateAzureAD authMethodUpdateAzureAD, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateAzureADValidateBeforeCall(authMethodUpdateAzureAD, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateCert
     * @param authMethodUpdateCert  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateCertCall(AuthMethodUpdateCert authMethodUpdateCert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateCert;

        // create path and map variables
        String localVarPath = "/auth-method-update-cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateCertValidateBeforeCall(AuthMethodUpdateCert authMethodUpdateCert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateCert' is set
        if (authMethodUpdateCert == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateCert' when calling authMethodUpdateCert(Async)");
        }

        return authMethodUpdateCertCall(authMethodUpdateCert, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateCert  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateCert(AuthMethodUpdateCert authMethodUpdateCert) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateCertWithHttpInfo(authMethodUpdateCert);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateCert  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateCertWithHttpInfo(AuthMethodUpdateCert authMethodUpdateCert) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateCertValidateBeforeCall(authMethodUpdateCert, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateCert  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateCertAsync(AuthMethodUpdateCert authMethodUpdateCert, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateCertValidateBeforeCall(authMethodUpdateCert, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateEmail
     * @param authMethodUpdateEmail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateEmailCall(AuthMethodUpdateEmail authMethodUpdateEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateEmail;

        // create path and map variables
        String localVarPath = "/auth-method-update-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateEmailValidateBeforeCall(AuthMethodUpdateEmail authMethodUpdateEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateEmail' is set
        if (authMethodUpdateEmail == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateEmail' when calling authMethodUpdateEmail(Async)");
        }

        return authMethodUpdateEmailCall(authMethodUpdateEmail, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateEmail  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateEmail(AuthMethodUpdateEmail authMethodUpdateEmail) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateEmailWithHttpInfo(authMethodUpdateEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateEmail  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateEmailWithHttpInfo(AuthMethodUpdateEmail authMethodUpdateEmail) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateEmailValidateBeforeCall(authMethodUpdateEmail, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateEmail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateEmailAsync(AuthMethodUpdateEmail authMethodUpdateEmail, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateEmailValidateBeforeCall(authMethodUpdateEmail, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateGcp
     * @param authMethodUpdateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateGcpCall(AuthMethodUpdateGcp authMethodUpdateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateGcp;

        // create path and map variables
        String localVarPath = "/auth-method-update-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateGcpValidateBeforeCall(AuthMethodUpdateGcp authMethodUpdateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateGcp' is set
        if (authMethodUpdateGcp == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateGcp' when calling authMethodUpdateGcp(Async)");
        }

        return authMethodUpdateGcpCall(authMethodUpdateGcp, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateGcp  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateGcp(AuthMethodUpdateGcp authMethodUpdateGcp) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateGcpWithHttpInfo(authMethodUpdateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateGcp  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateGcpWithHttpInfo(AuthMethodUpdateGcp authMethodUpdateGcp) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateGcpValidateBeforeCall(authMethodUpdateGcp, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateGcpAsync(AuthMethodUpdateGcp authMethodUpdateGcp, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateGcpValidateBeforeCall(authMethodUpdateGcp, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateK8s
     * @param authMethodUpdateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateK8sCall(AuthMethodUpdateK8s authMethodUpdateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateK8s;

        // create path and map variables
        String localVarPath = "/auth-method-update-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateK8sValidateBeforeCall(AuthMethodUpdateK8s authMethodUpdateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateK8s' is set
        if (authMethodUpdateK8s == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateK8s' when calling authMethodUpdateK8s(Async)");
        }

        return authMethodUpdateK8sCall(authMethodUpdateK8s, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateK8s  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateK8s(AuthMethodUpdateK8s authMethodUpdateK8s) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateK8sWithHttpInfo(authMethodUpdateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateK8s  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateK8sWithHttpInfo(AuthMethodUpdateK8s authMethodUpdateK8s) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateK8sValidateBeforeCall(authMethodUpdateK8s, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateK8sAsync(AuthMethodUpdateK8s authMethodUpdateK8s, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateK8sValidateBeforeCall(authMethodUpdateK8s, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateKerberos
     * @param authMethodUpdateKerberos  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateKerberosCall(AuthMethodUpdateKerberos authMethodUpdateKerberos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateKerberos;

        // create path and map variables
        String localVarPath = "/auth-method-update-kerberos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateKerberosValidateBeforeCall(AuthMethodUpdateKerberos authMethodUpdateKerberos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateKerberos' is set
        if (authMethodUpdateKerberos == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateKerberos' when calling authMethodUpdateKerberos(Async)");
        }

        return authMethodUpdateKerberosCall(authMethodUpdateKerberos, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateKerberos  (required)
     * @return AuthMethodCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodCreateOutput authMethodUpdateKerberos(AuthMethodUpdateKerberos authMethodUpdateKerberos) throws ApiException {
        ApiResponse<AuthMethodCreateOutput> localVarResp = authMethodUpdateKerberosWithHttpInfo(authMethodUpdateKerberos);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateKerberos  (required)
     * @return ApiResponse&lt;AuthMethodCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodCreateOutput> authMethodUpdateKerberosWithHttpInfo(AuthMethodUpdateKerberos authMethodUpdateKerberos) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateKerberosValidateBeforeCall(authMethodUpdateKerberos, null);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateKerberos  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateKerberosAsync(AuthMethodUpdateKerberos authMethodUpdateKerberos, final ApiCallback<AuthMethodCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateKerberosValidateBeforeCall(authMethodUpdateKerberos, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateLdap
     * @param authMethodUpdateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateLdapCall(AuthMethodUpdateLdap authMethodUpdateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateLdap;

        // create path and map variables
        String localVarPath = "/auth-method-update-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateLdapValidateBeforeCall(AuthMethodUpdateLdap authMethodUpdateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateLdap' is set
        if (authMethodUpdateLdap == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateLdap' when calling authMethodUpdateLdap(Async)");
        }

        return authMethodUpdateLdapCall(authMethodUpdateLdap, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateLdap  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateLdap(AuthMethodUpdateLdap authMethodUpdateLdap) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateLdapWithHttpInfo(authMethodUpdateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateLdap  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateLdapWithHttpInfo(AuthMethodUpdateLdap authMethodUpdateLdap) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateLdapValidateBeforeCall(authMethodUpdateLdap, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateLdapAsync(AuthMethodUpdateLdap authMethodUpdateLdap, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateLdapValidateBeforeCall(authMethodUpdateLdap, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateOCI
     * @param authMethodUpdateOCI  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOCICall(AuthMethodUpdateOCI authMethodUpdateOCI, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateOCI;

        // create path and map variables
        String localVarPath = "/auth-method-update-oci";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateOCIValidateBeforeCall(AuthMethodUpdateOCI authMethodUpdateOCI, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateOCI' is set
        if (authMethodUpdateOCI == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateOCI' when calling authMethodUpdateOCI(Async)");
        }

        return authMethodUpdateOCICall(authMethodUpdateOCI, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateOCI  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateOCI(AuthMethodUpdateOCI authMethodUpdateOCI) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateOCIWithHttpInfo(authMethodUpdateOCI);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateOCI  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateOCIWithHttpInfo(AuthMethodUpdateOCI authMethodUpdateOCI) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateOCIValidateBeforeCall(authMethodUpdateOCI, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateOCI  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOCIAsync(AuthMethodUpdateOCI authMethodUpdateOCI, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateOCIValidateBeforeCall(authMethodUpdateOCI, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateOIDC
     * @param authMethodUpdateOIDC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOIDCCall(AuthMethodUpdateOIDC authMethodUpdateOIDC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateOIDC;

        // create path and map variables
        String localVarPath = "/auth-method-update-oidc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateOIDCValidateBeforeCall(AuthMethodUpdateOIDC authMethodUpdateOIDC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateOIDC' is set
        if (authMethodUpdateOIDC == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateOIDC' when calling authMethodUpdateOIDC(Async)");
        }

        return authMethodUpdateOIDCCall(authMethodUpdateOIDC, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateOIDC  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateOIDC(AuthMethodUpdateOIDC authMethodUpdateOIDC) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateOIDCWithHttpInfo(authMethodUpdateOIDC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateOIDC  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateOIDCWithHttpInfo(AuthMethodUpdateOIDC authMethodUpdateOIDC) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateOIDCValidateBeforeCall(authMethodUpdateOIDC, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateOIDC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOIDCAsync(AuthMethodUpdateOIDC authMethodUpdateOIDC, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateOIDCValidateBeforeCall(authMethodUpdateOIDC, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateOauth2
     * @param authMethodUpdateOauth2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOauth2Call(AuthMethodUpdateOauth2 authMethodUpdateOauth2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateOauth2;

        // create path and map variables
        String localVarPath = "/auth-method-update-oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateOauth2ValidateBeforeCall(AuthMethodUpdateOauth2 authMethodUpdateOauth2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateOauth2' is set
        if (authMethodUpdateOauth2 == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateOauth2' when calling authMethodUpdateOauth2(Async)");
        }

        return authMethodUpdateOauth2Call(authMethodUpdateOauth2, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateOauth2  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateOauth2(AuthMethodUpdateOauth2 authMethodUpdateOauth2) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateOauth2WithHttpInfo(authMethodUpdateOauth2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateOauth2  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateOauth2WithHttpInfo(AuthMethodUpdateOauth2 authMethodUpdateOauth2) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateOauth2ValidateBeforeCall(authMethodUpdateOauth2, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateOauth2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateOauth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateOauth2Async(AuthMethodUpdateOauth2 authMethodUpdateOauth2, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateOauth2ValidateBeforeCall(authMethodUpdateOauth2, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateSAML
     * @param authMethodUpdateSAML  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateSAMLCall(AuthMethodUpdateSAML authMethodUpdateSAML, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateSAML;

        // create path and map variables
        String localVarPath = "/auth-method-update-saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateSAMLValidateBeforeCall(AuthMethodUpdateSAML authMethodUpdateSAML, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateSAML' is set
        if (authMethodUpdateSAML == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateSAML' when calling authMethodUpdateSAML(Async)");
        }

        return authMethodUpdateSAMLCall(authMethodUpdateSAML, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateSAML  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateSAML(AuthMethodUpdateSAML authMethodUpdateSAML) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateSAMLWithHttpInfo(authMethodUpdateSAML);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateSAML  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateSAMLWithHttpInfo(AuthMethodUpdateSAML authMethodUpdateSAML) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateSAMLValidateBeforeCall(authMethodUpdateSAML, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateSAML  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateSAMLAsync(AuthMethodUpdateSAML authMethodUpdateSAML, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateSAMLValidateBeforeCall(authMethodUpdateSAML, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authMethodUpdateUniversalIdentity
     * @param authMethodUpdateUniversalIdentity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateUniversalIdentityCall(AuthMethodUpdateUniversalIdentity authMethodUpdateUniversalIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authMethodUpdateUniversalIdentity;

        // create path and map variables
        String localVarPath = "/auth-method-update-universal-identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authMethodUpdateUniversalIdentityValidateBeforeCall(AuthMethodUpdateUniversalIdentity authMethodUpdateUniversalIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authMethodUpdateUniversalIdentity' is set
        if (authMethodUpdateUniversalIdentity == null) {
            throw new ApiException("Missing the required parameter 'authMethodUpdateUniversalIdentity' when calling authMethodUpdateUniversalIdentity(Async)");
        }

        return authMethodUpdateUniversalIdentityCall(authMethodUpdateUniversalIdentity, _callback);

    }

    /**
     * 
     * 
     * @param authMethodUpdateUniversalIdentity  (required)
     * @return AuthMethodUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethodUpdateOutput authMethodUpdateUniversalIdentity(AuthMethodUpdateUniversalIdentity authMethodUpdateUniversalIdentity) throws ApiException {
        ApiResponse<AuthMethodUpdateOutput> localVarResp = authMethodUpdateUniversalIdentityWithHttpInfo(authMethodUpdateUniversalIdentity);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authMethodUpdateUniversalIdentity  (required)
     * @return ApiResponse&lt;AuthMethodUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethodUpdateOutput> authMethodUpdateUniversalIdentityWithHttpInfo(AuthMethodUpdateUniversalIdentity authMethodUpdateUniversalIdentity) throws ApiException {
        okhttp3.Call localVarCall = authMethodUpdateUniversalIdentityValidateBeforeCall(authMethodUpdateUniversalIdentity, null);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authMethodUpdateUniversalIdentity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> authMethodUpdateUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authMethodUpdateUniversalIdentityAsync(AuthMethodUpdateUniversalIdentity authMethodUpdateUniversalIdentity, final ApiCallback<AuthMethodUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authMethodUpdateUniversalIdentityValidateBeforeCall(authMethodUpdateUniversalIdentity, _callback);
        Type localVarReturnType = new TypeToken<AuthMethodUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calcPasswordSecurityInfo
     * @param calcPasswordSecurityInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> calcPasswordSecurityInfoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calcPasswordSecurityInfoCall(CalcPasswordSecurityInfo calcPasswordSecurityInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calcPasswordSecurityInfo;

        // create path and map variables
        String localVarPath = "/calc-password-security-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calcPasswordSecurityInfoValidateBeforeCall(CalcPasswordSecurityInfo calcPasswordSecurityInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calcPasswordSecurityInfo' is set
        if (calcPasswordSecurityInfo == null) {
            throw new ApiException("Missing the required parameter 'calcPasswordSecurityInfo' when calling calcPasswordSecurityInfo(Async)");
        }

        return calcPasswordSecurityInfoCall(calcPasswordSecurityInfo, _callback);

    }

    /**
     * 
     * 
     * @param calcPasswordSecurityInfo  (required)
     * @return PasswordSecurityInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> calcPasswordSecurityInfoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public PasswordSecurityInfo calcPasswordSecurityInfo(CalcPasswordSecurityInfo calcPasswordSecurityInfo) throws ApiException {
        ApiResponse<PasswordSecurityInfo> localVarResp = calcPasswordSecurityInfoWithHttpInfo(calcPasswordSecurityInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param calcPasswordSecurityInfo  (required)
     * @return ApiResponse&lt;PasswordSecurityInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> calcPasswordSecurityInfoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordSecurityInfo> calcPasswordSecurityInfoWithHttpInfo(CalcPasswordSecurityInfo calcPasswordSecurityInfo) throws ApiException {
        okhttp3.Call localVarCall = calcPasswordSecurityInfoValidateBeforeCall(calcPasswordSecurityInfo, null);
        Type localVarReturnType = new TypeToken<PasswordSecurityInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param calcPasswordSecurityInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> calcPasswordSecurityInfoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calcPasswordSecurityInfoAsync(CalcPasswordSecurityInfo calcPasswordSecurityInfo, final ApiCallback<PasswordSecurityInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = calcPasswordSecurityInfoValidateBeforeCall(calcPasswordSecurityInfo, _callback);
        Type localVarReturnType = new TypeToken<PasswordSecurityInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeAdminAccountPassword
     * @param changeAdminAccountPassword  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeAdminAccountPasswordResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAdminAccountPasswordCall(ChangeAdminAccountPassword changeAdminAccountPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeAdminAccountPassword;

        // create path and map variables
        String localVarPath = "/change-admin-account-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeAdminAccountPasswordValidateBeforeCall(ChangeAdminAccountPassword changeAdminAccountPassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeAdminAccountPassword' is set
        if (changeAdminAccountPassword == null) {
            throw new ApiException("Missing the required parameter 'changeAdminAccountPassword' when calling changeAdminAccountPassword(Async)");
        }

        return changeAdminAccountPasswordCall(changeAdminAccountPassword, _callback);

    }

    /**
     * 
     * 
     * @param changeAdminAccountPassword  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeAdminAccountPasswordResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object changeAdminAccountPassword(ChangeAdminAccountPassword changeAdminAccountPassword) throws ApiException {
        ApiResponse<Object> localVarResp = changeAdminAccountPasswordWithHttpInfo(changeAdminAccountPassword);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param changeAdminAccountPassword  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeAdminAccountPasswordResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeAdminAccountPasswordWithHttpInfo(ChangeAdminAccountPassword changeAdminAccountPassword) throws ApiException {
        okhttp3.Call localVarCall = changeAdminAccountPasswordValidateBeforeCall(changeAdminAccountPassword, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param changeAdminAccountPassword  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeAdminAccountPasswordResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAdminAccountPasswordAsync(ChangeAdminAccountPassword changeAdminAccountPassword, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeAdminAccountPasswordValidateBeforeCall(changeAdminAccountPassword, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configure
     * @param configure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureCall(Configure configure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configure;

        // create path and map variables
        String localVarPath = "/configure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configureValidateBeforeCall(Configure configure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configure' is set
        if (configure == null) {
            throw new ApiException("Missing the required parameter 'configure' when calling configure(Async)");
        }

        return configureCall(configure, _callback);

    }

    /**
     * 
     * 
     * @param configure  (required)
     * @return ConfigureOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigureOutput configure(Configure configure) throws ApiException {
        ApiResponse<ConfigureOutput> localVarResp = configureWithHttpInfo(configure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param configure  (required)
     * @return ApiResponse&lt;ConfigureOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigureOutput> configureWithHttpInfo(Configure configure) throws ApiException {
        okhttp3.Call localVarCall = configureValidateBeforeCall(configure, null);
        Type localVarReturnType = new TypeToken<ConfigureOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param configure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureAsync(Configure configure, final ApiCallback<ConfigureOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = configureValidateBeforeCall(configure, _callback);
        Type localVarReturnType = new TypeToken<ConfigureOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connect
     * @param connect  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> connectResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectCall(Connect connect, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connect;

        // create path and map variables
        String localVarPath = "/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectValidateBeforeCall(Connect connect, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connect' is set
        if (connect == null) {
            throw new ApiException("Missing the required parameter 'connect' when calling connect(Async)");
        }

        return connectCall(connect, _callback);

    }

    /**
     * 
     * 
     * @param connect  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> connectResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object connect(Connect connect) throws ApiException {
        ApiResponse<Object> localVarResp = connectWithHttpInfo(connect);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connect  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> connectResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> connectWithHttpInfo(Connect connect) throws ApiException {
        okhttp3.Call localVarCall = connectValidateBeforeCall(connect, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connect  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> connectResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectAsync(Connect connect, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectValidateBeforeCall(connect, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAWSTarget
     * @param createAWSTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWSTargetCall(CreateAWSTarget createAWSTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAWSTarget;

        // create path and map variables
        String localVarPath = "/create-aws-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAWSTargetValidateBeforeCall(CreateAWSTarget createAWSTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAWSTarget' is set
        if (createAWSTarget == null) {
            throw new ApiException("Missing the required parameter 'createAWSTarget' when calling createAWSTarget(Async)");
        }

        return createAWSTargetCall(createAWSTarget, _callback);

    }

    /**
     * 
     * 
     * @param createAWSTarget  (required)
     * @return CreateAWSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAWSTargetOutput createAWSTarget(CreateAWSTarget createAWSTarget) throws ApiException {
        ApiResponse<CreateAWSTargetOutput> localVarResp = createAWSTargetWithHttpInfo(createAWSTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAWSTarget  (required)
     * @return ApiResponse&lt;CreateAWSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAWSTargetOutput> createAWSTargetWithHttpInfo(CreateAWSTarget createAWSTarget) throws ApiException {
        okhttp3.Call localVarCall = createAWSTargetValidateBeforeCall(createAWSTarget, null);
        Type localVarReturnType = new TypeToken<CreateAWSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAWSTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWSTargetAsync(CreateAWSTarget createAWSTarget, final ApiCallback<CreateAWSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAWSTargetValidateBeforeCall(createAWSTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateAWSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createArtifactoryTarget
     * @param createArtifactoryTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactoryTargetCall(CreateArtifactoryTarget createArtifactoryTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createArtifactoryTarget;

        // create path and map variables
        String localVarPath = "/create-artifactory-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArtifactoryTargetValidateBeforeCall(CreateArtifactoryTarget createArtifactoryTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createArtifactoryTarget' is set
        if (createArtifactoryTarget == null) {
            throw new ApiException("Missing the required parameter 'createArtifactoryTarget' when calling createArtifactoryTarget(Async)");
        }

        return createArtifactoryTargetCall(createArtifactoryTarget, _callback);

    }

    /**
     * 
     * 
     * @param createArtifactoryTarget  (required)
     * @return CreateArtifactoryTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateArtifactoryTargetOutput createArtifactoryTarget(CreateArtifactoryTarget createArtifactoryTarget) throws ApiException {
        ApiResponse<CreateArtifactoryTargetOutput> localVarResp = createArtifactoryTargetWithHttpInfo(createArtifactoryTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createArtifactoryTarget  (required)
     * @return ApiResponse&lt;CreateArtifactoryTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateArtifactoryTargetOutput> createArtifactoryTargetWithHttpInfo(CreateArtifactoryTarget createArtifactoryTarget) throws ApiException {
        okhttp3.Call localVarCall = createArtifactoryTargetValidateBeforeCall(createArtifactoryTarget, null);
        Type localVarReturnType = new TypeToken<CreateArtifactoryTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createArtifactoryTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactoryTargetAsync(CreateArtifactoryTarget createArtifactoryTarget, final ApiCallback<CreateArtifactoryTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArtifactoryTargetValidateBeforeCall(createArtifactoryTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateArtifactoryTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethod
     * @param createAuthMethod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodCall(CreateAuthMethod createAuthMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethod;

        // create path and map variables
        String localVarPath = "/create-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodValidateBeforeCall(CreateAuthMethod createAuthMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethod' is set
        if (createAuthMethod == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethod' when calling createAuthMethod(Async)");
        }

        return createAuthMethodCall(createAuthMethod, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethod  (required)
     * @return CreateAuthMethodOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOutput createAuthMethod(CreateAuthMethod createAuthMethod) throws ApiException {
        ApiResponse<CreateAuthMethodOutput> localVarResp = createAuthMethodWithHttpInfo(createAuthMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethod  (required)
     * @return ApiResponse&lt;CreateAuthMethodOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOutput> createAuthMethodWithHttpInfo(CreateAuthMethod createAuthMethod) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodValidateBeforeCall(createAuthMethod, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAsync(CreateAuthMethod createAuthMethod, final ApiCallback<CreateAuthMethodOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodValidateBeforeCall(createAuthMethod, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodAWSIAM
     * @param createAuthMethodAWSIAM  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAWSIAMCall(CreateAuthMethodAWSIAM createAuthMethodAWSIAM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodAWSIAM;

        // create path and map variables
        String localVarPath = "/create-auth-method-aws-iam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodAWSIAMValidateBeforeCall(CreateAuthMethodAWSIAM createAuthMethodAWSIAM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodAWSIAM' is set
        if (createAuthMethodAWSIAM == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodAWSIAM' when calling createAuthMethodAWSIAM(Async)");
        }

        return createAuthMethodAWSIAMCall(createAuthMethodAWSIAM, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodAWSIAM  (required)
     * @return CreateAuthMethodAWSIAMOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodAWSIAMOutput createAuthMethodAWSIAM(CreateAuthMethodAWSIAM createAuthMethodAWSIAM) throws ApiException {
        ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResp = createAuthMethodAWSIAMWithHttpInfo(createAuthMethodAWSIAM);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodAWSIAM  (required)
     * @return ApiResponse&lt;CreateAuthMethodAWSIAMOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodAWSIAMOutput> createAuthMethodAWSIAMWithHttpInfo(CreateAuthMethodAWSIAM createAuthMethodAWSIAM) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodAWSIAMValidateBeforeCall(createAuthMethodAWSIAM, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAWSIAMOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodAWSIAM  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAWSIAMAsync(CreateAuthMethodAWSIAM createAuthMethodAWSIAM, final ApiCallback<CreateAuthMethodAWSIAMOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodAWSIAMValidateBeforeCall(createAuthMethodAWSIAM, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAWSIAMOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodAzureAD
     * @param createAuthMethodAzureAD  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAzureADCall(CreateAuthMethodAzureAD createAuthMethodAzureAD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodAzureAD;

        // create path and map variables
        String localVarPath = "/create-auth-method-azure-ad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodAzureADValidateBeforeCall(CreateAuthMethodAzureAD createAuthMethodAzureAD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodAzureAD' is set
        if (createAuthMethodAzureAD == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodAzureAD' when calling createAuthMethodAzureAD(Async)");
        }

        return createAuthMethodAzureADCall(createAuthMethodAzureAD, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodAzureAD  (required)
     * @return CreateAuthMethodAzureADOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodAzureADOutput createAuthMethodAzureAD(CreateAuthMethodAzureAD createAuthMethodAzureAD) throws ApiException {
        ApiResponse<CreateAuthMethodAzureADOutput> localVarResp = createAuthMethodAzureADWithHttpInfo(createAuthMethodAzureAD);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodAzureAD  (required)
     * @return ApiResponse&lt;CreateAuthMethodAzureADOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodAzureADOutput> createAuthMethodAzureADWithHttpInfo(CreateAuthMethodAzureAD createAuthMethodAzureAD) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodAzureADValidateBeforeCall(createAuthMethodAzureAD, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAzureADOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodAzureAD  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAzureADAsync(CreateAuthMethodAzureAD createAuthMethodAzureAD, final ApiCallback<CreateAuthMethodAzureADOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodAzureADValidateBeforeCall(createAuthMethodAzureAD, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAzureADOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodCert
     * @param createAuthMethodCert  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodCertCall(CreateAuthMethodCert createAuthMethodCert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodCert;

        // create path and map variables
        String localVarPath = "/create-auth-method-cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodCertValidateBeforeCall(CreateAuthMethodCert createAuthMethodCert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodCert' is set
        if (createAuthMethodCert == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodCert' when calling createAuthMethodCert(Async)");
        }

        return createAuthMethodCertCall(createAuthMethodCert, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodCert  (required)
     * @return CreateAuthMethodCertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodCertOutput createAuthMethodCert(CreateAuthMethodCert createAuthMethodCert) throws ApiException {
        ApiResponse<CreateAuthMethodCertOutput> localVarResp = createAuthMethodCertWithHttpInfo(createAuthMethodCert);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodCert  (required)
     * @return ApiResponse&lt;CreateAuthMethodCertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodCertOutput> createAuthMethodCertWithHttpInfo(CreateAuthMethodCert createAuthMethodCert) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodCertValidateBeforeCall(createAuthMethodCert, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodCertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodCert  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodCertAsync(CreateAuthMethodCert createAuthMethodCert, final ApiCallback<CreateAuthMethodCertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodCertValidateBeforeCall(createAuthMethodCert, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodCertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodEmail
     * @param createAuthMethodEmail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodEmailCall(CreateAuthMethodEmail createAuthMethodEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodEmail;

        // create path and map variables
        String localVarPath = "/create-auth-method-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodEmailValidateBeforeCall(CreateAuthMethodEmail createAuthMethodEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodEmail' is set
        if (createAuthMethodEmail == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodEmail' when calling createAuthMethodEmail(Async)");
        }

        return createAuthMethodEmailCall(createAuthMethodEmail, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodEmail  (required)
     * @return CreateAuthMethodEmailOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodEmailOutput createAuthMethodEmail(CreateAuthMethodEmail createAuthMethodEmail) throws ApiException {
        ApiResponse<CreateAuthMethodEmailOutput> localVarResp = createAuthMethodEmailWithHttpInfo(createAuthMethodEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodEmail  (required)
     * @return ApiResponse&lt;CreateAuthMethodEmailOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodEmailOutput> createAuthMethodEmailWithHttpInfo(CreateAuthMethodEmail createAuthMethodEmail) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodEmailValidateBeforeCall(createAuthMethodEmail, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodEmailOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodEmail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodEmailAsync(CreateAuthMethodEmail createAuthMethodEmail, final ApiCallback<CreateAuthMethodEmailOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodEmailValidateBeforeCall(createAuthMethodEmail, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodEmailOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodGCP
     * @param createAuthMethodGCP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodGCPCall(CreateAuthMethodGCP createAuthMethodGCP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodGCP;

        // create path and map variables
        String localVarPath = "/create-auth-method-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodGCPValidateBeforeCall(CreateAuthMethodGCP createAuthMethodGCP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodGCP' is set
        if (createAuthMethodGCP == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodGCP' when calling createAuthMethodGCP(Async)");
        }

        return createAuthMethodGCPCall(createAuthMethodGCP, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodGCP  (required)
     * @return CreateAuthMethodGCPOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodGCPOutput createAuthMethodGCP(CreateAuthMethodGCP createAuthMethodGCP) throws ApiException {
        ApiResponse<CreateAuthMethodGCPOutput> localVarResp = createAuthMethodGCPWithHttpInfo(createAuthMethodGCP);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodGCP  (required)
     * @return ApiResponse&lt;CreateAuthMethodGCPOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodGCPOutput> createAuthMethodGCPWithHttpInfo(CreateAuthMethodGCP createAuthMethodGCP) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodGCPValidateBeforeCall(createAuthMethodGCP, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodGCPOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodGCP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodGCPAsync(CreateAuthMethodGCP createAuthMethodGCP, final ApiCallback<CreateAuthMethodGCPOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodGCPValidateBeforeCall(createAuthMethodGCP, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodGCPOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodHuawei
     * @param createAuthMethodHuawei  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodHuaweiCall(CreateAuthMethodHuawei createAuthMethodHuawei, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodHuawei;

        // create path and map variables
        String localVarPath = "/create-auth-method-huawei";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodHuaweiValidateBeforeCall(CreateAuthMethodHuawei createAuthMethodHuawei, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodHuawei' is set
        if (createAuthMethodHuawei == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodHuawei' when calling createAuthMethodHuawei(Async)");
        }

        return createAuthMethodHuaweiCall(createAuthMethodHuawei, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodHuawei  (required)
     * @return CreateAuthMethodHuaweiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodHuaweiOutput createAuthMethodHuawei(CreateAuthMethodHuawei createAuthMethodHuawei) throws ApiException {
        ApiResponse<CreateAuthMethodHuaweiOutput> localVarResp = createAuthMethodHuaweiWithHttpInfo(createAuthMethodHuawei);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodHuawei  (required)
     * @return ApiResponse&lt;CreateAuthMethodHuaweiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodHuaweiOutput> createAuthMethodHuaweiWithHttpInfo(CreateAuthMethodHuawei createAuthMethodHuawei) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodHuaweiValidateBeforeCall(createAuthMethodHuawei, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodHuaweiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodHuawei  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodHuaweiAsync(CreateAuthMethodHuawei createAuthMethodHuawei, final ApiCallback<CreateAuthMethodHuaweiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodHuaweiValidateBeforeCall(createAuthMethodHuawei, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodHuaweiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodK8S
     * @param createAuthMethodK8S  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodK8SCall(CreateAuthMethodK8S createAuthMethodK8S, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodK8S;

        // create path and map variables
        String localVarPath = "/create-auth-method-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodK8SValidateBeforeCall(CreateAuthMethodK8S createAuthMethodK8S, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodK8S' is set
        if (createAuthMethodK8S == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodK8S' when calling createAuthMethodK8S(Async)");
        }

        return createAuthMethodK8SCall(createAuthMethodK8S, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodK8S  (required)
     * @return CreateAuthMethodK8SOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodK8SOutput createAuthMethodK8S(CreateAuthMethodK8S createAuthMethodK8S) throws ApiException {
        ApiResponse<CreateAuthMethodK8SOutput> localVarResp = createAuthMethodK8SWithHttpInfo(createAuthMethodK8S);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodK8S  (required)
     * @return ApiResponse&lt;CreateAuthMethodK8SOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodK8SOutput> createAuthMethodK8SWithHttpInfo(CreateAuthMethodK8S createAuthMethodK8S) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodK8SValidateBeforeCall(createAuthMethodK8S, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodK8SOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodK8S  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodK8SAsync(CreateAuthMethodK8S createAuthMethodK8S, final ApiCallback<CreateAuthMethodK8SOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodK8SValidateBeforeCall(createAuthMethodK8S, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodK8SOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodLDAP
     * @param createAuthMethodLDAP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodLDAPCall(CreateAuthMethodLDAP createAuthMethodLDAP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodLDAP;

        // create path and map variables
        String localVarPath = "/create-auth-method-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodLDAPValidateBeforeCall(CreateAuthMethodLDAP createAuthMethodLDAP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodLDAP' is set
        if (createAuthMethodLDAP == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodLDAP' when calling createAuthMethodLDAP(Async)");
        }

        return createAuthMethodLDAPCall(createAuthMethodLDAP, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodLDAP  (required)
     * @return CreateAuthMethodLDAPOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodLDAPOutput createAuthMethodLDAP(CreateAuthMethodLDAP createAuthMethodLDAP) throws ApiException {
        ApiResponse<CreateAuthMethodLDAPOutput> localVarResp = createAuthMethodLDAPWithHttpInfo(createAuthMethodLDAP);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodLDAP  (required)
     * @return ApiResponse&lt;CreateAuthMethodLDAPOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodLDAPOutput> createAuthMethodLDAPWithHttpInfo(CreateAuthMethodLDAP createAuthMethodLDAP) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodLDAPValidateBeforeCall(createAuthMethodLDAP, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodLDAPOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodLDAP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodLDAPAsync(CreateAuthMethodLDAP createAuthMethodLDAP, final ApiCallback<CreateAuthMethodLDAPOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodLDAPValidateBeforeCall(createAuthMethodLDAP, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodLDAPOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodOAuth2
     * @param createAuthMethodOAuth2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOAuth2Call(CreateAuthMethodOAuth2 createAuthMethodOAuth2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodOAuth2;

        // create path and map variables
        String localVarPath = "/create-auth-method-oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodOAuth2ValidateBeforeCall(CreateAuthMethodOAuth2 createAuthMethodOAuth2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodOAuth2' is set
        if (createAuthMethodOAuth2 == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodOAuth2' when calling createAuthMethodOAuth2(Async)");
        }

        return createAuthMethodOAuth2Call(createAuthMethodOAuth2, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodOAuth2  (required)
     * @return CreateAuthMethodOAuth2Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOAuth2Output createAuthMethodOAuth2(CreateAuthMethodOAuth2 createAuthMethodOAuth2) throws ApiException {
        ApiResponse<CreateAuthMethodOAuth2Output> localVarResp = createAuthMethodOAuth2WithHttpInfo(createAuthMethodOAuth2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodOAuth2  (required)
     * @return ApiResponse&lt;CreateAuthMethodOAuth2Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOAuth2Output> createAuthMethodOAuth2WithHttpInfo(CreateAuthMethodOAuth2 createAuthMethodOAuth2) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodOAuth2ValidateBeforeCall(createAuthMethodOAuth2, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOAuth2Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodOAuth2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOAuth2Async(CreateAuthMethodOAuth2 createAuthMethodOAuth2, final ApiCallback<CreateAuthMethodOAuth2Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodOAuth2ValidateBeforeCall(createAuthMethodOAuth2, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOAuth2Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodOCI
     * @param createAuthMethodOCI  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOCICall(CreateAuthMethodOCI createAuthMethodOCI, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodOCI;

        // create path and map variables
        String localVarPath = "/create-auth-method-oci";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodOCIValidateBeforeCall(CreateAuthMethodOCI createAuthMethodOCI, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodOCI' is set
        if (createAuthMethodOCI == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodOCI' when calling createAuthMethodOCI(Async)");
        }

        return createAuthMethodOCICall(createAuthMethodOCI, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodOCI  (required)
     * @return CreateAuthMethodOCIOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOCIOutput createAuthMethodOCI(CreateAuthMethodOCI createAuthMethodOCI) throws ApiException {
        ApiResponse<CreateAuthMethodOCIOutput> localVarResp = createAuthMethodOCIWithHttpInfo(createAuthMethodOCI);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodOCI  (required)
     * @return ApiResponse&lt;CreateAuthMethodOCIOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOCIOutput> createAuthMethodOCIWithHttpInfo(CreateAuthMethodOCI createAuthMethodOCI) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodOCIValidateBeforeCall(createAuthMethodOCI, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOCIOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodOCI  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOCIAsync(CreateAuthMethodOCI createAuthMethodOCI, final ApiCallback<CreateAuthMethodOCIOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodOCIValidateBeforeCall(createAuthMethodOCI, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOCIOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodOIDC
     * @param createAuthMethodOIDC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOIDCCall(CreateAuthMethodOIDC createAuthMethodOIDC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodOIDC;

        // create path and map variables
        String localVarPath = "/create-auth-method-oidc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodOIDCValidateBeforeCall(CreateAuthMethodOIDC createAuthMethodOIDC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodOIDC' is set
        if (createAuthMethodOIDC == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodOIDC' when calling createAuthMethodOIDC(Async)");
        }

        return createAuthMethodOIDCCall(createAuthMethodOIDC, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodOIDC  (required)
     * @return CreateAuthMethodOIDCOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOIDCOutput createAuthMethodOIDC(CreateAuthMethodOIDC createAuthMethodOIDC) throws ApiException {
        ApiResponse<CreateAuthMethodOIDCOutput> localVarResp = createAuthMethodOIDCWithHttpInfo(createAuthMethodOIDC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodOIDC  (required)
     * @return ApiResponse&lt;CreateAuthMethodOIDCOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOIDCOutput> createAuthMethodOIDCWithHttpInfo(CreateAuthMethodOIDC createAuthMethodOIDC) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodOIDCValidateBeforeCall(createAuthMethodOIDC, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOIDCOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodOIDC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOIDCAsync(CreateAuthMethodOIDC createAuthMethodOIDC, final ApiCallback<CreateAuthMethodOIDCOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodOIDCValidateBeforeCall(createAuthMethodOIDC, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOIDCOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodSAML
     * @param createAuthMethodSAML  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodSAMLCall(CreateAuthMethodSAML createAuthMethodSAML, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodSAML;

        // create path and map variables
        String localVarPath = "/create-auth-method-saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodSAMLValidateBeforeCall(CreateAuthMethodSAML createAuthMethodSAML, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodSAML' is set
        if (createAuthMethodSAML == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodSAML' when calling createAuthMethodSAML(Async)");
        }

        return createAuthMethodSAMLCall(createAuthMethodSAML, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodSAML  (required)
     * @return CreateAuthMethodSAMLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodSAMLOutput createAuthMethodSAML(CreateAuthMethodSAML createAuthMethodSAML) throws ApiException {
        ApiResponse<CreateAuthMethodSAMLOutput> localVarResp = createAuthMethodSAMLWithHttpInfo(createAuthMethodSAML);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodSAML  (required)
     * @return ApiResponse&lt;CreateAuthMethodSAMLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodSAMLOutput> createAuthMethodSAMLWithHttpInfo(CreateAuthMethodSAML createAuthMethodSAML) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodSAMLValidateBeforeCall(createAuthMethodSAML, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodSAMLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodSAML  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodSAMLAsync(CreateAuthMethodSAML createAuthMethodSAML, final ApiCallback<CreateAuthMethodSAMLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodSAMLValidateBeforeCall(createAuthMethodSAML, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodSAMLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodUniversalIdentity
     * @param createAuthMethodUniversalIdentity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodUniversalIdentityCall(CreateAuthMethodUniversalIdentity createAuthMethodUniversalIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthMethodUniversalIdentity;

        // create path and map variables
        String localVarPath = "/create-auth-method-universal-identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodUniversalIdentityValidateBeforeCall(CreateAuthMethodUniversalIdentity createAuthMethodUniversalIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAuthMethodUniversalIdentity' is set
        if (createAuthMethodUniversalIdentity == null) {
            throw new ApiException("Missing the required parameter 'createAuthMethodUniversalIdentity' when calling createAuthMethodUniversalIdentity(Async)");
        }

        return createAuthMethodUniversalIdentityCall(createAuthMethodUniversalIdentity, _callback);

    }

    /**
     * 
     * 
     * @param createAuthMethodUniversalIdentity  (required)
     * @return CreateAuthMethodUniversalIdentityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodUniversalIdentityOutput createAuthMethodUniversalIdentity(CreateAuthMethodUniversalIdentity createAuthMethodUniversalIdentity) throws ApiException {
        ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResp = createAuthMethodUniversalIdentityWithHttpInfo(createAuthMethodUniversalIdentity);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthMethodUniversalIdentity  (required)
     * @return ApiResponse&lt;CreateAuthMethodUniversalIdentityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodUniversalIdentityOutput> createAuthMethodUniversalIdentityWithHttpInfo(CreateAuthMethodUniversalIdentity createAuthMethodUniversalIdentity) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodUniversalIdentityValidateBeforeCall(createAuthMethodUniversalIdentity, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodUniversalIdentityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthMethodUniversalIdentity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodUniversalIdentityAsync(CreateAuthMethodUniversalIdentity createAuthMethodUniversalIdentity, final ApiCallback<CreateAuthMethodUniversalIdentityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodUniversalIdentityValidateBeforeCall(createAuthMethodUniversalIdentity, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodUniversalIdentityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAzureTarget
     * @param createAzureTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAzureTargetCall(CreateAzureTarget createAzureTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAzureTarget;

        // create path and map variables
        String localVarPath = "/create-azure-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAzureTargetValidateBeforeCall(CreateAzureTarget createAzureTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAzureTarget' is set
        if (createAzureTarget == null) {
            throw new ApiException("Missing the required parameter 'createAzureTarget' when calling createAzureTarget(Async)");
        }

        return createAzureTargetCall(createAzureTarget, _callback);

    }

    /**
     * 
     * 
     * @param createAzureTarget  (required)
     * @return CreateAzureTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAzureTargetOutput createAzureTarget(CreateAzureTarget createAzureTarget) throws ApiException {
        ApiResponse<CreateAzureTargetOutput> localVarResp = createAzureTargetWithHttpInfo(createAzureTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAzureTarget  (required)
     * @return ApiResponse&lt;CreateAzureTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAzureTargetOutput> createAzureTargetWithHttpInfo(CreateAzureTarget createAzureTarget) throws ApiException {
        okhttp3.Call localVarCall = createAzureTargetValidateBeforeCall(createAzureTarget, null);
        Type localVarReturnType = new TypeToken<CreateAzureTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAzureTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAzureTargetAsync(CreateAzureTarget createAzureTarget, final ApiCallback<CreateAzureTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAzureTargetValidateBeforeCall(createAzureTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateAzureTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCertificate
     * @param createCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateCall(CreateCertificate createCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCertificate;

        // create path and map variables
        String localVarPath = "/create-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCertificateValidateBeforeCall(CreateCertificate createCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCertificate' is set
        if (createCertificate == null) {
            throw new ApiException("Missing the required parameter 'createCertificate' when calling createCertificate(Async)");
        }

        return createCertificateCall(createCertificate, _callback);

    }

    /**
     * 
     * 
     * @param createCertificate  (required)
     * @return CreateCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCertificateOutput createCertificate(CreateCertificate createCertificate) throws ApiException {
        ApiResponse<CreateCertificateOutput> localVarResp = createCertificateWithHttpInfo(createCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createCertificate  (required)
     * @return ApiResponse&lt;CreateCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCertificateOutput> createCertificateWithHttpInfo(CreateCertificate createCertificate) throws ApiException {
        okhttp3.Call localVarCall = createCertificateValidateBeforeCall(createCertificate, null);
        Type localVarReturnType = new TypeToken<CreateCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateAsync(CreateCertificate createCertificate, final ApiCallback<CreateCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCertificateValidateBeforeCall(createCertificate, _callback);
        Type localVarReturnType = new TypeToken<CreateCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClassicKey
     * @param createClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassicKeyCall(CreateClassicKey createClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createClassicKey;

        // create path and map variables
        String localVarPath = "/create-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClassicKeyValidateBeforeCall(CreateClassicKey createClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createClassicKey' is set
        if (createClassicKey == null) {
            throw new ApiException("Missing the required parameter 'createClassicKey' when calling createClassicKey(Async)");
        }

        return createClassicKeyCall(createClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param createClassicKey  (required)
     * @return CreateClassicKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateClassicKeyOutput createClassicKey(CreateClassicKey createClassicKey) throws ApiException {
        ApiResponse<CreateClassicKeyOutput> localVarResp = createClassicKeyWithHttpInfo(createClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createClassicKey  (required)
     * @return ApiResponse&lt;CreateClassicKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClassicKeyOutput> createClassicKeyWithHttpInfo(CreateClassicKey createClassicKey) throws ApiException {
        okhttp3.Call localVarCall = createClassicKeyValidateBeforeCall(createClassicKey, null);
        Type localVarReturnType = new TypeToken<CreateClassicKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassicKeyAsync(CreateClassicKey createClassicKey, final ApiCallback<CreateClassicKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClassicKeyValidateBeforeCall(createClassicKey, _callback);
        Type localVarReturnType = new TypeToken<CreateClassicKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDBTarget
     * @param createDBTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDBTargetCall(CreateDBTarget createDBTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBTarget;

        // create path and map variables
        String localVarPath = "/create-db-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDBTargetValidateBeforeCall(CreateDBTarget createDBTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDBTarget' is set
        if (createDBTarget == null) {
            throw new ApiException("Missing the required parameter 'createDBTarget' when calling createDBTarget(Async)");
        }

        return createDBTargetCall(createDBTarget, _callback);

    }

    /**
     * 
     * 
     * @param createDBTarget  (required)
     * @return CreateDBTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBTargetOutput createDBTarget(CreateDBTarget createDBTarget) throws ApiException {
        ApiResponse<CreateDBTargetOutput> localVarResp = createDBTargetWithHttpInfo(createDBTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDBTarget  (required)
     * @return ApiResponse&lt;CreateDBTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBTargetOutput> createDBTargetWithHttpInfo(CreateDBTarget createDBTarget) throws ApiException {
        okhttp3.Call localVarCall = createDBTargetValidateBeforeCall(createDBTarget, null);
        Type localVarReturnType = new TypeToken<CreateDBTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDBTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDBTargetAsync(CreateDBTarget createDBTarget, final ApiCallback<CreateDBTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDBTargetValidateBeforeCall(createDBTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateDBTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDFCKey
     * @param createDFCKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDFCKeyCall(CreateDFCKey createDFCKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDFCKey;

        // create path and map variables
        String localVarPath = "/create-dfc-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDFCKeyValidateBeforeCall(CreateDFCKey createDFCKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDFCKey' is set
        if (createDFCKey == null) {
            throw new ApiException("Missing the required parameter 'createDFCKey' when calling createDFCKey(Async)");
        }

        return createDFCKeyCall(createDFCKey, _callback);

    }

    /**
     * 
     * 
     * @param createDFCKey  (required)
     * @return CreateDFCKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDFCKeyOutput createDFCKey(CreateDFCKey createDFCKey) throws ApiException {
        ApiResponse<CreateDFCKeyOutput> localVarResp = createDFCKeyWithHttpInfo(createDFCKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDFCKey  (required)
     * @return ApiResponse&lt;CreateDFCKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDFCKeyOutput> createDFCKeyWithHttpInfo(CreateDFCKey createDFCKey) throws ApiException {
        okhttp3.Call localVarCall = createDFCKeyValidateBeforeCall(createDFCKey, null);
        Type localVarReturnType = new TypeToken<CreateDFCKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDFCKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDFCKeyAsync(CreateDFCKey createDFCKey, final ApiCallback<CreateDFCKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDFCKeyValidateBeforeCall(createDFCKey, _callback);
        Type localVarReturnType = new TypeToken<CreateDFCKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDockerhubTarget
     * @param createDockerhubTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDockerhubTargetCall(CreateDockerhubTarget createDockerhubTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDockerhubTarget;

        // create path and map variables
        String localVarPath = "/create-dockerhub-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDockerhubTargetValidateBeforeCall(CreateDockerhubTarget createDockerhubTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDockerhubTarget' is set
        if (createDockerhubTarget == null) {
            throw new ApiException("Missing the required parameter 'createDockerhubTarget' when calling createDockerhubTarget(Async)");
        }

        return createDockerhubTargetCall(createDockerhubTarget, _callback);

    }

    /**
     * 
     * 
     * @param createDockerhubTarget  (required)
     * @return CreateDockerhubTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDockerhubTargetOutput createDockerhubTarget(CreateDockerhubTarget createDockerhubTarget) throws ApiException {
        ApiResponse<CreateDockerhubTargetOutput> localVarResp = createDockerhubTargetWithHttpInfo(createDockerhubTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDockerhubTarget  (required)
     * @return ApiResponse&lt;CreateDockerhubTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDockerhubTargetOutput> createDockerhubTargetWithHttpInfo(CreateDockerhubTarget createDockerhubTarget) throws ApiException {
        okhttp3.Call localVarCall = createDockerhubTargetValidateBeforeCall(createDockerhubTarget, null);
        Type localVarReturnType = new TypeToken<CreateDockerhubTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDockerhubTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDockerhubTargetAsync(CreateDockerhubTarget createDockerhubTarget, final ApiCallback<CreateDockerhubTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDockerhubTargetValidateBeforeCall(createDockerhubTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateDockerhubTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDynamicSecret
     * @param createDynamicSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDynamicSecretCall(CreateDynamicSecret createDynamicSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDynamicSecret;

        // create path and map variables
        String localVarPath = "/create-dynamic-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDynamicSecretValidateBeforeCall(CreateDynamicSecret createDynamicSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDynamicSecret' is set
        if (createDynamicSecret == null) {
            throw new ApiException("Missing the required parameter 'createDynamicSecret' when calling createDynamicSecret(Async)");
        }

        return createDynamicSecretCall(createDynamicSecret, _callback);

    }

    /**
     * 
     * 
     * @param createDynamicSecret  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object createDynamicSecret(CreateDynamicSecret createDynamicSecret) throws ApiException {
        ApiResponse<Object> localVarResp = createDynamicSecretWithHttpInfo(createDynamicSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createDynamicSecret  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createDynamicSecretWithHttpInfo(CreateDynamicSecret createDynamicSecret) throws ApiException {
        okhttp3.Call localVarCall = createDynamicSecretValidateBeforeCall(createDynamicSecret, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createDynamicSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDynamicSecretAsync(CreateDynamicSecret createDynamicSecret, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDynamicSecretValidateBeforeCall(createDynamicSecret, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEKSTarget
     * @param createEKSTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEKSTargetCall(CreateEKSTarget createEKSTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEKSTarget;

        // create path and map variables
        String localVarPath = "/create-eks-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEKSTargetValidateBeforeCall(CreateEKSTarget createEKSTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEKSTarget' is set
        if (createEKSTarget == null) {
            throw new ApiException("Missing the required parameter 'createEKSTarget' when calling createEKSTarget(Async)");
        }

        return createEKSTargetCall(createEKSTarget, _callback);

    }

    /**
     * 
     * 
     * @param createEKSTarget  (required)
     * @return CreateEKSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEKSTargetOutput createEKSTarget(CreateEKSTarget createEKSTarget) throws ApiException {
        ApiResponse<CreateEKSTargetOutput> localVarResp = createEKSTargetWithHttpInfo(createEKSTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createEKSTarget  (required)
     * @return ApiResponse&lt;CreateEKSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEKSTargetOutput> createEKSTargetWithHttpInfo(CreateEKSTarget createEKSTarget) throws ApiException {
        okhttp3.Call localVarCall = createEKSTargetValidateBeforeCall(createEKSTarget, null);
        Type localVarReturnType = new TypeToken<CreateEKSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createEKSTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEKSTargetAsync(CreateEKSTarget createEKSTarget, final ApiCallback<CreateEKSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEKSTargetValidateBeforeCall(createEKSTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateEKSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createESM
     * @param createESM  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateExternalSecretsManagerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createESMCall(CreateESM createESM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createESM;

        // create path and map variables
        String localVarPath = "/create-esm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createESMValidateBeforeCall(CreateESM createESM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createESM' is set
        if (createESM == null) {
            throw new ApiException("Missing the required parameter 'createESM' when calling createESM(Async)");
        }

        return createESMCall(createESM, _callback);

    }

    /**
     * 
     * 
     * @param createESM  (required)
     * @return CreateESMOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateExternalSecretsManagerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateESMOutput createESM(CreateESM createESM) throws ApiException {
        ApiResponse<CreateESMOutput> localVarResp = createESMWithHttpInfo(createESM);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createESM  (required)
     * @return ApiResponse&lt;CreateESMOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateExternalSecretsManagerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateESMOutput> createESMWithHttpInfo(CreateESM createESM) throws ApiException {
        okhttp3.Call localVarCall = createESMValidateBeforeCall(createESM, null);
        Type localVarReturnType = new TypeToken<CreateESMOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createESM  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateExternalSecretsManagerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createESMAsync(CreateESM createESM, final ApiCallback<CreateESMOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createESMValidateBeforeCall(createESM, _callback);
        Type localVarReturnType = new TypeToken<CreateESMOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEventForwarder
     * @param createEventForwarder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventForwarderCall(CreateEventForwarder createEventForwarder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEventForwarder;

        // create path and map variables
        String localVarPath = "/create-event-forwarder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventForwarderValidateBeforeCall(CreateEventForwarder createEventForwarder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEventForwarder' is set
        if (createEventForwarder == null) {
            throw new ApiException("Missing the required parameter 'createEventForwarder' when calling createEventForwarder(Async)");
        }

        return createEventForwarderCall(createEventForwarder, _callback);

    }

    /**
     * 
     * 
     * @param createEventForwarder  (required)
     * @return CreateEventForwarderOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventForwarderOutput createEventForwarder(CreateEventForwarder createEventForwarder) throws ApiException {
        ApiResponse<CreateEventForwarderOutput> localVarResp = createEventForwarderWithHttpInfo(createEventForwarder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createEventForwarder  (required)
     * @return ApiResponse&lt;CreateEventForwarderOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventForwarderOutput> createEventForwarderWithHttpInfo(CreateEventForwarder createEventForwarder) throws ApiException {
        okhttp3.Call localVarCall = createEventForwarderValidateBeforeCall(createEventForwarder, null);
        Type localVarReturnType = new TypeToken<CreateEventForwarderOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createEventForwarder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventForwarderAsync(CreateEventForwarder createEventForwarder, final ApiCallback<CreateEventForwarderOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventForwarderValidateBeforeCall(createEventForwarder, _callback);
        Type localVarReturnType = new TypeToken<CreateEventForwarderOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGKETarget
     * @param createGKETarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGKETargetCall(CreateGKETarget createGKETarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGKETarget;

        // create path and map variables
        String localVarPath = "/create-gke-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGKETargetValidateBeforeCall(CreateGKETarget createGKETarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGKETarget' is set
        if (createGKETarget == null) {
            throw new ApiException("Missing the required parameter 'createGKETarget' when calling createGKETarget(Async)");
        }

        return createGKETargetCall(createGKETarget, _callback);

    }

    /**
     * 
     * 
     * @param createGKETarget  (required)
     * @return CreateGKETargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGKETargetOutput createGKETarget(CreateGKETarget createGKETarget) throws ApiException {
        ApiResponse<CreateGKETargetOutput> localVarResp = createGKETargetWithHttpInfo(createGKETarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGKETarget  (required)
     * @return ApiResponse&lt;CreateGKETargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGKETargetOutput> createGKETargetWithHttpInfo(CreateGKETarget createGKETarget) throws ApiException {
        okhttp3.Call localVarCall = createGKETargetValidateBeforeCall(createGKETarget, null);
        Type localVarReturnType = new TypeToken<CreateGKETargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGKETarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGKETargetAsync(CreateGKETarget createGKETarget, final ApiCallback<CreateGKETargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGKETargetValidateBeforeCall(createGKETarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGKETargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGcpTarget
     * @param createGcpTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGcpTargetCall(CreateGcpTarget createGcpTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGcpTarget;

        // create path and map variables
        String localVarPath = "/create-gcp-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGcpTargetValidateBeforeCall(CreateGcpTarget createGcpTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGcpTarget' is set
        if (createGcpTarget == null) {
            throw new ApiException("Missing the required parameter 'createGcpTarget' when calling createGcpTarget(Async)");
        }

        return createGcpTargetCall(createGcpTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGcpTarget  (required)
     * @return CreateGcpTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGcpTargetOutput createGcpTarget(CreateGcpTarget createGcpTarget) throws ApiException {
        ApiResponse<CreateGcpTargetOutput> localVarResp = createGcpTargetWithHttpInfo(createGcpTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGcpTarget  (required)
     * @return ApiResponse&lt;CreateGcpTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGcpTargetOutput> createGcpTargetWithHttpInfo(CreateGcpTarget createGcpTarget) throws ApiException {
        okhttp3.Call localVarCall = createGcpTargetValidateBeforeCall(createGcpTarget, null);
        Type localVarReturnType = new TypeToken<CreateGcpTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGcpTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGcpTargetAsync(CreateGcpTarget createGcpTarget, final ApiCallback<CreateGcpTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGcpTargetValidateBeforeCall(createGcpTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGcpTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGithubTarget
     * @param createGithubTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGithubTargetCall(CreateGithubTarget createGithubTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGithubTarget;

        // create path and map variables
        String localVarPath = "/create-github-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGithubTargetValidateBeforeCall(CreateGithubTarget createGithubTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGithubTarget' is set
        if (createGithubTarget == null) {
            throw new ApiException("Missing the required parameter 'createGithubTarget' when calling createGithubTarget(Async)");
        }

        return createGithubTargetCall(createGithubTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGithubTarget  (required)
     * @return CreateGithubTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGithubTargetOutput createGithubTarget(CreateGithubTarget createGithubTarget) throws ApiException {
        ApiResponse<CreateGithubTargetOutput> localVarResp = createGithubTargetWithHttpInfo(createGithubTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGithubTarget  (required)
     * @return ApiResponse&lt;CreateGithubTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGithubTargetOutput> createGithubTargetWithHttpInfo(CreateGithubTarget createGithubTarget) throws ApiException {
        okhttp3.Call localVarCall = createGithubTargetValidateBeforeCall(createGithubTarget, null);
        Type localVarReturnType = new TypeToken<CreateGithubTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGithubTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGithubTargetAsync(CreateGithubTarget createGithubTarget, final ApiCallback<CreateGithubTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGithubTargetValidateBeforeCall(createGithubTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGithubTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGitlabTarget
     * @param createGitlabTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGitlabTargetCall(CreateGitlabTarget createGitlabTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGitlabTarget;

        // create path and map variables
        String localVarPath = "/create-gitlab-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGitlabTargetValidateBeforeCall(CreateGitlabTarget createGitlabTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGitlabTarget' is set
        if (createGitlabTarget == null) {
            throw new ApiException("Missing the required parameter 'createGitlabTarget' when calling createGitlabTarget(Async)");
        }

        return createGitlabTargetCall(createGitlabTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGitlabTarget  (required)
     * @return CreateGitlabTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGitlabTargetOutput createGitlabTarget(CreateGitlabTarget createGitlabTarget) throws ApiException {
        ApiResponse<CreateGitlabTargetOutput> localVarResp = createGitlabTargetWithHttpInfo(createGitlabTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGitlabTarget  (required)
     * @return ApiResponse&lt;CreateGitlabTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGitlabTargetOutput> createGitlabTargetWithHttpInfo(CreateGitlabTarget createGitlabTarget) throws ApiException {
        okhttp3.Call localVarCall = createGitlabTargetValidateBeforeCall(createGitlabTarget, null);
        Type localVarReturnType = new TypeToken<CreateGitlabTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGitlabTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGitlabTargetAsync(CreateGitlabTarget createGitlabTarget, final ApiCallback<CreateGitlabTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGitlabTargetValidateBeforeCall(createGitlabTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGitlabTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGlobalSignAtlasTarget
     * @param createGlobalSignAtlasTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalSignAtlasTargetCall(CreateGlobalSignAtlasTarget createGlobalSignAtlasTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalSignAtlasTarget;

        // create path and map variables
        String localVarPath = "/create-globalsign-atlas-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGlobalSignAtlasTargetValidateBeforeCall(CreateGlobalSignAtlasTarget createGlobalSignAtlasTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGlobalSignAtlasTarget' is set
        if (createGlobalSignAtlasTarget == null) {
            throw new ApiException("Missing the required parameter 'createGlobalSignAtlasTarget' when calling createGlobalSignAtlasTarget(Async)");
        }

        return createGlobalSignAtlasTargetCall(createGlobalSignAtlasTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGlobalSignAtlasTarget  (required)
     * @return CreateGlobalSignAtlasTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalSignAtlasTargetOutput createGlobalSignAtlasTarget(CreateGlobalSignAtlasTarget createGlobalSignAtlasTarget) throws ApiException {
        ApiResponse<CreateGlobalSignAtlasTargetOutput> localVarResp = createGlobalSignAtlasTargetWithHttpInfo(createGlobalSignAtlasTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGlobalSignAtlasTarget  (required)
     * @return ApiResponse&lt;CreateGlobalSignAtlasTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalSignAtlasTargetOutput> createGlobalSignAtlasTargetWithHttpInfo(CreateGlobalSignAtlasTarget createGlobalSignAtlasTarget) throws ApiException {
        okhttp3.Call localVarCall = createGlobalSignAtlasTargetValidateBeforeCall(createGlobalSignAtlasTarget, null);
        Type localVarReturnType = new TypeToken<CreateGlobalSignAtlasTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGlobalSignAtlasTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalSignAtlasTargetAsync(CreateGlobalSignAtlasTarget createGlobalSignAtlasTarget, final ApiCallback<CreateGlobalSignAtlasTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGlobalSignAtlasTargetValidateBeforeCall(createGlobalSignAtlasTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalSignAtlasTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGlobalSignTarget
     * @param createGlobalSignTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalSignTargetCall(CreateGlobalSignTarget createGlobalSignTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalSignTarget;

        // create path and map variables
        String localVarPath = "/create-globalsign-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGlobalSignTargetValidateBeforeCall(CreateGlobalSignTarget createGlobalSignTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGlobalSignTarget' is set
        if (createGlobalSignTarget == null) {
            throw new ApiException("Missing the required parameter 'createGlobalSignTarget' when calling createGlobalSignTarget(Async)");
        }

        return createGlobalSignTargetCall(createGlobalSignTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGlobalSignTarget  (required)
     * @return CreateGlobalSignTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalSignTargetOutput createGlobalSignTarget(CreateGlobalSignTarget createGlobalSignTarget) throws ApiException {
        ApiResponse<CreateGlobalSignTargetOutput> localVarResp = createGlobalSignTargetWithHttpInfo(createGlobalSignTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGlobalSignTarget  (required)
     * @return ApiResponse&lt;CreateGlobalSignTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalSignTargetOutput> createGlobalSignTargetWithHttpInfo(CreateGlobalSignTarget createGlobalSignTarget) throws ApiException {
        okhttp3.Call localVarCall = createGlobalSignTargetValidateBeforeCall(createGlobalSignTarget, null);
        Type localVarReturnType = new TypeToken<CreateGlobalSignTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGlobalSignTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGlobalSignTargetAsync(CreateGlobalSignTarget createGlobalSignTarget, final ApiCallback<CreateGlobalSignTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGlobalSignTargetValidateBeforeCall(createGlobalSignTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalSignTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGodaddyTarget
     * @param createGodaddyTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGodaddyTargetCall(CreateGodaddyTarget createGodaddyTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGodaddyTarget;

        // create path and map variables
        String localVarPath = "/create-godaddy-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGodaddyTargetValidateBeforeCall(CreateGodaddyTarget createGodaddyTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGodaddyTarget' is set
        if (createGodaddyTarget == null) {
            throw new ApiException("Missing the required parameter 'createGodaddyTarget' when calling createGodaddyTarget(Async)");
        }

        return createGodaddyTargetCall(createGodaddyTarget, _callback);

    }

    /**
     * 
     * 
     * @param createGodaddyTarget  (required)
     * @return CreateGodaddyTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGodaddyTargetOutput createGodaddyTarget(CreateGodaddyTarget createGodaddyTarget) throws ApiException {
        ApiResponse<CreateGodaddyTargetOutput> localVarResp = createGodaddyTargetWithHttpInfo(createGodaddyTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGodaddyTarget  (required)
     * @return ApiResponse&lt;CreateGodaddyTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGodaddyTargetOutput> createGodaddyTargetWithHttpInfo(CreateGodaddyTarget createGodaddyTarget) throws ApiException {
        okhttp3.Call localVarCall = createGodaddyTargetValidateBeforeCall(createGodaddyTarget, null);
        Type localVarReturnType = new TypeToken<CreateGodaddyTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGodaddyTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGodaddyTargetAsync(CreateGodaddyTarget createGodaddyTarget, final ApiCallback<CreateGodaddyTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGodaddyTargetValidateBeforeCall(createGodaddyTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateGodaddyTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroup
     * @param createGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(CreateGroup createGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroup;

        // create path and map variables
        String localVarPath = "/create-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(CreateGroup createGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGroup' is set
        if (createGroup == null) {
            throw new ApiException("Missing the required parameter 'createGroup' when calling createGroup(Async)");
        }

        return createGroupCall(createGroup, _callback);

    }

    /**
     * 
     * 
     * @param createGroup  (required)
     * @return CreateGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupOutput createGroup(CreateGroup createGroup) throws ApiException {
        ApiResponse<CreateGroupOutput> localVarResp = createGroupWithHttpInfo(createGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createGroup  (required)
     * @return ApiResponse&lt;CreateGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupOutput> createGroupWithHttpInfo(CreateGroup createGroup) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroup, null);
        Type localVarReturnType = new TypeToken<CreateGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(CreateGroup createGroup, final ApiCallback<CreateGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroup, _callback);
        Type localVarReturnType = new TypeToken<CreateGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHashiVaultTarget
     * @param createHashiVaultTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHashiVaultTargetCall(CreateHashiVaultTarget createHashiVaultTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHashiVaultTarget;

        // create path and map variables
        String localVarPath = "/create-hashi-vault-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHashiVaultTargetValidateBeforeCall(CreateHashiVaultTarget createHashiVaultTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createHashiVaultTarget' is set
        if (createHashiVaultTarget == null) {
            throw new ApiException("Missing the required parameter 'createHashiVaultTarget' when calling createHashiVaultTarget(Async)");
        }

        return createHashiVaultTargetCall(createHashiVaultTarget, _callback);

    }

    /**
     * 
     * 
     * @param createHashiVaultTarget  (required)
     * @return CreateHashiVaultTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateHashiVaultTargetOutput createHashiVaultTarget(CreateHashiVaultTarget createHashiVaultTarget) throws ApiException {
        ApiResponse<CreateHashiVaultTargetOutput> localVarResp = createHashiVaultTargetWithHttpInfo(createHashiVaultTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createHashiVaultTarget  (required)
     * @return ApiResponse&lt;CreateHashiVaultTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHashiVaultTargetOutput> createHashiVaultTargetWithHttpInfo(CreateHashiVaultTarget createHashiVaultTarget) throws ApiException {
        okhttp3.Call localVarCall = createHashiVaultTargetValidateBeforeCall(createHashiVaultTarget, null);
        Type localVarReturnType = new TypeToken<CreateHashiVaultTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createHashiVaultTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHashiVaultTargetAsync(CreateHashiVaultTarget createHashiVaultTarget, final ApiCallback<CreateHashiVaultTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHashiVaultTargetValidateBeforeCall(createHashiVaultTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateHashiVaultTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKey
     * @param createKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyCall(CreateKey createKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKey;

        // create path and map variables
        String localVarPath = "/create-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyValidateBeforeCall(CreateKey createKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createKey' is set
        if (createKey == null) {
            throw new ApiException("Missing the required parameter 'createKey' when calling createKey(Async)");
        }

        return createKeyCall(createKey, _callback);

    }

    /**
     * 
     * 
     * @param createKey  (required)
     * @return CreateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateKeyOutput createKey(CreateKey createKey) throws ApiException {
        ApiResponse<CreateKeyOutput> localVarResp = createKeyWithHttpInfo(createKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createKey  (required)
     * @return ApiResponse&lt;CreateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateKeyOutput> createKeyWithHttpInfo(CreateKey createKey) throws ApiException {
        okhttp3.Call localVarCall = createKeyValidateBeforeCall(createKey, null);
        Type localVarReturnType = new TypeToken<CreateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyAsync(CreateKey createKey, final ApiCallback<CreateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyValidateBeforeCall(createKey, _callback);
        Type localVarReturnType = new TypeToken<CreateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLinkedTarget
     * @param createLinkedTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkedTargetCall(CreateLinkedTarget createLinkedTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLinkedTarget;

        // create path and map variables
        String localVarPath = "/create-linked-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkedTargetValidateBeforeCall(CreateLinkedTarget createLinkedTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLinkedTarget' is set
        if (createLinkedTarget == null) {
            throw new ApiException("Missing the required parameter 'createLinkedTarget' when calling createLinkedTarget(Async)");
        }

        return createLinkedTargetCall(createLinkedTarget, _callback);

    }

    /**
     * 
     * 
     * @param createLinkedTarget  (required)
     * @return CreateLinkedTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateLinkedTargetOutput createLinkedTarget(CreateLinkedTarget createLinkedTarget) throws ApiException {
        ApiResponse<CreateLinkedTargetOutput> localVarResp = createLinkedTargetWithHttpInfo(createLinkedTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createLinkedTarget  (required)
     * @return ApiResponse&lt;CreateLinkedTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLinkedTargetOutput> createLinkedTargetWithHttpInfo(CreateLinkedTarget createLinkedTarget) throws ApiException {
        okhttp3.Call localVarCall = createLinkedTargetValidateBeforeCall(createLinkedTarget, null);
        Type localVarReturnType = new TypeToken<CreateLinkedTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createLinkedTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkedTargetAsync(CreateLinkedTarget createLinkedTarget, final ApiCallback<CreateLinkedTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkedTargetValidateBeforeCall(createLinkedTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateLinkedTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNativeK8STarget
     * @param createNativeK8STarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNativeK8STargetCall(CreateNativeK8STarget createNativeK8STarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createNativeK8STarget;

        // create path and map variables
        String localVarPath = "/create-k8s-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNativeK8STargetValidateBeforeCall(CreateNativeK8STarget createNativeK8STarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createNativeK8STarget' is set
        if (createNativeK8STarget == null) {
            throw new ApiException("Missing the required parameter 'createNativeK8STarget' when calling createNativeK8STarget(Async)");
        }

        return createNativeK8STargetCall(createNativeK8STarget, _callback);

    }

    /**
     * 
     * 
     * @param createNativeK8STarget  (required)
     * @return CreateNativeK8STargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNativeK8STargetOutput createNativeK8STarget(CreateNativeK8STarget createNativeK8STarget) throws ApiException {
        ApiResponse<CreateNativeK8STargetOutput> localVarResp = createNativeK8STargetWithHttpInfo(createNativeK8STarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createNativeK8STarget  (required)
     * @return ApiResponse&lt;CreateNativeK8STargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNativeK8STargetOutput> createNativeK8STargetWithHttpInfo(CreateNativeK8STarget createNativeK8STarget) throws ApiException {
        okhttp3.Call localVarCall = createNativeK8STargetValidateBeforeCall(createNativeK8STarget, null);
        Type localVarReturnType = new TypeToken<CreateNativeK8STargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createNativeK8STarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNativeK8STargetAsync(CreateNativeK8STarget createNativeK8STarget, final ApiCallback<CreateNativeK8STargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNativeK8STargetValidateBeforeCall(createNativeK8STarget, _callback);
        Type localVarReturnType = new TypeToken<CreateNativeK8STargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOidcApp
     * @param createOidcApp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOidcAppCall(CreateOidcApp createOidcApp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOidcApp;

        // create path and map variables
        String localVarPath = "/create-oidc-app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOidcAppValidateBeforeCall(CreateOidcApp createOidcApp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOidcApp' is set
        if (createOidcApp == null) {
            throw new ApiException("Missing the required parameter 'createOidcApp' when calling createOidcApp(Async)");
        }

        return createOidcAppCall(createOidcApp, _callback);

    }

    /**
     * 
     * 
     * @param createOidcApp  (required)
     * @return CreateOidcAppOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateOidcAppOutput createOidcApp(CreateOidcApp createOidcApp) throws ApiException {
        ApiResponse<CreateOidcAppOutput> localVarResp = createOidcAppWithHttpInfo(createOidcApp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createOidcApp  (required)
     * @return ApiResponse&lt;CreateOidcAppOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOidcAppOutput> createOidcAppWithHttpInfo(CreateOidcApp createOidcApp) throws ApiException {
        okhttp3.Call localVarCall = createOidcAppValidateBeforeCall(createOidcApp, null);
        Type localVarReturnType = new TypeToken<CreateOidcAppOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createOidcApp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOidcAppAsync(CreateOidcApp createOidcApp, final ApiCallback<CreateOidcAppOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOidcAppValidateBeforeCall(createOidcApp, _callback);
        Type localVarReturnType = new TypeToken<CreateOidcAppOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPKICertIssuer
     * @param createPKICertIssuer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPKICertIssuerCall(CreatePKICertIssuer createPKICertIssuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPKICertIssuer;

        // create path and map variables
        String localVarPath = "/create-pki-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPKICertIssuerValidateBeforeCall(CreatePKICertIssuer createPKICertIssuer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPKICertIssuer' is set
        if (createPKICertIssuer == null) {
            throw new ApiException("Missing the required parameter 'createPKICertIssuer' when calling createPKICertIssuer(Async)");
        }

        return createPKICertIssuerCall(createPKICertIssuer, _callback);

    }

    /**
     * 
     * 
     * @param createPKICertIssuer  (required)
     * @return CreatePKICertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePKICertIssuerOutput createPKICertIssuer(CreatePKICertIssuer createPKICertIssuer) throws ApiException {
        ApiResponse<CreatePKICertIssuerOutput> localVarResp = createPKICertIssuerWithHttpInfo(createPKICertIssuer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createPKICertIssuer  (required)
     * @return ApiResponse&lt;CreatePKICertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePKICertIssuerOutput> createPKICertIssuerWithHttpInfo(CreatePKICertIssuer createPKICertIssuer) throws ApiException {
        okhttp3.Call localVarCall = createPKICertIssuerValidateBeforeCall(createPKICertIssuer, null);
        Type localVarReturnType = new TypeToken<CreatePKICertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createPKICertIssuer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPKICertIssuerAsync(CreatePKICertIssuer createPKICertIssuer, final ApiCallback<CreatePKICertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPKICertIssuerValidateBeforeCall(createPKICertIssuer, _callback);
        Type localVarReturnType = new TypeToken<CreatePKICertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPasskey
     * @param createPasskey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreatePasskeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPasskeyCall(CreatePasskey createPasskey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPasskey;

        // create path and map variables
        String localVarPath = "/create-passkey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPasskeyValidateBeforeCall(CreatePasskey createPasskey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPasskey' is set
        if (createPasskey == null) {
            throw new ApiException("Missing the required parameter 'createPasskey' when calling createPasskey(Async)");
        }

        return createPasskeyCall(createPasskey, _callback);

    }

    /**
     * 
     * 
     * @param createPasskey  (required)
     * @return CreatePasskeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreatePasskeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePasskeyOutput createPasskey(CreatePasskey createPasskey) throws ApiException {
        ApiResponse<CreatePasskeyOutput> localVarResp = createPasskeyWithHttpInfo(createPasskey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createPasskey  (required)
     * @return ApiResponse&lt;CreatePasskeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreatePasskeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePasskeyOutput> createPasskeyWithHttpInfo(CreatePasskey createPasskey) throws ApiException {
        okhttp3.Call localVarCall = createPasskeyValidateBeforeCall(createPasskey, null);
        Type localVarReturnType = new TypeToken<CreatePasskeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createPasskey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreatePasskeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPasskeyAsync(CreatePasskey createPasskey, final ApiCallback<CreatePasskeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPasskeyValidateBeforeCall(createPasskey, _callback);
        Type localVarReturnType = new TypeToken<CreatePasskeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPingTarget
     * @param createPingTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPingTargetCall(CreatePingTarget createPingTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPingTarget;

        // create path and map variables
        String localVarPath = "/create-ping-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPingTargetValidateBeforeCall(CreatePingTarget createPingTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPingTarget' is set
        if (createPingTarget == null) {
            throw new ApiException("Missing the required parameter 'createPingTarget' when calling createPingTarget(Async)");
        }

        return createPingTargetCall(createPingTarget, _callback);

    }

    /**
     * 
     * 
     * @param createPingTarget  (required)
     * @return CreatePingTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePingTargetOutput createPingTarget(CreatePingTarget createPingTarget) throws ApiException {
        ApiResponse<CreatePingTargetOutput> localVarResp = createPingTargetWithHttpInfo(createPingTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createPingTarget  (required)
     * @return ApiResponse&lt;CreatePingTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePingTargetOutput> createPingTargetWithHttpInfo(CreatePingTarget createPingTarget) throws ApiException {
        okhttp3.Call localVarCall = createPingTargetValidateBeforeCall(createPingTarget, null);
        Type localVarReturnType = new TypeToken<CreatePingTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createPingTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPingTargetAsync(CreatePingTarget createPingTarget, final ApiCallback<CreatePingTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPingTargetValidateBeforeCall(createPingTarget, _callback);
        Type localVarReturnType = new TypeToken<CreatePingTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRabbitMQTarget
     * @param createRabbitMQTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRabbitMQTargetCall(CreateRabbitMQTarget createRabbitMQTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRabbitMQTarget;

        // create path and map variables
        String localVarPath = "/create-rabbitmq-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRabbitMQTargetValidateBeforeCall(CreateRabbitMQTarget createRabbitMQTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRabbitMQTarget' is set
        if (createRabbitMQTarget == null) {
            throw new ApiException("Missing the required parameter 'createRabbitMQTarget' when calling createRabbitMQTarget(Async)");
        }

        return createRabbitMQTargetCall(createRabbitMQTarget, _callback);

    }

    /**
     * 
     * 
     * @param createRabbitMQTarget  (required)
     * @return CreateRabbitMQTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRabbitMQTargetOutput createRabbitMQTarget(CreateRabbitMQTarget createRabbitMQTarget) throws ApiException {
        ApiResponse<CreateRabbitMQTargetOutput> localVarResp = createRabbitMQTargetWithHttpInfo(createRabbitMQTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createRabbitMQTarget  (required)
     * @return ApiResponse&lt;CreateRabbitMQTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRabbitMQTargetOutput> createRabbitMQTargetWithHttpInfo(CreateRabbitMQTarget createRabbitMQTarget) throws ApiException {
        okhttp3.Call localVarCall = createRabbitMQTargetValidateBeforeCall(createRabbitMQTarget, null);
        Type localVarReturnType = new TypeToken<CreateRabbitMQTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createRabbitMQTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRabbitMQTargetAsync(CreateRabbitMQTarget createRabbitMQTarget, final ApiCallback<CreateRabbitMQTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRabbitMQTargetValidateBeforeCall(createRabbitMQTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateRabbitMQTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param createRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(CreateRole createRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRole;

        // create path and map variables
        String localVarPath = "/create-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(CreateRole createRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRole' is set
        if (createRole == null) {
            throw new ApiException("Missing the required parameter 'createRole' when calling createRole(Async)");
        }

        return createRoleCall(createRole, _callback);

    }

    /**
     * 
     * 
     * @param createRole  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object createRole(CreateRole createRole) throws ApiException {
        ApiResponse<Object> localVarResp = createRoleWithHttpInfo(createRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createRole  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createRoleWithHttpInfo(CreateRole createRole) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createRole, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(CreateRole createRole, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createRole, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRotatedSecret
     * @param createRotatedSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRotatedSecretCall(CreateRotatedSecret createRotatedSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRotatedSecret;

        // create path and map variables
        String localVarPath = "/create-rotated-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRotatedSecretValidateBeforeCall(CreateRotatedSecret createRotatedSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRotatedSecret' is set
        if (createRotatedSecret == null) {
            throw new ApiException("Missing the required parameter 'createRotatedSecret' when calling createRotatedSecret(Async)");
        }

        return createRotatedSecretCall(createRotatedSecret, _callback);

    }

    /**
     * 
     * 
     * @param createRotatedSecret  (required)
     * @return CreateRotatedSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRotatedSecretOutput createRotatedSecret(CreateRotatedSecret createRotatedSecret) throws ApiException {
        ApiResponse<CreateRotatedSecretOutput> localVarResp = createRotatedSecretWithHttpInfo(createRotatedSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createRotatedSecret  (required)
     * @return ApiResponse&lt;CreateRotatedSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRotatedSecretOutput> createRotatedSecretWithHttpInfo(CreateRotatedSecret createRotatedSecret) throws ApiException {
        okhttp3.Call localVarCall = createRotatedSecretValidateBeforeCall(createRotatedSecret, null);
        Type localVarReturnType = new TypeToken<CreateRotatedSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createRotatedSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRotatedSecretAsync(CreateRotatedSecret createRotatedSecret, final ApiCallback<CreateRotatedSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRotatedSecretValidateBeforeCall(createRotatedSecret, _callback);
        Type localVarReturnType = new TypeToken<CreateRotatedSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSSHCertIssuer
     * @param createSSHCertIssuer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHCertIssuerCall(CreateSSHCertIssuer createSSHCertIssuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSSHCertIssuer;

        // create path and map variables
        String localVarPath = "/create-ssh-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSSHCertIssuerValidateBeforeCall(CreateSSHCertIssuer createSSHCertIssuer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSSHCertIssuer' is set
        if (createSSHCertIssuer == null) {
            throw new ApiException("Missing the required parameter 'createSSHCertIssuer' when calling createSSHCertIssuer(Async)");
        }

        return createSSHCertIssuerCall(createSSHCertIssuer, _callback);

    }

    /**
     * 
     * 
     * @param createSSHCertIssuer  (required)
     * @return CreateSSHCertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSSHCertIssuerOutput createSSHCertIssuer(CreateSSHCertIssuer createSSHCertIssuer) throws ApiException {
        ApiResponse<CreateSSHCertIssuerOutput> localVarResp = createSSHCertIssuerWithHttpInfo(createSSHCertIssuer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createSSHCertIssuer  (required)
     * @return ApiResponse&lt;CreateSSHCertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSSHCertIssuerOutput> createSSHCertIssuerWithHttpInfo(CreateSSHCertIssuer createSSHCertIssuer) throws ApiException {
        okhttp3.Call localVarCall = createSSHCertIssuerValidateBeforeCall(createSSHCertIssuer, null);
        Type localVarReturnType = new TypeToken<CreateSSHCertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createSSHCertIssuer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHCertIssuerAsync(CreateSSHCertIssuer createSSHCertIssuer, final ApiCallback<CreateSSHCertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSSHCertIssuerValidateBeforeCall(createSSHCertIssuer, _callback);
        Type localVarReturnType = new TypeToken<CreateSSHCertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSSHTarget
     * @param createSSHTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHTargetCall(CreateSSHTarget createSSHTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSSHTarget;

        // create path and map variables
        String localVarPath = "/create-ssh-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSSHTargetValidateBeforeCall(CreateSSHTarget createSSHTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSSHTarget' is set
        if (createSSHTarget == null) {
            throw new ApiException("Missing the required parameter 'createSSHTarget' when calling createSSHTarget(Async)");
        }

        return createSSHTargetCall(createSSHTarget, _callback);

    }

    /**
     * 
     * 
     * @param createSSHTarget  (required)
     * @return CreateSSHTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSSHTargetOutput createSSHTarget(CreateSSHTarget createSSHTarget) throws ApiException {
        ApiResponse<CreateSSHTargetOutput> localVarResp = createSSHTargetWithHttpInfo(createSSHTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createSSHTarget  (required)
     * @return ApiResponse&lt;CreateSSHTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSSHTargetOutput> createSSHTargetWithHttpInfo(CreateSSHTarget createSSHTarget) throws ApiException {
        okhttp3.Call localVarCall = createSSHTargetValidateBeforeCall(createSSHTarget, null);
        Type localVarReturnType = new TypeToken<CreateSSHTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createSSHTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHTargetAsync(CreateSSHTarget createSSHTarget, final ApiCallback<CreateSSHTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSSHTargetValidateBeforeCall(createSSHTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateSSHTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSalesforceTarget
     * @param createSalesforceTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSalesforceTargetCall(CreateSalesforceTarget createSalesforceTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSalesforceTarget;

        // create path and map variables
        String localVarPath = "/create-salesforce-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSalesforceTargetValidateBeforeCall(CreateSalesforceTarget createSalesforceTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSalesforceTarget' is set
        if (createSalesforceTarget == null) {
            throw new ApiException("Missing the required parameter 'createSalesforceTarget' when calling createSalesforceTarget(Async)");
        }

        return createSalesforceTargetCall(createSalesforceTarget, _callback);

    }

    /**
     * 
     * 
     * @param createSalesforceTarget  (required)
     * @return CreateSalesforceTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSalesforceTargetOutput createSalesforceTarget(CreateSalesforceTarget createSalesforceTarget) throws ApiException {
        ApiResponse<CreateSalesforceTargetOutput> localVarResp = createSalesforceTargetWithHttpInfo(createSalesforceTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createSalesforceTarget  (required)
     * @return ApiResponse&lt;CreateSalesforceTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSalesforceTargetOutput> createSalesforceTargetWithHttpInfo(CreateSalesforceTarget createSalesforceTarget) throws ApiException {
        okhttp3.Call localVarCall = createSalesforceTargetValidateBeforeCall(createSalesforceTarget, null);
        Type localVarReturnType = new TypeToken<CreateSalesforceTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createSalesforceTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSalesforceTargetAsync(CreateSalesforceTarget createSalesforceTarget, final ApiCallback<CreateSalesforceTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSalesforceTargetValidateBeforeCall(createSalesforceTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateSalesforceTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSecret
     * @param createSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSecretCall(CreateSecret createSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSecret;

        // create path and map variables
        String localVarPath = "/create-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecretValidateBeforeCall(CreateSecret createSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSecret' is set
        if (createSecret == null) {
            throw new ApiException("Missing the required parameter 'createSecret' when calling createSecret(Async)");
        }

        return createSecretCall(createSecret, _callback);

    }

    /**
     * 
     * 
     * @param createSecret  (required)
     * @return CreateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSecretOutput createSecret(CreateSecret createSecret) throws ApiException {
        ApiResponse<CreateSecretOutput> localVarResp = createSecretWithHttpInfo(createSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createSecret  (required)
     * @return ApiResponse&lt;CreateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSecretOutput> createSecretWithHttpInfo(CreateSecret createSecret) throws ApiException {
        okhttp3.Call localVarCall = createSecretValidateBeforeCall(createSecret, null);
        Type localVarReturnType = new TypeToken<CreateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSecretAsync(CreateSecret createSecret, final ApiCallback<CreateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecretValidateBeforeCall(createSecret, _callback);
        Type localVarReturnType = new TypeToken<CreateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTokenizer
     * @param createTokenizer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createTokenizerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenizerCall(CreateTokenizer createTokenizer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTokenizer;

        // create path and map variables
        String localVarPath = "/create-tokenizer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTokenizerValidateBeforeCall(CreateTokenizer createTokenizer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTokenizer' is set
        if (createTokenizer == null) {
            throw new ApiException("Missing the required parameter 'createTokenizer' when calling createTokenizer(Async)");
        }

        return createTokenizerCall(createTokenizer, _callback);

    }

    /**
     * 
     * 
     * @param createTokenizer  (required)
     * @return CreateTokenizerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createTokenizerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTokenizerOutput createTokenizer(CreateTokenizer createTokenizer) throws ApiException {
        ApiResponse<CreateTokenizerOutput> localVarResp = createTokenizerWithHttpInfo(createTokenizer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createTokenizer  (required)
     * @return ApiResponse&lt;CreateTokenizerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createTokenizerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTokenizerOutput> createTokenizerWithHttpInfo(CreateTokenizer createTokenizer) throws ApiException {
        okhttp3.Call localVarCall = createTokenizerValidateBeforeCall(createTokenizer, null);
        Type localVarReturnType = new TypeToken<CreateTokenizerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createTokenizer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createTokenizerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTokenizerAsync(CreateTokenizer createTokenizer, final ApiCallback<CreateTokenizerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTokenizerValidateBeforeCall(createTokenizer, _callback);
        Type localVarReturnType = new TypeToken<CreateTokenizerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUSC
     * @param createUSC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateUniversalSecretsConnectorResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUSCCall(CreateUSC createUSC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUSC;

        // create path and map variables
        String localVarPath = "/create-usc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUSCValidateBeforeCall(CreateUSC createUSC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUSC' is set
        if (createUSC == null) {
            throw new ApiException("Missing the required parameter 'createUSC' when calling createUSC(Async)");
        }

        return createUSCCall(createUSC, _callback);

    }

    /**
     * 
     * 
     * @param createUSC  (required)
     * @return CreateUSCOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateUniversalSecretsConnectorResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateUSCOutput createUSC(CreateUSC createUSC) throws ApiException {
        ApiResponse<CreateUSCOutput> localVarResp = createUSCWithHttpInfo(createUSC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createUSC  (required)
     * @return ApiResponse&lt;CreateUSCOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateUniversalSecretsConnectorResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUSCOutput> createUSCWithHttpInfo(CreateUSC createUSC) throws ApiException {
        okhttp3.Call localVarCall = createUSCValidateBeforeCall(createUSC, null);
        Type localVarReturnType = new TypeToken<CreateUSCOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createUSC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateUniversalSecretsConnectorResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUSCAsync(CreateUSC createUSC, final ApiCallback<CreateUSCOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUSCValidateBeforeCall(createUSC, _callback);
        Type localVarReturnType = new TypeToken<CreateUSCOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserEvent
     * @param createUserEvent  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUserEventResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEventCall(CreateUserEvent createUserEvent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserEvent;

        // create path and map variables
        String localVarPath = "/create-user-event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserEventValidateBeforeCall(CreateUserEvent createUserEvent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserEvent' is set
        if (createUserEvent == null) {
            throw new ApiException("Missing the required parameter 'createUserEvent' when calling createUserEvent(Async)");
        }

        return createUserEventCall(createUserEvent, _callback);

    }

    /**
     * 
     * 
     * @param createUserEvent  (required)
     * @return CreateUserEventOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUserEventResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserEventOutput createUserEvent(CreateUserEvent createUserEvent) throws ApiException {
        ApiResponse<CreateUserEventOutput> localVarResp = createUserEventWithHttpInfo(createUserEvent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createUserEvent  (required)
     * @return ApiResponse&lt;CreateUserEventOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUserEventResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserEventOutput> createUserEventWithHttpInfo(CreateUserEvent createUserEvent) throws ApiException {
        okhttp3.Call localVarCall = createUserEventValidateBeforeCall(createUserEvent, null);
        Type localVarReturnType = new TypeToken<CreateUserEventOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createUserEvent  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUserEventResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserEventAsync(CreateUserEvent createUserEvent, final ApiCallback<CreateUserEventOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserEventValidateBeforeCall(createUserEvent, _callback);
        Type localVarReturnType = new TypeToken<CreateUserEventOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebTarget
     * @param createWebTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebTargetCall(CreateWebTarget createWebTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebTarget;

        // create path and map variables
        String localVarPath = "/create-web-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebTargetValidateBeforeCall(CreateWebTarget createWebTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWebTarget' is set
        if (createWebTarget == null) {
            throw new ApiException("Missing the required parameter 'createWebTarget' when calling createWebTarget(Async)");
        }

        return createWebTargetCall(createWebTarget, _callback);

    }

    /**
     * 
     * 
     * @param createWebTarget  (required)
     * @return CreateWebTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebTargetOutput createWebTarget(CreateWebTarget createWebTarget) throws ApiException {
        ApiResponse<CreateWebTargetOutput> localVarResp = createWebTargetWithHttpInfo(createWebTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createWebTarget  (required)
     * @return ApiResponse&lt;CreateWebTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWebTargetOutput> createWebTargetWithHttpInfo(CreateWebTarget createWebTarget) throws ApiException {
        okhttp3.Call localVarCall = createWebTargetValidateBeforeCall(createWebTarget, null);
        Type localVarReturnType = new TypeToken<CreateWebTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createWebTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebTargetAsync(CreateWebTarget createWebTarget, final ApiCallback<CreateWebTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebTargetValidateBeforeCall(createWebTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateWebTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWindowsTarget
     * @param createWindowsTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWindowsTargetCall(CreateWindowsTarget createWindowsTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWindowsTarget;

        // create path and map variables
        String localVarPath = "/create-windows-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWindowsTargetValidateBeforeCall(CreateWindowsTarget createWindowsTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWindowsTarget' is set
        if (createWindowsTarget == null) {
            throw new ApiException("Missing the required parameter 'createWindowsTarget' when calling createWindowsTarget(Async)");
        }

        return createWindowsTargetCall(createWindowsTarget, _callback);

    }

    /**
     * 
     * 
     * @param createWindowsTarget  (required)
     * @return CreateWindowsTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWindowsTargetOutput createWindowsTarget(CreateWindowsTarget createWindowsTarget) throws ApiException {
        ApiResponse<CreateWindowsTargetOutput> localVarResp = createWindowsTargetWithHttpInfo(createWindowsTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createWindowsTarget  (required)
     * @return ApiResponse&lt;CreateWindowsTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWindowsTargetOutput> createWindowsTargetWithHttpInfo(CreateWindowsTarget createWindowsTarget) throws ApiException {
        okhttp3.Call localVarCall = createWindowsTargetValidateBeforeCall(createWindowsTarget, null);
        Type localVarReturnType = new TypeToken<CreateWindowsTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createWindowsTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWindowsTargetAsync(CreateWindowsTarget createWindowsTarget, final ApiCallback<CreateWindowsTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWindowsTargetValidateBeforeCall(createWindowsTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateWindowsTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createZeroSSLTarget
     * @param createZeroSSLTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZeroSSLTargetCall(CreateZeroSSLTarget createZeroSSLTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createZeroSSLTarget;

        // create path and map variables
        String localVarPath = "/create-zerossl-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createZeroSSLTargetValidateBeforeCall(CreateZeroSSLTarget createZeroSSLTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createZeroSSLTarget' is set
        if (createZeroSSLTarget == null) {
            throw new ApiException("Missing the required parameter 'createZeroSSLTarget' when calling createZeroSSLTarget(Async)");
        }

        return createZeroSSLTargetCall(createZeroSSLTarget, _callback);

    }

    /**
     * 
     * 
     * @param createZeroSSLTarget  (required)
     * @return CreateZeroSSLTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateZeroSSLTargetOutput createZeroSSLTarget(CreateZeroSSLTarget createZeroSSLTarget) throws ApiException {
        ApiResponse<CreateZeroSSLTargetOutput> localVarResp = createZeroSSLTargetWithHttpInfo(createZeroSSLTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createZeroSSLTarget  (required)
     * @return ApiResponse&lt;CreateZeroSSLTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateZeroSSLTargetOutput> createZeroSSLTargetWithHttpInfo(CreateZeroSSLTarget createZeroSSLTarget) throws ApiException {
        okhttp3.Call localVarCall = createZeroSSLTargetValidateBeforeCall(createZeroSSLTarget, null);
        Type localVarReturnType = new TypeToken<CreateZeroSSLTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createZeroSSLTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createZeroSSLTargetAsync(CreateZeroSSLTarget createZeroSSLTarget, final ApiCallback<CreateZeroSSLTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createZeroSSLTargetValidateBeforeCall(createZeroSSLTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateZeroSSLTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createldapTarget
     * @param createLdapTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createldapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createldapTargetCall(CreateLdapTarget createLdapTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLdapTarget;

        // create path and map variables
        String localVarPath = "/create-ldap-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createldapTargetValidateBeforeCall(CreateLdapTarget createLdapTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createLdapTarget' is set
        if (createLdapTarget == null) {
            throw new ApiException("Missing the required parameter 'createLdapTarget' when calling createldapTarget(Async)");
        }

        return createldapTargetCall(createLdapTarget, _callback);

    }

    /**
     * 
     * 
     * @param createLdapTarget  (required)
     * @return CreateLdapTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createldapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateLdapTargetOutput createldapTarget(CreateLdapTarget createLdapTarget) throws ApiException {
        ApiResponse<CreateLdapTargetOutput> localVarResp = createldapTargetWithHttpInfo(createLdapTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createLdapTarget  (required)
     * @return ApiResponse&lt;CreateLdapTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createldapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateLdapTargetOutput> createldapTargetWithHttpInfo(CreateLdapTarget createLdapTarget) throws ApiException {
        okhttp3.Call localVarCall = createldapTargetValidateBeforeCall(createLdapTarget, null);
        Type localVarReturnType = new TypeToken<CreateLdapTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createLdapTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createldapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createldapTargetAsync(CreateLdapTarget createLdapTarget, final ApiCallback<CreateLdapTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createldapTargetValidateBeforeCall(createLdapTarget, _callback);
        Type localVarReturnType = new TypeToken<CreateLdapTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivateAcmeAccount
     * @param deactivateAcmeAccount  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deactivateAcmeAccountResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateAcmeAccountCall(DeactivateAcmeAccount deactivateAcmeAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deactivateAcmeAccount;

        // create path and map variables
        String localVarPath = "/deactivate-acme-account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateAcmeAccountValidateBeforeCall(DeactivateAcmeAccount deactivateAcmeAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deactivateAcmeAccount' is set
        if (deactivateAcmeAccount == null) {
            throw new ApiException("Missing the required parameter 'deactivateAcmeAccount' when calling deactivateAcmeAccount(Async)");
        }

        return deactivateAcmeAccountCall(deactivateAcmeAccount, _callback);

    }

    /**
     * 
     * 
     * @param deactivateAcmeAccount  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deactivateAcmeAccountResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deactivateAcmeAccount(DeactivateAcmeAccount deactivateAcmeAccount) throws ApiException {
        ApiResponse<Object> localVarResp = deactivateAcmeAccountWithHttpInfo(deactivateAcmeAccount);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deactivateAcmeAccount  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deactivateAcmeAccountResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deactivateAcmeAccountWithHttpInfo(DeactivateAcmeAccount deactivateAcmeAccount) throws ApiException {
        okhttp3.Call localVarCall = deactivateAcmeAccountValidateBeforeCall(deactivateAcmeAccount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deactivateAcmeAccount  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deactivateAcmeAccountResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateAcmeAccountAsync(DeactivateAcmeAccount deactivateAcmeAccount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateAcmeAccountValidateBeforeCall(deactivateAcmeAccount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decrypt
     * @param decrypt  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptCall(Decrypt decrypt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decrypt;

        // create path and map variables
        String localVarPath = "/decrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptValidateBeforeCall(Decrypt decrypt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decrypt' is set
        if (decrypt == null) {
            throw new ApiException("Missing the required parameter 'decrypt' when calling decrypt(Async)");
        }

        return decryptCall(decrypt, _callback);

    }

    /**
     * 
     * 
     * @param decrypt  (required)
     * @return DecryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptOutput decrypt(Decrypt decrypt) throws ApiException {
        ApiResponse<DecryptOutput> localVarResp = decryptWithHttpInfo(decrypt);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param decrypt  (required)
     * @return ApiResponse&lt;DecryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptOutput> decryptWithHttpInfo(Decrypt decrypt) throws ApiException {
        okhttp3.Call localVarCall = decryptValidateBeforeCall(decrypt, null);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param decrypt  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptAsync(Decrypt decrypt, final ApiCallback<DecryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptValidateBeforeCall(decrypt, _callback);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptBatch
     * @param batchEncryptionRequestLine  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptBatchCall(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchEncryptionRequestLine;

        // create path and map variables
        String localVarPath = "/decrypt-batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptBatchValidateBeforeCall(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchEncryptionRequestLine' is set
        if (batchEncryptionRequestLine == null) {
            throw new ApiException("Missing the required parameter 'batchEncryptionRequestLine' when calling decryptBatch(Async)");
        }

        return decryptBatchCall(batchEncryptionRequestLine, _callback);

    }

    /**
     * 
     * 
     * @param batchEncryptionRequestLine  (required)
     * @return DecryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptOutput decryptBatch(List<BatchEncryptionRequestLine> batchEncryptionRequestLine) throws ApiException {
        ApiResponse<DecryptOutput> localVarResp = decryptBatchWithHttpInfo(batchEncryptionRequestLine);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batchEncryptionRequestLine  (required)
     * @return ApiResponse&lt;DecryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptOutput> decryptBatchWithHttpInfo(List<BatchEncryptionRequestLine> batchEncryptionRequestLine) throws ApiException {
        okhttp3.Call localVarCall = decryptBatchValidateBeforeCall(batchEncryptionRequestLine, null);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batchEncryptionRequestLine  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptBatchAsync(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback<DecryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptBatchValidateBeforeCall(batchEncryptionRequestLine, _callback);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptGPG
     * @param decryptGPG  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptGPGCall(DecryptGPG decryptGPG, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decryptGPG;

        // create path and map variables
        String localVarPath = "/decrypt-gpg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptGPGValidateBeforeCall(DecryptGPG decryptGPG, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decryptGPG' is set
        if (decryptGPG == null) {
            throw new ApiException("Missing the required parameter 'decryptGPG' when calling decryptGPG(Async)");
        }

        return decryptGPGCall(decryptGPG, _callback);

    }

    /**
     * 
     * 
     * @param decryptGPG  (required)
     * @return DecryptGPGOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptGPGOutput decryptGPG(DecryptGPG decryptGPG) throws ApiException {
        ApiResponse<DecryptGPGOutput> localVarResp = decryptGPGWithHttpInfo(decryptGPG);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param decryptGPG  (required)
     * @return ApiResponse&lt;DecryptGPGOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptGPGOutput> decryptGPGWithHttpInfo(DecryptGPG decryptGPG) throws ApiException {
        okhttp3.Call localVarCall = decryptGPGValidateBeforeCall(decryptGPG, null);
        Type localVarReturnType = new TypeToken<DecryptGPGOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param decryptGPG  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptGPGAsync(DecryptGPG decryptGPG, final ApiCallback<DecryptGPGOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptGPGValidateBeforeCall(decryptGPG, _callback);
        Type localVarReturnType = new TypeToken<DecryptGPGOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptPKCS1
     * @param decryptPKCS1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptPKCS1Call(DecryptPKCS1 decryptPKCS1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decryptPKCS1;

        // create path and map variables
        String localVarPath = "/decrypt-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptPKCS1ValidateBeforeCall(DecryptPKCS1 decryptPKCS1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decryptPKCS1' is set
        if (decryptPKCS1 == null) {
            throw new ApiException("Missing the required parameter 'decryptPKCS1' when calling decryptPKCS1(Async)");
        }

        return decryptPKCS1Call(decryptPKCS1, _callback);

    }

    /**
     * 
     * 
     * @param decryptPKCS1  (required)
     * @return DecryptPKCS1Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptPKCS1Output decryptPKCS1(DecryptPKCS1 decryptPKCS1) throws ApiException {
        ApiResponse<DecryptPKCS1Output> localVarResp = decryptPKCS1WithHttpInfo(decryptPKCS1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param decryptPKCS1  (required)
     * @return ApiResponse&lt;DecryptPKCS1Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptPKCS1Output> decryptPKCS1WithHttpInfo(DecryptPKCS1 decryptPKCS1) throws ApiException {
        okhttp3.Call localVarCall = decryptPKCS1ValidateBeforeCall(decryptPKCS1, null);
        Type localVarReturnType = new TypeToken<DecryptPKCS1Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param decryptPKCS1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptPKCS1Async(DecryptPKCS1 decryptPKCS1, final ApiCallback<DecryptPKCS1Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptPKCS1ValidateBeforeCall(decryptPKCS1, _callback);
        Type localVarReturnType = new TypeToken<DecryptPKCS1Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptWithClassicKey
     * @param decryptWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptWithClassicKeyCall(DecryptWithClassicKey decryptWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decryptWithClassicKey;

        // create path and map variables
        String localVarPath = "/decrypt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptWithClassicKeyValidateBeforeCall(DecryptWithClassicKey decryptWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decryptWithClassicKey' is set
        if (decryptWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'decryptWithClassicKey' when calling decryptWithClassicKey(Async)");
        }

        return decryptWithClassicKeyCall(decryptWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param decryptWithClassicKey  (required)
     * @return DecryptWithClassicKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptWithClassicKeyOutput decryptWithClassicKey(DecryptWithClassicKey decryptWithClassicKey) throws ApiException {
        ApiResponse<DecryptWithClassicKeyOutput> localVarResp = decryptWithClassicKeyWithHttpInfo(decryptWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param decryptWithClassicKey  (required)
     * @return ApiResponse&lt;DecryptWithClassicKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptWithClassicKeyOutput> decryptWithClassicKeyWithHttpInfo(DecryptWithClassicKey decryptWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = decryptWithClassicKeyValidateBeforeCall(decryptWithClassicKey, null);
        Type localVarReturnType = new TypeToken<DecryptWithClassicKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param decryptWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptWithClassicKeyAsync(DecryptWithClassicKey decryptWithClassicKey, final ApiCallback<DecryptWithClassicKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptWithClassicKeyValidateBeforeCall(decryptWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<DecryptWithClassicKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthMethod
     * @param deleteAuthMethod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodCall(DeleteAuthMethod deleteAuthMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAuthMethod;

        // create path and map variables
        String localVarPath = "/delete-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthMethodValidateBeforeCall(DeleteAuthMethod deleteAuthMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteAuthMethod' is set
        if (deleteAuthMethod == null) {
            throw new ApiException("Missing the required parameter 'deleteAuthMethod' when calling deleteAuthMethod(Async)");
        }

        return deleteAuthMethodCall(deleteAuthMethod, _callback);

    }

    /**
     * 
     * 
     * @param deleteAuthMethod  (required)
     * @return DeleteAuthMethodOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthMethodOutput deleteAuthMethod(DeleteAuthMethod deleteAuthMethod) throws ApiException {
        ApiResponse<DeleteAuthMethodOutput> localVarResp = deleteAuthMethodWithHttpInfo(deleteAuthMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteAuthMethod  (required)
     * @return ApiResponse&lt;DeleteAuthMethodOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAuthMethodOutput> deleteAuthMethodWithHttpInfo(DeleteAuthMethod deleteAuthMethod) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthMethodValidateBeforeCall(deleteAuthMethod, null);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteAuthMethod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodAsync(DeleteAuthMethod deleteAuthMethod, final ApiCallback<DeleteAuthMethodOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthMethodValidateBeforeCall(deleteAuthMethod, _callback);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthMethods
     * @param deleteAuthMethods  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodsCall(DeleteAuthMethods deleteAuthMethods, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAuthMethods;

        // create path and map variables
        String localVarPath = "/delete-auth-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthMethodsValidateBeforeCall(DeleteAuthMethods deleteAuthMethods, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteAuthMethods' is set
        if (deleteAuthMethods == null) {
            throw new ApiException("Missing the required parameter 'deleteAuthMethods' when calling deleteAuthMethods(Async)");
        }

        return deleteAuthMethodsCall(deleteAuthMethods, _callback);

    }

    /**
     * 
     * 
     * @param deleteAuthMethods  (required)
     * @return DeleteAuthMethodsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthMethodsOutput deleteAuthMethods(DeleteAuthMethods deleteAuthMethods) throws ApiException {
        ApiResponse<DeleteAuthMethodsOutput> localVarResp = deleteAuthMethodsWithHttpInfo(deleteAuthMethods);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteAuthMethods  (required)
     * @return ApiResponse&lt;DeleteAuthMethodsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAuthMethodsOutput> deleteAuthMethodsWithHttpInfo(DeleteAuthMethods deleteAuthMethods) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthMethodsValidateBeforeCall(deleteAuthMethods, null);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteAuthMethods  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodsAsync(DeleteAuthMethods deleteAuthMethods, final ApiCallback<DeleteAuthMethodsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthMethodsValidateBeforeCall(deleteAuthMethods, _callback);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventForwarder
     * @param deleteEventForwarder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventForwarderCall(DeleteEventForwarder deleteEventForwarder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEventForwarder;

        // create path and map variables
        String localVarPath = "/delete-event-forwarder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventForwarderValidateBeforeCall(DeleteEventForwarder deleteEventForwarder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteEventForwarder' is set
        if (deleteEventForwarder == null) {
            throw new ApiException("Missing the required parameter 'deleteEventForwarder' when calling deleteEventForwarder(Async)");
        }

        return deleteEventForwarderCall(deleteEventForwarder, _callback);

    }

    /**
     * 
     * 
     * @param deleteEventForwarder  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteEventForwarder(DeleteEventForwarder deleteEventForwarder) throws ApiException {
        ApiResponse<Object> localVarResp = deleteEventForwarderWithHttpInfo(deleteEventForwarder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteEventForwarder  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteEventForwarderWithHttpInfo(DeleteEventForwarder deleteEventForwarder) throws ApiException {
        okhttp3.Call localVarCall = deleteEventForwarderValidateBeforeCall(deleteEventForwarder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteEventForwarder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventForwarderAsync(DeleteEventForwarder deleteEventForwarder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventForwarderValidateBeforeCall(deleteEventForwarder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGatewayAllowedAccessId
     * @param deleteGatewayAllowedAccessId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGatewayAllowedAccessIdResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGatewayAllowedAccessIdCall(DeleteGatewayAllowedAccessId deleteGatewayAllowedAccessId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGatewayAllowedAccessId;

        // create path and map variables
        String localVarPath = "/gateway-delete-allowed-management-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGatewayAllowedAccessIdValidateBeforeCall(DeleteGatewayAllowedAccessId deleteGatewayAllowedAccessId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteGatewayAllowedAccessId' is set
        if (deleteGatewayAllowedAccessId == null) {
            throw new ApiException("Missing the required parameter 'deleteGatewayAllowedAccessId' when calling deleteGatewayAllowedAccessId(Async)");
        }

        return deleteGatewayAllowedAccessIdCall(deleteGatewayAllowedAccessId, _callback);

    }

    /**
     * 
     * 
     * @param deleteGatewayAllowedAccessId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGatewayAllowedAccessIdResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteGatewayAllowedAccessId(DeleteGatewayAllowedAccessId deleteGatewayAllowedAccessId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteGatewayAllowedAccessIdWithHttpInfo(deleteGatewayAllowedAccessId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteGatewayAllowedAccessId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGatewayAllowedAccessIdResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteGatewayAllowedAccessIdWithHttpInfo(DeleteGatewayAllowedAccessId deleteGatewayAllowedAccessId) throws ApiException {
        okhttp3.Call localVarCall = deleteGatewayAllowedAccessIdValidateBeforeCall(deleteGatewayAllowedAccessId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteGatewayAllowedAccessId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGatewayAllowedAccessIdResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGatewayAllowedAccessIdAsync(DeleteGatewayAllowedAccessId deleteGatewayAllowedAccessId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGatewayAllowedAccessIdValidateBeforeCall(deleteGatewayAllowedAccessId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param deleteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(DeleteGroup deleteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGroup;

        // create path and map variables
        String localVarPath = "/delete-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(DeleteGroup deleteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteGroup' is set
        if (deleteGroup == null) {
            throw new ApiException("Missing the required parameter 'deleteGroup' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(deleteGroup, _callback);

    }

    /**
     * 
     * 
     * @param deleteGroup  (required)
     * @return DeleteGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroupOutput deleteGroup(DeleteGroup deleteGroup) throws ApiException {
        ApiResponse<DeleteGroupOutput> localVarResp = deleteGroupWithHttpInfo(deleteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteGroup  (required)
     * @return ApiResponse&lt;DeleteGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGroupOutput> deleteGroupWithHttpInfo(DeleteGroup deleteGroup) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(deleteGroup, null);
        Type localVarReturnType = new TypeToken<DeleteGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(DeleteGroup deleteGroup, final ApiCallback<DeleteGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(deleteGroup, _callback);
        Type localVarReturnType = new TypeToken<DeleteGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGwCluster
     * @param deleteGwCluster  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGwClusterResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGwClusterCall(DeleteGwCluster deleteGwCluster, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGwCluster;

        // create path and map variables
        String localVarPath = "/delete-gateway-cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGwClusterValidateBeforeCall(DeleteGwCluster deleteGwCluster, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteGwCluster' is set
        if (deleteGwCluster == null) {
            throw new ApiException("Missing the required parameter 'deleteGwCluster' when calling deleteGwCluster(Async)");
        }

        return deleteGwClusterCall(deleteGwCluster, _callback);

    }

    /**
     * 
     * 
     * @param deleteGwCluster  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGwClusterResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteGwCluster(DeleteGwCluster deleteGwCluster) throws ApiException {
        ApiResponse<Object> localVarResp = deleteGwClusterWithHttpInfo(deleteGwCluster);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteGwCluster  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGwClusterResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteGwClusterWithHttpInfo(DeleteGwCluster deleteGwCluster) throws ApiException {
        okhttp3.Call localVarCall = deleteGwClusterValidateBeforeCall(deleteGwCluster, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteGwCluster  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteGwClusterResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGwClusterAsync(DeleteGwCluster deleteGwCluster, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGwClusterValidateBeforeCall(deleteGwCluster, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItem
     * @param deleteItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemCall(DeleteItem deleteItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteItem;

        // create path and map variables
        String localVarPath = "/delete-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemValidateBeforeCall(DeleteItem deleteItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteItem' is set
        if (deleteItem == null) {
            throw new ApiException("Missing the required parameter 'deleteItem' when calling deleteItem(Async)");
        }

        return deleteItemCall(deleteItem, _callback);

    }

    /**
     * 
     * 
     * @param deleteItem  (required)
     * @return DeleteItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemOutput deleteItem(DeleteItem deleteItem) throws ApiException {
        ApiResponse<DeleteItemOutput> localVarResp = deleteItemWithHttpInfo(deleteItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteItem  (required)
     * @return ApiResponse&lt;DeleteItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemOutput> deleteItemWithHttpInfo(DeleteItem deleteItem) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(deleteItem, null);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAsync(DeleteItem deleteItem, final ApiCallback<DeleteItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(deleteItem, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItems
     * @param deleteItems  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsCall(DeleteItems deleteItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteItems;

        // create path and map variables
        String localVarPath = "/delete-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemsValidateBeforeCall(DeleteItems deleteItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteItems' is set
        if (deleteItems == null) {
            throw new ApiException("Missing the required parameter 'deleteItems' when calling deleteItems(Async)");
        }

        return deleteItemsCall(deleteItems, _callback);

    }

    /**
     * 
     * 
     * @param deleteItems  (required)
     * @return DeleteItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemsOutput deleteItems(DeleteItems deleteItems) throws ApiException {
        ApiResponse<DeleteItemsOutput> localVarResp = deleteItemsWithHttpInfo(deleteItems);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteItems  (required)
     * @return ApiResponse&lt;DeleteItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemsOutput> deleteItemsWithHttpInfo(DeleteItems deleteItems) throws ApiException {
        okhttp3.Call localVarCall = deleteItemsValidateBeforeCall(deleteItems, null);
        Type localVarReturnType = new TypeToken<DeleteItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteItems  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsAsync(DeleteItems deleteItems, final ApiCallback<DeleteItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemsValidateBeforeCall(deleteItems, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param deleteRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(DeleteRole deleteRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRole;

        // create path and map variables
        String localVarPath = "/delete-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(DeleteRole deleteRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteRole' is set
        if (deleteRole == null) {
            throw new ApiException("Missing the required parameter 'deleteRole' when calling deleteRole(Async)");
        }

        return deleteRoleCall(deleteRole, _callback);

    }

    /**
     * 
     * 
     * @param deleteRole  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRole(DeleteRole deleteRole) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRoleWithHttpInfo(deleteRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteRole  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRoleWithHttpInfo(DeleteRole deleteRole) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(deleteRole, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(DeleteRole deleteRole, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(deleteRole, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleAssociation
     * @param deleteRoleAssociation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAssociationCall(DeleteRoleAssociation deleteRoleAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRoleAssociation;

        // create path and map variables
        String localVarPath = "/delete-assoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleAssociationValidateBeforeCall(DeleteRoleAssociation deleteRoleAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteRoleAssociation' is set
        if (deleteRoleAssociation == null) {
            throw new ApiException("Missing the required parameter 'deleteRoleAssociation' when calling deleteRoleAssociation(Async)");
        }

        return deleteRoleAssociationCall(deleteRoleAssociation, _callback);

    }

    /**
     * 
     * 
     * @param deleteRoleAssociation  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRoleAssociation(DeleteRoleAssociation deleteRoleAssociation) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRoleAssociationWithHttpInfo(deleteRoleAssociation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteRoleAssociation  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRoleAssociationWithHttpInfo(DeleteRoleAssociation deleteRoleAssociation) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleAssociationValidateBeforeCall(deleteRoleAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteRoleAssociation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAssociationAsync(DeleteRoleAssociation deleteRoleAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleAssociationValidateBeforeCall(deleteRoleAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleRule
     * @param deleteRoleRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleRuleCall(DeleteRoleRule deleteRoleRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRoleRule;

        // create path and map variables
        String localVarPath = "/delete-role-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleRuleValidateBeforeCall(DeleteRoleRule deleteRoleRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteRoleRule' is set
        if (deleteRoleRule == null) {
            throw new ApiException("Missing the required parameter 'deleteRoleRule' when calling deleteRoleRule(Async)");
        }

        return deleteRoleRuleCall(deleteRoleRule, _callback);

    }

    /**
     * 
     * 
     * @param deleteRoleRule  (required)
     * @return DeleteRoleRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleRuleOutput deleteRoleRule(DeleteRoleRule deleteRoleRule) throws ApiException {
        ApiResponse<DeleteRoleRuleOutput> localVarResp = deleteRoleRuleWithHttpInfo(deleteRoleRule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteRoleRule  (required)
     * @return ApiResponse&lt;DeleteRoleRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRoleRuleOutput> deleteRoleRuleWithHttpInfo(DeleteRoleRule deleteRoleRule) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleRuleValidateBeforeCall(deleteRoleRule, null);
        Type localVarReturnType = new TypeToken<DeleteRoleRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteRoleRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleRuleAsync(DeleteRoleRule deleteRoleRule, final ApiCallback<DeleteRoleRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleRuleValidateBeforeCall(deleteRoleRule, _callback);
        Type localVarReturnType = new TypeToken<DeleteRoleRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoles
     * @param deleteRoles  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRolesCall(DeleteRoles deleteRoles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRoles;

        // create path and map variables
        String localVarPath = "/delete-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRolesValidateBeforeCall(DeleteRoles deleteRoles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteRoles' is set
        if (deleteRoles == null) {
            throw new ApiException("Missing the required parameter 'deleteRoles' when calling deleteRoles(Async)");
        }

        return deleteRolesCall(deleteRoles, _callback);

    }

    /**
     * 
     * 
     * @param deleteRoles  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRoles(DeleteRoles deleteRoles) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRolesWithHttpInfo(deleteRoles);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteRoles  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRolesWithHttpInfo(DeleteRoles deleteRoles) throws ApiException {
        okhttp3.Call localVarCall = deleteRolesValidateBeforeCall(deleteRoles, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteRoles  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRolesAsync(DeleteRoles deleteRoles, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRolesValidateBeforeCall(deleteRoles, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTarget
     * @param deleteTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetCall(DeleteTarget deleteTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTarget;

        // create path and map variables
        String localVarPath = "/delete-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetValidateBeforeCall(DeleteTarget deleteTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteTarget' is set
        if (deleteTarget == null) {
            throw new ApiException("Missing the required parameter 'deleteTarget' when calling deleteTarget(Async)");
        }

        return deleteTargetCall(deleteTarget, _callback);

    }

    /**
     * 
     * 
     * @param deleteTarget  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTarget(DeleteTarget deleteTarget) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetWithHttpInfo(deleteTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteTarget  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetWithHttpInfo(DeleteTarget deleteTarget) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetValidateBeforeCall(deleteTarget, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAsync(DeleteTarget deleteTarget, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetValidateBeforeCall(deleteTarget, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTargetAssociation
     * @param deleteTargetAssociation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAssociationCall(DeleteTargetAssociation deleteTargetAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTargetAssociation;

        // create path and map variables
        String localVarPath = "/delete-assoc-target-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetAssociationValidateBeforeCall(DeleteTargetAssociation deleteTargetAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteTargetAssociation' is set
        if (deleteTargetAssociation == null) {
            throw new ApiException("Missing the required parameter 'deleteTargetAssociation' when calling deleteTargetAssociation(Async)");
        }

        return deleteTargetAssociationCall(deleteTargetAssociation, _callback);

    }

    /**
     * 
     * 
     * @param deleteTargetAssociation  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTargetAssociation(DeleteTargetAssociation deleteTargetAssociation) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetAssociationWithHttpInfo(deleteTargetAssociation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteTargetAssociation  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetAssociationWithHttpInfo(DeleteTargetAssociation deleteTargetAssociation) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetAssociationValidateBeforeCall(deleteTargetAssociation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteTargetAssociation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAssociationAsync(DeleteTargetAssociation deleteTargetAssociation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetAssociationValidateBeforeCall(deleteTargetAssociation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTargets
     * @param deleteTargets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetsCall(DeleteTargets deleteTargets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTargets;

        // create path and map variables
        String localVarPath = "/delete-targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetsValidateBeforeCall(DeleteTargets deleteTargets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteTargets' is set
        if (deleteTargets == null) {
            throw new ApiException("Missing the required parameter 'deleteTargets' when calling deleteTargets(Async)");
        }

        return deleteTargetsCall(deleteTargets, _callback);

    }

    /**
     * 
     * 
     * @param deleteTargets  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTargets(DeleteTargets deleteTargets) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetsWithHttpInfo(deleteTargets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deleteTargets  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetsWithHttpInfo(DeleteTargets deleteTargets) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetsValidateBeforeCall(deleteTargets, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deleteTargets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetsAsync(DeleteTargets deleteTargets, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetsValidateBeforeCall(deleteTargets, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deriveKey
     * @param deriveKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeriveKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deriveKeyCall(DeriveKey deriveKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deriveKey;

        // create path and map variables
        String localVarPath = "/derive-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deriveKeyValidateBeforeCall(DeriveKey deriveKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deriveKey' is set
        if (deriveKey == null) {
            throw new ApiException("Missing the required parameter 'deriveKey' when calling deriveKey(Async)");
        }

        return deriveKeyCall(deriveKey, _callback);

    }

    /**
     * 
     * 
     * @param deriveKey  (required)
     * @return DeriveKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeriveKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeriveKeyOutput deriveKey(DeriveKey deriveKey) throws ApiException {
        ApiResponse<DeriveKeyOutput> localVarResp = deriveKeyWithHttpInfo(deriveKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deriveKey  (required)
     * @return ApiResponse&lt;DeriveKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeriveKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeriveKeyOutput> deriveKeyWithHttpInfo(DeriveKey deriveKey) throws ApiException {
        okhttp3.Call localVarCall = deriveKeyValidateBeforeCall(deriveKey, null);
        Type localVarReturnType = new TypeToken<DeriveKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deriveKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DeriveKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deriveKeyAsync(DeriveKey deriveKey, final ApiCallback<DeriveKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deriveKeyValidateBeforeCall(deriveKey, _callback);
        Type localVarReturnType = new TypeToken<DeriveKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAssoc
     * @param describeAssoc  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAssocCall(DescribeAssoc describeAssoc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAssoc;

        // create path and map variables
        String localVarPath = "/describe-role-am-assoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAssocValidateBeforeCall(DescribeAssoc describeAssoc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'describeAssoc' is set
        if (describeAssoc == null) {
            throw new ApiException("Missing the required parameter 'describeAssoc' when calling describeAssoc(Async)");
        }

        return describeAssocCall(describeAssoc, _callback);

    }

    /**
     * 
     * 
     * @param describeAssoc  (required)
     * @return RoleAssociationDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssociationDetails describeAssoc(DescribeAssoc describeAssoc) throws ApiException {
        ApiResponse<RoleAssociationDetails> localVarResp = describeAssocWithHttpInfo(describeAssoc);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param describeAssoc  (required)
     * @return ApiResponse&lt;RoleAssociationDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssociationDetails> describeAssocWithHttpInfo(DescribeAssoc describeAssoc) throws ApiException {
        okhttp3.Call localVarCall = describeAssocValidateBeforeCall(describeAssoc, null);
        Type localVarReturnType = new TypeToken<RoleAssociationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param describeAssoc  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAssocAsync(DescribeAssoc describeAssoc, final ApiCallback<RoleAssociationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAssocValidateBeforeCall(describeAssoc, _callback);
        Type localVarReturnType = new TypeToken<RoleAssociationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeItem
     * @param describeItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeItemCall(DescribeItem describeItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeItem;

        // create path and map variables
        String localVarPath = "/describe-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeItemValidateBeforeCall(DescribeItem describeItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'describeItem' is set
        if (describeItem == null) {
            throw new ApiException("Missing the required parameter 'describeItem' when calling describeItem(Async)");
        }

        return describeItemCall(describeItem, _callback);

    }

    /**
     * 
     * 
     * @param describeItem  (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Item describeItem(DescribeItem describeItem) throws ApiException {
        ApiResponse<Item> localVarResp = describeItemWithHttpInfo(describeItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param describeItem  (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> describeItemWithHttpInfo(DescribeItem describeItem) throws ApiException {
        okhttp3.Call localVarCall = describeItemValidateBeforeCall(describeItem, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param describeItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeItemAsync(DescribeItem describeItem, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeItemValidateBeforeCall(describeItem, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePermissions
     * @param describePermissions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePermissionsCall(DescribePermissions describePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePermissions;

        // create path and map variables
        String localVarPath = "/describe-permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePermissionsValidateBeforeCall(DescribePermissions describePermissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'describePermissions' is set
        if (describePermissions == null) {
            throw new ApiException("Missing the required parameter 'describePermissions' when calling describePermissions(Async)");
        }

        return describePermissionsCall(describePermissions, _callback);

    }

    /**
     * 
     * 
     * @param describePermissions  (required)
     * @return DescribePermissionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DescribePermissionsOutput describePermissions(DescribePermissions describePermissions) throws ApiException {
        ApiResponse<DescribePermissionsOutput> localVarResp = describePermissionsWithHttpInfo(describePermissions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param describePermissions  (required)
     * @return ApiResponse&lt;DescribePermissionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePermissionsOutput> describePermissionsWithHttpInfo(DescribePermissions describePermissions) throws ApiException {
        okhttp3.Call localVarCall = describePermissionsValidateBeforeCall(describePermissions, null);
        Type localVarReturnType = new TypeToken<DescribePermissionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param describePermissions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePermissionsAsync(DescribePermissions describePermissions, final ApiCallback<DescribePermissionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePermissionsValidateBeforeCall(describePermissions, _callback);
        Type localVarReturnType = new TypeToken<DescribePermissionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSubClaims
     * @param describeSubClaims  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeSubClaimsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubClaimsCall(DescribeSubClaims describeSubClaims, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSubClaims;

        // create path and map variables
        String localVarPath = "/describe-sub-claims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSubClaimsValidateBeforeCall(DescribeSubClaims describeSubClaims, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'describeSubClaims' is set
        if (describeSubClaims == null) {
            throw new ApiException("Missing the required parameter 'describeSubClaims' when calling describeSubClaims(Async)");
        }

        return describeSubClaimsCall(describeSubClaims, _callback);

    }

    /**
     * 
     * 
     * @param describeSubClaims  (required)
     * @return DescribeSubClaimsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeSubClaimsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSubClaimsOutput describeSubClaims(DescribeSubClaims describeSubClaims) throws ApiException {
        ApiResponse<DescribeSubClaimsOutput> localVarResp = describeSubClaimsWithHttpInfo(describeSubClaims);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param describeSubClaims  (required)
     * @return ApiResponse&lt;DescribeSubClaimsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeSubClaimsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSubClaimsOutput> describeSubClaimsWithHttpInfo(DescribeSubClaims describeSubClaims) throws ApiException {
        okhttp3.Call localVarCall = describeSubClaimsValidateBeforeCall(describeSubClaims, null);
        Type localVarReturnType = new TypeToken<DescribeSubClaimsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param describeSubClaims  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeSubClaimsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSubClaimsAsync(DescribeSubClaims describeSubClaims, final ApiCallback<DescribeSubClaimsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSubClaimsValidateBeforeCall(describeSubClaims, _callback);
        Type localVarReturnType = new TypeToken<DescribeSubClaimsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detokenize
     * @param detokenize  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeCall(Detokenize detokenize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detokenize;

        // create path and map variables
        String localVarPath = "/detokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detokenizeValidateBeforeCall(Detokenize detokenize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'detokenize' is set
        if (detokenize == null) {
            throw new ApiException("Missing the required parameter 'detokenize' when calling detokenize(Async)");
        }

        return detokenizeCall(detokenize, _callback);

    }

    /**
     * 
     * 
     * @param detokenize  (required)
     * @return DetokenizeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DetokenizeOutput detokenize(Detokenize detokenize) throws ApiException {
        ApiResponse<DetokenizeOutput> localVarResp = detokenizeWithHttpInfo(detokenize);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param detokenize  (required)
     * @return ApiResponse&lt;DetokenizeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetokenizeOutput> detokenizeWithHttpInfo(Detokenize detokenize) throws ApiException {
        okhttp3.Call localVarCall = detokenizeValidateBeforeCall(detokenize, null);
        Type localVarReturnType = new TypeToken<DetokenizeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param detokenize  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeAsync(Detokenize detokenize, final ApiCallback<DetokenizeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = detokenizeValidateBeforeCall(detokenize, _callback);
        Type localVarReturnType = new TypeToken<DetokenizeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detokenizeBatch
     * @param batchTokenizationRequestLine  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeBatchCall(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchTokenizationRequestLine;

        // create path and map variables
        String localVarPath = "/detokenize-batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detokenizeBatchValidateBeforeCall(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchTokenizationRequestLine' is set
        if (batchTokenizationRequestLine == null) {
            throw new ApiException("Missing the required parameter 'batchTokenizationRequestLine' when calling detokenizeBatch(Async)");
        }

        return detokenizeBatchCall(batchTokenizationRequestLine, _callback);

    }

    /**
     * 
     * 
     * @param batchTokenizationRequestLine  (required)
     * @return DetokenizeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DetokenizeOutput detokenizeBatch(List<BatchTokenizationRequestLine> batchTokenizationRequestLine) throws ApiException {
        ApiResponse<DetokenizeOutput> localVarResp = detokenizeBatchWithHttpInfo(batchTokenizationRequestLine);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batchTokenizationRequestLine  (required)
     * @return ApiResponse&lt;DetokenizeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetokenizeOutput> detokenizeBatchWithHttpInfo(List<BatchTokenizationRequestLine> batchTokenizationRequestLine) throws ApiException {
        okhttp3.Call localVarCall = detokenizeBatchValidateBeforeCall(batchTokenizationRequestLine, null);
        Type localVarReturnType = new TypeToken<DetokenizeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batchTokenizationRequestLine  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> detokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detokenizeBatchAsync(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback<DetokenizeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = detokenizeBatchValidateBeforeCall(batchTokenizationRequestLine, _callback);
        Type localVarReturnType = new TypeToken<DetokenizeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateArtifactory
     * @param dynamicSecretCreateArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateArtifactoryCall(DynamicSecretCreateArtifactory dynamicSecretCreateArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateArtifactory;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateArtifactoryValidateBeforeCall(DynamicSecretCreateArtifactory dynamicSecretCreateArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateArtifactory' is set
        if (dynamicSecretCreateArtifactory == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateArtifactory' when calling dynamicSecretCreateArtifactory(Async)");
        }

        return dynamicSecretCreateArtifactoryCall(dynamicSecretCreateArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateArtifactory  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateArtifactory(DynamicSecretCreateArtifactory dynamicSecretCreateArtifactory) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateArtifactoryWithHttpInfo(dynamicSecretCreateArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateArtifactory  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateArtifactoryWithHttpInfo(DynamicSecretCreateArtifactory dynamicSecretCreateArtifactory) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateArtifactoryValidateBeforeCall(dynamicSecretCreateArtifactory, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateArtifactoryAsync(DynamicSecretCreateArtifactory dynamicSecretCreateArtifactory, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateArtifactoryValidateBeforeCall(dynamicSecretCreateArtifactory, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateAws
     * @param dynamicSecretCreateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateAwsCall(DynamicSecretCreateAws dynamicSecretCreateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateAws;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateAwsValidateBeforeCall(DynamicSecretCreateAws dynamicSecretCreateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateAws' is set
        if (dynamicSecretCreateAws == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateAws' when calling dynamicSecretCreateAws(Async)");
        }

        return dynamicSecretCreateAwsCall(dynamicSecretCreateAws, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateAws  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateAws(DynamicSecretCreateAws dynamicSecretCreateAws) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateAwsWithHttpInfo(dynamicSecretCreateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateAws  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateAwsWithHttpInfo(DynamicSecretCreateAws dynamicSecretCreateAws) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateAwsValidateBeforeCall(dynamicSecretCreateAws, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateAwsAsync(DynamicSecretCreateAws dynamicSecretCreateAws, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateAwsValidateBeforeCall(dynamicSecretCreateAws, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateAzure
     * @param dynamicSecretCreateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateAzureCall(DynamicSecretCreateAzure dynamicSecretCreateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateAzure;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateAzureValidateBeforeCall(DynamicSecretCreateAzure dynamicSecretCreateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateAzure' is set
        if (dynamicSecretCreateAzure == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateAzure' when calling dynamicSecretCreateAzure(Async)");
        }

        return dynamicSecretCreateAzureCall(dynamicSecretCreateAzure, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateAzure  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateAzure(DynamicSecretCreateAzure dynamicSecretCreateAzure) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateAzureWithHttpInfo(dynamicSecretCreateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateAzure  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateAzureWithHttpInfo(DynamicSecretCreateAzure dynamicSecretCreateAzure) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateAzureValidateBeforeCall(dynamicSecretCreateAzure, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateAzureAsync(DynamicSecretCreateAzure dynamicSecretCreateAzure, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateAzureValidateBeforeCall(dynamicSecretCreateAzure, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateCassandra
     * @param dynamicSecretCreateCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateCassandraCall(DynamicSecretCreateCassandra dynamicSecretCreateCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateCassandra;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateCassandraValidateBeforeCall(DynamicSecretCreateCassandra dynamicSecretCreateCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateCassandra' is set
        if (dynamicSecretCreateCassandra == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateCassandra' when calling dynamicSecretCreateCassandra(Async)");
        }

        return dynamicSecretCreateCassandraCall(dynamicSecretCreateCassandra, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateCassandra  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateCassandra(DynamicSecretCreateCassandra dynamicSecretCreateCassandra) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateCassandraWithHttpInfo(dynamicSecretCreateCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateCassandra  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateCassandraWithHttpInfo(DynamicSecretCreateCassandra dynamicSecretCreateCassandra) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateCassandraValidateBeforeCall(dynamicSecretCreateCassandra, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateCassandraAsync(DynamicSecretCreateCassandra dynamicSecretCreateCassandra, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateCassandraValidateBeforeCall(dynamicSecretCreateCassandra, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateCustom
     * @param dynamicSecretCreateCustom  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateCustomCall(DynamicSecretCreateCustom dynamicSecretCreateCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateCustom;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateCustomValidateBeforeCall(DynamicSecretCreateCustom dynamicSecretCreateCustom, final ApiCallback _callback) throws ApiException {
        return dynamicSecretCreateCustomCall(dynamicSecretCreateCustom, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateCustom  (optional)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateCustom(DynamicSecretCreateCustom dynamicSecretCreateCustom) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateCustomWithHttpInfo(dynamicSecretCreateCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateCustom  (optional)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateCustomWithHttpInfo(DynamicSecretCreateCustom dynamicSecretCreateCustom) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateCustomValidateBeforeCall(dynamicSecretCreateCustom, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateCustom  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateCustomAsync(DynamicSecretCreateCustom dynamicSecretCreateCustom, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateCustomValidateBeforeCall(dynamicSecretCreateCustom, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateDockerhub
     * @param dynamicSecretCreateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateDockerhubCall(DynamicSecretCreateDockerhub dynamicSecretCreateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateDockerhub;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateDockerhubValidateBeforeCall(DynamicSecretCreateDockerhub dynamicSecretCreateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateDockerhub' is set
        if (dynamicSecretCreateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateDockerhub' when calling dynamicSecretCreateDockerhub(Async)");
        }

        return dynamicSecretCreateDockerhubCall(dynamicSecretCreateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateDockerhub  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateDockerhub(DynamicSecretCreateDockerhub dynamicSecretCreateDockerhub) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateDockerhubWithHttpInfo(dynamicSecretCreateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateDockerhub  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateDockerhubWithHttpInfo(DynamicSecretCreateDockerhub dynamicSecretCreateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateDockerhubValidateBeforeCall(dynamicSecretCreateDockerhub, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateDockerhubAsync(DynamicSecretCreateDockerhub dynamicSecretCreateDockerhub, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateDockerhubValidateBeforeCall(dynamicSecretCreateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateEks
     * @param dynamicSecretCreateEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateEksCall(DynamicSecretCreateEks dynamicSecretCreateEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateEks;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateEksValidateBeforeCall(DynamicSecretCreateEks dynamicSecretCreateEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateEks' is set
        if (dynamicSecretCreateEks == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateEks' when calling dynamicSecretCreateEks(Async)");
        }

        return dynamicSecretCreateEksCall(dynamicSecretCreateEks, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateEks  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateEks(DynamicSecretCreateEks dynamicSecretCreateEks) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateEksWithHttpInfo(dynamicSecretCreateEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateEks  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateEksWithHttpInfo(DynamicSecretCreateEks dynamicSecretCreateEks) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateEksValidateBeforeCall(dynamicSecretCreateEks, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateEksAsync(DynamicSecretCreateEks dynamicSecretCreateEks, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateEksValidateBeforeCall(dynamicSecretCreateEks, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateGcp
     * @param dynamicSecretCreateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGcpCall(DynamicSecretCreateGcp dynamicSecretCreateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateGcp;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateGcpValidateBeforeCall(DynamicSecretCreateGcp dynamicSecretCreateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateGcp' is set
        if (dynamicSecretCreateGcp == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateGcp' when calling dynamicSecretCreateGcp(Async)");
        }

        return dynamicSecretCreateGcpCall(dynamicSecretCreateGcp, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGcp  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateGcp(DynamicSecretCreateGcp dynamicSecretCreateGcp) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateGcpWithHttpInfo(dynamicSecretCreateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGcp  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateGcpWithHttpInfo(DynamicSecretCreateGcp dynamicSecretCreateGcp) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateGcpValidateBeforeCall(dynamicSecretCreateGcp, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGcpAsync(DynamicSecretCreateGcp dynamicSecretCreateGcp, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateGcpValidateBeforeCall(dynamicSecretCreateGcp, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateGithub
     * @param dynamicSecretCreateGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGithubCall(DynamicSecretCreateGithub dynamicSecretCreateGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateGithub;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateGithubValidateBeforeCall(DynamicSecretCreateGithub dynamicSecretCreateGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateGithub' is set
        if (dynamicSecretCreateGithub == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateGithub' when calling dynamicSecretCreateGithub(Async)");
        }

        return dynamicSecretCreateGithubCall(dynamicSecretCreateGithub, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGithub  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateGithub(DynamicSecretCreateGithub dynamicSecretCreateGithub) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateGithubWithHttpInfo(dynamicSecretCreateGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGithub  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateGithubWithHttpInfo(DynamicSecretCreateGithub dynamicSecretCreateGithub) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateGithubValidateBeforeCall(dynamicSecretCreateGithub, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGithubAsync(DynamicSecretCreateGithub dynamicSecretCreateGithub, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateGithubValidateBeforeCall(dynamicSecretCreateGithub, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateGitlab
     * @param dynamicSecretCreateGitlab  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGitlabCall(DynamicSecretCreateGitlab dynamicSecretCreateGitlab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateGitlab;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-gitlab";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateGitlabValidateBeforeCall(DynamicSecretCreateGitlab dynamicSecretCreateGitlab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateGitlab' is set
        if (dynamicSecretCreateGitlab == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateGitlab' when calling dynamicSecretCreateGitlab(Async)");
        }

        return dynamicSecretCreateGitlabCall(dynamicSecretCreateGitlab, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGitlab  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateGitlab(DynamicSecretCreateGitlab dynamicSecretCreateGitlab) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateGitlabWithHttpInfo(dynamicSecretCreateGitlab);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGitlab  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateGitlabWithHttpInfo(DynamicSecretCreateGitlab dynamicSecretCreateGitlab) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateGitlabValidateBeforeCall(dynamicSecretCreateGitlab, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateGitlab  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGitlabAsync(DynamicSecretCreateGitlab dynamicSecretCreateGitlab, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateGitlabValidateBeforeCall(dynamicSecretCreateGitlab, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateGke
     * @param dynamicSecretCreateGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGkeCall(DynamicSecretCreateGke dynamicSecretCreateGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateGke;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateGkeValidateBeforeCall(DynamicSecretCreateGke dynamicSecretCreateGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateGke' is set
        if (dynamicSecretCreateGke == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateGke' when calling dynamicSecretCreateGke(Async)");
        }

        return dynamicSecretCreateGkeCall(dynamicSecretCreateGke, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGke  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateGke(DynamicSecretCreateGke dynamicSecretCreateGke) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateGkeWithHttpInfo(dynamicSecretCreateGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGke  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateGkeWithHttpInfo(DynamicSecretCreateGke dynamicSecretCreateGke) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateGkeValidateBeforeCall(dynamicSecretCreateGke, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGkeAsync(DynamicSecretCreateGke dynamicSecretCreateGke, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateGkeValidateBeforeCall(dynamicSecretCreateGke, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateGoogleWorkspace
     * @param dynamicSecretCreateGoogleWorkspace  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGoogleWorkspaceCall(DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateGoogleWorkspace;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-google-workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateGoogleWorkspaceValidateBeforeCall(DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateGoogleWorkspace' is set
        if (dynamicSecretCreateGoogleWorkspace == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateGoogleWorkspace' when calling dynamicSecretCreateGoogleWorkspace(Async)");
        }

        return dynamicSecretCreateGoogleWorkspaceCall(dynamicSecretCreateGoogleWorkspace, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGoogleWorkspace  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateGoogleWorkspace(DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateGoogleWorkspaceWithHttpInfo(dynamicSecretCreateGoogleWorkspace);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateGoogleWorkspace  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateGoogleWorkspaceWithHttpInfo(DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateGoogleWorkspaceValidateBeforeCall(dynamicSecretCreateGoogleWorkspace, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateGoogleWorkspace  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateGoogleWorkspaceAsync(DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateGoogleWorkspaceValidateBeforeCall(dynamicSecretCreateGoogleWorkspace, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateHanaDb
     * @param dynamicSecretCreateHanaDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateHanaDbCall(DynamicSecretCreateHanaDb dynamicSecretCreateHanaDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateHanaDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-hanadb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateHanaDbValidateBeforeCall(DynamicSecretCreateHanaDb dynamicSecretCreateHanaDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateHanaDb' is set
        if (dynamicSecretCreateHanaDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateHanaDb' when calling dynamicSecretCreateHanaDb(Async)");
        }

        return dynamicSecretCreateHanaDbCall(dynamicSecretCreateHanaDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateHanaDb  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateHanaDb(DynamicSecretCreateHanaDb dynamicSecretCreateHanaDb) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateHanaDbWithHttpInfo(dynamicSecretCreateHanaDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateHanaDb  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateHanaDbWithHttpInfo(DynamicSecretCreateHanaDb dynamicSecretCreateHanaDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateHanaDbValidateBeforeCall(dynamicSecretCreateHanaDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateHanaDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateHanaDbAsync(DynamicSecretCreateHanaDb dynamicSecretCreateHanaDb, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateHanaDbValidateBeforeCall(dynamicSecretCreateHanaDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateK8s
     * @param dynamicSecretCreateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateK8sCall(DynamicSecretCreateK8s dynamicSecretCreateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateK8s;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateK8sValidateBeforeCall(DynamicSecretCreateK8s dynamicSecretCreateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateK8s' is set
        if (dynamicSecretCreateK8s == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateK8s' when calling dynamicSecretCreateK8s(Async)");
        }

        return dynamicSecretCreateK8sCall(dynamicSecretCreateK8s, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateK8s  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateK8s(DynamicSecretCreateK8s dynamicSecretCreateK8s) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateK8sWithHttpInfo(dynamicSecretCreateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateK8s  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateK8sWithHttpInfo(DynamicSecretCreateK8s dynamicSecretCreateK8s) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateK8sValidateBeforeCall(dynamicSecretCreateK8s, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateK8sAsync(DynamicSecretCreateK8s dynamicSecretCreateK8s, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateK8sValidateBeforeCall(dynamicSecretCreateK8s, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateLdap
     * @param dynamicSecretCreateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateLdapCall(DynamicSecretCreateLdap dynamicSecretCreateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateLdap;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateLdapValidateBeforeCall(DynamicSecretCreateLdap dynamicSecretCreateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateLdap' is set
        if (dynamicSecretCreateLdap == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateLdap' when calling dynamicSecretCreateLdap(Async)");
        }

        return dynamicSecretCreateLdapCall(dynamicSecretCreateLdap, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateLdap  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateLdap(DynamicSecretCreateLdap dynamicSecretCreateLdap) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateLdapWithHttpInfo(dynamicSecretCreateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateLdap  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateLdapWithHttpInfo(DynamicSecretCreateLdap dynamicSecretCreateLdap) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateLdapValidateBeforeCall(dynamicSecretCreateLdap, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateLdapAsync(DynamicSecretCreateLdap dynamicSecretCreateLdap, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateLdapValidateBeforeCall(dynamicSecretCreateLdap, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateMongoDb
     * @param dynamicSecretCreateMongoDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMongoDbCall(DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateMongoDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-mongodb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateMongoDbValidateBeforeCall(DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateMongoDb' is set
        if (dynamicSecretCreateMongoDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateMongoDb' when calling dynamicSecretCreateMongoDb(Async)");
        }

        return dynamicSecretCreateMongoDbCall(dynamicSecretCreateMongoDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMongoDb  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateMongoDb(DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateMongoDbWithHttpInfo(dynamicSecretCreateMongoDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMongoDb  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateMongoDbWithHttpInfo(DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateMongoDbValidateBeforeCall(dynamicSecretCreateMongoDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateMongoDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMongoDbAsync(DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateMongoDbValidateBeforeCall(dynamicSecretCreateMongoDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateMsSql
     * @param dynamicSecretCreateMsSql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMsSqlCall(DynamicSecretCreateMsSql dynamicSecretCreateMsSql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateMsSql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateMsSqlValidateBeforeCall(DynamicSecretCreateMsSql dynamicSecretCreateMsSql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateMsSql' is set
        if (dynamicSecretCreateMsSql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateMsSql' when calling dynamicSecretCreateMsSql(Async)");
        }

        return dynamicSecretCreateMsSqlCall(dynamicSecretCreateMsSql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMsSql  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateMsSql(DynamicSecretCreateMsSql dynamicSecretCreateMsSql) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateMsSqlWithHttpInfo(dynamicSecretCreateMsSql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMsSql  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateMsSqlWithHttpInfo(DynamicSecretCreateMsSql dynamicSecretCreateMsSql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateMsSqlValidateBeforeCall(dynamicSecretCreateMsSql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateMsSql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMsSqlAsync(DynamicSecretCreateMsSql dynamicSecretCreateMsSql, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateMsSqlValidateBeforeCall(dynamicSecretCreateMsSql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateMySql
     * @param dynamicSecretCreateMySql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMySqlCall(DynamicSecretCreateMySql dynamicSecretCreateMySql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateMySql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateMySqlValidateBeforeCall(DynamicSecretCreateMySql dynamicSecretCreateMySql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateMySql' is set
        if (dynamicSecretCreateMySql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateMySql' when calling dynamicSecretCreateMySql(Async)");
        }

        return dynamicSecretCreateMySqlCall(dynamicSecretCreateMySql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMySql  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateMySql(DynamicSecretCreateMySql dynamicSecretCreateMySql) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateMySqlWithHttpInfo(dynamicSecretCreateMySql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateMySql  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateMySqlWithHttpInfo(DynamicSecretCreateMySql dynamicSecretCreateMySql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateMySqlValidateBeforeCall(dynamicSecretCreateMySql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateMySql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateMySqlAsync(DynamicSecretCreateMySql dynamicSecretCreateMySql, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateMySqlValidateBeforeCall(dynamicSecretCreateMySql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateOracleDb
     * @param dynamicSecretCreateOracleDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateOracleDbCall(DynamicSecretCreateOracleDb dynamicSecretCreateOracleDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateOracleDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateOracleDbValidateBeforeCall(DynamicSecretCreateOracleDb dynamicSecretCreateOracleDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateOracleDb' is set
        if (dynamicSecretCreateOracleDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateOracleDb' when calling dynamicSecretCreateOracleDb(Async)");
        }

        return dynamicSecretCreateOracleDbCall(dynamicSecretCreateOracleDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateOracleDb  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateOracleDb(DynamicSecretCreateOracleDb dynamicSecretCreateOracleDb) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateOracleDbWithHttpInfo(dynamicSecretCreateOracleDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateOracleDb  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateOracleDbWithHttpInfo(DynamicSecretCreateOracleDb dynamicSecretCreateOracleDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateOracleDbValidateBeforeCall(dynamicSecretCreateOracleDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateOracleDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateOracleDbAsync(DynamicSecretCreateOracleDb dynamicSecretCreateOracleDb, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateOracleDbValidateBeforeCall(dynamicSecretCreateOracleDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreatePing
     * @param dynamicSecretCreatePing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreatePingCall(DynamicSecretCreatePing dynamicSecretCreatePing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreatePing;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreatePingValidateBeforeCall(DynamicSecretCreatePing dynamicSecretCreatePing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreatePing' is set
        if (dynamicSecretCreatePing == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreatePing' when calling dynamicSecretCreatePing(Async)");
        }

        return dynamicSecretCreatePingCall(dynamicSecretCreatePing, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreatePing  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreatePing(DynamicSecretCreatePing dynamicSecretCreatePing) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreatePingWithHttpInfo(dynamicSecretCreatePing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreatePing  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreatePingWithHttpInfo(DynamicSecretCreatePing dynamicSecretCreatePing) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreatePingValidateBeforeCall(dynamicSecretCreatePing, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreatePing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreatePingAsync(DynamicSecretCreatePing dynamicSecretCreatePing, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreatePingValidateBeforeCall(dynamicSecretCreatePing, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreatePostgreSql
     * @param dynamicSecretCreatePostgreSql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreatePostgreSqlCall(DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreatePostgreSql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreatePostgreSqlValidateBeforeCall(DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreatePostgreSql' is set
        if (dynamicSecretCreatePostgreSql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreatePostgreSql' when calling dynamicSecretCreatePostgreSql(Async)");
        }

        return dynamicSecretCreatePostgreSqlCall(dynamicSecretCreatePostgreSql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreatePostgreSql  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreatePostgreSql(DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreatePostgreSqlWithHttpInfo(dynamicSecretCreatePostgreSql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreatePostgreSql  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreatePostgreSqlWithHttpInfo(DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreatePostgreSqlValidateBeforeCall(dynamicSecretCreatePostgreSql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreatePostgreSql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreatePostgreSqlAsync(DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreatePostgreSqlValidateBeforeCall(dynamicSecretCreatePostgreSql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateRabbitMq
     * @param dynamicSecretCreateRabbitMq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRabbitMqCall(DynamicSecretCreateRabbitMq dynamicSecretCreateRabbitMq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateRabbitMq;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateRabbitMqValidateBeforeCall(DynamicSecretCreateRabbitMq dynamicSecretCreateRabbitMq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateRabbitMq' is set
        if (dynamicSecretCreateRabbitMq == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateRabbitMq' when calling dynamicSecretCreateRabbitMq(Async)");
        }

        return dynamicSecretCreateRabbitMqCall(dynamicSecretCreateRabbitMq, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRabbitMq  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateRabbitMq(DynamicSecretCreateRabbitMq dynamicSecretCreateRabbitMq) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateRabbitMqWithHttpInfo(dynamicSecretCreateRabbitMq);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRabbitMq  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateRabbitMqWithHttpInfo(DynamicSecretCreateRabbitMq dynamicSecretCreateRabbitMq) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateRabbitMqValidateBeforeCall(dynamicSecretCreateRabbitMq, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateRabbitMq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRabbitMqAsync(DynamicSecretCreateRabbitMq dynamicSecretCreateRabbitMq, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateRabbitMqValidateBeforeCall(dynamicSecretCreateRabbitMq, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateRdp
     * @param dynamicSecretCreateRdp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRdpCall(DynamicSecretCreateRdp dynamicSecretCreateRdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateRdp;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-rdp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateRdpValidateBeforeCall(DynamicSecretCreateRdp dynamicSecretCreateRdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateRdp' is set
        if (dynamicSecretCreateRdp == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateRdp' when calling dynamicSecretCreateRdp(Async)");
        }

        return dynamicSecretCreateRdpCall(dynamicSecretCreateRdp, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRdp  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateRdp(DynamicSecretCreateRdp dynamicSecretCreateRdp) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateRdpWithHttpInfo(dynamicSecretCreateRdp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRdp  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateRdpWithHttpInfo(DynamicSecretCreateRdp dynamicSecretCreateRdp) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateRdpValidateBeforeCall(dynamicSecretCreateRdp, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateRdp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRdpAsync(DynamicSecretCreateRdp dynamicSecretCreateRdp, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateRdpValidateBeforeCall(dynamicSecretCreateRdp, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateRedis
     * @param dynamicSecretCreateRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRedisCall(DynamicSecretCreateRedis dynamicSecretCreateRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateRedis;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateRedisValidateBeforeCall(DynamicSecretCreateRedis dynamicSecretCreateRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateRedis' is set
        if (dynamicSecretCreateRedis == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateRedis' when calling dynamicSecretCreateRedis(Async)");
        }

        return dynamicSecretCreateRedisCall(dynamicSecretCreateRedis, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRedis  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateRedis(DynamicSecretCreateRedis dynamicSecretCreateRedis) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateRedisWithHttpInfo(dynamicSecretCreateRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRedis  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateRedisWithHttpInfo(DynamicSecretCreateRedis dynamicSecretCreateRedis) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateRedisValidateBeforeCall(dynamicSecretCreateRedis, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRedisAsync(DynamicSecretCreateRedis dynamicSecretCreateRedis, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateRedisValidateBeforeCall(dynamicSecretCreateRedis, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateRedshift
     * @param dynamicSecretCreateRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRedshiftCall(DynamicSecretCreateRedshift dynamicSecretCreateRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateRedshift;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateRedshiftValidateBeforeCall(DynamicSecretCreateRedshift dynamicSecretCreateRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateRedshift' is set
        if (dynamicSecretCreateRedshift == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateRedshift' when calling dynamicSecretCreateRedshift(Async)");
        }

        return dynamicSecretCreateRedshiftCall(dynamicSecretCreateRedshift, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRedshift  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateRedshift(DynamicSecretCreateRedshift dynamicSecretCreateRedshift) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateRedshiftWithHttpInfo(dynamicSecretCreateRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateRedshift  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateRedshiftWithHttpInfo(DynamicSecretCreateRedshift dynamicSecretCreateRedshift) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateRedshiftValidateBeforeCall(dynamicSecretCreateRedshift, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateRedshiftAsync(DynamicSecretCreateRedshift dynamicSecretCreateRedshift, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateRedshiftValidateBeforeCall(dynamicSecretCreateRedshift, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateSnowflake
     * @param dynamicSecretCreateSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateSnowflakeCall(DynamicSecretCreateSnowflake dynamicSecretCreateSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateSnowflake;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateSnowflakeValidateBeforeCall(DynamicSecretCreateSnowflake dynamicSecretCreateSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateSnowflake' is set
        if (dynamicSecretCreateSnowflake == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateSnowflake' when calling dynamicSecretCreateSnowflake(Async)");
        }

        return dynamicSecretCreateSnowflakeCall(dynamicSecretCreateSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateSnowflake  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateSnowflake(DynamicSecretCreateSnowflake dynamicSecretCreateSnowflake) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateSnowflakeWithHttpInfo(dynamicSecretCreateSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateSnowflake  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateSnowflakeWithHttpInfo(DynamicSecretCreateSnowflake dynamicSecretCreateSnowflake) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateSnowflakeValidateBeforeCall(dynamicSecretCreateSnowflake, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateSnowflakeAsync(DynamicSecretCreateSnowflake dynamicSecretCreateSnowflake, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateSnowflakeValidateBeforeCall(dynamicSecretCreateSnowflake, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretCreateVenafi
     * @param dynamicSecretCreateVenafi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateVenafiCall(DynamicSecretCreateVenafi dynamicSecretCreateVenafi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretCreateVenafi;

        // create path and map variables
        String localVarPath = "/dynamic-secret-create-venafi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretCreateVenafiValidateBeforeCall(DynamicSecretCreateVenafi dynamicSecretCreateVenafi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretCreateVenafi' is set
        if (dynamicSecretCreateVenafi == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretCreateVenafi' when calling dynamicSecretCreateVenafi(Async)");
        }

        return dynamicSecretCreateVenafiCall(dynamicSecretCreateVenafi, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretCreateVenafi  (required)
     * @return DynamicSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretCreateOutput dynamicSecretCreateVenafi(DynamicSecretCreateVenafi dynamicSecretCreateVenafi) throws ApiException {
        ApiResponse<DynamicSecretCreateOutput> localVarResp = dynamicSecretCreateVenafiWithHttpInfo(dynamicSecretCreateVenafi);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretCreateVenafi  (required)
     * @return ApiResponse&lt;DynamicSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretCreateOutput> dynamicSecretCreateVenafiWithHttpInfo(DynamicSecretCreateVenafi dynamicSecretCreateVenafi) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretCreateVenafiValidateBeforeCall(dynamicSecretCreateVenafi, null);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretCreateVenafi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretCreateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretCreateVenafiAsync(DynamicSecretCreateVenafi dynamicSecretCreateVenafi, final ApiCallback<DynamicSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretCreateVenafiValidateBeforeCall(dynamicSecretCreateVenafi, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretDelete
     * @param dynamicSecretDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretDeleteCall(DynamicSecretDelete dynamicSecretDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretDelete;

        // create path and map variables
        String localVarPath = "/dynamic-secret-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretDeleteValidateBeforeCall(DynamicSecretDelete dynamicSecretDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretDelete' is set
        if (dynamicSecretDelete == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretDelete' when calling dynamicSecretDelete(Async)");
        }

        return dynamicSecretDeleteCall(dynamicSecretDelete, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretDelete  (required)
     * @return DynamicSecretDeleteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretDeleteOutput dynamicSecretDelete(DynamicSecretDelete dynamicSecretDelete) throws ApiException {
        ApiResponse<DynamicSecretDeleteOutput> localVarResp = dynamicSecretDeleteWithHttpInfo(dynamicSecretDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretDelete  (required)
     * @return ApiResponse&lt;DynamicSecretDeleteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretDeleteOutput> dynamicSecretDeleteWithHttpInfo(DynamicSecretDelete dynamicSecretDelete) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretDeleteValidateBeforeCall(dynamicSecretDelete, null);
        Type localVarReturnType = new TypeToken<DynamicSecretDeleteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretDeleteAsync(DynamicSecretDelete dynamicSecretDelete, final ApiCallback<DynamicSecretDeleteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretDeleteValidateBeforeCall(dynamicSecretDelete, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretDeleteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretGet
     * @param dynamicSecretGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretGetCall(DynamicSecretGet dynamicSecretGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretGet;

        // create path and map variables
        String localVarPath = "/dynamic-secret-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretGetValidateBeforeCall(DynamicSecretGet dynamicSecretGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretGet' is set
        if (dynamicSecretGet == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretGet' when calling dynamicSecretGet(Async)");
        }

        return dynamicSecretGetCall(dynamicSecretGet, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretGet  (required)
     * @return DSProducerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DSProducerDetails dynamicSecretGet(DynamicSecretGet dynamicSecretGet) throws ApiException {
        ApiResponse<DSProducerDetails> localVarResp = dynamicSecretGetWithHttpInfo(dynamicSecretGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretGet  (required)
     * @return ApiResponse&lt;DSProducerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DSProducerDetails> dynamicSecretGetWithHttpInfo(DynamicSecretGet dynamicSecretGet) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretGetValidateBeforeCall(dynamicSecretGet, null);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretGetAsync(DynamicSecretGet dynamicSecretGet, final ApiCallback<DSProducerDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretGetValidateBeforeCall(dynamicSecretGet, _callback);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretGetValue
     * @param dynamicSecretGetValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretGetValueCall(DynamicSecretGetValue dynamicSecretGetValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretGetValue;

        // create path and map variables
        String localVarPath = "/dynamic-secret-get-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretGetValueValidateBeforeCall(DynamicSecretGetValue dynamicSecretGetValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretGetValue' is set
        if (dynamicSecretGetValue == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretGetValue' when calling dynamicSecretGetValue(Async)");
        }

        return dynamicSecretGetValueCall(dynamicSecretGetValue, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretGetValue  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> dynamicSecretGetValue(DynamicSecretGetValue dynamicSecretGetValue) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = dynamicSecretGetValueWithHttpInfo(dynamicSecretGetValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretGetValue  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> dynamicSecretGetValueWithHttpInfo(DynamicSecretGetValue dynamicSecretGetValue) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretGetValueValidateBeforeCall(dynamicSecretGetValue, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretGetValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretGetValueAsync(DynamicSecretGetValue dynamicSecretGetValue, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretGetValueValidateBeforeCall(dynamicSecretGetValue, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretList
     * @param dynamicSecretList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretListCall(DynamicSecretList dynamicSecretList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretList;

        // create path and map variables
        String localVarPath = "/dynamic-secret-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretListValidateBeforeCall(DynamicSecretList dynamicSecretList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretList' is set
        if (dynamicSecretList == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretList' when calling dynamicSecretList(Async)");
        }

        return dynamicSecretListCall(dynamicSecretList, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretList  (required)
     * @return GetProducersListReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetProducersListReplyObj dynamicSecretList(DynamicSecretList dynamicSecretList) throws ApiException {
        ApiResponse<GetProducersListReplyObj> localVarResp = dynamicSecretListWithHttpInfo(dynamicSecretList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretList  (required)
     * @return ApiResponse&lt;GetProducersListReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProducersListReplyObj> dynamicSecretListWithHttpInfo(DynamicSecretList dynamicSecretList) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretListValidateBeforeCall(dynamicSecretList, null);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretListAsync(DynamicSecretList dynamicSecretList, final ApiCallback<GetProducersListReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretListValidateBeforeCall(dynamicSecretList, _callback);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretTmpCredsDelete
     * @param dynamicSecretTmpCredsDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsDeleteCall(DynamicSecretTmpCredsDelete dynamicSecretTmpCredsDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretTmpCredsDelete;

        // create path and map variables
        String localVarPath = "/dynamic-secret-tmp-creds-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretTmpCredsDeleteValidateBeforeCall(DynamicSecretTmpCredsDelete dynamicSecretTmpCredsDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretTmpCredsDelete' is set
        if (dynamicSecretTmpCredsDelete == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretTmpCredsDelete' when calling dynamicSecretTmpCredsDelete(Async)");
        }

        return dynamicSecretTmpCredsDeleteCall(dynamicSecretTmpCredsDelete, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsDelete  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void dynamicSecretTmpCredsDelete(DynamicSecretTmpCredsDelete dynamicSecretTmpCredsDelete) throws ApiException {
        dynamicSecretTmpCredsDeleteWithHttpInfo(dynamicSecretTmpCredsDelete);
    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsDelete  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dynamicSecretTmpCredsDeleteWithHttpInfo(DynamicSecretTmpCredsDelete dynamicSecretTmpCredsDelete) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretTmpCredsDeleteValidateBeforeCall(dynamicSecretTmpCredsDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretTmpCredsDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsDeleteAsync(DynamicSecretTmpCredsDelete dynamicSecretTmpCredsDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretTmpCredsDeleteValidateBeforeCall(dynamicSecretTmpCredsDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretTmpCredsGet
     * @param dynamicSecretTmpCredsGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsGetCall(DynamicSecretTmpCredsGet dynamicSecretTmpCredsGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretTmpCredsGet;

        // create path and map variables
        String localVarPath = "/dynamic-secret-tmp-creds-Get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretTmpCredsGetValidateBeforeCall(DynamicSecretTmpCredsGet dynamicSecretTmpCredsGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretTmpCredsGet' is set
        if (dynamicSecretTmpCredsGet == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretTmpCredsGet' when calling dynamicSecretTmpCredsGet(Async)");
        }

        return dynamicSecretTmpCredsGetCall(dynamicSecretTmpCredsGet, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsGet  (required)
     * @return List&lt;TmpUserData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public List<TmpUserData> dynamicSecretTmpCredsGet(DynamicSecretTmpCredsGet dynamicSecretTmpCredsGet) throws ApiException {
        ApiResponse<List<TmpUserData>> localVarResp = dynamicSecretTmpCredsGetWithHttpInfo(dynamicSecretTmpCredsGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsGet  (required)
     * @return ApiResponse&lt;List&lt;TmpUserData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TmpUserData>> dynamicSecretTmpCredsGetWithHttpInfo(DynamicSecretTmpCredsGet dynamicSecretTmpCredsGet) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretTmpCredsGetValidateBeforeCall(dynamicSecretTmpCredsGet, null);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretTmpCredsGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsGetAsync(DynamicSecretTmpCredsGet dynamicSecretTmpCredsGet, final ApiCallback<List<TmpUserData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretTmpCredsGetValidateBeforeCall(dynamicSecretTmpCredsGet, _callback);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretTmpCredsUpdate
     * @param dynamicSecretTmpCredsUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsUpdateCall(DynamicSecretTmpCredsUpdate dynamicSecretTmpCredsUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretTmpCredsUpdate;

        // create path and map variables
        String localVarPath = "/dynamic-secret-tmp-creds-update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretTmpCredsUpdateValidateBeforeCall(DynamicSecretTmpCredsUpdate dynamicSecretTmpCredsUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretTmpCredsUpdate' is set
        if (dynamicSecretTmpCredsUpdate == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretTmpCredsUpdate' when calling dynamicSecretTmpCredsUpdate(Async)");
        }

        return dynamicSecretTmpCredsUpdateCall(dynamicSecretTmpCredsUpdate, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsUpdate  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void dynamicSecretTmpCredsUpdate(DynamicSecretTmpCredsUpdate dynamicSecretTmpCredsUpdate) throws ApiException {
        dynamicSecretTmpCredsUpdateWithHttpInfo(dynamicSecretTmpCredsUpdate);
    }

    /**
     * 
     * 
     * @param dynamicSecretTmpCredsUpdate  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dynamicSecretTmpCredsUpdateWithHttpInfo(DynamicSecretTmpCredsUpdate dynamicSecretTmpCredsUpdate) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretTmpCredsUpdateValidateBeforeCall(dynamicSecretTmpCredsUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretTmpCredsUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretTmpCredsUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretTmpCredsUpdateAsync(DynamicSecretTmpCredsUpdate dynamicSecretTmpCredsUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretTmpCredsUpdateValidateBeforeCall(dynamicSecretTmpCredsUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateArtifactory
     * @param dynamicSecretUpdateArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateArtifactoryCall(DynamicSecretUpdateArtifactory dynamicSecretUpdateArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateArtifactory;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateArtifactoryValidateBeforeCall(DynamicSecretUpdateArtifactory dynamicSecretUpdateArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateArtifactory' is set
        if (dynamicSecretUpdateArtifactory == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateArtifactory' when calling dynamicSecretUpdateArtifactory(Async)");
        }

        return dynamicSecretUpdateArtifactoryCall(dynamicSecretUpdateArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateArtifactory  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateArtifactory(DynamicSecretUpdateArtifactory dynamicSecretUpdateArtifactory) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateArtifactoryWithHttpInfo(dynamicSecretUpdateArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateArtifactory  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateArtifactoryWithHttpInfo(DynamicSecretUpdateArtifactory dynamicSecretUpdateArtifactory) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateArtifactoryValidateBeforeCall(dynamicSecretUpdateArtifactory, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateArtifactoryAsync(DynamicSecretUpdateArtifactory dynamicSecretUpdateArtifactory, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateArtifactoryValidateBeforeCall(dynamicSecretUpdateArtifactory, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateAws
     * @param dynamicSecretUpdateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateAwsCall(DynamicSecretUpdateAws dynamicSecretUpdateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateAws;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateAwsValidateBeforeCall(DynamicSecretUpdateAws dynamicSecretUpdateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateAws' is set
        if (dynamicSecretUpdateAws == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateAws' when calling dynamicSecretUpdateAws(Async)");
        }

        return dynamicSecretUpdateAwsCall(dynamicSecretUpdateAws, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateAws  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateAws(DynamicSecretUpdateAws dynamicSecretUpdateAws) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateAwsWithHttpInfo(dynamicSecretUpdateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateAws  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateAwsWithHttpInfo(DynamicSecretUpdateAws dynamicSecretUpdateAws) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateAwsValidateBeforeCall(dynamicSecretUpdateAws, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateAwsAsync(DynamicSecretUpdateAws dynamicSecretUpdateAws, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateAwsValidateBeforeCall(dynamicSecretUpdateAws, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateAzure
     * @param dynamicSecretUpdateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateAzureCall(DynamicSecretUpdateAzure dynamicSecretUpdateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateAzure;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateAzureValidateBeforeCall(DynamicSecretUpdateAzure dynamicSecretUpdateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateAzure' is set
        if (dynamicSecretUpdateAzure == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateAzure' when calling dynamicSecretUpdateAzure(Async)");
        }

        return dynamicSecretUpdateAzureCall(dynamicSecretUpdateAzure, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateAzure  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateAzure(DynamicSecretUpdateAzure dynamicSecretUpdateAzure) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateAzureWithHttpInfo(dynamicSecretUpdateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateAzure  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateAzureWithHttpInfo(DynamicSecretUpdateAzure dynamicSecretUpdateAzure) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateAzureValidateBeforeCall(dynamicSecretUpdateAzure, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateAzureAsync(DynamicSecretUpdateAzure dynamicSecretUpdateAzure, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateAzureValidateBeforeCall(dynamicSecretUpdateAzure, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateCassandra
     * @param dynamicSecretUpdateCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateCassandraCall(DynamicSecretUpdateCassandra dynamicSecretUpdateCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateCassandra;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateCassandraValidateBeforeCall(DynamicSecretUpdateCassandra dynamicSecretUpdateCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateCassandra' is set
        if (dynamicSecretUpdateCassandra == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateCassandra' when calling dynamicSecretUpdateCassandra(Async)");
        }

        return dynamicSecretUpdateCassandraCall(dynamicSecretUpdateCassandra, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateCassandra  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateCassandra(DynamicSecretUpdateCassandra dynamicSecretUpdateCassandra) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateCassandraWithHttpInfo(dynamicSecretUpdateCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateCassandra  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateCassandraWithHttpInfo(DynamicSecretUpdateCassandra dynamicSecretUpdateCassandra) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateCassandraValidateBeforeCall(dynamicSecretUpdateCassandra, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateCassandraAsync(DynamicSecretUpdateCassandra dynamicSecretUpdateCassandra, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateCassandraValidateBeforeCall(dynamicSecretUpdateCassandra, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateCustom
     * @param dynamicSecretUpdateCustom  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateCustomCall(DynamicSecretUpdateCustom dynamicSecretUpdateCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateCustom;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateCustomValidateBeforeCall(DynamicSecretUpdateCustom dynamicSecretUpdateCustom, final ApiCallback _callback) throws ApiException {
        return dynamicSecretUpdateCustomCall(dynamicSecretUpdateCustom, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateCustom  (optional)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateCustom(DynamicSecretUpdateCustom dynamicSecretUpdateCustom) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateCustomWithHttpInfo(dynamicSecretUpdateCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateCustom  (optional)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateCustomWithHttpInfo(DynamicSecretUpdateCustom dynamicSecretUpdateCustom) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateCustomValidateBeforeCall(dynamicSecretUpdateCustom, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateCustom  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dynamicSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateCustomAsync(DynamicSecretUpdateCustom dynamicSecretUpdateCustom, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateCustomValidateBeforeCall(dynamicSecretUpdateCustom, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateDockerhub
     * @param dynamicSecretUpdateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateDockerhubCall(DynamicSecretUpdateDockerhub dynamicSecretUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateDockerhub;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateDockerhubValidateBeforeCall(DynamicSecretUpdateDockerhub dynamicSecretUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateDockerhub' is set
        if (dynamicSecretUpdateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateDockerhub' when calling dynamicSecretUpdateDockerhub(Async)");
        }

        return dynamicSecretUpdateDockerhubCall(dynamicSecretUpdateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateDockerhub  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateDockerhub(DynamicSecretUpdateDockerhub dynamicSecretUpdateDockerhub) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateDockerhubWithHttpInfo(dynamicSecretUpdateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateDockerhub  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateDockerhubWithHttpInfo(DynamicSecretUpdateDockerhub dynamicSecretUpdateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateDockerhubValidateBeforeCall(dynamicSecretUpdateDockerhub, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateDockerhubAsync(DynamicSecretUpdateDockerhub dynamicSecretUpdateDockerhub, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateDockerhubValidateBeforeCall(dynamicSecretUpdateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateEks
     * @param dynamicSecretUpdateEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateEksCall(DynamicSecretUpdateEks dynamicSecretUpdateEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateEks;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateEksValidateBeforeCall(DynamicSecretUpdateEks dynamicSecretUpdateEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateEks' is set
        if (dynamicSecretUpdateEks == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateEks' when calling dynamicSecretUpdateEks(Async)");
        }

        return dynamicSecretUpdateEksCall(dynamicSecretUpdateEks, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateEks  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateEks(DynamicSecretUpdateEks dynamicSecretUpdateEks) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateEksWithHttpInfo(dynamicSecretUpdateEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateEks  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateEksWithHttpInfo(DynamicSecretUpdateEks dynamicSecretUpdateEks) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateEksValidateBeforeCall(dynamicSecretUpdateEks, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateEksAsync(DynamicSecretUpdateEks dynamicSecretUpdateEks, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateEksValidateBeforeCall(dynamicSecretUpdateEks, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateGcp
     * @param dynamicSecretUpdateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGcpCall(DynamicSecretUpdateGcp dynamicSecretUpdateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateGcp;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateGcpValidateBeforeCall(DynamicSecretUpdateGcp dynamicSecretUpdateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateGcp' is set
        if (dynamicSecretUpdateGcp == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateGcp' when calling dynamicSecretUpdateGcp(Async)");
        }

        return dynamicSecretUpdateGcpCall(dynamicSecretUpdateGcp, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGcp  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateGcp(DynamicSecretUpdateGcp dynamicSecretUpdateGcp) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateGcpWithHttpInfo(dynamicSecretUpdateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGcp  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateGcpWithHttpInfo(DynamicSecretUpdateGcp dynamicSecretUpdateGcp) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateGcpValidateBeforeCall(dynamicSecretUpdateGcp, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGcpAsync(DynamicSecretUpdateGcp dynamicSecretUpdateGcp, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateGcpValidateBeforeCall(dynamicSecretUpdateGcp, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateGithub
     * @param dynamicSecretUpdateGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGithubCall(DynamicSecretUpdateGithub dynamicSecretUpdateGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateGithub;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateGithubValidateBeforeCall(DynamicSecretUpdateGithub dynamicSecretUpdateGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateGithub' is set
        if (dynamicSecretUpdateGithub == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateGithub' when calling dynamicSecretUpdateGithub(Async)");
        }

        return dynamicSecretUpdateGithubCall(dynamicSecretUpdateGithub, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGithub  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateGithub(DynamicSecretUpdateGithub dynamicSecretUpdateGithub) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateGithubWithHttpInfo(dynamicSecretUpdateGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGithub  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateGithubWithHttpInfo(DynamicSecretUpdateGithub dynamicSecretUpdateGithub) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateGithubValidateBeforeCall(dynamicSecretUpdateGithub, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGithubAsync(DynamicSecretUpdateGithub dynamicSecretUpdateGithub, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateGithubValidateBeforeCall(dynamicSecretUpdateGithub, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateGitlab
     * @param dynamicSecretUpdateGitlab  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGitlabCall(DynamicSecretUpdateGitlab dynamicSecretUpdateGitlab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateGitlab;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-gitlab";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateGitlabValidateBeforeCall(DynamicSecretUpdateGitlab dynamicSecretUpdateGitlab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateGitlab' is set
        if (dynamicSecretUpdateGitlab == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateGitlab' when calling dynamicSecretUpdateGitlab(Async)");
        }

        return dynamicSecretUpdateGitlabCall(dynamicSecretUpdateGitlab, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGitlab  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateGitlab(DynamicSecretUpdateGitlab dynamicSecretUpdateGitlab) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateGitlabWithHttpInfo(dynamicSecretUpdateGitlab);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGitlab  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateGitlabWithHttpInfo(DynamicSecretUpdateGitlab dynamicSecretUpdateGitlab) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateGitlabValidateBeforeCall(dynamicSecretUpdateGitlab, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateGitlab  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGitlabAsync(DynamicSecretUpdateGitlab dynamicSecretUpdateGitlab, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateGitlabValidateBeforeCall(dynamicSecretUpdateGitlab, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateGke
     * @param dynamicSecretUpdateGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGkeCall(DynamicSecretUpdateGke dynamicSecretUpdateGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateGke;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateGkeValidateBeforeCall(DynamicSecretUpdateGke dynamicSecretUpdateGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateGke' is set
        if (dynamicSecretUpdateGke == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateGke' when calling dynamicSecretUpdateGke(Async)");
        }

        return dynamicSecretUpdateGkeCall(dynamicSecretUpdateGke, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGke  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateGke(DynamicSecretUpdateGke dynamicSecretUpdateGke) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateGkeWithHttpInfo(dynamicSecretUpdateGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGke  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateGkeWithHttpInfo(DynamicSecretUpdateGke dynamicSecretUpdateGke) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateGkeValidateBeforeCall(dynamicSecretUpdateGke, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGkeAsync(DynamicSecretUpdateGke dynamicSecretUpdateGke, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateGkeValidateBeforeCall(dynamicSecretUpdateGke, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateGoogleWorkspace
     * @param dynamicSecretUpdateGoogleWorkspace  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGoogleWorkspaceCall(DynamicSecretUpdateGoogleWorkspace dynamicSecretUpdateGoogleWorkspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateGoogleWorkspace;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-google-workspace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateGoogleWorkspaceValidateBeforeCall(DynamicSecretUpdateGoogleWorkspace dynamicSecretUpdateGoogleWorkspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateGoogleWorkspace' is set
        if (dynamicSecretUpdateGoogleWorkspace == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateGoogleWorkspace' when calling dynamicSecretUpdateGoogleWorkspace(Async)");
        }

        return dynamicSecretUpdateGoogleWorkspaceCall(dynamicSecretUpdateGoogleWorkspace, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGoogleWorkspace  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateGoogleWorkspace(DynamicSecretUpdateGoogleWorkspace dynamicSecretUpdateGoogleWorkspace) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateGoogleWorkspaceWithHttpInfo(dynamicSecretUpdateGoogleWorkspace);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateGoogleWorkspace  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateGoogleWorkspaceWithHttpInfo(DynamicSecretUpdateGoogleWorkspace dynamicSecretUpdateGoogleWorkspace) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateGoogleWorkspaceValidateBeforeCall(dynamicSecretUpdateGoogleWorkspace, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateGoogleWorkspace  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateGoogleWorkspaceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateGoogleWorkspaceAsync(DynamicSecretUpdateGoogleWorkspace dynamicSecretUpdateGoogleWorkspace, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateGoogleWorkspaceValidateBeforeCall(dynamicSecretUpdateGoogleWorkspace, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateHanaDb
     * @param dynamicSecretUpdateHanaDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateHanaDbCall(DynamicSecretUpdateHanaDb dynamicSecretUpdateHanaDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateHanaDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-hana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateHanaDbValidateBeforeCall(DynamicSecretUpdateHanaDb dynamicSecretUpdateHanaDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateHanaDb' is set
        if (dynamicSecretUpdateHanaDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateHanaDb' when calling dynamicSecretUpdateHanaDb(Async)");
        }

        return dynamicSecretUpdateHanaDbCall(dynamicSecretUpdateHanaDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateHanaDb  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateHanaDb(DynamicSecretUpdateHanaDb dynamicSecretUpdateHanaDb) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateHanaDbWithHttpInfo(dynamicSecretUpdateHanaDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateHanaDb  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateHanaDbWithHttpInfo(DynamicSecretUpdateHanaDb dynamicSecretUpdateHanaDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateHanaDbValidateBeforeCall(dynamicSecretUpdateHanaDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateHanaDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateHanaDbAsync(DynamicSecretUpdateHanaDb dynamicSecretUpdateHanaDb, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateHanaDbValidateBeforeCall(dynamicSecretUpdateHanaDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateK8s
     * @param dynamicSecretUpdateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateK8sCall(DynamicSecretUpdateK8s dynamicSecretUpdateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateK8s;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateK8sValidateBeforeCall(DynamicSecretUpdateK8s dynamicSecretUpdateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateK8s' is set
        if (dynamicSecretUpdateK8s == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateK8s' when calling dynamicSecretUpdateK8s(Async)");
        }

        return dynamicSecretUpdateK8sCall(dynamicSecretUpdateK8s, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateK8s  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateK8s(DynamicSecretUpdateK8s dynamicSecretUpdateK8s) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateK8sWithHttpInfo(dynamicSecretUpdateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateK8s  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateK8sWithHttpInfo(DynamicSecretUpdateK8s dynamicSecretUpdateK8s) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateK8sValidateBeforeCall(dynamicSecretUpdateK8s, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateK8sAsync(DynamicSecretUpdateK8s dynamicSecretUpdateK8s, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateK8sValidateBeforeCall(dynamicSecretUpdateK8s, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateLdap
     * @param dynamicSecretUpdateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateLdapCall(DynamicSecretUpdateLdap dynamicSecretUpdateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateLdap;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateLdapValidateBeforeCall(DynamicSecretUpdateLdap dynamicSecretUpdateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateLdap' is set
        if (dynamicSecretUpdateLdap == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateLdap' when calling dynamicSecretUpdateLdap(Async)");
        }

        return dynamicSecretUpdateLdapCall(dynamicSecretUpdateLdap, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateLdap  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateLdap(DynamicSecretUpdateLdap dynamicSecretUpdateLdap) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateLdapWithHttpInfo(dynamicSecretUpdateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateLdap  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateLdapWithHttpInfo(DynamicSecretUpdateLdap dynamicSecretUpdateLdap) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateLdapValidateBeforeCall(dynamicSecretUpdateLdap, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateLdapAsync(DynamicSecretUpdateLdap dynamicSecretUpdateLdap, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateLdapValidateBeforeCall(dynamicSecretUpdateLdap, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateMongoDb
     * @param dynamicSecretUpdateMongoDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMongoDbCall(DynamicSecretUpdateMongoDb dynamicSecretUpdateMongoDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateMongoDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-mongo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateMongoDbValidateBeforeCall(DynamicSecretUpdateMongoDb dynamicSecretUpdateMongoDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateMongoDb' is set
        if (dynamicSecretUpdateMongoDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateMongoDb' when calling dynamicSecretUpdateMongoDb(Async)");
        }

        return dynamicSecretUpdateMongoDbCall(dynamicSecretUpdateMongoDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMongoDb  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateMongoDb(DynamicSecretUpdateMongoDb dynamicSecretUpdateMongoDb) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateMongoDbWithHttpInfo(dynamicSecretUpdateMongoDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMongoDb  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateMongoDbWithHttpInfo(DynamicSecretUpdateMongoDb dynamicSecretUpdateMongoDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateMongoDbValidateBeforeCall(dynamicSecretUpdateMongoDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateMongoDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMongoDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMongoDbAsync(DynamicSecretUpdateMongoDb dynamicSecretUpdateMongoDb, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateMongoDbValidateBeforeCall(dynamicSecretUpdateMongoDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateMsSql
     * @param dynamicSecretUpdateMsSql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMsSqlCall(DynamicSecretUpdateMsSql dynamicSecretUpdateMsSql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateMsSql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateMsSqlValidateBeforeCall(DynamicSecretUpdateMsSql dynamicSecretUpdateMsSql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateMsSql' is set
        if (dynamicSecretUpdateMsSql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateMsSql' when calling dynamicSecretUpdateMsSql(Async)");
        }

        return dynamicSecretUpdateMsSqlCall(dynamicSecretUpdateMsSql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMsSql  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateMsSql(DynamicSecretUpdateMsSql dynamicSecretUpdateMsSql) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateMsSqlWithHttpInfo(dynamicSecretUpdateMsSql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMsSql  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateMsSqlWithHttpInfo(DynamicSecretUpdateMsSql dynamicSecretUpdateMsSql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateMsSqlValidateBeforeCall(dynamicSecretUpdateMsSql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateMsSql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMsSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMsSqlAsync(DynamicSecretUpdateMsSql dynamicSecretUpdateMsSql, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateMsSqlValidateBeforeCall(dynamicSecretUpdateMsSql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateMySql
     * @param dynamicSecretUpdateMySql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMySqlCall(DynamicSecretUpdateMySql dynamicSecretUpdateMySql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateMySql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateMySqlValidateBeforeCall(DynamicSecretUpdateMySql dynamicSecretUpdateMySql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateMySql' is set
        if (dynamicSecretUpdateMySql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateMySql' when calling dynamicSecretUpdateMySql(Async)");
        }

        return dynamicSecretUpdateMySqlCall(dynamicSecretUpdateMySql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMySql  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateMySql(DynamicSecretUpdateMySql dynamicSecretUpdateMySql) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateMySqlWithHttpInfo(dynamicSecretUpdateMySql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateMySql  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateMySqlWithHttpInfo(DynamicSecretUpdateMySql dynamicSecretUpdateMySql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateMySqlValidateBeforeCall(dynamicSecretUpdateMySql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateMySql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateMySqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateMySqlAsync(DynamicSecretUpdateMySql dynamicSecretUpdateMySql, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateMySqlValidateBeforeCall(dynamicSecretUpdateMySql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateOracleDb
     * @param dynamicSecretUpdateOracleDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateOracleDbCall(DynamicSecretUpdateOracleDb dynamicSecretUpdateOracleDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateOracleDb;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateOracleDbValidateBeforeCall(DynamicSecretUpdateOracleDb dynamicSecretUpdateOracleDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateOracleDb' is set
        if (dynamicSecretUpdateOracleDb == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateOracleDb' when calling dynamicSecretUpdateOracleDb(Async)");
        }

        return dynamicSecretUpdateOracleDbCall(dynamicSecretUpdateOracleDb, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateOracleDb  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateOracleDb(DynamicSecretUpdateOracleDb dynamicSecretUpdateOracleDb) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateOracleDbWithHttpInfo(dynamicSecretUpdateOracleDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateOracleDb  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateOracleDbWithHttpInfo(DynamicSecretUpdateOracleDb dynamicSecretUpdateOracleDb) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateOracleDbValidateBeforeCall(dynamicSecretUpdateOracleDb, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateOracleDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateOracleDbAsync(DynamicSecretUpdateOracleDb dynamicSecretUpdateOracleDb, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateOracleDbValidateBeforeCall(dynamicSecretUpdateOracleDb, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdatePing
     * @param dynamicSecretUpdatePing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdatePingCall(DynamicSecretUpdatePing dynamicSecretUpdatePing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdatePing;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdatePingValidateBeforeCall(DynamicSecretUpdatePing dynamicSecretUpdatePing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdatePing' is set
        if (dynamicSecretUpdatePing == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdatePing' when calling dynamicSecretUpdatePing(Async)");
        }

        return dynamicSecretUpdatePingCall(dynamicSecretUpdatePing, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdatePing  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdatePing(DynamicSecretUpdatePing dynamicSecretUpdatePing) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdatePingWithHttpInfo(dynamicSecretUpdatePing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdatePing  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdatePingWithHttpInfo(DynamicSecretUpdatePing dynamicSecretUpdatePing) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdatePingValidateBeforeCall(dynamicSecretUpdatePing, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdatePing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdatePingAsync(DynamicSecretUpdatePing dynamicSecretUpdatePing, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdatePingValidateBeforeCall(dynamicSecretUpdatePing, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdatePostgreSql
     * @param dynamicSecretUpdatePostgreSql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdatePostgreSqlCall(DynamicSecretUpdatePostgreSql dynamicSecretUpdatePostgreSql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdatePostgreSql;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdatePostgreSqlValidateBeforeCall(DynamicSecretUpdatePostgreSql dynamicSecretUpdatePostgreSql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdatePostgreSql' is set
        if (dynamicSecretUpdatePostgreSql == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdatePostgreSql' when calling dynamicSecretUpdatePostgreSql(Async)");
        }

        return dynamicSecretUpdatePostgreSqlCall(dynamicSecretUpdatePostgreSql, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdatePostgreSql  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdatePostgreSql(DynamicSecretUpdatePostgreSql dynamicSecretUpdatePostgreSql) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdatePostgreSqlWithHttpInfo(dynamicSecretUpdatePostgreSql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdatePostgreSql  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdatePostgreSqlWithHttpInfo(DynamicSecretUpdatePostgreSql dynamicSecretUpdatePostgreSql) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdatePostgreSqlValidateBeforeCall(dynamicSecretUpdatePostgreSql, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdatePostgreSql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdatePostgreSqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdatePostgreSqlAsync(DynamicSecretUpdatePostgreSql dynamicSecretUpdatePostgreSql, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdatePostgreSqlValidateBeforeCall(dynamicSecretUpdatePostgreSql, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateRabbitMq
     * @param dynamicSecretUpdateRabbitMq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRabbitMqCall(DynamicSecretUpdateRabbitMq dynamicSecretUpdateRabbitMq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateRabbitMq;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateRabbitMqValidateBeforeCall(DynamicSecretUpdateRabbitMq dynamicSecretUpdateRabbitMq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateRabbitMq' is set
        if (dynamicSecretUpdateRabbitMq == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateRabbitMq' when calling dynamicSecretUpdateRabbitMq(Async)");
        }

        return dynamicSecretUpdateRabbitMqCall(dynamicSecretUpdateRabbitMq, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRabbitMq  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateRabbitMq(DynamicSecretUpdateRabbitMq dynamicSecretUpdateRabbitMq) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateRabbitMqWithHttpInfo(dynamicSecretUpdateRabbitMq);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRabbitMq  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateRabbitMqWithHttpInfo(DynamicSecretUpdateRabbitMq dynamicSecretUpdateRabbitMq) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateRabbitMqValidateBeforeCall(dynamicSecretUpdateRabbitMq, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateRabbitMq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRabbitMqAsync(DynamicSecretUpdateRabbitMq dynamicSecretUpdateRabbitMq, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateRabbitMqValidateBeforeCall(dynamicSecretUpdateRabbitMq, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateRdp
     * @param dynamicSecretUpdateRdp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRdpCall(DynamicSecretUpdateRdp dynamicSecretUpdateRdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateRdp;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-rdp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateRdpValidateBeforeCall(DynamicSecretUpdateRdp dynamicSecretUpdateRdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateRdp' is set
        if (dynamicSecretUpdateRdp == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateRdp' when calling dynamicSecretUpdateRdp(Async)");
        }

        return dynamicSecretUpdateRdpCall(dynamicSecretUpdateRdp, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRdp  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateRdp(DynamicSecretUpdateRdp dynamicSecretUpdateRdp) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateRdpWithHttpInfo(dynamicSecretUpdateRdp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRdp  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateRdpWithHttpInfo(DynamicSecretUpdateRdp dynamicSecretUpdateRdp) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateRdpValidateBeforeCall(dynamicSecretUpdateRdp, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateRdp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRdpAsync(DynamicSecretUpdateRdp dynamicSecretUpdateRdp, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateRdpValidateBeforeCall(dynamicSecretUpdateRdp, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateRedis
     * @param dynamicSecretUpdateRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRedisCall(DynamicSecretUpdateRedis dynamicSecretUpdateRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateRedis;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateRedisValidateBeforeCall(DynamicSecretUpdateRedis dynamicSecretUpdateRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateRedis' is set
        if (dynamicSecretUpdateRedis == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateRedis' when calling dynamicSecretUpdateRedis(Async)");
        }

        return dynamicSecretUpdateRedisCall(dynamicSecretUpdateRedis, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRedis  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateRedis(DynamicSecretUpdateRedis dynamicSecretUpdateRedis) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateRedisWithHttpInfo(dynamicSecretUpdateRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRedis  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateRedisWithHttpInfo(DynamicSecretUpdateRedis dynamicSecretUpdateRedis) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateRedisValidateBeforeCall(dynamicSecretUpdateRedis, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRedisAsync(DynamicSecretUpdateRedis dynamicSecretUpdateRedis, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateRedisValidateBeforeCall(dynamicSecretUpdateRedis, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateRedshift
     * @param dynamicSecretUpdateRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRedshiftCall(DynamicSecretUpdateRedshift dynamicSecretUpdateRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateRedshift;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateRedshiftValidateBeforeCall(DynamicSecretUpdateRedshift dynamicSecretUpdateRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateRedshift' is set
        if (dynamicSecretUpdateRedshift == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateRedshift' when calling dynamicSecretUpdateRedshift(Async)");
        }

        return dynamicSecretUpdateRedshiftCall(dynamicSecretUpdateRedshift, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRedshift  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateRedshift(DynamicSecretUpdateRedshift dynamicSecretUpdateRedshift) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateRedshiftWithHttpInfo(dynamicSecretUpdateRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateRedshift  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateRedshiftWithHttpInfo(DynamicSecretUpdateRedshift dynamicSecretUpdateRedshift) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateRedshiftValidateBeforeCall(dynamicSecretUpdateRedshift, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateRedshiftAsync(DynamicSecretUpdateRedshift dynamicSecretUpdateRedshift, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateRedshiftValidateBeforeCall(dynamicSecretUpdateRedshift, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateSnowflake
     * @param dynamicSecretUpdateSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateSnowflakeCall(DynamicSecretUpdateSnowflake dynamicSecretUpdateSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateSnowflake;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateSnowflakeValidateBeforeCall(DynamicSecretUpdateSnowflake dynamicSecretUpdateSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateSnowflake' is set
        if (dynamicSecretUpdateSnowflake == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateSnowflake' when calling dynamicSecretUpdateSnowflake(Async)");
        }

        return dynamicSecretUpdateSnowflakeCall(dynamicSecretUpdateSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateSnowflake  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateSnowflake(DynamicSecretUpdateSnowflake dynamicSecretUpdateSnowflake) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateSnowflakeWithHttpInfo(dynamicSecretUpdateSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateSnowflake  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateSnowflakeWithHttpInfo(DynamicSecretUpdateSnowflake dynamicSecretUpdateSnowflake) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateSnowflakeValidateBeforeCall(dynamicSecretUpdateSnowflake, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateSnowflakeAsync(DynamicSecretUpdateSnowflake dynamicSecretUpdateSnowflake, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateSnowflakeValidateBeforeCall(dynamicSecretUpdateSnowflake, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dynamicSecretUpdateVenafi
     * @param dynamicSecretUpdateVenafi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateVenafiCall(DynamicSecretUpdateVenafi dynamicSecretUpdateVenafi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicSecretUpdateVenafi;

        // create path and map variables
        String localVarPath = "/dynamic-secret-update-venafi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dynamicSecretUpdateVenafiValidateBeforeCall(DynamicSecretUpdateVenafi dynamicSecretUpdateVenafi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dynamicSecretUpdateVenafi' is set
        if (dynamicSecretUpdateVenafi == null) {
            throw new ApiException("Missing the required parameter 'dynamicSecretUpdateVenafi' when calling dynamicSecretUpdateVenafi(Async)");
        }

        return dynamicSecretUpdateVenafiCall(dynamicSecretUpdateVenafi, _callback);

    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateVenafi  (required)
     * @return DynamicSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DynamicSecretUpdateOutput dynamicSecretUpdateVenafi(DynamicSecretUpdateVenafi dynamicSecretUpdateVenafi) throws ApiException {
        ApiResponse<DynamicSecretUpdateOutput> localVarResp = dynamicSecretUpdateVenafiWithHttpInfo(dynamicSecretUpdateVenafi);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dynamicSecretUpdateVenafi  (required)
     * @return ApiResponse&lt;DynamicSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicSecretUpdateOutput> dynamicSecretUpdateVenafiWithHttpInfo(DynamicSecretUpdateVenafi dynamicSecretUpdateVenafi) throws ApiException {
        okhttp3.Call localVarCall = dynamicSecretUpdateVenafiValidateBeforeCall(dynamicSecretUpdateVenafi, null);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dynamicSecretUpdateVenafi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> dynamicSecretUpdateVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dynamicSecretUpdateVenafiAsync(DynamicSecretUpdateVenafi dynamicSecretUpdateVenafi, final ApiCallback<DynamicSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = dynamicSecretUpdateVenafiValidateBeforeCall(dynamicSecretUpdateVenafi, _callback);
        Type localVarReturnType = new TypeToken<DynamicSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encrypt
     * @param encrypt  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptCall(Encrypt encrypt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = encrypt;

        // create path and map variables
        String localVarPath = "/encrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptValidateBeforeCall(Encrypt encrypt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'encrypt' is set
        if (encrypt == null) {
            throw new ApiException("Missing the required parameter 'encrypt' when calling encrypt(Async)");
        }

        return encryptCall(encrypt, _callback);

    }

    /**
     * 
     * 
     * @param encrypt  (required)
     * @return EncryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptOutput encrypt(Encrypt encrypt) throws ApiException {
        ApiResponse<EncryptOutput> localVarResp = encryptWithHttpInfo(encrypt);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param encrypt  (required)
     * @return ApiResponse&lt;EncryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptOutput> encryptWithHttpInfo(Encrypt encrypt) throws ApiException {
        okhttp3.Call localVarCall = encryptValidateBeforeCall(encrypt, null);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param encrypt  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptAsync(Encrypt encrypt, final ApiCallback<EncryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptValidateBeforeCall(encrypt, _callback);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptBatch
     * @param batchEncryptionRequestLine  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptBatchCall(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchEncryptionRequestLine;

        // create path and map variables
        String localVarPath = "/encrypt-batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptBatchValidateBeforeCall(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchEncryptionRequestLine' is set
        if (batchEncryptionRequestLine == null) {
            throw new ApiException("Missing the required parameter 'batchEncryptionRequestLine' when calling encryptBatch(Async)");
        }

        return encryptBatchCall(batchEncryptionRequestLine, _callback);

    }

    /**
     * 
     * 
     * @param batchEncryptionRequestLine  (required)
     * @return EncryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptOutput encryptBatch(List<BatchEncryptionRequestLine> batchEncryptionRequestLine) throws ApiException {
        ApiResponse<EncryptOutput> localVarResp = encryptBatchWithHttpInfo(batchEncryptionRequestLine);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batchEncryptionRequestLine  (required)
     * @return ApiResponse&lt;EncryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptOutput> encryptBatchWithHttpInfo(List<BatchEncryptionRequestLine> batchEncryptionRequestLine) throws ApiException {
        okhttp3.Call localVarCall = encryptBatchValidateBeforeCall(batchEncryptionRequestLine, null);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batchEncryptionRequestLine  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptBatchAsync(List<BatchEncryptionRequestLine> batchEncryptionRequestLine, final ApiCallback<EncryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptBatchValidateBeforeCall(batchEncryptionRequestLine, _callback);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptGPG
     * @param encryptGPG  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptGPGCall(EncryptGPG encryptGPG, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = encryptGPG;

        // create path and map variables
        String localVarPath = "/encrypt-gpg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptGPGValidateBeforeCall(EncryptGPG encryptGPG, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'encryptGPG' is set
        if (encryptGPG == null) {
            throw new ApiException("Missing the required parameter 'encryptGPG' when calling encryptGPG(Async)");
        }

        return encryptGPGCall(encryptGPG, _callback);

    }

    /**
     * 
     * 
     * @param encryptGPG  (required)
     * @return EncryptGPGOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptGPGOutput encryptGPG(EncryptGPG encryptGPG) throws ApiException {
        ApiResponse<EncryptGPGOutput> localVarResp = encryptGPGWithHttpInfo(encryptGPG);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param encryptGPG  (required)
     * @return ApiResponse&lt;EncryptGPGOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptGPGOutput> encryptGPGWithHttpInfo(EncryptGPG encryptGPG) throws ApiException {
        okhttp3.Call localVarCall = encryptGPGValidateBeforeCall(encryptGPG, null);
        Type localVarReturnType = new TypeToken<EncryptGPGOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param encryptGPG  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptGPGAsync(EncryptGPG encryptGPG, final ApiCallback<EncryptGPGOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptGPGValidateBeforeCall(encryptGPG, _callback);
        Type localVarReturnType = new TypeToken<EncryptGPGOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptWithClassicKey
     * @param encryptWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptWithClassicKeyCall(EncryptWithClassicKey encryptWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = encryptWithClassicKey;

        // create path and map variables
        String localVarPath = "/encrypt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptWithClassicKeyValidateBeforeCall(EncryptWithClassicKey encryptWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'encryptWithClassicKey' is set
        if (encryptWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'encryptWithClassicKey' when calling encryptWithClassicKey(Async)");
        }

        return encryptWithClassicKeyCall(encryptWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param encryptWithClassicKey  (required)
     * @return EncryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptOutput encryptWithClassicKey(EncryptWithClassicKey encryptWithClassicKey) throws ApiException {
        ApiResponse<EncryptOutput> localVarResp = encryptWithClassicKeyWithHttpInfo(encryptWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param encryptWithClassicKey  (required)
     * @return ApiResponse&lt;EncryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptOutput> encryptWithClassicKeyWithHttpInfo(EncryptWithClassicKey encryptWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = encryptWithClassicKeyValidateBeforeCall(encryptWithClassicKey, null);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param encryptWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptWithClassicKeyAsync(EncryptWithClassicKey encryptWithClassicKey, final ApiCallback<EncryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptWithClassicKeyValidateBeforeCall(encryptWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esmCreate
     * @param esmCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmCreateCall(EsmCreate esmCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = esmCreate;

        // create path and map variables
        String localVarPath = "/esm-create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esmCreateValidateBeforeCall(EsmCreate esmCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esmCreate' is set
        if (esmCreate == null) {
            throw new ApiException("Missing the required parameter 'esmCreate' when calling esmCreate(Async)");
        }

        return esmCreateCall(esmCreate, _callback);

    }

    /**
     * 
     * 
     * @param esmCreate  (required)
     * @return EsmCreateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EsmCreateSecretOutput esmCreate(EsmCreate esmCreate) throws ApiException {
        ApiResponse<EsmCreateSecretOutput> localVarResp = esmCreateWithHttpInfo(esmCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param esmCreate  (required)
     * @return ApiResponse&lt;EsmCreateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EsmCreateSecretOutput> esmCreateWithHttpInfo(EsmCreate esmCreate) throws ApiException {
        okhttp3.Call localVarCall = esmCreateValidateBeforeCall(esmCreate, null);
        Type localVarReturnType = new TypeToken<EsmCreateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param esmCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmCreateAsync(EsmCreate esmCreate, final ApiCallback<EsmCreateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = esmCreateValidateBeforeCall(esmCreate, _callback);
        Type localVarReturnType = new TypeToken<EsmCreateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esmDelete
     * @param esmDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> esmDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmDeleteCall(EsmDelete esmDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = esmDelete;

        // create path and map variables
        String localVarPath = "/esm-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esmDeleteValidateBeforeCall(EsmDelete esmDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esmDelete' is set
        if (esmDelete == null) {
            throw new ApiException("Missing the required parameter 'esmDelete' when calling esmDelete(Async)");
        }

        return esmDeleteCall(esmDelete, _callback);

    }

    /**
     * 
     * 
     * @param esmDelete  (required)
     * @return EsmDeleteSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> esmDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EsmDeleteSecretOutput esmDelete(EsmDelete esmDelete) throws ApiException {
        ApiResponse<EsmDeleteSecretOutput> localVarResp = esmDeleteWithHttpInfo(esmDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param esmDelete  (required)
     * @return ApiResponse&lt;EsmDeleteSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> esmDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EsmDeleteSecretOutput> esmDeleteWithHttpInfo(EsmDelete esmDelete) throws ApiException {
        okhttp3.Call localVarCall = esmDeleteValidateBeforeCall(esmDelete, null);
        Type localVarReturnType = new TypeToken<EsmDeleteSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param esmDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> esmDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmDeleteAsync(EsmDelete esmDelete, final ApiCallback<EsmDeleteSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = esmDeleteValidateBeforeCall(esmDelete, _callback);
        Type localVarReturnType = new TypeToken<EsmDeleteSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esmGet
     * @param esmGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmGetCall(EsmGet esmGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = esmGet;

        // create path and map variables
        String localVarPath = "/esm-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esmGetValidateBeforeCall(EsmGet esmGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esmGet' is set
        if (esmGet == null) {
            throw new ApiException("Missing the required parameter 'esmGet' when calling esmGet(Async)");
        }

        return esmGetCall(esmGet, _callback);

    }

    /**
     * 
     * 
     * @param esmGet  (required)
     * @return EsmGetSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EsmGetSecretOutput esmGet(EsmGet esmGet) throws ApiException {
        ApiResponse<EsmGetSecretOutput> localVarResp = esmGetWithHttpInfo(esmGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param esmGet  (required)
     * @return ApiResponse&lt;EsmGetSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EsmGetSecretOutput> esmGetWithHttpInfo(EsmGet esmGet) throws ApiException {
        okhttp3.Call localVarCall = esmGetValidateBeforeCall(esmGet, null);
        Type localVarReturnType = new TypeToken<EsmGetSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param esmGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmGetAsync(EsmGet esmGet, final ApiCallback<EsmGetSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = esmGetValidateBeforeCall(esmGet, _callback);
        Type localVarReturnType = new TypeToken<EsmGetSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esmList
     * @param esmList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmListCall(EsmList esmList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = esmList;

        // create path and map variables
        String localVarPath = "/esm-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esmListValidateBeforeCall(EsmList esmList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esmList' is set
        if (esmList == null) {
            throw new ApiException("Missing the required parameter 'esmList' when calling esmList(Async)");
        }

        return esmListCall(esmList, _callback);

    }

    /**
     * 
     * 
     * @param esmList  (required)
     * @return EsmListSecretsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EsmListSecretsOutput esmList(EsmList esmList) throws ApiException {
        ApiResponse<EsmListSecretsOutput> localVarResp = esmListWithHttpInfo(esmList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param esmList  (required)
     * @return ApiResponse&lt;EsmListSecretsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EsmListSecretsOutput> esmListWithHttpInfo(EsmList esmList) throws ApiException {
        okhttp3.Call localVarCall = esmListValidateBeforeCall(esmList, null);
        Type localVarReturnType = new TypeToken<EsmListSecretsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param esmList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmListAsync(EsmList esmList, final ApiCallback<EsmListSecretsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = esmListValidateBeforeCall(esmList, _callback);
        Type localVarReturnType = new TypeToken<EsmListSecretsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for esmUpdate
     * @param esmUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmUpdateCall(EsmUpdate esmUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = esmUpdate;

        // create path and map variables
        String localVarPath = "/esm-update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call esmUpdateValidateBeforeCall(EsmUpdate esmUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'esmUpdate' is set
        if (esmUpdate == null) {
            throw new ApiException("Missing the required parameter 'esmUpdate' when calling esmUpdate(Async)");
        }

        return esmUpdateCall(esmUpdate, _callback);

    }

    /**
     * 
     * 
     * @param esmUpdate  (required)
     * @return EsmUpdateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EsmUpdateSecretOutput esmUpdate(EsmUpdate esmUpdate) throws ApiException {
        ApiResponse<EsmUpdateSecretOutput> localVarResp = esmUpdateWithHttpInfo(esmUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param esmUpdate  (required)
     * @return ApiResponse&lt;EsmUpdateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EsmUpdateSecretOutput> esmUpdateWithHttpInfo(EsmUpdate esmUpdate) throws ApiException {
        okhttp3.Call localVarCall = esmUpdateValidateBeforeCall(esmUpdate, null);
        Type localVarReturnType = new TypeToken<EsmUpdateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param esmUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> esmUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call esmUpdateAsync(EsmUpdate esmUpdate, final ApiCallback<EsmUpdateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = esmUpdateValidateBeforeCall(esmUpdate, _callback);
        Type localVarReturnType = new TypeToken<EsmUpdateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventAction
     * @param eventAction  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventActionResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventActionCall(EventAction eventAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventAction;

        // create path and map variables
        String localVarPath = "/event-action";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventActionValidateBeforeCall(EventAction eventAction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventAction' is set
        if (eventAction == null) {
            throw new ApiException("Missing the required parameter 'eventAction' when calling eventAction(Async)");
        }

        return eventActionCall(eventAction, _callback);

    }

    /**
     * 
     * 
     * @param eventAction  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventActionResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object eventAction(EventAction eventAction) throws ApiException {
        ApiResponse<Object> localVarResp = eventActionWithHttpInfo(eventAction);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventAction  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventActionResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> eventActionWithHttpInfo(EventAction eventAction) throws ApiException {
        okhttp3.Call localVarCall = eventActionValidateBeforeCall(eventAction, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventAction  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventActionResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventActionAsync(EventAction eventAction, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventActionValidateBeforeCall(eventAction, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderCreateEmail
     * @param eventForwarderCreateEmail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateEmailCall(EventForwarderCreateEmail eventForwarderCreateEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderCreateEmail;

        // create path and map variables
        String localVarPath = "/event-forwarder-create-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderCreateEmailValidateBeforeCall(EventForwarderCreateEmail eventForwarderCreateEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderCreateEmail' is set
        if (eventForwarderCreateEmail == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderCreateEmail' when calling eventForwarderCreateEmail(Async)");
        }

        return eventForwarderCreateEmailCall(eventForwarderCreateEmail, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderCreateEmail  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderCreateEmail(EventForwarderCreateEmail eventForwarderCreateEmail) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderCreateEmailWithHttpInfo(eventForwarderCreateEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderCreateEmail  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderCreateEmailWithHttpInfo(EventForwarderCreateEmail eventForwarderCreateEmail) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderCreateEmailValidateBeforeCall(eventForwarderCreateEmail, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderCreateEmail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateEmailAsync(EventForwarderCreateEmail eventForwarderCreateEmail, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderCreateEmailValidateBeforeCall(eventForwarderCreateEmail, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderCreateServiceNow
     * @param eventForwarderCreateServiceNow  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateServiceNowCall(EventForwarderCreateServiceNow eventForwarderCreateServiceNow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderCreateServiceNow;

        // create path and map variables
        String localVarPath = "/event-forwarder-create-servicenow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderCreateServiceNowValidateBeforeCall(EventForwarderCreateServiceNow eventForwarderCreateServiceNow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderCreateServiceNow' is set
        if (eventForwarderCreateServiceNow == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderCreateServiceNow' when calling eventForwarderCreateServiceNow(Async)");
        }

        return eventForwarderCreateServiceNowCall(eventForwarderCreateServiceNow, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderCreateServiceNow  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderCreateServiceNow(EventForwarderCreateServiceNow eventForwarderCreateServiceNow) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderCreateServiceNowWithHttpInfo(eventForwarderCreateServiceNow);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderCreateServiceNow  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderCreateServiceNowWithHttpInfo(EventForwarderCreateServiceNow eventForwarderCreateServiceNow) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderCreateServiceNowValidateBeforeCall(eventForwarderCreateServiceNow, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderCreateServiceNow  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateServiceNowAsync(EventForwarderCreateServiceNow eventForwarderCreateServiceNow, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderCreateServiceNowValidateBeforeCall(eventForwarderCreateServiceNow, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderCreateSlack
     * @param eventForwarderCreateSlack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateSlackCall(EventForwarderCreateSlack eventForwarderCreateSlack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderCreateSlack;

        // create path and map variables
        String localVarPath = "/event-forwarder-create-slack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderCreateSlackValidateBeforeCall(EventForwarderCreateSlack eventForwarderCreateSlack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderCreateSlack' is set
        if (eventForwarderCreateSlack == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderCreateSlack' when calling eventForwarderCreateSlack(Async)");
        }

        return eventForwarderCreateSlackCall(eventForwarderCreateSlack, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderCreateSlack  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderCreateSlack(EventForwarderCreateSlack eventForwarderCreateSlack) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderCreateSlackWithHttpInfo(eventForwarderCreateSlack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderCreateSlack  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderCreateSlackWithHttpInfo(EventForwarderCreateSlack eventForwarderCreateSlack) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderCreateSlackValidateBeforeCall(eventForwarderCreateSlack, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderCreateSlack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateSlackAsync(EventForwarderCreateSlack eventForwarderCreateSlack, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderCreateSlackValidateBeforeCall(eventForwarderCreateSlack, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderCreateWebhook
     * @param eventForwarderCreateWebhook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateWebhookCall(EventForwarderCreateWebhook eventForwarderCreateWebhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderCreateWebhook;

        // create path and map variables
        String localVarPath = "/event-forwarder-create-webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderCreateWebhookValidateBeforeCall(EventForwarderCreateWebhook eventForwarderCreateWebhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderCreateWebhook' is set
        if (eventForwarderCreateWebhook == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderCreateWebhook' when calling eventForwarderCreateWebhook(Async)");
        }

        return eventForwarderCreateWebhookCall(eventForwarderCreateWebhook, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderCreateWebhook  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderCreateWebhook(EventForwarderCreateWebhook eventForwarderCreateWebhook) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderCreateWebhookWithHttpInfo(eventForwarderCreateWebhook);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderCreateWebhook  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderCreateWebhookWithHttpInfo(EventForwarderCreateWebhook eventForwarderCreateWebhook) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderCreateWebhookValidateBeforeCall(eventForwarderCreateWebhook, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderCreateWebhook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderCreateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderCreateWebhookAsync(EventForwarderCreateWebhook eventForwarderCreateWebhook, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderCreateWebhookValidateBeforeCall(eventForwarderCreateWebhook, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderDelete
     * @param eventForwarderDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderDeleteCall(EventForwarderDelete eventForwarderDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderDelete;

        // create path and map variables
        String localVarPath = "/event-forwarder-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderDeleteValidateBeforeCall(EventForwarderDelete eventForwarderDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderDelete' is set
        if (eventForwarderDelete == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderDelete' when calling eventForwarderDelete(Async)");
        }

        return eventForwarderDeleteCall(eventForwarderDelete, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderDelete  (required)
     * @return EventForwarderDeleteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderDeleteOutput eventForwarderDelete(EventForwarderDelete eventForwarderDelete) throws ApiException {
        ApiResponse<EventForwarderDeleteOutput> localVarResp = eventForwarderDeleteWithHttpInfo(eventForwarderDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderDelete  (required)
     * @return ApiResponse&lt;EventForwarderDeleteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderDeleteOutput> eventForwarderDeleteWithHttpInfo(EventForwarderDelete eventForwarderDelete) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderDeleteValidateBeforeCall(eventForwarderDelete, null);
        Type localVarReturnType = new TypeToken<EventForwarderDeleteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderDeleteAsync(EventForwarderDelete eventForwarderDelete, final ApiCallback<EventForwarderDeleteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderDeleteValidateBeforeCall(eventForwarderDelete, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderDeleteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderGet
     * @param eventForwarderGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderGetCall(EventForwarderGet eventForwarderGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderGet;

        // create path and map variables
        String localVarPath = "/event-forwarder-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderGetValidateBeforeCall(EventForwarderGet eventForwarderGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderGet' is set
        if (eventForwarderGet == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderGet' when calling eventForwarderGet(Async)");
        }

        return eventForwarderGetCall(eventForwarderGet, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderGet  (required)
     * @return EventForwarderGetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderGetOutput eventForwarderGet(EventForwarderGet eventForwarderGet) throws ApiException {
        ApiResponse<EventForwarderGetOutput> localVarResp = eventForwarderGetWithHttpInfo(eventForwarderGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderGet  (required)
     * @return ApiResponse&lt;EventForwarderGetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderGetOutput> eventForwarderGetWithHttpInfo(EventForwarderGet eventForwarderGet) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderGetValidateBeforeCall(eventForwarderGet, null);
        Type localVarReturnType = new TypeToken<EventForwarderGetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> eventForwarderGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderGetAsync(EventForwarderGet eventForwarderGet, final ApiCallback<EventForwarderGetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderGetValidateBeforeCall(eventForwarderGet, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderGetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderUpdateEmail
     * @param eventForwarderUpdateEmail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateEmailCall(EventForwarderUpdateEmail eventForwarderUpdateEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderUpdateEmail;

        // create path and map variables
        String localVarPath = "/event-forwarder-update-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderUpdateEmailValidateBeforeCall(EventForwarderUpdateEmail eventForwarderUpdateEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderUpdateEmail' is set
        if (eventForwarderUpdateEmail == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderUpdateEmail' when calling eventForwarderUpdateEmail(Async)");
        }

        return eventForwarderUpdateEmailCall(eventForwarderUpdateEmail, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderUpdateEmail  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderUpdateEmail(EventForwarderUpdateEmail eventForwarderUpdateEmail) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderUpdateEmailWithHttpInfo(eventForwarderUpdateEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderUpdateEmail  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderUpdateEmailWithHttpInfo(EventForwarderUpdateEmail eventForwarderUpdateEmail) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderUpdateEmailValidateBeforeCall(eventForwarderUpdateEmail, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderUpdateEmail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateEmailResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateEmailAsync(EventForwarderUpdateEmail eventForwarderUpdateEmail, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderUpdateEmailValidateBeforeCall(eventForwarderUpdateEmail, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderUpdateServiceNow
     * @param eventForwarderUpdateServiceNow  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateServiceNowCall(EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderUpdateServiceNow;

        // create path and map variables
        String localVarPath = "/event-forwarder-update-servicenow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderUpdateServiceNowValidateBeforeCall(EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderUpdateServiceNow' is set
        if (eventForwarderUpdateServiceNow == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderUpdateServiceNow' when calling eventForwarderUpdateServiceNow(Async)");
        }

        return eventForwarderUpdateServiceNowCall(eventForwarderUpdateServiceNow, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderUpdateServiceNow  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderUpdateServiceNow(EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderUpdateServiceNowWithHttpInfo(eventForwarderUpdateServiceNow);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderUpdateServiceNow  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderUpdateServiceNowWithHttpInfo(EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderUpdateServiceNowValidateBeforeCall(eventForwarderUpdateServiceNow, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderUpdateServiceNow  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateServiceNowResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateServiceNowAsync(EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderUpdateServiceNowValidateBeforeCall(eventForwarderUpdateServiceNow, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderUpdateSlack
     * @param eventForwarderUpdateSlack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateSlackCall(EventForwarderUpdateSlack eventForwarderUpdateSlack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderUpdateSlack;

        // create path and map variables
        String localVarPath = "/event-forwarder-update-slack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderUpdateSlackValidateBeforeCall(EventForwarderUpdateSlack eventForwarderUpdateSlack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderUpdateSlack' is set
        if (eventForwarderUpdateSlack == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderUpdateSlack' when calling eventForwarderUpdateSlack(Async)");
        }

        return eventForwarderUpdateSlackCall(eventForwarderUpdateSlack, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderUpdateSlack  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderUpdateSlack(EventForwarderUpdateSlack eventForwarderUpdateSlack) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderUpdateSlackWithHttpInfo(eventForwarderUpdateSlack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderUpdateSlack  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderUpdateSlackWithHttpInfo(EventForwarderUpdateSlack eventForwarderUpdateSlack) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderUpdateSlackValidateBeforeCall(eventForwarderUpdateSlack, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderUpdateSlack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateSlackResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateSlackAsync(EventForwarderUpdateSlack eventForwarderUpdateSlack, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderUpdateSlackValidateBeforeCall(eventForwarderUpdateSlack, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventForwarderUpdateWebhook
     * @param eventForwarderUpdateWebhook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateWebhookCall(EventForwarderUpdateWebhook eventForwarderUpdateWebhook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventForwarderUpdateWebhook;

        // create path and map variables
        String localVarPath = "/event-forwarder-update-webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventForwarderUpdateWebhookValidateBeforeCall(EventForwarderUpdateWebhook eventForwarderUpdateWebhook, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventForwarderUpdateWebhook' is set
        if (eventForwarderUpdateWebhook == null) {
            throw new ApiException("Missing the required parameter 'eventForwarderUpdateWebhook' when calling eventForwarderUpdateWebhook(Async)");
        }

        return eventForwarderUpdateWebhookCall(eventForwarderUpdateWebhook, _callback);

    }

    /**
     * 
     * 
     * @param eventForwarderUpdateWebhook  (required)
     * @return EventForwarderCreateUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EventForwarderCreateUpdateOutput eventForwarderUpdateWebhook(EventForwarderUpdateWebhook eventForwarderUpdateWebhook) throws ApiException {
        ApiResponse<EventForwarderCreateUpdateOutput> localVarResp = eventForwarderUpdateWebhookWithHttpInfo(eventForwarderUpdateWebhook);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventForwarderUpdateWebhook  (required)
     * @return ApiResponse&lt;EventForwarderCreateUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventForwarderCreateUpdateOutput> eventForwarderUpdateWebhookWithHttpInfo(EventForwarderUpdateWebhook eventForwarderUpdateWebhook) throws ApiException {
        okhttp3.Call localVarCall = eventForwarderUpdateWebhookValidateBeforeCall(eventForwarderUpdateWebhook, null);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventForwarderUpdateWebhook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> eventForwarderUpdateWebhookResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventForwarderUpdateWebhookAsync(EventForwarderUpdateWebhook eventForwarderUpdateWebhook, final ApiCallback<EventForwarderCreateUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventForwarderUpdateWebhookValidateBeforeCall(eventForwarderUpdateWebhook, _callback);
        Type localVarReturnType = new TypeToken<EventForwarderCreateUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportClassicKey
     * @param exportClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExportClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportClassicKeyCall(ExportClassicKey exportClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportClassicKey;

        // create path and map variables
        String localVarPath = "/export-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportClassicKeyValidateBeforeCall(ExportClassicKey exportClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportClassicKey' is set
        if (exportClassicKey == null) {
            throw new ApiException("Missing the required parameter 'exportClassicKey' when calling exportClassicKey(Async)");
        }

        return exportClassicKeyCall(exportClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param exportClassicKey  (required)
     * @return ExportClassicKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExportClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ExportClassicKeyOutput exportClassicKey(ExportClassicKey exportClassicKey) throws ApiException {
        ApiResponse<ExportClassicKeyOutput> localVarResp = exportClassicKeyWithHttpInfo(exportClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param exportClassicKey  (required)
     * @return ApiResponse&lt;ExportClassicKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExportClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportClassicKeyOutput> exportClassicKeyWithHttpInfo(ExportClassicKey exportClassicKey) throws ApiException {
        okhttp3.Call localVarCall = exportClassicKeyValidateBeforeCall(exportClassicKey, null);
        Type localVarReturnType = new TypeToken<ExportClassicKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param exportClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ExportClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportClassicKeyAsync(ExportClassicKey exportClassicKey, final ApiCallback<ExportClassicKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportClassicKeyValidateBeforeCall(exportClassicKey, _callback);
        Type localVarReturnType = new TypeToken<ExportClassicKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateAllowedAccess
     * @param gatewayCreateAllowedAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateAllowedAccessCall(GatewayCreateAllowedAccess gatewayCreateAllowedAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateAllowedAccess;

        // create path and map variables
        String localVarPath = "/gateway-create-allowed-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateAllowedAccessValidateBeforeCall(GatewayCreateAllowedAccess gatewayCreateAllowedAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateAllowedAccess' is set
        if (gatewayCreateAllowedAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateAllowedAccess' when calling gatewayCreateAllowedAccess(Async)");
        }

        return gatewayCreateAllowedAccessCall(gatewayCreateAllowedAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateAllowedAccess  (required)
     * @return AllowedAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AllowedAccess gatewayCreateAllowedAccess(GatewayCreateAllowedAccess gatewayCreateAllowedAccess) throws ApiException {
        ApiResponse<AllowedAccess> localVarResp = gatewayCreateAllowedAccessWithHttpInfo(gatewayCreateAllowedAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateAllowedAccess  (required)
     * @return ApiResponse&lt;AllowedAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowedAccess> gatewayCreateAllowedAccessWithHttpInfo(GatewayCreateAllowedAccess gatewayCreateAllowedAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateAllowedAccessValidateBeforeCall(gatewayCreateAllowedAccess, null);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateAllowedAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateAllowedAccessAsync(GatewayCreateAllowedAccess gatewayCreateAllowedAccess, final ApiCallback<AllowedAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateAllowedAccessValidateBeforeCall(gatewayCreateAllowedAccess, _callback);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateK8SAuthConfig
     * @param gatewayCreateK8SAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateK8SAuthConfigCall(GatewayCreateK8SAuthConfig gatewayCreateK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateK8SAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-create-k8s-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateK8SAuthConfigValidateBeforeCall(GatewayCreateK8SAuthConfig gatewayCreateK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateK8SAuthConfig' is set
        if (gatewayCreateK8SAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateK8SAuthConfig' when calling gatewayCreateK8SAuthConfig(Async)");
        }

        return gatewayCreateK8SAuthConfigCall(gatewayCreateK8SAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateK8SAuthConfig  (required)
     * @return GatewayCreateK8SAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateK8SAuthConfigOutput gatewayCreateK8SAuthConfig(GatewayCreateK8SAuthConfig gatewayCreateK8SAuthConfig) throws ApiException {
        ApiResponse<GatewayCreateK8SAuthConfigOutput> localVarResp = gatewayCreateK8SAuthConfigWithHttpInfo(gatewayCreateK8SAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateK8SAuthConfig  (required)
     * @return ApiResponse&lt;GatewayCreateK8SAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateK8SAuthConfigOutput> gatewayCreateK8SAuthConfigWithHttpInfo(GatewayCreateK8SAuthConfig gatewayCreateK8SAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateK8SAuthConfigValidateBeforeCall(gatewayCreateK8SAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayCreateK8SAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateK8SAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateK8SAuthConfigAsync(GatewayCreateK8SAuthConfig gatewayCreateK8SAuthConfig, final ApiCallback<GatewayCreateK8SAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateK8SAuthConfigValidateBeforeCall(gatewayCreateK8SAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateK8SAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateMigration
     * @param gatewayCreateMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateMigrationCall(GatewayCreateMigration gatewayCreateMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateMigration;

        // create path and map variables
        String localVarPath = "/gateway-create-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateMigrationValidateBeforeCall(GatewayCreateMigration gatewayCreateMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateMigration' is set
        if (gatewayCreateMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateMigration' when calling gatewayCreateMigration(Async)");
        }

        return gatewayCreateMigrationCall(gatewayCreateMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateMigration  (required)
     * @return GatewayMigrationCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationCreateOutput gatewayCreateMigration(GatewayCreateMigration gatewayCreateMigration) throws ApiException {
        ApiResponse<GatewayMigrationCreateOutput> localVarResp = gatewayCreateMigrationWithHttpInfo(gatewayCreateMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationCreateOutput> gatewayCreateMigrationWithHttpInfo(GatewayCreateMigration gatewayCreateMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateMigrationValidateBeforeCall(gatewayCreateMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateMigrationAsync(GatewayCreateMigration gatewayCreateMigration, final ApiCallback<GatewayMigrationCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateMigrationValidateBeforeCall(gatewayCreateMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerArtifactory
     * @param gatewayCreateProducerArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerArtifactoryCall(GatewayCreateProducerArtifactory gatewayCreateProducerArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerArtifactory;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerArtifactoryValidateBeforeCall(GatewayCreateProducerArtifactory gatewayCreateProducerArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerArtifactory' is set
        if (gatewayCreateProducerArtifactory == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerArtifactory' when calling gatewayCreateProducerArtifactory(Async)");
        }

        return gatewayCreateProducerArtifactoryCall(gatewayCreateProducerArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerArtifactory  (required)
     * @return GatewayCreateProducerArtifactoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerArtifactoryOutput gatewayCreateProducerArtifactory(GatewayCreateProducerArtifactory gatewayCreateProducerArtifactory) throws ApiException {
        ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResp = gatewayCreateProducerArtifactoryWithHttpInfo(gatewayCreateProducerArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerArtifactory  (required)
     * @return ApiResponse&lt;GatewayCreateProducerArtifactoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerArtifactoryOutput> gatewayCreateProducerArtifactoryWithHttpInfo(GatewayCreateProducerArtifactory gatewayCreateProducerArtifactory) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerArtifactoryValidateBeforeCall(gatewayCreateProducerArtifactory, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerArtifactoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerArtifactoryAsync(GatewayCreateProducerArtifactory gatewayCreateProducerArtifactory, final ApiCallback<GatewayCreateProducerArtifactoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerArtifactoryValidateBeforeCall(gatewayCreateProducerArtifactory, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerArtifactoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerAws
     * @param gatewayCreateProducerAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAwsCall(GatewayCreateProducerAws gatewayCreateProducerAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerAws;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerAwsValidateBeforeCall(GatewayCreateProducerAws gatewayCreateProducerAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerAws' is set
        if (gatewayCreateProducerAws == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerAws' when calling gatewayCreateProducerAws(Async)");
        }

        return gatewayCreateProducerAwsCall(gatewayCreateProducerAws, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerAws  (required)
     * @return GatewayCreateProducerAwsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerAwsOutput gatewayCreateProducerAws(GatewayCreateProducerAws gatewayCreateProducerAws) throws ApiException {
        ApiResponse<GatewayCreateProducerAwsOutput> localVarResp = gatewayCreateProducerAwsWithHttpInfo(gatewayCreateProducerAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerAws  (required)
     * @return ApiResponse&lt;GatewayCreateProducerAwsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerAwsOutput> gatewayCreateProducerAwsWithHttpInfo(GatewayCreateProducerAws gatewayCreateProducerAws) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerAwsValidateBeforeCall(gatewayCreateProducerAws, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAwsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAwsAsync(GatewayCreateProducerAws gatewayCreateProducerAws, final ApiCallback<GatewayCreateProducerAwsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerAwsValidateBeforeCall(gatewayCreateProducerAws, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAwsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerAzure
     * @param gatewayCreateProducerAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAzureCall(GatewayCreateProducerAzure gatewayCreateProducerAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerAzure;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerAzureValidateBeforeCall(GatewayCreateProducerAzure gatewayCreateProducerAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerAzure' is set
        if (gatewayCreateProducerAzure == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerAzure' when calling gatewayCreateProducerAzure(Async)");
        }

        return gatewayCreateProducerAzureCall(gatewayCreateProducerAzure, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerAzure  (required)
     * @return GatewayCreateProducerAzureOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerAzureOutput gatewayCreateProducerAzure(GatewayCreateProducerAzure gatewayCreateProducerAzure) throws ApiException {
        ApiResponse<GatewayCreateProducerAzureOutput> localVarResp = gatewayCreateProducerAzureWithHttpInfo(gatewayCreateProducerAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerAzure  (required)
     * @return ApiResponse&lt;GatewayCreateProducerAzureOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerAzureOutput> gatewayCreateProducerAzureWithHttpInfo(GatewayCreateProducerAzure gatewayCreateProducerAzure) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerAzureValidateBeforeCall(gatewayCreateProducerAzure, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAzureOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAzureAsync(GatewayCreateProducerAzure gatewayCreateProducerAzure, final ApiCallback<GatewayCreateProducerAzureOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerAzureValidateBeforeCall(gatewayCreateProducerAzure, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAzureOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerCassandra
     * @param gatewayCreateProducerCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCassandraCall(GatewayCreateProducerCassandra gatewayCreateProducerCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerCassandra;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerCassandraValidateBeforeCall(GatewayCreateProducerCassandra gatewayCreateProducerCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerCassandra' is set
        if (gatewayCreateProducerCassandra == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerCassandra' when calling gatewayCreateProducerCassandra(Async)");
        }

        return gatewayCreateProducerCassandraCall(gatewayCreateProducerCassandra, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerCassandra  (required)
     * @return GatewayCreateProducerCassandraOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerCassandraOutput gatewayCreateProducerCassandra(GatewayCreateProducerCassandra gatewayCreateProducerCassandra) throws ApiException {
        ApiResponse<GatewayCreateProducerCassandraOutput> localVarResp = gatewayCreateProducerCassandraWithHttpInfo(gatewayCreateProducerCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerCassandra  (required)
     * @return ApiResponse&lt;GatewayCreateProducerCassandraOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerCassandraOutput> gatewayCreateProducerCassandraWithHttpInfo(GatewayCreateProducerCassandra gatewayCreateProducerCassandra) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerCassandraValidateBeforeCall(gatewayCreateProducerCassandra, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCassandraOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCassandraAsync(GatewayCreateProducerCassandra gatewayCreateProducerCassandra, final ApiCallback<GatewayCreateProducerCassandraOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerCassandraValidateBeforeCall(gatewayCreateProducerCassandra, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCassandraOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerChef
     * @param gatewayCreateProducerChef  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerChefCall(GatewayCreateProducerChef gatewayCreateProducerChef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerChef;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-chef";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerChefValidateBeforeCall(GatewayCreateProducerChef gatewayCreateProducerChef, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerChef' is set
        if (gatewayCreateProducerChef == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerChef' when calling gatewayCreateProducerChef(Async)");
        }

        return gatewayCreateProducerChefCall(gatewayCreateProducerChef, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerChef  (required)
     * @return GatewayCreateProducerChefOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerChefOutput gatewayCreateProducerChef(GatewayCreateProducerChef gatewayCreateProducerChef) throws ApiException {
        ApiResponse<GatewayCreateProducerChefOutput> localVarResp = gatewayCreateProducerChefWithHttpInfo(gatewayCreateProducerChef);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerChef  (required)
     * @return ApiResponse&lt;GatewayCreateProducerChefOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerChefOutput> gatewayCreateProducerChefWithHttpInfo(GatewayCreateProducerChef gatewayCreateProducerChef) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerChefValidateBeforeCall(gatewayCreateProducerChef, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerChefOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerChef  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerChefAsync(GatewayCreateProducerChef gatewayCreateProducerChef, final ApiCallback<GatewayCreateProducerChefOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerChefValidateBeforeCall(gatewayCreateProducerChef, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerChefOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerCustom
     * @param gatewayCreateProducerCustom  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCustomCall(GatewayCreateProducerCustom gatewayCreateProducerCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerCustom;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerCustomValidateBeforeCall(GatewayCreateProducerCustom gatewayCreateProducerCustom, final ApiCallback _callback) throws ApiException {
        return gatewayCreateProducerCustomCall(gatewayCreateProducerCustom, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerCustom  (optional)
     * @return GatewayCreateProducerCustomOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerCustomOutput gatewayCreateProducerCustom(GatewayCreateProducerCustom gatewayCreateProducerCustom) throws ApiException {
        ApiResponse<GatewayCreateProducerCustomOutput> localVarResp = gatewayCreateProducerCustomWithHttpInfo(gatewayCreateProducerCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerCustom  (optional)
     * @return ApiResponse&lt;GatewayCreateProducerCustomOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerCustomOutput> gatewayCreateProducerCustomWithHttpInfo(GatewayCreateProducerCustom gatewayCreateProducerCustom) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerCustomValidateBeforeCall(gatewayCreateProducerCustom, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCustomOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerCustom  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCustomAsync(GatewayCreateProducerCustom gatewayCreateProducerCustom, final ApiCallback<GatewayCreateProducerCustomOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerCustomValidateBeforeCall(gatewayCreateProducerCustom, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCustomOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerDockerhub
     * @param gatewayCreateProducerDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerDockerhubCall(GatewayCreateProducerDockerhub gatewayCreateProducerDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerDockerhub;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerDockerhubValidateBeforeCall(GatewayCreateProducerDockerhub gatewayCreateProducerDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerDockerhub' is set
        if (gatewayCreateProducerDockerhub == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerDockerhub' when calling gatewayCreateProducerDockerhub(Async)");
        }

        return gatewayCreateProducerDockerhubCall(gatewayCreateProducerDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerDockerhub  (required)
     * @return GatewayCreateProducerDockerhubOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerDockerhubOutput gatewayCreateProducerDockerhub(GatewayCreateProducerDockerhub gatewayCreateProducerDockerhub) throws ApiException {
        ApiResponse<GatewayCreateProducerDockerhubOutput> localVarResp = gatewayCreateProducerDockerhubWithHttpInfo(gatewayCreateProducerDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerDockerhub  (required)
     * @return ApiResponse&lt;GatewayCreateProducerDockerhubOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerDockerhubOutput> gatewayCreateProducerDockerhubWithHttpInfo(GatewayCreateProducerDockerhub gatewayCreateProducerDockerhub) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerDockerhubValidateBeforeCall(gatewayCreateProducerDockerhub, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerDockerhubOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerDockerhubAsync(GatewayCreateProducerDockerhub gatewayCreateProducerDockerhub, final ApiCallback<GatewayCreateProducerDockerhubOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerDockerhubValidateBeforeCall(gatewayCreateProducerDockerhub, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerDockerhubOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerEks
     * @param gatewayCreateProducerEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerEksCall(GatewayCreateProducerEks gatewayCreateProducerEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerEks;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerEksValidateBeforeCall(GatewayCreateProducerEks gatewayCreateProducerEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerEks' is set
        if (gatewayCreateProducerEks == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerEks' when calling gatewayCreateProducerEks(Async)");
        }

        return gatewayCreateProducerEksCall(gatewayCreateProducerEks, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerEks  (required)
     * @return GatewayCreateProducerEksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerEksOutput gatewayCreateProducerEks(GatewayCreateProducerEks gatewayCreateProducerEks) throws ApiException {
        ApiResponse<GatewayCreateProducerEksOutput> localVarResp = gatewayCreateProducerEksWithHttpInfo(gatewayCreateProducerEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerEks  (required)
     * @return ApiResponse&lt;GatewayCreateProducerEksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerEksOutput> gatewayCreateProducerEksWithHttpInfo(GatewayCreateProducerEks gatewayCreateProducerEks) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerEksValidateBeforeCall(gatewayCreateProducerEks, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerEksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerEksAsync(GatewayCreateProducerEks gatewayCreateProducerEks, final ApiCallback<GatewayCreateProducerEksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerEksValidateBeforeCall(gatewayCreateProducerEks, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerEksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerGcp
     * @param gatewayCreateProducerGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGcpCall(GatewayCreateProducerGcp gatewayCreateProducerGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerGcp;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerGcpValidateBeforeCall(GatewayCreateProducerGcp gatewayCreateProducerGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerGcp' is set
        if (gatewayCreateProducerGcp == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerGcp' when calling gatewayCreateProducerGcp(Async)");
        }

        return gatewayCreateProducerGcpCall(gatewayCreateProducerGcp, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGcp  (required)
     * @return GatewayCreateProducerGcpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerGcpOutput gatewayCreateProducerGcp(GatewayCreateProducerGcp gatewayCreateProducerGcp) throws ApiException {
        ApiResponse<GatewayCreateProducerGcpOutput> localVarResp = gatewayCreateProducerGcpWithHttpInfo(gatewayCreateProducerGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGcp  (required)
     * @return ApiResponse&lt;GatewayCreateProducerGcpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerGcpOutput> gatewayCreateProducerGcpWithHttpInfo(GatewayCreateProducerGcp gatewayCreateProducerGcp) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerGcpValidateBeforeCall(gatewayCreateProducerGcp, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGcpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGcpAsync(GatewayCreateProducerGcp gatewayCreateProducerGcp, final ApiCallback<GatewayCreateProducerGcpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerGcpValidateBeforeCall(gatewayCreateProducerGcp, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGcpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerGithub
     * @param gatewayCreateProducerGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGithubCall(GatewayCreateProducerGithub gatewayCreateProducerGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerGithub;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerGithubValidateBeforeCall(GatewayCreateProducerGithub gatewayCreateProducerGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerGithub' is set
        if (gatewayCreateProducerGithub == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerGithub' when calling gatewayCreateProducerGithub(Async)");
        }

        return gatewayCreateProducerGithubCall(gatewayCreateProducerGithub, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGithub  (required)
     * @return GatewayCreateProducerGithubOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerGithubOutput gatewayCreateProducerGithub(GatewayCreateProducerGithub gatewayCreateProducerGithub) throws ApiException {
        ApiResponse<GatewayCreateProducerGithubOutput> localVarResp = gatewayCreateProducerGithubWithHttpInfo(gatewayCreateProducerGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGithub  (required)
     * @return ApiResponse&lt;GatewayCreateProducerGithubOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerGithubOutput> gatewayCreateProducerGithubWithHttpInfo(GatewayCreateProducerGithub gatewayCreateProducerGithub) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerGithubValidateBeforeCall(gatewayCreateProducerGithub, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGithubOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGithubAsync(GatewayCreateProducerGithub gatewayCreateProducerGithub, final ApiCallback<GatewayCreateProducerGithubOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerGithubValidateBeforeCall(gatewayCreateProducerGithub, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGithubOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerGke
     * @param gatewayCreateProducerGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGkeCall(GatewayCreateProducerGke gatewayCreateProducerGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerGke;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerGkeValidateBeforeCall(GatewayCreateProducerGke gatewayCreateProducerGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerGke' is set
        if (gatewayCreateProducerGke == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerGke' when calling gatewayCreateProducerGke(Async)");
        }

        return gatewayCreateProducerGkeCall(gatewayCreateProducerGke, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGke  (required)
     * @return GatewayCreateProducerGkeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerGkeOutput gatewayCreateProducerGke(GatewayCreateProducerGke gatewayCreateProducerGke) throws ApiException {
        ApiResponse<GatewayCreateProducerGkeOutput> localVarResp = gatewayCreateProducerGkeWithHttpInfo(gatewayCreateProducerGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerGke  (required)
     * @return ApiResponse&lt;GatewayCreateProducerGkeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerGkeOutput> gatewayCreateProducerGkeWithHttpInfo(GatewayCreateProducerGke gatewayCreateProducerGke) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerGkeValidateBeforeCall(gatewayCreateProducerGke, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGkeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGkeAsync(GatewayCreateProducerGke gatewayCreateProducerGke, final ApiCallback<GatewayCreateProducerGkeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerGkeValidateBeforeCall(gatewayCreateProducerGke, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGkeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerHanaDb
     * @param gatewayCreateProducerHanaDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerHanaDbCall(GatewayCreateProducerHanaDb gatewayCreateProducerHanaDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerHanaDb;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-hanadb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerHanaDbValidateBeforeCall(GatewayCreateProducerHanaDb gatewayCreateProducerHanaDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerHanaDb' is set
        if (gatewayCreateProducerHanaDb == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerHanaDb' when calling gatewayCreateProducerHanaDb(Async)");
        }

        return gatewayCreateProducerHanaDbCall(gatewayCreateProducerHanaDb, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerHanaDb  (required)
     * @return GatewayCreateProducerHanaDbOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerHanaDbOutput gatewayCreateProducerHanaDb(GatewayCreateProducerHanaDb gatewayCreateProducerHanaDb) throws ApiException {
        ApiResponse<GatewayCreateProducerHanaDbOutput> localVarResp = gatewayCreateProducerHanaDbWithHttpInfo(gatewayCreateProducerHanaDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerHanaDb  (required)
     * @return ApiResponse&lt;GatewayCreateProducerHanaDbOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerHanaDbOutput> gatewayCreateProducerHanaDbWithHttpInfo(GatewayCreateProducerHanaDb gatewayCreateProducerHanaDb) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerHanaDbValidateBeforeCall(gatewayCreateProducerHanaDb, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerHanaDbOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerHanaDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerHanaDbAsync(GatewayCreateProducerHanaDb gatewayCreateProducerHanaDb, final ApiCallback<GatewayCreateProducerHanaDbOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerHanaDbValidateBeforeCall(gatewayCreateProducerHanaDb, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerHanaDbOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerLdap
     * @param gatewayCreateProducerLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerLdapCall(GatewayCreateProducerLdap gatewayCreateProducerLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerLdap;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerLdapValidateBeforeCall(GatewayCreateProducerLdap gatewayCreateProducerLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerLdap' is set
        if (gatewayCreateProducerLdap == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerLdap' when calling gatewayCreateProducerLdap(Async)");
        }

        return gatewayCreateProducerLdapCall(gatewayCreateProducerLdap, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerLdap  (required)
     * @return GatewayCreateProducerLdapOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerLdapOutput gatewayCreateProducerLdap(GatewayCreateProducerLdap gatewayCreateProducerLdap) throws ApiException {
        ApiResponse<GatewayCreateProducerLdapOutput> localVarResp = gatewayCreateProducerLdapWithHttpInfo(gatewayCreateProducerLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerLdap  (required)
     * @return ApiResponse&lt;GatewayCreateProducerLdapOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerLdapOutput> gatewayCreateProducerLdapWithHttpInfo(GatewayCreateProducerLdap gatewayCreateProducerLdap) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerLdapValidateBeforeCall(gatewayCreateProducerLdap, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerLdapOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerLdapAsync(GatewayCreateProducerLdap gatewayCreateProducerLdap, final ApiCallback<GatewayCreateProducerLdapOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerLdapValidateBeforeCall(gatewayCreateProducerLdap, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerLdapOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMSSQL
     * @param gatewayCreateProducerMSSQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMSSQLCall(GatewayCreateProducerMSSQL gatewayCreateProducerMSSQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerMSSQL;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMSSQLValidateBeforeCall(GatewayCreateProducerMSSQL gatewayCreateProducerMSSQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerMSSQL' is set
        if (gatewayCreateProducerMSSQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerMSSQL' when calling gatewayCreateProducerMSSQL(Async)");
        }

        return gatewayCreateProducerMSSQLCall(gatewayCreateProducerMSSQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMSSQL  (required)
     * @return GatewayCreateProducerMSSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMSSQLOutput gatewayCreateProducerMSSQL(GatewayCreateProducerMSSQL gatewayCreateProducerMSSQL) throws ApiException {
        ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResp = gatewayCreateProducerMSSQLWithHttpInfo(gatewayCreateProducerMSSQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMSSQL  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMSSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMSSQLOutput> gatewayCreateProducerMSSQLWithHttpInfo(GatewayCreateProducerMSSQL gatewayCreateProducerMSSQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMSSQLValidateBeforeCall(gatewayCreateProducerMSSQL, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMSSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerMSSQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMSSQLAsync(GatewayCreateProducerMSSQL gatewayCreateProducerMSSQL, final ApiCallback<GatewayCreateProducerMSSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMSSQLValidateBeforeCall(gatewayCreateProducerMSSQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMSSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMongo
     * @param gatewayCreateProducerMongo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMongoCall(GatewayCreateProducerMongo gatewayCreateProducerMongo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerMongo;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mongo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMongoValidateBeforeCall(GatewayCreateProducerMongo gatewayCreateProducerMongo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerMongo' is set
        if (gatewayCreateProducerMongo == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerMongo' when calling gatewayCreateProducerMongo(Async)");
        }

        return gatewayCreateProducerMongoCall(gatewayCreateProducerMongo, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMongo  (required)
     * @return GatewayCreateProducerMongoOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMongoOutput gatewayCreateProducerMongo(GatewayCreateProducerMongo gatewayCreateProducerMongo) throws ApiException {
        ApiResponse<GatewayCreateProducerMongoOutput> localVarResp = gatewayCreateProducerMongoWithHttpInfo(gatewayCreateProducerMongo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMongo  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMongoOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMongoOutput> gatewayCreateProducerMongoWithHttpInfo(GatewayCreateProducerMongo gatewayCreateProducerMongo) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMongoValidateBeforeCall(gatewayCreateProducerMongo, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMongoOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerMongo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMongoAsync(GatewayCreateProducerMongo gatewayCreateProducerMongo, final ApiCallback<GatewayCreateProducerMongoOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMongoValidateBeforeCall(gatewayCreateProducerMongo, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMongoOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMySQL
     * @param gatewayCreateProducerMySQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMySQLCall(GatewayCreateProducerMySQL gatewayCreateProducerMySQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerMySQL;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMySQLValidateBeforeCall(GatewayCreateProducerMySQL gatewayCreateProducerMySQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerMySQL' is set
        if (gatewayCreateProducerMySQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerMySQL' when calling gatewayCreateProducerMySQL(Async)");
        }

        return gatewayCreateProducerMySQLCall(gatewayCreateProducerMySQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMySQL  (required)
     * @return GatewayCreateProducerMySQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMySQLOutput gatewayCreateProducerMySQL(GatewayCreateProducerMySQL gatewayCreateProducerMySQL) throws ApiException {
        ApiResponse<GatewayCreateProducerMySQLOutput> localVarResp = gatewayCreateProducerMySQLWithHttpInfo(gatewayCreateProducerMySQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerMySQL  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMySQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMySQLOutput> gatewayCreateProducerMySQLWithHttpInfo(GatewayCreateProducerMySQL gatewayCreateProducerMySQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMySQLValidateBeforeCall(gatewayCreateProducerMySQL, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMySQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerMySQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMySQLAsync(GatewayCreateProducerMySQL gatewayCreateProducerMySQL, final ApiCallback<GatewayCreateProducerMySQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMySQLValidateBeforeCall(gatewayCreateProducerMySQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMySQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerNativeK8S
     * @param gatewayCreateProducerNativeK8S  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerNativeK8SCall(GatewayCreateProducerNativeK8S gatewayCreateProducerNativeK8S, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerNativeK8S;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerNativeK8SValidateBeforeCall(GatewayCreateProducerNativeK8S gatewayCreateProducerNativeK8S, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerNativeK8S' is set
        if (gatewayCreateProducerNativeK8S == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerNativeK8S' when calling gatewayCreateProducerNativeK8S(Async)");
        }

        return gatewayCreateProducerNativeK8SCall(gatewayCreateProducerNativeK8S, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerNativeK8S  (required)
     * @return GatewayCreateProducerNativeK8SOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerNativeK8SOutput gatewayCreateProducerNativeK8S(GatewayCreateProducerNativeK8S gatewayCreateProducerNativeK8S) throws ApiException {
        ApiResponse<GatewayCreateProducerNativeK8SOutput> localVarResp = gatewayCreateProducerNativeK8SWithHttpInfo(gatewayCreateProducerNativeK8S);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerNativeK8S  (required)
     * @return ApiResponse&lt;GatewayCreateProducerNativeK8SOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerNativeK8SOutput> gatewayCreateProducerNativeK8SWithHttpInfo(GatewayCreateProducerNativeK8S gatewayCreateProducerNativeK8S) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerNativeK8SValidateBeforeCall(gatewayCreateProducerNativeK8S, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerNativeK8SOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerNativeK8S  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerNativeK8SAsync(GatewayCreateProducerNativeK8S gatewayCreateProducerNativeK8S, final ApiCallback<GatewayCreateProducerNativeK8SOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerNativeK8SValidateBeforeCall(gatewayCreateProducerNativeK8S, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerNativeK8SOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerOracleDb
     * @param gatewayCreateProducerOracleDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerOracleDbCall(GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerOracleDb;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerOracleDbValidateBeforeCall(GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerOracleDb' is set
        if (gatewayCreateProducerOracleDb == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerOracleDb' when calling gatewayCreateProducerOracleDb(Async)");
        }

        return gatewayCreateProducerOracleDbCall(gatewayCreateProducerOracleDb, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerOracleDb  (required)
     * @return GatewayCreateProducerOracleDbOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerOracleDbOutput gatewayCreateProducerOracleDb(GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb) throws ApiException {
        ApiResponse<GatewayCreateProducerOracleDbOutput> localVarResp = gatewayCreateProducerOracleDbWithHttpInfo(gatewayCreateProducerOracleDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerOracleDb  (required)
     * @return ApiResponse&lt;GatewayCreateProducerOracleDbOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerOracleDbOutput> gatewayCreateProducerOracleDbWithHttpInfo(GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerOracleDbValidateBeforeCall(gatewayCreateProducerOracleDb, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerOracleDbOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerOracleDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerOracleDbAsync(GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb, final ApiCallback<GatewayCreateProducerOracleDbOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerOracleDbValidateBeforeCall(gatewayCreateProducerOracleDb, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerOracleDbOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerPing
     * @param gatewayCreateProducerPing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPingCall(GatewayCreateProducerPing gatewayCreateProducerPing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerPing;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerPingValidateBeforeCall(GatewayCreateProducerPing gatewayCreateProducerPing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerPing' is set
        if (gatewayCreateProducerPing == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerPing' when calling gatewayCreateProducerPing(Async)");
        }

        return gatewayCreateProducerPingCall(gatewayCreateProducerPing, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerPing  (required)
     * @return GatewayCreateProducerPingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerPingOutput gatewayCreateProducerPing(GatewayCreateProducerPing gatewayCreateProducerPing) throws ApiException {
        ApiResponse<GatewayCreateProducerPingOutput> localVarResp = gatewayCreateProducerPingWithHttpInfo(gatewayCreateProducerPing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerPing  (required)
     * @return ApiResponse&lt;GatewayCreateProducerPingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerPingOutput> gatewayCreateProducerPingWithHttpInfo(GatewayCreateProducerPing gatewayCreateProducerPing) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerPingValidateBeforeCall(gatewayCreateProducerPing, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerPing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPingAsync(GatewayCreateProducerPing gatewayCreateProducerPing, final ApiCallback<GatewayCreateProducerPingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerPingValidateBeforeCall(gatewayCreateProducerPing, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerPostgreSQL
     * @param gatewayCreateProducerPostgreSQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPostgreSQLCall(GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerPostgreSQL;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerPostgreSQLValidateBeforeCall(GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerPostgreSQL' is set
        if (gatewayCreateProducerPostgreSQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerPostgreSQL' when calling gatewayCreateProducerPostgreSQL(Async)");
        }

        return gatewayCreateProducerPostgreSQLCall(gatewayCreateProducerPostgreSQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerPostgreSQL  (required)
     * @return GatewayCreateProducerPostgreSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerPostgreSQLOutput gatewayCreateProducerPostgreSQL(GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL) throws ApiException {
        ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResp = gatewayCreateProducerPostgreSQLWithHttpInfo(gatewayCreateProducerPostgreSQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerPostgreSQL  (required)
     * @return ApiResponse&lt;GatewayCreateProducerPostgreSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerPostgreSQLOutput> gatewayCreateProducerPostgreSQLWithHttpInfo(GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerPostgreSQLValidateBeforeCall(gatewayCreateProducerPostgreSQL, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPostgreSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerPostgreSQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPostgreSQLAsync(GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL, final ApiCallback<GatewayCreateProducerPostgreSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerPostgreSQLValidateBeforeCall(gatewayCreateProducerPostgreSQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPostgreSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRabbitMQ
     * @param gatewayCreateProducerRabbitMQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRabbitMQCall(GatewayCreateProducerRabbitMQ gatewayCreateProducerRabbitMQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerRabbitMQ;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRabbitMQValidateBeforeCall(GatewayCreateProducerRabbitMQ gatewayCreateProducerRabbitMQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerRabbitMQ' is set
        if (gatewayCreateProducerRabbitMQ == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerRabbitMQ' when calling gatewayCreateProducerRabbitMQ(Async)");
        }

        return gatewayCreateProducerRabbitMQCall(gatewayCreateProducerRabbitMQ, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRabbitMQ  (required)
     * @return GatewayCreateProducerRabbitMQOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRabbitMQOutput gatewayCreateProducerRabbitMQ(GatewayCreateProducerRabbitMQ gatewayCreateProducerRabbitMQ) throws ApiException {
        ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResp = gatewayCreateProducerRabbitMQWithHttpInfo(gatewayCreateProducerRabbitMQ);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRabbitMQ  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRabbitMQOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRabbitMQOutput> gatewayCreateProducerRabbitMQWithHttpInfo(GatewayCreateProducerRabbitMQ gatewayCreateProducerRabbitMQ) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRabbitMQValidateBeforeCall(gatewayCreateProducerRabbitMQ, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRabbitMQOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerRabbitMQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRabbitMQAsync(GatewayCreateProducerRabbitMQ gatewayCreateProducerRabbitMQ, final ApiCallback<GatewayCreateProducerRabbitMQOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRabbitMQValidateBeforeCall(gatewayCreateProducerRabbitMQ, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRabbitMQOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRdp
     * @param gatewayCreateProducerRdp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRdpCall(GatewayCreateProducerRdp gatewayCreateProducerRdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerRdp;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-rdp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRdpValidateBeforeCall(GatewayCreateProducerRdp gatewayCreateProducerRdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerRdp' is set
        if (gatewayCreateProducerRdp == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerRdp' when calling gatewayCreateProducerRdp(Async)");
        }

        return gatewayCreateProducerRdpCall(gatewayCreateProducerRdp, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRdp  (required)
     * @return GatewayCreateProducerRdpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRdpOutput gatewayCreateProducerRdp(GatewayCreateProducerRdp gatewayCreateProducerRdp) throws ApiException {
        ApiResponse<GatewayCreateProducerRdpOutput> localVarResp = gatewayCreateProducerRdpWithHttpInfo(gatewayCreateProducerRdp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRdp  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRdpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRdpOutput> gatewayCreateProducerRdpWithHttpInfo(GatewayCreateProducerRdp gatewayCreateProducerRdp) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRdpValidateBeforeCall(gatewayCreateProducerRdp, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRdpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerRdp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRdpAsync(GatewayCreateProducerRdp gatewayCreateProducerRdp, final ApiCallback<GatewayCreateProducerRdpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRdpValidateBeforeCall(gatewayCreateProducerRdp, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRdpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRedis
     * @param gatewayCreateProducerRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRedisCall(GatewayCreateProducerRedis gatewayCreateProducerRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerRedis;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-Redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRedisValidateBeforeCall(GatewayCreateProducerRedis gatewayCreateProducerRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerRedis' is set
        if (gatewayCreateProducerRedis == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerRedis' when calling gatewayCreateProducerRedis(Async)");
        }

        return gatewayCreateProducerRedisCall(gatewayCreateProducerRedis, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRedis  (required)
     * @return GatewayCreateProducerRedisOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRedisOutput gatewayCreateProducerRedis(GatewayCreateProducerRedis gatewayCreateProducerRedis) throws ApiException {
        ApiResponse<GatewayCreateProducerRedisOutput> localVarResp = gatewayCreateProducerRedisWithHttpInfo(gatewayCreateProducerRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRedis  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRedisOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRedisOutput> gatewayCreateProducerRedisWithHttpInfo(GatewayCreateProducerRedis gatewayCreateProducerRedis) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRedisValidateBeforeCall(gatewayCreateProducerRedis, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRedisOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRedisAsync(GatewayCreateProducerRedis gatewayCreateProducerRedis, final ApiCallback<GatewayCreateProducerRedisOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRedisValidateBeforeCall(gatewayCreateProducerRedis, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRedisOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRedshift
     * @param gatewayCreateProducerRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRedshiftCall(GatewayCreateProducerRedshift gatewayCreateProducerRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerRedshift;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRedshiftValidateBeforeCall(GatewayCreateProducerRedshift gatewayCreateProducerRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerRedshift' is set
        if (gatewayCreateProducerRedshift == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerRedshift' when calling gatewayCreateProducerRedshift(Async)");
        }

        return gatewayCreateProducerRedshiftCall(gatewayCreateProducerRedshift, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRedshift  (required)
     * @return GatewayCreateProducerRedshiftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRedshiftOutput gatewayCreateProducerRedshift(GatewayCreateProducerRedshift gatewayCreateProducerRedshift) throws ApiException {
        ApiResponse<GatewayCreateProducerRedshiftOutput> localVarResp = gatewayCreateProducerRedshiftWithHttpInfo(gatewayCreateProducerRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerRedshift  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRedshiftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRedshiftOutput> gatewayCreateProducerRedshiftWithHttpInfo(GatewayCreateProducerRedshift gatewayCreateProducerRedshift) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRedshiftValidateBeforeCall(gatewayCreateProducerRedshift, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRedshiftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRedshiftAsync(GatewayCreateProducerRedshift gatewayCreateProducerRedshift, final ApiCallback<GatewayCreateProducerRedshiftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRedshiftValidateBeforeCall(gatewayCreateProducerRedshift, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRedshiftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerSnowflake
     * @param gatewayCreateProducerSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerSnowflakeCall(GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerSnowflake;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerSnowflakeValidateBeforeCall(GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerSnowflake' is set
        if (gatewayCreateProducerSnowflake == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerSnowflake' when calling gatewayCreateProducerSnowflake(Async)");
        }

        return gatewayCreateProducerSnowflakeCall(gatewayCreateProducerSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerSnowflake  (required)
     * @return GatewayCreateProducerSnowflakeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerSnowflakeOutput gatewayCreateProducerSnowflake(GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake) throws ApiException {
        ApiResponse<GatewayCreateProducerSnowflakeOutput> localVarResp = gatewayCreateProducerSnowflakeWithHttpInfo(gatewayCreateProducerSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerSnowflake  (required)
     * @return ApiResponse&lt;GatewayCreateProducerSnowflakeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerSnowflakeOutput> gatewayCreateProducerSnowflakeWithHttpInfo(GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerSnowflakeValidateBeforeCall(gatewayCreateProducerSnowflake, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerSnowflakeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerSnowflakeAsync(GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake, final ApiCallback<GatewayCreateProducerSnowflakeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerSnowflakeValidateBeforeCall(gatewayCreateProducerSnowflake, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerSnowflakeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerVenafi
     * @param gatewayCreateProducerVenafi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerVenafiCall(GatewayCreateProducerVenafi gatewayCreateProducerVenafi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayCreateProducerVenafi;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-certificate-automation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerVenafiValidateBeforeCall(GatewayCreateProducerVenafi gatewayCreateProducerVenafi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayCreateProducerVenafi' is set
        if (gatewayCreateProducerVenafi == null) {
            throw new ApiException("Missing the required parameter 'gatewayCreateProducerVenafi' when calling gatewayCreateProducerVenafi(Async)");
        }

        return gatewayCreateProducerVenafiCall(gatewayCreateProducerVenafi, _callback);

    }

    /**
     * 
     * 
     * @param gatewayCreateProducerVenafi  (required)
     * @return GatewayCreateProducerVenafiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerVenafiOutput gatewayCreateProducerVenafi(GatewayCreateProducerVenafi gatewayCreateProducerVenafi) throws ApiException {
        ApiResponse<GatewayCreateProducerVenafiOutput> localVarResp = gatewayCreateProducerVenafiWithHttpInfo(gatewayCreateProducerVenafi);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayCreateProducerVenafi  (required)
     * @return ApiResponse&lt;GatewayCreateProducerVenafiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerVenafiOutput> gatewayCreateProducerVenafiWithHttpInfo(GatewayCreateProducerVenafi gatewayCreateProducerVenafi) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerVenafiValidateBeforeCall(gatewayCreateProducerVenafi, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerVenafiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayCreateProducerVenafi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerVenafiAsync(GatewayCreateProducerVenafi gatewayCreateProducerVenafi, final ApiCallback<GatewayCreateProducerVenafiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerVenafiValidateBeforeCall(gatewayCreateProducerVenafi, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerVenafiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteAllowedAccess
     * @param gatewayDeleteAllowedAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteAllowedAccessCall(GatewayDeleteAllowedAccess gatewayDeleteAllowedAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayDeleteAllowedAccess;

        // create path and map variables
        String localVarPath = "/gateway-delete-allowed-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteAllowedAccessValidateBeforeCall(GatewayDeleteAllowedAccess gatewayDeleteAllowedAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayDeleteAllowedAccess' is set
        if (gatewayDeleteAllowedAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayDeleteAllowedAccess' when calling gatewayDeleteAllowedAccess(Async)");
        }

        return gatewayDeleteAllowedAccessCall(gatewayDeleteAllowedAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayDeleteAllowedAccess  (required)
     * @return GatewayDeleteAllowedAccessOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayDeleteAllowedAccessOutput gatewayDeleteAllowedAccess(GatewayDeleteAllowedAccess gatewayDeleteAllowedAccess) throws ApiException {
        ApiResponse<GatewayDeleteAllowedAccessOutput> localVarResp = gatewayDeleteAllowedAccessWithHttpInfo(gatewayDeleteAllowedAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayDeleteAllowedAccess  (required)
     * @return ApiResponse&lt;GatewayDeleteAllowedAccessOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayDeleteAllowedAccessOutput> gatewayDeleteAllowedAccessWithHttpInfo(GatewayDeleteAllowedAccess gatewayDeleteAllowedAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteAllowedAccessValidateBeforeCall(gatewayDeleteAllowedAccess, null);
        Type localVarReturnType = new TypeToken<GatewayDeleteAllowedAccessOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayDeleteAllowedAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteAllowedAccessAsync(GatewayDeleteAllowedAccess gatewayDeleteAllowedAccess, final ApiCallback<GatewayDeleteAllowedAccessOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteAllowedAccessValidateBeforeCall(gatewayDeleteAllowedAccess, _callback);
        Type localVarReturnType = new TypeToken<GatewayDeleteAllowedAccessOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteK8SAuthConfig
     * @param gatewayDeleteK8SAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayDeleteK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteK8SAuthConfigCall(GatewayDeleteK8SAuthConfig gatewayDeleteK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayDeleteK8SAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-delete-k8s-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteK8SAuthConfigValidateBeforeCall(GatewayDeleteK8SAuthConfig gatewayDeleteK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayDeleteK8SAuthConfig' is set
        if (gatewayDeleteK8SAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayDeleteK8SAuthConfig' when calling gatewayDeleteK8SAuthConfig(Async)");
        }

        return gatewayDeleteK8SAuthConfigCall(gatewayDeleteK8SAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayDeleteK8SAuthConfig  (required)
     * @return GatewayDeleteK8SAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayDeleteK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayDeleteK8SAuthConfigOutput gatewayDeleteK8SAuthConfig(GatewayDeleteK8SAuthConfig gatewayDeleteK8SAuthConfig) throws ApiException {
        ApiResponse<GatewayDeleteK8SAuthConfigOutput> localVarResp = gatewayDeleteK8SAuthConfigWithHttpInfo(gatewayDeleteK8SAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayDeleteK8SAuthConfig  (required)
     * @return ApiResponse&lt;GatewayDeleteK8SAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayDeleteK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayDeleteK8SAuthConfigOutput> gatewayDeleteK8SAuthConfigWithHttpInfo(GatewayDeleteK8SAuthConfig gatewayDeleteK8SAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteK8SAuthConfigValidateBeforeCall(gatewayDeleteK8SAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayDeleteK8SAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayDeleteK8SAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayDeleteK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteK8SAuthConfigAsync(GatewayDeleteK8SAuthConfig gatewayDeleteK8SAuthConfig, final ApiCallback<GatewayDeleteK8SAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteK8SAuthConfigValidateBeforeCall(gatewayDeleteK8SAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayDeleteK8SAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteMigration
     * @param gatewayDeleteMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteMigrationCall(GatewayDeleteMigration gatewayDeleteMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayDeleteMigration;

        // create path and map variables
        String localVarPath = "/gateway-delete-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteMigrationValidateBeforeCall(GatewayDeleteMigration gatewayDeleteMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayDeleteMigration' is set
        if (gatewayDeleteMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayDeleteMigration' when calling gatewayDeleteMigration(Async)");
        }

        return gatewayDeleteMigrationCall(gatewayDeleteMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayDeleteMigration  (required)
     * @return GatewayMigrationDeleteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationDeleteOutput gatewayDeleteMigration(GatewayDeleteMigration gatewayDeleteMigration) throws ApiException {
        ApiResponse<GatewayMigrationDeleteOutput> localVarResp = gatewayDeleteMigrationWithHttpInfo(gatewayDeleteMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayDeleteMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationDeleteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationDeleteOutput> gatewayDeleteMigrationWithHttpInfo(GatewayDeleteMigration gatewayDeleteMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteMigrationValidateBeforeCall(gatewayDeleteMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationDeleteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayDeleteMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteMigrationAsync(GatewayDeleteMigration gatewayDeleteMigration, final ApiCallback<GatewayMigrationDeleteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteMigrationValidateBeforeCall(gatewayDeleteMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationDeleteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteProducer
     * @param gatewayDeleteProducer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteProducerCall(GatewayDeleteProducer gatewayDeleteProducer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayDeleteProducer;

        // create path and map variables
        String localVarPath = "/gateway-delete-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteProducerValidateBeforeCall(GatewayDeleteProducer gatewayDeleteProducer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayDeleteProducer' is set
        if (gatewayDeleteProducer == null) {
            throw new ApiException("Missing the required parameter 'gatewayDeleteProducer' when calling gatewayDeleteProducer(Async)");
        }

        return gatewayDeleteProducerCall(gatewayDeleteProducer, _callback);

    }

    /**
     * 
     * 
     * @param gatewayDeleteProducer  (required)
     * @return GatewayDeleteProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayDeleteProducerOutput gatewayDeleteProducer(GatewayDeleteProducer gatewayDeleteProducer) throws ApiException {
        ApiResponse<GatewayDeleteProducerOutput> localVarResp = gatewayDeleteProducerWithHttpInfo(gatewayDeleteProducer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayDeleteProducer  (required)
     * @return ApiResponse&lt;GatewayDeleteProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayDeleteProducerOutput> gatewayDeleteProducerWithHttpInfo(GatewayDeleteProducer gatewayDeleteProducer) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteProducerValidateBeforeCall(gatewayDeleteProducer, null);
        Type localVarReturnType = new TypeToken<GatewayDeleteProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayDeleteProducer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteProducerAsync(GatewayDeleteProducer gatewayDeleteProducer, final ApiCallback<GatewayDeleteProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteProducerValidateBeforeCall(gatewayDeleteProducer, _callback);
        Type localVarReturnType = new TypeToken<GatewayDeleteProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDownloadCustomerFragments
     * @param gatewayDownloadCustomerFragments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDownloadCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDownloadCustomerFragmentsCall(GatewayDownloadCustomerFragments gatewayDownloadCustomerFragments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayDownloadCustomerFragments;

        // create path and map variables
        String localVarPath = "/gateway-download-customer-fragments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDownloadCustomerFragmentsValidateBeforeCall(GatewayDownloadCustomerFragments gatewayDownloadCustomerFragments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayDownloadCustomerFragments' is set
        if (gatewayDownloadCustomerFragments == null) {
            throw new ApiException("Missing the required parameter 'gatewayDownloadCustomerFragments' when calling gatewayDownloadCustomerFragments(Async)");
        }

        return gatewayDownloadCustomerFragmentsCall(gatewayDownloadCustomerFragments, _callback);

    }

    /**
     * 
     * 
     * @param gatewayDownloadCustomerFragments  (required)
     * @return GatewayDownloadCustomerFragmentsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDownloadCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayDownloadCustomerFragmentsOutput gatewayDownloadCustomerFragments(GatewayDownloadCustomerFragments gatewayDownloadCustomerFragments) throws ApiException {
        ApiResponse<GatewayDownloadCustomerFragmentsOutput> localVarResp = gatewayDownloadCustomerFragmentsWithHttpInfo(gatewayDownloadCustomerFragments);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayDownloadCustomerFragments  (required)
     * @return ApiResponse&lt;GatewayDownloadCustomerFragmentsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDownloadCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayDownloadCustomerFragmentsOutput> gatewayDownloadCustomerFragmentsWithHttpInfo(GatewayDownloadCustomerFragments gatewayDownloadCustomerFragments) throws ApiException {
        okhttp3.Call localVarCall = gatewayDownloadCustomerFragmentsValidateBeforeCall(gatewayDownloadCustomerFragments, null);
        Type localVarReturnType = new TypeToken<GatewayDownloadCustomerFragmentsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayDownloadCustomerFragments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDownloadCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDownloadCustomerFragmentsAsync(GatewayDownloadCustomerFragments gatewayDownloadCustomerFragments, final ApiCallback<GatewayDownloadCustomerFragmentsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDownloadCustomerFragmentsValidateBeforeCall(gatewayDownloadCustomerFragments, _callback);
        Type localVarReturnType = new TypeToken<GatewayDownloadCustomerFragmentsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetAllowedAccess
     * @param gatewayGetAllowedAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetAllowedAccessCall(GatewayGetAllowedAccess gatewayGetAllowedAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetAllowedAccess;

        // create path and map variables
        String localVarPath = "/gateway-get-allowed-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetAllowedAccessValidateBeforeCall(GatewayGetAllowedAccess gatewayGetAllowedAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetAllowedAccess' is set
        if (gatewayGetAllowedAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetAllowedAccess' when calling gatewayGetAllowedAccess(Async)");
        }

        return gatewayGetAllowedAccessCall(gatewayGetAllowedAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetAllowedAccess  (required)
     * @return AllowedAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AllowedAccess gatewayGetAllowedAccess(GatewayGetAllowedAccess gatewayGetAllowedAccess) throws ApiException {
        ApiResponse<AllowedAccess> localVarResp = gatewayGetAllowedAccessWithHttpInfo(gatewayGetAllowedAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetAllowedAccess  (required)
     * @return ApiResponse&lt;AllowedAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowedAccess> gatewayGetAllowedAccessWithHttpInfo(GatewayGetAllowedAccess gatewayGetAllowedAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetAllowedAccessValidateBeforeCall(gatewayGetAllowedAccess, null);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetAllowedAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetAllowedAccessAsync(GatewayGetAllowedAccess gatewayGetAllowedAccess, final ApiCallback<AllowedAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetAllowedAccessValidateBeforeCall(gatewayGetAllowedAccess, _callback);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetCache
     * @param gatewayGetCache  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetCacheCall(GatewayGetCache gatewayGetCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetCache;

        // create path and map variables
        String localVarPath = "/gateway-get-cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetCacheValidateBeforeCall(GatewayGetCache gatewayGetCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetCache' is set
        if (gatewayGetCache == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetCache' when calling gatewayGetCache(Async)");
        }

        return gatewayGetCacheCall(gatewayGetCache, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetCache  (required)
     * @return CacheConfigPart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CacheConfigPart gatewayGetCache(GatewayGetCache gatewayGetCache) throws ApiException {
        ApiResponse<CacheConfigPart> localVarResp = gatewayGetCacheWithHttpInfo(gatewayGetCache);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetCache  (required)
     * @return ApiResponse&lt;CacheConfigPart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheConfigPart> gatewayGetCacheWithHttpInfo(GatewayGetCache gatewayGetCache) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetCacheValidateBeforeCall(gatewayGetCache, null);
        Type localVarReturnType = new TypeToken<CacheConfigPart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetCache  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetCacheAsync(GatewayGetCache gatewayGetCache, final ApiCallback<CacheConfigPart> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetCacheValidateBeforeCall(gatewayGetCache, _callback);
        Type localVarReturnType = new TypeToken<CacheConfigPart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetConfig
     * @param gatewayGetConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetConfigCall(GatewayGetConfig gatewayGetConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetConfig;

        // create path and map variables
        String localVarPath = "/gateway-get-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetConfigValidateBeforeCall(GatewayGetConfig gatewayGetConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetConfig' is set
        if (gatewayGetConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetConfig' when calling gatewayGetConfig(Async)");
        }

        return gatewayGetConfigCall(gatewayGetConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetConfig  (required)
     * @return AkeylessGatewayConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AkeylessGatewayConfig gatewayGetConfig(GatewayGetConfig gatewayGetConfig) throws ApiException {
        ApiResponse<AkeylessGatewayConfig> localVarResp = gatewayGetConfigWithHttpInfo(gatewayGetConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetConfig  (required)
     * @return ApiResponse&lt;AkeylessGatewayConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AkeylessGatewayConfig> gatewayGetConfigWithHttpInfo(GatewayGetConfig gatewayGetConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetConfigValidateBeforeCall(gatewayGetConfig, null);
        Type localVarReturnType = new TypeToken<AkeylessGatewayConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetConfigAsync(GatewayGetConfig gatewayGetConfig, final ApiCallback<AkeylessGatewayConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetConfigValidateBeforeCall(gatewayGetConfig, _callback);
        Type localVarReturnType = new TypeToken<AkeylessGatewayConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetDefaults
     * @param gatewayGetDefaults  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetDefaultsCall(GatewayGetDefaults gatewayGetDefaults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetDefaults;

        // create path and map variables
        String localVarPath = "/gateway-get-defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetDefaultsValidateBeforeCall(GatewayGetDefaults gatewayGetDefaults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetDefaults' is set
        if (gatewayGetDefaults == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetDefaults' when calling gatewayGetDefaults(Async)");
        }

        return gatewayGetDefaultsCall(gatewayGetDefaults, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetDefaults  (required)
     * @return GatewayGetDefaultsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayGetDefaultsOutput gatewayGetDefaults(GatewayGetDefaults gatewayGetDefaults) throws ApiException {
        ApiResponse<GatewayGetDefaultsOutput> localVarResp = gatewayGetDefaultsWithHttpInfo(gatewayGetDefaults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetDefaults  (required)
     * @return ApiResponse&lt;GatewayGetDefaultsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayGetDefaultsOutput> gatewayGetDefaultsWithHttpInfo(GatewayGetDefaults gatewayGetDefaults) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetDefaultsValidateBeforeCall(gatewayGetDefaults, null);
        Type localVarReturnType = new TypeToken<GatewayGetDefaultsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetDefaults  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetDefaultsAsync(GatewayGetDefaults gatewayGetDefaults, final ApiCallback<GatewayGetDefaultsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetDefaultsValidateBeforeCall(gatewayGetDefaults, _callback);
        Type localVarReturnType = new TypeToken<GatewayGetDefaultsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetK8SAuthConfig
     * @param gatewayGetK8SAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetK8SAuthConfigCall(GatewayGetK8SAuthConfig gatewayGetK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetK8SAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-get-k8s-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetK8SAuthConfigValidateBeforeCall(GatewayGetK8SAuthConfig gatewayGetK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetK8SAuthConfig' is set
        if (gatewayGetK8SAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetK8SAuthConfig' when calling gatewayGetK8SAuthConfig(Async)");
        }

        return gatewayGetK8SAuthConfigCall(gatewayGetK8SAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetK8SAuthConfig  (required)
     * @return GatewayGetK8SAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayGetK8SAuthConfigOutput gatewayGetK8SAuthConfig(GatewayGetK8SAuthConfig gatewayGetK8SAuthConfig) throws ApiException {
        ApiResponse<GatewayGetK8SAuthConfigOutput> localVarResp = gatewayGetK8SAuthConfigWithHttpInfo(gatewayGetK8SAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetK8SAuthConfig  (required)
     * @return ApiResponse&lt;GatewayGetK8SAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayGetK8SAuthConfigOutput> gatewayGetK8SAuthConfigWithHttpInfo(GatewayGetK8SAuthConfig gatewayGetK8SAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetK8SAuthConfigValidateBeforeCall(gatewayGetK8SAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayGetK8SAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetK8SAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetK8SAuthConfigAsync(GatewayGetK8SAuthConfig gatewayGetK8SAuthConfig, final ApiCallback<GatewayGetK8SAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetK8SAuthConfigValidateBeforeCall(gatewayGetK8SAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayGetK8SAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetLdapAuthConfig
     * @param gatewayGetLdapAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetLdapAuthConfigCall(GatewayGetLdapAuthConfig gatewayGetLdapAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetLdapAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-get-ldap-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetLdapAuthConfigValidateBeforeCall(GatewayGetLdapAuthConfig gatewayGetLdapAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetLdapAuthConfig' is set
        if (gatewayGetLdapAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetLdapAuthConfig' when calling gatewayGetLdapAuthConfig(Async)");
        }

        return gatewayGetLdapAuthConfigCall(gatewayGetLdapAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetLdapAuthConfig  (required)
     * @return GatewayGetLdapAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayGetLdapAuthConfigOutput gatewayGetLdapAuthConfig(GatewayGetLdapAuthConfig gatewayGetLdapAuthConfig) throws ApiException {
        ApiResponse<GatewayGetLdapAuthConfigOutput> localVarResp = gatewayGetLdapAuthConfigWithHttpInfo(gatewayGetLdapAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetLdapAuthConfig  (required)
     * @return ApiResponse&lt;GatewayGetLdapAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayGetLdapAuthConfigOutput> gatewayGetLdapAuthConfigWithHttpInfo(GatewayGetLdapAuthConfig gatewayGetLdapAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetLdapAuthConfigValidateBeforeCall(gatewayGetLdapAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayGetLdapAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetLdapAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayGetLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetLdapAuthConfigAsync(GatewayGetLdapAuthConfig gatewayGetLdapAuthConfig, final ApiCallback<GatewayGetLdapAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetLdapAuthConfigValidateBeforeCall(gatewayGetLdapAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayGetLdapAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetLogForwarding
     * @param gatewayGetLogForwarding  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetLogForwardingCall(GatewayGetLogForwarding gatewayGetLogForwarding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetLogForwarding;

        // create path and map variables
        String localVarPath = "/gateway-get-log-forwarding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetLogForwardingValidateBeforeCall(GatewayGetLogForwarding gatewayGetLogForwarding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetLogForwarding' is set
        if (gatewayGetLogForwarding == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetLogForwarding' when calling gatewayGetLogForwarding(Async)");
        }

        return gatewayGetLogForwardingCall(gatewayGetLogForwarding, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetLogForwarding  (required)
     * @return LogForwardingConfigPart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public LogForwardingConfigPart gatewayGetLogForwarding(GatewayGetLogForwarding gatewayGetLogForwarding) throws ApiException {
        ApiResponse<LogForwardingConfigPart> localVarResp = gatewayGetLogForwardingWithHttpInfo(gatewayGetLogForwarding);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetLogForwarding  (required)
     * @return ApiResponse&lt;LogForwardingConfigPart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogForwardingConfigPart> gatewayGetLogForwardingWithHttpInfo(GatewayGetLogForwarding gatewayGetLogForwarding) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetLogForwardingValidateBeforeCall(gatewayGetLogForwarding, null);
        Type localVarReturnType = new TypeToken<LogForwardingConfigPart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetLogForwarding  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetLogForwardingAsync(GatewayGetLogForwarding gatewayGetLogForwarding, final ApiCallback<LogForwardingConfigPart> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetLogForwardingValidateBeforeCall(gatewayGetLogForwarding, _callback);
        Type localVarReturnType = new TypeToken<LogForwardingConfigPart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetMigration
     * @param gatewayGetMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetMigrationCall(GatewayGetMigration gatewayGetMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetMigration;

        // create path and map variables
        String localVarPath = "/gateway-get-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetMigrationValidateBeforeCall(GatewayGetMigration gatewayGetMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetMigration' is set
        if (gatewayGetMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetMigration' when calling gatewayGetMigration(Async)");
        }

        return gatewayGetMigrationCall(gatewayGetMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetMigration  (required)
     * @return GatewayMigrationGetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationGetOutput gatewayGetMigration(GatewayGetMigration gatewayGetMigration) throws ApiException {
        ApiResponse<GatewayMigrationGetOutput> localVarResp = gatewayGetMigrationWithHttpInfo(gatewayGetMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationGetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationGetOutput> gatewayGetMigrationWithHttpInfo(GatewayGetMigration gatewayGetMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetMigrationValidateBeforeCall(gatewayGetMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationGetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetMigrationAsync(GatewayGetMigration gatewayGetMigration, final ApiCallback<GatewayMigrationGetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetMigrationValidateBeforeCall(gatewayGetMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationGetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetProducer
     * @param gatewayGetProducer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetProducerCall(GatewayGetProducer gatewayGetProducer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetProducer;

        // create path and map variables
        String localVarPath = "/gateway-get-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetProducerValidateBeforeCall(GatewayGetProducer gatewayGetProducer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetProducer' is set
        if (gatewayGetProducer == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetProducer' when calling gatewayGetProducer(Async)");
        }

        return gatewayGetProducerCall(gatewayGetProducer, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetProducer  (required)
     * @return DSProducerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DSProducerDetails gatewayGetProducer(GatewayGetProducer gatewayGetProducer) throws ApiException {
        ApiResponse<DSProducerDetails> localVarResp = gatewayGetProducerWithHttpInfo(gatewayGetProducer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetProducer  (required)
     * @return ApiResponse&lt;DSProducerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DSProducerDetails> gatewayGetProducerWithHttpInfo(GatewayGetProducer gatewayGetProducer) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetProducerValidateBeforeCall(gatewayGetProducer, null);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetProducer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetProducerAsync(GatewayGetProducer gatewayGetProducer, final ApiCallback<DSProducerDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetProducerValidateBeforeCall(gatewayGetProducer, _callback);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetRemoteAccess
     * @param gatewayGetRemoteAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetRemoteAccessCall(GatewayGetRemoteAccess gatewayGetRemoteAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetRemoteAccess;

        // create path and map variables
        String localVarPath = "/gateway-get-remote-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetRemoteAccessValidateBeforeCall(GatewayGetRemoteAccess gatewayGetRemoteAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetRemoteAccess' is set
        if (gatewayGetRemoteAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetRemoteAccess' when calling gatewayGetRemoteAccess(Async)");
        }

        return gatewayGetRemoteAccessCall(gatewayGetRemoteAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetRemoteAccess  (required)
     * @return BastionConfigReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public BastionConfigReplyObj gatewayGetRemoteAccess(GatewayGetRemoteAccess gatewayGetRemoteAccess) throws ApiException {
        ApiResponse<BastionConfigReplyObj> localVarResp = gatewayGetRemoteAccessWithHttpInfo(gatewayGetRemoteAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetRemoteAccess  (required)
     * @return ApiResponse&lt;BastionConfigReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BastionConfigReplyObj> gatewayGetRemoteAccessWithHttpInfo(GatewayGetRemoteAccess gatewayGetRemoteAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetRemoteAccessValidateBeforeCall(gatewayGetRemoteAccess, null);
        Type localVarReturnType = new TypeToken<BastionConfigReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetRemoteAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetRemoteAccessAsync(GatewayGetRemoteAccess gatewayGetRemoteAccess, final ApiCallback<BastionConfigReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetRemoteAccessValidateBeforeCall(gatewayGetRemoteAccess, _callback);
        Type localVarReturnType = new TypeToken<BastionConfigReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetTmpUsers
     * @param gatewayGetTmpUsers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetTmpUsersCall(GatewayGetTmpUsers gatewayGetTmpUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayGetTmpUsers;

        // create path and map variables
        String localVarPath = "/gateway-get-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetTmpUsersValidateBeforeCall(GatewayGetTmpUsers gatewayGetTmpUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayGetTmpUsers' is set
        if (gatewayGetTmpUsers == null) {
            throw new ApiException("Missing the required parameter 'gatewayGetTmpUsers' when calling gatewayGetTmpUsers(Async)");
        }

        return gatewayGetTmpUsersCall(gatewayGetTmpUsers, _callback);

    }

    /**
     * 
     * 
     * @param gatewayGetTmpUsers  (required)
     * @return List&lt;TmpUserData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public List<TmpUserData> gatewayGetTmpUsers(GatewayGetTmpUsers gatewayGetTmpUsers) throws ApiException {
        ApiResponse<List<TmpUserData>> localVarResp = gatewayGetTmpUsersWithHttpInfo(gatewayGetTmpUsers);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayGetTmpUsers  (required)
     * @return ApiResponse&lt;List&lt;TmpUserData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TmpUserData>> gatewayGetTmpUsersWithHttpInfo(GatewayGetTmpUsers gatewayGetTmpUsers) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetTmpUsersValidateBeforeCall(gatewayGetTmpUsers, null);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayGetTmpUsers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetTmpUsersAsync(GatewayGetTmpUsers gatewayGetTmpUsers, final ApiCallback<List<TmpUserData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetTmpUsersValidateBeforeCall(gatewayGetTmpUsers, _callback);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListCustomerFragments
     * @param gatewayListCustomerFragments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListCustomerFragmentsCall(GatewayListCustomerFragments gatewayListCustomerFragments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayListCustomerFragments;

        // create path and map variables
        String localVarPath = "/gateway-list-customer-fragments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListCustomerFragmentsValidateBeforeCall(GatewayListCustomerFragments gatewayListCustomerFragments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayListCustomerFragments' is set
        if (gatewayListCustomerFragments == null) {
            throw new ApiException("Missing the required parameter 'gatewayListCustomerFragments' when calling gatewayListCustomerFragments(Async)");
        }

        return gatewayListCustomerFragmentsCall(gatewayListCustomerFragments, _callback);

    }

    /**
     * 
     * 
     * @param gatewayListCustomerFragments  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> gatewayListCustomerFragments(GatewayListCustomerFragments gatewayListCustomerFragments) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = gatewayListCustomerFragmentsWithHttpInfo(gatewayListCustomerFragments);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayListCustomerFragments  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> gatewayListCustomerFragmentsWithHttpInfo(GatewayListCustomerFragments gatewayListCustomerFragments) throws ApiException {
        okhttp3.Call localVarCall = gatewayListCustomerFragmentsValidateBeforeCall(gatewayListCustomerFragments, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayListCustomerFragments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListCustomerFragmentsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListCustomerFragmentsAsync(GatewayListCustomerFragments gatewayListCustomerFragments, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListCustomerFragmentsValidateBeforeCall(gatewayListCustomerFragments, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListMigration
     * @param gatewayListMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListMigrationCall(GatewayListMigration gatewayListMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayListMigration;

        // create path and map variables
        String localVarPath = "/gateway-list-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListMigrationValidateBeforeCall(GatewayListMigration gatewayListMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayListMigration' is set
        if (gatewayListMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayListMigration' when calling gatewayListMigration(Async)");
        }

        return gatewayListMigrationCall(gatewayListMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayListMigration  (required)
     * @return GatewayMigrationListOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationListOutput gatewayListMigration(GatewayListMigration gatewayListMigration) throws ApiException {
        ApiResponse<GatewayMigrationListOutput> localVarResp = gatewayListMigrationWithHttpInfo(gatewayListMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayListMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationListOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationListOutput> gatewayListMigrationWithHttpInfo(GatewayListMigration gatewayListMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayListMigrationValidateBeforeCall(gatewayListMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationListOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayListMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListMigrationAsync(GatewayListMigration gatewayListMigration, final ApiCallback<GatewayMigrationListOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListMigrationValidateBeforeCall(gatewayListMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationListOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListProducers
     * @param gatewayListProducers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListProducersCall(GatewayListProducers gatewayListProducers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayListProducers;

        // create path and map variables
        String localVarPath = "/gateway-list-producers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListProducersValidateBeforeCall(GatewayListProducers gatewayListProducers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayListProducers' is set
        if (gatewayListProducers == null) {
            throw new ApiException("Missing the required parameter 'gatewayListProducers' when calling gatewayListProducers(Async)");
        }

        return gatewayListProducersCall(gatewayListProducers, _callback);

    }

    /**
     * 
     * 
     * @param gatewayListProducers  (required)
     * @return GetProducersListReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetProducersListReplyObj gatewayListProducers(GatewayListProducers gatewayListProducers) throws ApiException {
        ApiResponse<GetProducersListReplyObj> localVarResp = gatewayListProducersWithHttpInfo(gatewayListProducers);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayListProducers  (required)
     * @return ApiResponse&lt;GetProducersListReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProducersListReplyObj> gatewayListProducersWithHttpInfo(GatewayListProducers gatewayListProducers) throws ApiException {
        okhttp3.Call localVarCall = gatewayListProducersValidateBeforeCall(gatewayListProducers, null);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayListProducers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListProducersAsync(GatewayListProducers gatewayListProducers, final ApiCallback<GetProducersListReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListProducersValidateBeforeCall(gatewayListProducers, _callback);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListRotatedSecrets
     * @param gatewayListRotatedSecrets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListRotatedSecretsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListRotatedSecretsCall(GatewayListRotatedSecrets gatewayListRotatedSecrets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayListRotatedSecrets;

        // create path and map variables
        String localVarPath = "/gateway-list-rotated-secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListRotatedSecretsValidateBeforeCall(GatewayListRotatedSecrets gatewayListRotatedSecrets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayListRotatedSecrets' is set
        if (gatewayListRotatedSecrets == null) {
            throw new ApiException("Missing the required parameter 'gatewayListRotatedSecrets' when calling gatewayListRotatedSecrets(Async)");
        }

        return gatewayListRotatedSecretsCall(gatewayListRotatedSecrets, _callback);

    }

    /**
     * 
     * 
     * @param gatewayListRotatedSecrets  (required)
     * @return ListItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListRotatedSecretsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListItemsOutput gatewayListRotatedSecrets(GatewayListRotatedSecrets gatewayListRotatedSecrets) throws ApiException {
        ApiResponse<ListItemsOutput> localVarResp = gatewayListRotatedSecretsWithHttpInfo(gatewayListRotatedSecrets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayListRotatedSecrets  (required)
     * @return ApiResponse&lt;ListItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListRotatedSecretsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListItemsOutput> gatewayListRotatedSecretsWithHttpInfo(GatewayListRotatedSecrets gatewayListRotatedSecrets) throws ApiException {
        okhttp3.Call localVarCall = gatewayListRotatedSecretsValidateBeforeCall(gatewayListRotatedSecrets, null);
        Type localVarReturnType = new TypeToken<ListItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayListRotatedSecrets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListRotatedSecretsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListRotatedSecretsAsync(GatewayListRotatedSecrets gatewayListRotatedSecrets, final ApiCallback<ListItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListRotatedSecretsValidateBeforeCall(gatewayListRotatedSecrets, _callback);
        Type localVarReturnType = new TypeToken<ListItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayMigratePersonalItems
     * @param gatewayMigratePersonalItems  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigratePersonalItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayMigratePersonalItemsCall(GatewayMigratePersonalItems gatewayMigratePersonalItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayMigratePersonalItems;

        // create path and map variables
        String localVarPath = "/gateway-migrate-personal-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayMigratePersonalItemsValidateBeforeCall(GatewayMigratePersonalItems gatewayMigratePersonalItems, final ApiCallback _callback) throws ApiException {
        return gatewayMigratePersonalItemsCall(gatewayMigratePersonalItems, _callback);

    }

    /**
     * 
     * 
     * @param gatewayMigratePersonalItems  (optional)
     * @return GatewayMigratePersonalItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigratePersonalItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigratePersonalItemsOutput gatewayMigratePersonalItems(GatewayMigratePersonalItems gatewayMigratePersonalItems) throws ApiException {
        ApiResponse<GatewayMigratePersonalItemsOutput> localVarResp = gatewayMigratePersonalItemsWithHttpInfo(gatewayMigratePersonalItems);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayMigratePersonalItems  (optional)
     * @return ApiResponse&lt;GatewayMigratePersonalItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigratePersonalItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigratePersonalItemsOutput> gatewayMigratePersonalItemsWithHttpInfo(GatewayMigratePersonalItems gatewayMigratePersonalItems) throws ApiException {
        okhttp3.Call localVarCall = gatewayMigratePersonalItemsValidateBeforeCall(gatewayMigratePersonalItems, null);
        Type localVarReturnType = new TypeToken<GatewayMigratePersonalItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayMigratePersonalItems  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigratePersonalItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayMigratePersonalItemsAsync(GatewayMigratePersonalItems gatewayMigratePersonalItems, final ApiCallback<GatewayMigratePersonalItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayMigratePersonalItemsValidateBeforeCall(gatewayMigratePersonalItems, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigratePersonalItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayRevokeTmpUsers
     * @param gatewayRevokeTmpUsers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayRevokeTmpUsersCall(GatewayRevokeTmpUsers gatewayRevokeTmpUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayRevokeTmpUsers;

        // create path and map variables
        String localVarPath = "/gateway-revoke-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayRevokeTmpUsersValidateBeforeCall(GatewayRevokeTmpUsers gatewayRevokeTmpUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayRevokeTmpUsers' is set
        if (gatewayRevokeTmpUsers == null) {
            throw new ApiException("Missing the required parameter 'gatewayRevokeTmpUsers' when calling gatewayRevokeTmpUsers(Async)");
        }

        return gatewayRevokeTmpUsersCall(gatewayRevokeTmpUsers, _callback);

    }

    /**
     * 
     * 
     * @param gatewayRevokeTmpUsers  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void gatewayRevokeTmpUsers(GatewayRevokeTmpUsers gatewayRevokeTmpUsers) throws ApiException {
        gatewayRevokeTmpUsersWithHttpInfo(gatewayRevokeTmpUsers);
    }

    /**
     * 
     * 
     * @param gatewayRevokeTmpUsers  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gatewayRevokeTmpUsersWithHttpInfo(GatewayRevokeTmpUsers gatewayRevokeTmpUsers) throws ApiException {
        okhttp3.Call localVarCall = gatewayRevokeTmpUsersValidateBeforeCall(gatewayRevokeTmpUsers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayRevokeTmpUsers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayRevokeTmpUsersAsync(GatewayRevokeTmpUsers gatewayRevokeTmpUsers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayRevokeTmpUsersValidateBeforeCall(gatewayRevokeTmpUsers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayStartProducer
     * @param gatewayStartProducer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStartProducerCall(GatewayStartProducer gatewayStartProducer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayStartProducer;

        // create path and map variables
        String localVarPath = "/gateway-start-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayStartProducerValidateBeforeCall(GatewayStartProducer gatewayStartProducer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayStartProducer' is set
        if (gatewayStartProducer == null) {
            throw new ApiException("Missing the required parameter 'gatewayStartProducer' when calling gatewayStartProducer(Async)");
        }

        return gatewayStartProducerCall(gatewayStartProducer, _callback);

    }

    /**
     * 
     * 
     * @param gatewayStartProducer  (required)
     * @return GatewayStartProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayStartProducerOutput gatewayStartProducer(GatewayStartProducer gatewayStartProducer) throws ApiException {
        ApiResponse<GatewayStartProducerOutput> localVarResp = gatewayStartProducerWithHttpInfo(gatewayStartProducer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayStartProducer  (required)
     * @return ApiResponse&lt;GatewayStartProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayStartProducerOutput> gatewayStartProducerWithHttpInfo(GatewayStartProducer gatewayStartProducer) throws ApiException {
        okhttp3.Call localVarCall = gatewayStartProducerValidateBeforeCall(gatewayStartProducer, null);
        Type localVarReturnType = new TypeToken<GatewayStartProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayStartProducer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStartProducerAsync(GatewayStartProducer gatewayStartProducer, final ApiCallback<GatewayStartProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayStartProducerValidateBeforeCall(gatewayStartProducer, _callback);
        Type localVarReturnType = new TypeToken<GatewayStartProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayStatusMigration
     * @param gatewayStatusMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStatusMigrationCall(GatewayStatusMigration gatewayStatusMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayStatusMigration;

        // create path and map variables
        String localVarPath = "/gateway-migration-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayStatusMigrationValidateBeforeCall(GatewayStatusMigration gatewayStatusMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayStatusMigration' is set
        if (gatewayStatusMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayStatusMigration' when calling gatewayStatusMigration(Async)");
        }

        return gatewayStatusMigrationCall(gatewayStatusMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayStatusMigration  (required)
     * @return MigrationStatusReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public MigrationStatusReplyObj gatewayStatusMigration(GatewayStatusMigration gatewayStatusMigration) throws ApiException {
        ApiResponse<MigrationStatusReplyObj> localVarResp = gatewayStatusMigrationWithHttpInfo(gatewayStatusMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayStatusMigration  (required)
     * @return ApiResponse&lt;MigrationStatusReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationStatusReplyObj> gatewayStatusMigrationWithHttpInfo(GatewayStatusMigration gatewayStatusMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayStatusMigrationValidateBeforeCall(gatewayStatusMigration, null);
        Type localVarReturnType = new TypeToken<MigrationStatusReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayStatusMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStatusMigrationAsync(GatewayStatusMigration gatewayStatusMigration, final ApiCallback<MigrationStatusReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayStatusMigrationValidateBeforeCall(gatewayStatusMigration, _callback);
        Type localVarReturnType = new TypeToken<MigrationStatusReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayStopProducer
     * @param gatewayStopProducer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStopProducerCall(GatewayStopProducer gatewayStopProducer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayStopProducer;

        // create path and map variables
        String localVarPath = "/gateway-stop-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayStopProducerValidateBeforeCall(GatewayStopProducer gatewayStopProducer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayStopProducer' is set
        if (gatewayStopProducer == null) {
            throw new ApiException("Missing the required parameter 'gatewayStopProducer' when calling gatewayStopProducer(Async)");
        }

        return gatewayStopProducerCall(gatewayStopProducer, _callback);

    }

    /**
     * 
     * 
     * @param gatewayStopProducer  (required)
     * @return GatewayStopProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayStopProducerOutput gatewayStopProducer(GatewayStopProducer gatewayStopProducer) throws ApiException {
        ApiResponse<GatewayStopProducerOutput> localVarResp = gatewayStopProducerWithHttpInfo(gatewayStopProducer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayStopProducer  (required)
     * @return ApiResponse&lt;GatewayStopProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayStopProducerOutput> gatewayStopProducerWithHttpInfo(GatewayStopProducer gatewayStopProducer) throws ApiException {
        okhttp3.Call localVarCall = gatewayStopProducerValidateBeforeCall(gatewayStopProducer, null);
        Type localVarReturnType = new TypeToken<GatewayStopProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayStopProducer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStopProducerAsync(GatewayStopProducer gatewayStopProducer, final ApiCallback<GatewayStopProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayStopProducerValidateBeforeCall(gatewayStopProducer, _callback);
        Type localVarReturnType = new TypeToken<GatewayStopProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewaySyncMigration
     * @param gatewaySyncMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewaySyncMigrationCall(GatewaySyncMigration gatewaySyncMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewaySyncMigration;

        // create path and map variables
        String localVarPath = "/gateway-sync-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewaySyncMigrationValidateBeforeCall(GatewaySyncMigration gatewaySyncMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewaySyncMigration' is set
        if (gatewaySyncMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewaySyncMigration' when calling gatewaySyncMigration(Async)");
        }

        return gatewaySyncMigrationCall(gatewaySyncMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewaySyncMigration  (required)
     * @return GatewayMigrationSyncOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationSyncOutput gatewaySyncMigration(GatewaySyncMigration gatewaySyncMigration) throws ApiException {
        ApiResponse<GatewayMigrationSyncOutput> localVarResp = gatewaySyncMigrationWithHttpInfo(gatewaySyncMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewaySyncMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationSyncOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationSyncOutput> gatewaySyncMigrationWithHttpInfo(GatewaySyncMigration gatewaySyncMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewaySyncMigrationValidateBeforeCall(gatewaySyncMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationSyncOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewaySyncMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewaySyncMigrationAsync(GatewaySyncMigration gatewaySyncMigration, final ApiCallback<GatewayMigrationSyncOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewaySyncMigrationValidateBeforeCall(gatewaySyncMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationSyncOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateAllowedAccess
     * @param gatewayUpdateAllowedAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateAllowedAccessCall(GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateAllowedAccess;

        // create path and map variables
        String localVarPath = "/gateway-update-allowed-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateAllowedAccessValidateBeforeCall(GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateAllowedAccess' is set
        if (gatewayUpdateAllowedAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateAllowedAccess' when calling gatewayUpdateAllowedAccess(Async)");
        }

        return gatewayUpdateAllowedAccessCall(gatewayUpdateAllowedAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateAllowedAccess  (required)
     * @return AllowedAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AllowedAccess gatewayUpdateAllowedAccess(GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess) throws ApiException {
        ApiResponse<AllowedAccess> localVarResp = gatewayUpdateAllowedAccessWithHttpInfo(gatewayUpdateAllowedAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateAllowedAccess  (required)
     * @return ApiResponse&lt;AllowedAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowedAccess> gatewayUpdateAllowedAccessWithHttpInfo(GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateAllowedAccessValidateBeforeCall(gatewayUpdateAllowedAccess, null);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateAllowedAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateAllowedAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateAllowedAccessAsync(GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess, final ApiCallback<AllowedAccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateAllowedAccessValidateBeforeCall(gatewayUpdateAllowedAccess, _callback);
        Type localVarReturnType = new TypeToken<AllowedAccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateCache
     * @param gatewayUpdateCache  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateCacheCall(GatewayUpdateCache gatewayUpdateCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateCache;

        // create path and map variables
        String localVarPath = "/gateway-update-cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateCacheValidateBeforeCall(GatewayUpdateCache gatewayUpdateCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateCache' is set
        if (gatewayUpdateCache == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateCache' when calling gatewayUpdateCache(Async)");
        }

        return gatewayUpdateCacheCall(gatewayUpdateCache, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateCache  (required)
     * @return GatewayUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateOutput gatewayUpdateCache(GatewayUpdateCache gatewayUpdateCache) throws ApiException {
        ApiResponse<GatewayUpdateOutput> localVarResp = gatewayUpdateCacheWithHttpInfo(gatewayUpdateCache);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateCache  (required)
     * @return ApiResponse&lt;GatewayUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateOutput> gatewayUpdateCacheWithHttpInfo(GatewayUpdateCache gatewayUpdateCache) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateCacheValidateBeforeCall(gatewayUpdateCache, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateCache  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateCacheResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateCacheAsync(GatewayUpdateCache gatewayUpdateCache, final ApiCallback<GatewayUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateCacheValidateBeforeCall(gatewayUpdateCache, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateDefaults
     * @param gatewayUpdateDefaults  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateDefaultsCall(GatewayUpdateDefaults gatewayUpdateDefaults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateDefaults;

        // create path and map variables
        String localVarPath = "/gateway-update-defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateDefaultsValidateBeforeCall(GatewayUpdateDefaults gatewayUpdateDefaults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateDefaults' is set
        if (gatewayUpdateDefaults == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateDefaults' when calling gatewayUpdateDefaults(Async)");
        }

        return gatewayUpdateDefaultsCall(gatewayUpdateDefaults, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateDefaults  (required)
     * @return GatewayUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateOutput gatewayUpdateDefaults(GatewayUpdateDefaults gatewayUpdateDefaults) throws ApiException {
        ApiResponse<GatewayUpdateOutput> localVarResp = gatewayUpdateDefaultsWithHttpInfo(gatewayUpdateDefaults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateDefaults  (required)
     * @return ApiResponse&lt;GatewayUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateOutput> gatewayUpdateDefaultsWithHttpInfo(GatewayUpdateDefaults gatewayUpdateDefaults) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateDefaultsValidateBeforeCall(gatewayUpdateDefaults, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateDefaults  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateDefaultsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateDefaultsAsync(GatewayUpdateDefaults gatewayUpdateDefaults, final ApiCallback<GatewayUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateDefaultsValidateBeforeCall(gatewayUpdateDefaults, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateItem
     * @param gatewayUpdateItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateItemCall(GatewayUpdateItem gatewayUpdateItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateItem;

        // create path and map variables
        String localVarPath = "/gateway-update-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateItemValidateBeforeCall(GatewayUpdateItem gatewayUpdateItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateItem' is set
        if (gatewayUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateItem' when calling gatewayUpdateItem(Async)");
        }

        return gatewayUpdateItemCall(gatewayUpdateItem, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateItem  (required)
     * @return GatewayUpdateItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateItemOutput gatewayUpdateItem(GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        ApiResponse<GatewayUpdateItemOutput> localVarResp = gatewayUpdateItemWithHttpInfo(gatewayUpdateItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateItem  (required)
     * @return ApiResponse&lt;GatewayUpdateItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateItemOutput> gatewayUpdateItemWithHttpInfo(GatewayUpdateItem gatewayUpdateItem) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateItemValidateBeforeCall(gatewayUpdateItem, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateItemAsync(GatewayUpdateItem gatewayUpdateItem, final ApiCallback<GatewayUpdateItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateItemValidateBeforeCall(gatewayUpdateItem, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateK8SAuthConfig
     * @param gatewayUpdateK8SAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateK8SAuthConfigCall(GatewayUpdateK8SAuthConfig gatewayUpdateK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateK8SAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-update-k8s-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateK8SAuthConfigValidateBeforeCall(GatewayUpdateK8SAuthConfig gatewayUpdateK8SAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateK8SAuthConfig' is set
        if (gatewayUpdateK8SAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateK8SAuthConfig' when calling gatewayUpdateK8SAuthConfig(Async)");
        }

        return gatewayUpdateK8SAuthConfigCall(gatewayUpdateK8SAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateK8SAuthConfig  (required)
     * @return GatewayUpdateK8SAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateK8SAuthConfigOutput gatewayUpdateK8SAuthConfig(GatewayUpdateK8SAuthConfig gatewayUpdateK8SAuthConfig) throws ApiException {
        ApiResponse<GatewayUpdateK8SAuthConfigOutput> localVarResp = gatewayUpdateK8SAuthConfigWithHttpInfo(gatewayUpdateK8SAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateK8SAuthConfig  (required)
     * @return ApiResponse&lt;GatewayUpdateK8SAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateK8SAuthConfigOutput> gatewayUpdateK8SAuthConfigWithHttpInfo(GatewayUpdateK8SAuthConfig gatewayUpdateK8SAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateK8SAuthConfigValidateBeforeCall(gatewayUpdateK8SAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateK8SAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateK8SAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateK8SAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateK8SAuthConfigAsync(GatewayUpdateK8SAuthConfig gatewayUpdateK8SAuthConfig, final ApiCallback<GatewayUpdateK8SAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateK8SAuthConfigValidateBeforeCall(gatewayUpdateK8SAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateK8SAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLdapAuthConfig
     * @param gatewayUpdateLdapAuthConfig  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLdapAuthConfigCall(GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLdapAuthConfig;

        // create path and map variables
        String localVarPath = "/gateway-update-ldap-auth-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLdapAuthConfigValidateBeforeCall(GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLdapAuthConfig' is set
        if (gatewayUpdateLdapAuthConfig == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLdapAuthConfig' when calling gatewayUpdateLdapAuthConfig(Async)");
        }

        return gatewayUpdateLdapAuthConfigCall(gatewayUpdateLdapAuthConfig, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLdapAuthConfig  (required)
     * @return GatewayUpdateLdapAuthConfigOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLdapAuthConfigOutput gatewayUpdateLdapAuthConfig(GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig) throws ApiException {
        ApiResponse<GatewayUpdateLdapAuthConfigOutput> localVarResp = gatewayUpdateLdapAuthConfigWithHttpInfo(gatewayUpdateLdapAuthConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLdapAuthConfig  (required)
     * @return ApiResponse&lt;GatewayUpdateLdapAuthConfigOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLdapAuthConfigOutput> gatewayUpdateLdapAuthConfigWithHttpInfo(GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLdapAuthConfigValidateBeforeCall(gatewayUpdateLdapAuthConfig, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLdapAuthConfigOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLdapAuthConfig  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateLdapAuthConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLdapAuthConfigAsync(GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig, final ApiCallback<GatewayUpdateLdapAuthConfigOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLdapAuthConfigValidateBeforeCall(gatewayUpdateLdapAuthConfig, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLdapAuthConfigOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingAwsS3
     * @param gatewayUpdateLogForwardingAwsS3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingAwsS3Call(GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingAwsS3;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-aws-s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingAwsS3ValidateBeforeCall(GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingAwsS3' is set
        if (gatewayUpdateLogForwardingAwsS3 == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingAwsS3' when calling gatewayUpdateLogForwardingAwsS3(Async)");
        }

        return gatewayUpdateLogForwardingAwsS3Call(gatewayUpdateLogForwardingAwsS3, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingAwsS3  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingAwsS3(GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingAwsS3WithHttpInfo(gatewayUpdateLogForwardingAwsS3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingAwsS3  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingAwsS3WithHttpInfo(GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingAwsS3ValidateBeforeCall(gatewayUpdateLogForwardingAwsS3, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingAwsS3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingAwsS3Async(GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingAwsS3ValidateBeforeCall(gatewayUpdateLogForwardingAwsS3, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingAzureAnalytics
     * @param gatewayUpdateLogForwardingAzureAnalytics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingAzureAnalyticsCall(GatewayUpdateLogForwardingAzureAnalytics gatewayUpdateLogForwardingAzureAnalytics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingAzureAnalytics;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-azure-analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingAzureAnalyticsValidateBeforeCall(GatewayUpdateLogForwardingAzureAnalytics gatewayUpdateLogForwardingAzureAnalytics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingAzureAnalytics' is set
        if (gatewayUpdateLogForwardingAzureAnalytics == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingAzureAnalytics' when calling gatewayUpdateLogForwardingAzureAnalytics(Async)");
        }

        return gatewayUpdateLogForwardingAzureAnalyticsCall(gatewayUpdateLogForwardingAzureAnalytics, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingAzureAnalytics  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingAzureAnalytics(GatewayUpdateLogForwardingAzureAnalytics gatewayUpdateLogForwardingAzureAnalytics) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingAzureAnalyticsWithHttpInfo(gatewayUpdateLogForwardingAzureAnalytics);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingAzureAnalytics  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingAzureAnalyticsWithHttpInfo(GatewayUpdateLogForwardingAzureAnalytics gatewayUpdateLogForwardingAzureAnalytics) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingAzureAnalyticsValidateBeforeCall(gatewayUpdateLogForwardingAzureAnalytics, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingAzureAnalytics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingAzureAnalyticsAsync(GatewayUpdateLogForwardingAzureAnalytics gatewayUpdateLogForwardingAzureAnalytics, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingAzureAnalyticsValidateBeforeCall(gatewayUpdateLogForwardingAzureAnalytics, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingDatadog
     * @param gatewayUpdateLogForwardingDatadog  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingDatadogCall(GatewayUpdateLogForwardingDatadog gatewayUpdateLogForwardingDatadog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingDatadog;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-datadog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingDatadogValidateBeforeCall(GatewayUpdateLogForwardingDatadog gatewayUpdateLogForwardingDatadog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingDatadog' is set
        if (gatewayUpdateLogForwardingDatadog == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingDatadog' when calling gatewayUpdateLogForwardingDatadog(Async)");
        }

        return gatewayUpdateLogForwardingDatadogCall(gatewayUpdateLogForwardingDatadog, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingDatadog  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingDatadog(GatewayUpdateLogForwardingDatadog gatewayUpdateLogForwardingDatadog) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingDatadogWithHttpInfo(gatewayUpdateLogForwardingDatadog);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingDatadog  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingDatadogWithHttpInfo(GatewayUpdateLogForwardingDatadog gatewayUpdateLogForwardingDatadog) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingDatadogValidateBeforeCall(gatewayUpdateLogForwardingDatadog, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingDatadog  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingDatadogAsync(GatewayUpdateLogForwardingDatadog gatewayUpdateLogForwardingDatadog, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingDatadogValidateBeforeCall(gatewayUpdateLogForwardingDatadog, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingElasticsearch
     * @param gatewayUpdateLogForwardingElasticsearch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingElasticsearchCall(GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingElasticsearch;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-elasticsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingElasticsearchValidateBeforeCall(GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingElasticsearch' is set
        if (gatewayUpdateLogForwardingElasticsearch == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingElasticsearch' when calling gatewayUpdateLogForwardingElasticsearch(Async)");
        }

        return gatewayUpdateLogForwardingElasticsearchCall(gatewayUpdateLogForwardingElasticsearch, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingElasticsearch  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingElasticsearch(GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingElasticsearchWithHttpInfo(gatewayUpdateLogForwardingElasticsearch);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingElasticsearch  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingElasticsearchWithHttpInfo(GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingElasticsearchValidateBeforeCall(gatewayUpdateLogForwardingElasticsearch, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingElasticsearch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingElasticsearchAsync(GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingElasticsearchValidateBeforeCall(gatewayUpdateLogForwardingElasticsearch, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingGoogleChronicle
     * @param gatewayUpdateLogForwardingGoogleChronicle  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingGoogleChronicleCall(GatewayUpdateLogForwardingGoogleChronicle gatewayUpdateLogForwardingGoogleChronicle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingGoogleChronicle;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-google-chronicle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingGoogleChronicleValidateBeforeCall(GatewayUpdateLogForwardingGoogleChronicle gatewayUpdateLogForwardingGoogleChronicle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingGoogleChronicle' is set
        if (gatewayUpdateLogForwardingGoogleChronicle == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingGoogleChronicle' when calling gatewayUpdateLogForwardingGoogleChronicle(Async)");
        }

        return gatewayUpdateLogForwardingGoogleChronicleCall(gatewayUpdateLogForwardingGoogleChronicle, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingGoogleChronicle  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingGoogleChronicle(GatewayUpdateLogForwardingGoogleChronicle gatewayUpdateLogForwardingGoogleChronicle) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingGoogleChronicleWithHttpInfo(gatewayUpdateLogForwardingGoogleChronicle);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingGoogleChronicle  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingGoogleChronicleWithHttpInfo(GatewayUpdateLogForwardingGoogleChronicle gatewayUpdateLogForwardingGoogleChronicle) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingGoogleChronicleValidateBeforeCall(gatewayUpdateLogForwardingGoogleChronicle, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingGoogleChronicle  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingGoogleChronicleAsync(GatewayUpdateLogForwardingGoogleChronicle gatewayUpdateLogForwardingGoogleChronicle, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingGoogleChronicleValidateBeforeCall(gatewayUpdateLogForwardingGoogleChronicle, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingLogstash
     * @param gatewayUpdateLogForwardingLogstash  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingLogstashCall(GatewayUpdateLogForwardingLogstash gatewayUpdateLogForwardingLogstash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingLogstash;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-logstash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingLogstashValidateBeforeCall(GatewayUpdateLogForwardingLogstash gatewayUpdateLogForwardingLogstash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingLogstash' is set
        if (gatewayUpdateLogForwardingLogstash == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingLogstash' when calling gatewayUpdateLogForwardingLogstash(Async)");
        }

        return gatewayUpdateLogForwardingLogstashCall(gatewayUpdateLogForwardingLogstash, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingLogstash  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingLogstash(GatewayUpdateLogForwardingLogstash gatewayUpdateLogForwardingLogstash) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingLogstashWithHttpInfo(gatewayUpdateLogForwardingLogstash);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingLogstash  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingLogstashWithHttpInfo(GatewayUpdateLogForwardingLogstash gatewayUpdateLogForwardingLogstash) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingLogstashValidateBeforeCall(gatewayUpdateLogForwardingLogstash, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingLogstash  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingLogstashAsync(GatewayUpdateLogForwardingLogstash gatewayUpdateLogForwardingLogstash, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingLogstashValidateBeforeCall(gatewayUpdateLogForwardingLogstash, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingLogzIo
     * @param gatewayUpdateLogForwardingLogzIo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingLogzIoCall(GatewayUpdateLogForwardingLogzIo gatewayUpdateLogForwardingLogzIo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingLogzIo;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-logz-io";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingLogzIoValidateBeforeCall(GatewayUpdateLogForwardingLogzIo gatewayUpdateLogForwardingLogzIo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingLogzIo' is set
        if (gatewayUpdateLogForwardingLogzIo == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingLogzIo' when calling gatewayUpdateLogForwardingLogzIo(Async)");
        }

        return gatewayUpdateLogForwardingLogzIoCall(gatewayUpdateLogForwardingLogzIo, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingLogzIo  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingLogzIo(GatewayUpdateLogForwardingLogzIo gatewayUpdateLogForwardingLogzIo) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingLogzIoWithHttpInfo(gatewayUpdateLogForwardingLogzIo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingLogzIo  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingLogzIoWithHttpInfo(GatewayUpdateLogForwardingLogzIo gatewayUpdateLogForwardingLogzIo) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingLogzIoValidateBeforeCall(gatewayUpdateLogForwardingLogzIo, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingLogzIo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingLogzIoAsync(GatewayUpdateLogForwardingLogzIo gatewayUpdateLogForwardingLogzIo, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingLogzIoValidateBeforeCall(gatewayUpdateLogForwardingLogzIo, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingSplunk
     * @param gatewayUpdateLogForwardingSplunk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSplunkCall(GatewayUpdateLogForwardingSplunk gatewayUpdateLogForwardingSplunk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingSplunk;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-splunk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingSplunkValidateBeforeCall(GatewayUpdateLogForwardingSplunk gatewayUpdateLogForwardingSplunk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingSplunk' is set
        if (gatewayUpdateLogForwardingSplunk == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingSplunk' when calling gatewayUpdateLogForwardingSplunk(Async)");
        }

        return gatewayUpdateLogForwardingSplunkCall(gatewayUpdateLogForwardingSplunk, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSplunk  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingSplunk(GatewayUpdateLogForwardingSplunk gatewayUpdateLogForwardingSplunk) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingSplunkWithHttpInfo(gatewayUpdateLogForwardingSplunk);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSplunk  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingSplunkWithHttpInfo(GatewayUpdateLogForwardingSplunk gatewayUpdateLogForwardingSplunk) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSplunkValidateBeforeCall(gatewayUpdateLogForwardingSplunk, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingSplunk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSplunkAsync(GatewayUpdateLogForwardingSplunk gatewayUpdateLogForwardingSplunk, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSplunkValidateBeforeCall(gatewayUpdateLogForwardingSplunk, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingStdout
     * @param gatewayUpdateLogForwardingStdout  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingStdoutCall(GatewayUpdateLogForwardingStdout gatewayUpdateLogForwardingStdout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingStdout;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-stdout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingStdoutValidateBeforeCall(GatewayUpdateLogForwardingStdout gatewayUpdateLogForwardingStdout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingStdout' is set
        if (gatewayUpdateLogForwardingStdout == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingStdout' when calling gatewayUpdateLogForwardingStdout(Async)");
        }

        return gatewayUpdateLogForwardingStdoutCall(gatewayUpdateLogForwardingStdout, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingStdout  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingStdout(GatewayUpdateLogForwardingStdout gatewayUpdateLogForwardingStdout) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingStdoutWithHttpInfo(gatewayUpdateLogForwardingStdout);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingStdout  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingStdoutWithHttpInfo(GatewayUpdateLogForwardingStdout gatewayUpdateLogForwardingStdout) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingStdoutValidateBeforeCall(gatewayUpdateLogForwardingStdout, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingStdout  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingStdoutAsync(GatewayUpdateLogForwardingStdout gatewayUpdateLogForwardingStdout, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingStdoutValidateBeforeCall(gatewayUpdateLogForwardingStdout, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingSumologic
     * @param gatewayUpdateLogForwardingSumologic  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSumologicCall(GatewayUpdateLogForwardingSumologic gatewayUpdateLogForwardingSumologic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingSumologic;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-sumologic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingSumologicValidateBeforeCall(GatewayUpdateLogForwardingSumologic gatewayUpdateLogForwardingSumologic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingSumologic' is set
        if (gatewayUpdateLogForwardingSumologic == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingSumologic' when calling gatewayUpdateLogForwardingSumologic(Async)");
        }

        return gatewayUpdateLogForwardingSumologicCall(gatewayUpdateLogForwardingSumologic, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSumologic  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingSumologic(GatewayUpdateLogForwardingSumologic gatewayUpdateLogForwardingSumologic) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingSumologicWithHttpInfo(gatewayUpdateLogForwardingSumologic);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSumologic  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingSumologicWithHttpInfo(GatewayUpdateLogForwardingSumologic gatewayUpdateLogForwardingSumologic) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSumologicValidateBeforeCall(gatewayUpdateLogForwardingSumologic, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingSumologic  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSumologicAsync(GatewayUpdateLogForwardingSumologic gatewayUpdateLogForwardingSumologic, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSumologicValidateBeforeCall(gatewayUpdateLogForwardingSumologic, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateLogForwardingSyslog
     * @param gatewayUpdateLogForwardingSyslog  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSyslogCall(GatewayUpdateLogForwardingSyslog gatewayUpdateLogForwardingSyslog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateLogForwardingSyslog;

        // create path and map variables
        String localVarPath = "/gateway-update-log-forwarding-syslog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateLogForwardingSyslogValidateBeforeCall(GatewayUpdateLogForwardingSyslog gatewayUpdateLogForwardingSyslog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateLogForwardingSyslog' is set
        if (gatewayUpdateLogForwardingSyslog == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateLogForwardingSyslog' when calling gatewayUpdateLogForwardingSyslog(Async)");
        }

        return gatewayUpdateLogForwardingSyslogCall(gatewayUpdateLogForwardingSyslog, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSyslog  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gatewayUpdateLogForwardingSyslog(GatewayUpdateLogForwardingSyslog gatewayUpdateLogForwardingSyslog) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gatewayUpdateLogForwardingSyslogWithHttpInfo(gatewayUpdateLogForwardingSyslog);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateLogForwardingSyslog  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gatewayUpdateLogForwardingSyslogWithHttpInfo(GatewayUpdateLogForwardingSyslog gatewayUpdateLogForwardingSyslog) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSyslogValidateBeforeCall(gatewayUpdateLogForwardingSyslog, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateLogForwardingSyslog  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateLogForwardingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateLogForwardingSyslogAsync(GatewayUpdateLogForwardingSyslog gatewayUpdateLogForwardingSyslog, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateLogForwardingSyslogValidateBeforeCall(gatewayUpdateLogForwardingSyslog, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateMigration
     * @param gatewayUpdateMigration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateMigrationCall(GatewayUpdateMigration gatewayUpdateMigration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateMigration;

        // create path and map variables
        String localVarPath = "/gateway-update-migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateMigrationValidateBeforeCall(GatewayUpdateMigration gatewayUpdateMigration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateMigration' is set
        if (gatewayUpdateMigration == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateMigration' when calling gatewayUpdateMigration(Async)");
        }

        return gatewayUpdateMigrationCall(gatewayUpdateMigration, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateMigration  (required)
     * @return GatewayMigrationUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayMigrationUpdateOutput gatewayUpdateMigration(GatewayUpdateMigration gatewayUpdateMigration) throws ApiException {
        ApiResponse<GatewayMigrationUpdateOutput> localVarResp = gatewayUpdateMigrationWithHttpInfo(gatewayUpdateMigration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateMigration  (required)
     * @return ApiResponse&lt;GatewayMigrationUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayMigrationUpdateOutput> gatewayUpdateMigrationWithHttpInfo(GatewayUpdateMigration gatewayUpdateMigration) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateMigrationValidateBeforeCall(gatewayUpdateMigration, null);
        Type localVarReturnType = new TypeToken<GatewayMigrationUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateMigration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayMigrationUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateMigrationAsync(GatewayUpdateMigration gatewayUpdateMigration, final ApiCallback<GatewayMigrationUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateMigrationValidateBeforeCall(gatewayUpdateMigration, _callback);
        Type localVarReturnType = new TypeToken<GatewayMigrationUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerArtifactory
     * @param gatewayUpdateProducerArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerArtifactoryCall(GatewayUpdateProducerArtifactory gatewayUpdateProducerArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerArtifactory;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerArtifactoryValidateBeforeCall(GatewayUpdateProducerArtifactory gatewayUpdateProducerArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerArtifactory' is set
        if (gatewayUpdateProducerArtifactory == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerArtifactory' when calling gatewayUpdateProducerArtifactory(Async)");
        }

        return gatewayUpdateProducerArtifactoryCall(gatewayUpdateProducerArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerArtifactory  (required)
     * @return GatewayUpdateProducerArtifactoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerArtifactoryOutput gatewayUpdateProducerArtifactory(GatewayUpdateProducerArtifactory gatewayUpdateProducerArtifactory) throws ApiException {
        ApiResponse<GatewayUpdateProducerArtifactoryOutput> localVarResp = gatewayUpdateProducerArtifactoryWithHttpInfo(gatewayUpdateProducerArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerArtifactory  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerArtifactoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerArtifactoryOutput> gatewayUpdateProducerArtifactoryWithHttpInfo(GatewayUpdateProducerArtifactory gatewayUpdateProducerArtifactory) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerArtifactoryValidateBeforeCall(gatewayUpdateProducerArtifactory, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerArtifactoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerArtifactoryAsync(GatewayUpdateProducerArtifactory gatewayUpdateProducerArtifactory, final ApiCallback<GatewayUpdateProducerArtifactoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerArtifactoryValidateBeforeCall(gatewayUpdateProducerArtifactory, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerArtifactoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerAws
     * @param gatewayUpdateProducerAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerAwsCall(GatewayUpdateProducerAws gatewayUpdateProducerAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerAws;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerAwsValidateBeforeCall(GatewayUpdateProducerAws gatewayUpdateProducerAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerAws' is set
        if (gatewayUpdateProducerAws == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerAws' when calling gatewayUpdateProducerAws(Async)");
        }

        return gatewayUpdateProducerAwsCall(gatewayUpdateProducerAws, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerAws  (required)
     * @return GatewayUpdateProducerAwsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerAwsOutput gatewayUpdateProducerAws(GatewayUpdateProducerAws gatewayUpdateProducerAws) throws ApiException {
        ApiResponse<GatewayUpdateProducerAwsOutput> localVarResp = gatewayUpdateProducerAwsWithHttpInfo(gatewayUpdateProducerAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerAws  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerAwsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerAwsOutput> gatewayUpdateProducerAwsWithHttpInfo(GatewayUpdateProducerAws gatewayUpdateProducerAws) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerAwsValidateBeforeCall(gatewayUpdateProducerAws, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerAwsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerAwsAsync(GatewayUpdateProducerAws gatewayUpdateProducerAws, final ApiCallback<GatewayUpdateProducerAwsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerAwsValidateBeforeCall(gatewayUpdateProducerAws, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerAwsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerAzure
     * @param gatewayUpdateProducerAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerAzureCall(GatewayUpdateProducerAzure gatewayUpdateProducerAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerAzure;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerAzureValidateBeforeCall(GatewayUpdateProducerAzure gatewayUpdateProducerAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerAzure' is set
        if (gatewayUpdateProducerAzure == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerAzure' when calling gatewayUpdateProducerAzure(Async)");
        }

        return gatewayUpdateProducerAzureCall(gatewayUpdateProducerAzure, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerAzure  (required)
     * @return GatewayUpdateProducerAzureOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerAzureOutput gatewayUpdateProducerAzure(GatewayUpdateProducerAzure gatewayUpdateProducerAzure) throws ApiException {
        ApiResponse<GatewayUpdateProducerAzureOutput> localVarResp = gatewayUpdateProducerAzureWithHttpInfo(gatewayUpdateProducerAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerAzure  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerAzureOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerAzureOutput> gatewayUpdateProducerAzureWithHttpInfo(GatewayUpdateProducerAzure gatewayUpdateProducerAzure) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerAzureValidateBeforeCall(gatewayUpdateProducerAzure, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerAzureOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerAzureAsync(GatewayUpdateProducerAzure gatewayUpdateProducerAzure, final ApiCallback<GatewayUpdateProducerAzureOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerAzureValidateBeforeCall(gatewayUpdateProducerAzure, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerAzureOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerCassandra
     * @param gatewayUpdateProducerCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerCassandraCall(GatewayUpdateProducerCassandra gatewayUpdateProducerCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerCassandra;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerCassandraValidateBeforeCall(GatewayUpdateProducerCassandra gatewayUpdateProducerCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerCassandra' is set
        if (gatewayUpdateProducerCassandra == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerCassandra' when calling gatewayUpdateProducerCassandra(Async)");
        }

        return gatewayUpdateProducerCassandraCall(gatewayUpdateProducerCassandra, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerCassandra  (required)
     * @return GatewayUpdateProducerCassandraOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerCassandraOutput gatewayUpdateProducerCassandra(GatewayUpdateProducerCassandra gatewayUpdateProducerCassandra) throws ApiException {
        ApiResponse<GatewayUpdateProducerCassandraOutput> localVarResp = gatewayUpdateProducerCassandraWithHttpInfo(gatewayUpdateProducerCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerCassandra  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerCassandraOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerCassandraOutput> gatewayUpdateProducerCassandraWithHttpInfo(GatewayUpdateProducerCassandra gatewayUpdateProducerCassandra) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerCassandraValidateBeforeCall(gatewayUpdateProducerCassandra, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerCassandraOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerCassandraAsync(GatewayUpdateProducerCassandra gatewayUpdateProducerCassandra, final ApiCallback<GatewayUpdateProducerCassandraOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerCassandraValidateBeforeCall(gatewayUpdateProducerCassandra, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerCassandraOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerChef
     * @param gatewayUpdateProducerChef  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerChefCall(GatewayUpdateProducerChef gatewayUpdateProducerChef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerChef;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-chef";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerChefValidateBeforeCall(GatewayUpdateProducerChef gatewayUpdateProducerChef, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerChef' is set
        if (gatewayUpdateProducerChef == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerChef' when calling gatewayUpdateProducerChef(Async)");
        }

        return gatewayUpdateProducerChefCall(gatewayUpdateProducerChef, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerChef  (required)
     * @return GatewayUpdateProducerChefOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerChefOutput gatewayUpdateProducerChef(GatewayUpdateProducerChef gatewayUpdateProducerChef) throws ApiException {
        ApiResponse<GatewayUpdateProducerChefOutput> localVarResp = gatewayUpdateProducerChefWithHttpInfo(gatewayUpdateProducerChef);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerChef  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerChefOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerChefOutput> gatewayUpdateProducerChefWithHttpInfo(GatewayUpdateProducerChef gatewayUpdateProducerChef) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerChefValidateBeforeCall(gatewayUpdateProducerChef, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerChefOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerChef  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerChefResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerChefAsync(GatewayUpdateProducerChef gatewayUpdateProducerChef, final ApiCallback<GatewayUpdateProducerChefOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerChefValidateBeforeCall(gatewayUpdateProducerChef, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerChefOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerCustom
     * @param gatewayUpdateProducerCustom  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerCustomCall(GatewayUpdateProducerCustom gatewayUpdateProducerCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerCustom;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerCustomValidateBeforeCall(GatewayUpdateProducerCustom gatewayUpdateProducerCustom, final ApiCallback _callback) throws ApiException {
        return gatewayUpdateProducerCustomCall(gatewayUpdateProducerCustom, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerCustom  (optional)
     * @return GatewayUpdateProducerCustomOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerCustomOutput gatewayUpdateProducerCustom(GatewayUpdateProducerCustom gatewayUpdateProducerCustom) throws ApiException {
        ApiResponse<GatewayUpdateProducerCustomOutput> localVarResp = gatewayUpdateProducerCustomWithHttpInfo(gatewayUpdateProducerCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerCustom  (optional)
     * @return ApiResponse&lt;GatewayUpdateProducerCustomOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerCustomOutput> gatewayUpdateProducerCustomWithHttpInfo(GatewayUpdateProducerCustom gatewayUpdateProducerCustom) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerCustomValidateBeforeCall(gatewayUpdateProducerCustom, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerCustomOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerCustom  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerCustomAsync(GatewayUpdateProducerCustom gatewayUpdateProducerCustom, final ApiCallback<GatewayUpdateProducerCustomOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerCustomValidateBeforeCall(gatewayUpdateProducerCustom, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerCustomOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerDockerhub
     * @param gatewayUpdateProducerDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerDockerhubCall(GatewayUpdateProducerDockerhub gatewayUpdateProducerDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerDockerhub;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerDockerhubValidateBeforeCall(GatewayUpdateProducerDockerhub gatewayUpdateProducerDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerDockerhub' is set
        if (gatewayUpdateProducerDockerhub == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerDockerhub' when calling gatewayUpdateProducerDockerhub(Async)");
        }

        return gatewayUpdateProducerDockerhubCall(gatewayUpdateProducerDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerDockerhub  (required)
     * @return GatewayUpdateProducerDockerhubOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerDockerhubOutput gatewayUpdateProducerDockerhub(GatewayUpdateProducerDockerhub gatewayUpdateProducerDockerhub) throws ApiException {
        ApiResponse<GatewayUpdateProducerDockerhubOutput> localVarResp = gatewayUpdateProducerDockerhubWithHttpInfo(gatewayUpdateProducerDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerDockerhub  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerDockerhubOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerDockerhubOutput> gatewayUpdateProducerDockerhubWithHttpInfo(GatewayUpdateProducerDockerhub gatewayUpdateProducerDockerhub) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerDockerhubValidateBeforeCall(gatewayUpdateProducerDockerhub, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerDockerhubOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerDockerhubAsync(GatewayUpdateProducerDockerhub gatewayUpdateProducerDockerhub, final ApiCallback<GatewayUpdateProducerDockerhubOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerDockerhubValidateBeforeCall(gatewayUpdateProducerDockerhub, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerDockerhubOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerEks
     * @param gatewayUpdateProducerEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerEksCall(GatewayUpdateProducerEks gatewayUpdateProducerEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerEks;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerEksValidateBeforeCall(GatewayUpdateProducerEks gatewayUpdateProducerEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerEks' is set
        if (gatewayUpdateProducerEks == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerEks' when calling gatewayUpdateProducerEks(Async)");
        }

        return gatewayUpdateProducerEksCall(gatewayUpdateProducerEks, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerEks  (required)
     * @return GatewayUpdateProducerEksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerEksOutput gatewayUpdateProducerEks(GatewayUpdateProducerEks gatewayUpdateProducerEks) throws ApiException {
        ApiResponse<GatewayUpdateProducerEksOutput> localVarResp = gatewayUpdateProducerEksWithHttpInfo(gatewayUpdateProducerEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerEks  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerEksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerEksOutput> gatewayUpdateProducerEksWithHttpInfo(GatewayUpdateProducerEks gatewayUpdateProducerEks) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerEksValidateBeforeCall(gatewayUpdateProducerEks, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerEksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerEksAsync(GatewayUpdateProducerEks gatewayUpdateProducerEks, final ApiCallback<GatewayUpdateProducerEksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerEksValidateBeforeCall(gatewayUpdateProducerEks, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerEksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerGcp
     * @param gatewayUpdateProducerGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGcpCall(GatewayUpdateProducerGcp gatewayUpdateProducerGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerGcp;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerGcpValidateBeforeCall(GatewayUpdateProducerGcp gatewayUpdateProducerGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerGcp' is set
        if (gatewayUpdateProducerGcp == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerGcp' when calling gatewayUpdateProducerGcp(Async)");
        }

        return gatewayUpdateProducerGcpCall(gatewayUpdateProducerGcp, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGcp  (required)
     * @return GatewayUpdateProducerGcpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerGcpOutput gatewayUpdateProducerGcp(GatewayUpdateProducerGcp gatewayUpdateProducerGcp) throws ApiException {
        ApiResponse<GatewayUpdateProducerGcpOutput> localVarResp = gatewayUpdateProducerGcpWithHttpInfo(gatewayUpdateProducerGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGcp  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerGcpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerGcpOutput> gatewayUpdateProducerGcpWithHttpInfo(GatewayUpdateProducerGcp gatewayUpdateProducerGcp) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerGcpValidateBeforeCall(gatewayUpdateProducerGcp, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGcpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGcpAsync(GatewayUpdateProducerGcp gatewayUpdateProducerGcp, final ApiCallback<GatewayUpdateProducerGcpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerGcpValidateBeforeCall(gatewayUpdateProducerGcp, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGcpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerGithub
     * @param gatewayUpdateProducerGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGithubCall(GatewayUpdateProducerGithub gatewayUpdateProducerGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerGithub;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerGithubValidateBeforeCall(GatewayUpdateProducerGithub gatewayUpdateProducerGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerGithub' is set
        if (gatewayUpdateProducerGithub == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerGithub' when calling gatewayUpdateProducerGithub(Async)");
        }

        return gatewayUpdateProducerGithubCall(gatewayUpdateProducerGithub, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGithub  (required)
     * @return GatewayUpdateProducerGithubOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerGithubOutput gatewayUpdateProducerGithub(GatewayUpdateProducerGithub gatewayUpdateProducerGithub) throws ApiException {
        ApiResponse<GatewayUpdateProducerGithubOutput> localVarResp = gatewayUpdateProducerGithubWithHttpInfo(gatewayUpdateProducerGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGithub  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerGithubOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerGithubOutput> gatewayUpdateProducerGithubWithHttpInfo(GatewayUpdateProducerGithub gatewayUpdateProducerGithub) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerGithubValidateBeforeCall(gatewayUpdateProducerGithub, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGithubOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGithubAsync(GatewayUpdateProducerGithub gatewayUpdateProducerGithub, final ApiCallback<GatewayUpdateProducerGithubOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerGithubValidateBeforeCall(gatewayUpdateProducerGithub, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGithubOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerGke
     * @param gatewayUpdateProducerGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGkeCall(GatewayUpdateProducerGke gatewayUpdateProducerGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerGke;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerGkeValidateBeforeCall(GatewayUpdateProducerGke gatewayUpdateProducerGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerGke' is set
        if (gatewayUpdateProducerGke == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerGke' when calling gatewayUpdateProducerGke(Async)");
        }

        return gatewayUpdateProducerGkeCall(gatewayUpdateProducerGke, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGke  (required)
     * @return GatewayUpdateProducerGkeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerGkeOutput gatewayUpdateProducerGke(GatewayUpdateProducerGke gatewayUpdateProducerGke) throws ApiException {
        ApiResponse<GatewayUpdateProducerGkeOutput> localVarResp = gatewayUpdateProducerGkeWithHttpInfo(gatewayUpdateProducerGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerGke  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerGkeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerGkeOutput> gatewayUpdateProducerGkeWithHttpInfo(GatewayUpdateProducerGke gatewayUpdateProducerGke) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerGkeValidateBeforeCall(gatewayUpdateProducerGke, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGkeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerGkeAsync(GatewayUpdateProducerGke gatewayUpdateProducerGke, final ApiCallback<GatewayUpdateProducerGkeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerGkeValidateBeforeCall(gatewayUpdateProducerGke, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerGkeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerHanaDb
     * @param gatewayUpdateProducerHanaDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerHanaDbCall(GatewayUpdateProducerHanaDb gatewayUpdateProducerHanaDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerHanaDb;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-hana";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerHanaDbValidateBeforeCall(GatewayUpdateProducerHanaDb gatewayUpdateProducerHanaDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerHanaDb' is set
        if (gatewayUpdateProducerHanaDb == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerHanaDb' when calling gatewayUpdateProducerHanaDb(Async)");
        }

        return gatewayUpdateProducerHanaDbCall(gatewayUpdateProducerHanaDb, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerHanaDb  (required)
     * @return GatewayUpdateProducerHanaDbOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerHanaDbOutput gatewayUpdateProducerHanaDb(GatewayUpdateProducerHanaDb gatewayUpdateProducerHanaDb) throws ApiException {
        ApiResponse<GatewayUpdateProducerHanaDbOutput> localVarResp = gatewayUpdateProducerHanaDbWithHttpInfo(gatewayUpdateProducerHanaDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerHanaDb  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerHanaDbOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerHanaDbOutput> gatewayUpdateProducerHanaDbWithHttpInfo(GatewayUpdateProducerHanaDb gatewayUpdateProducerHanaDb) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerHanaDbValidateBeforeCall(gatewayUpdateProducerHanaDb, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerHanaDbOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerHanaDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerHanaDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerHanaDbAsync(GatewayUpdateProducerHanaDb gatewayUpdateProducerHanaDb, final ApiCallback<GatewayUpdateProducerHanaDbOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerHanaDbValidateBeforeCall(gatewayUpdateProducerHanaDb, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerHanaDbOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerLdap
     * @param gatewayUpdateProducerLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerLdapCall(GatewayUpdateProducerLdap gatewayUpdateProducerLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerLdap;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerLdapValidateBeforeCall(GatewayUpdateProducerLdap gatewayUpdateProducerLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerLdap' is set
        if (gatewayUpdateProducerLdap == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerLdap' when calling gatewayUpdateProducerLdap(Async)");
        }

        return gatewayUpdateProducerLdapCall(gatewayUpdateProducerLdap, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerLdap  (required)
     * @return GatewayUpdateProducerLdapOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerLdapOutput gatewayUpdateProducerLdap(GatewayUpdateProducerLdap gatewayUpdateProducerLdap) throws ApiException {
        ApiResponse<GatewayUpdateProducerLdapOutput> localVarResp = gatewayUpdateProducerLdapWithHttpInfo(gatewayUpdateProducerLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerLdap  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerLdapOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerLdapOutput> gatewayUpdateProducerLdapWithHttpInfo(GatewayUpdateProducerLdap gatewayUpdateProducerLdap) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerLdapValidateBeforeCall(gatewayUpdateProducerLdap, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerLdapOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerLdapAsync(GatewayUpdateProducerLdap gatewayUpdateProducerLdap, final ApiCallback<GatewayUpdateProducerLdapOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerLdapValidateBeforeCall(gatewayUpdateProducerLdap, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerLdapOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerMSSQL
     * @param gatewayUpdateProducerMSSQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMSSQLCall(GatewayUpdateProducerMSSQL gatewayUpdateProducerMSSQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerMSSQL;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerMSSQLValidateBeforeCall(GatewayUpdateProducerMSSQL gatewayUpdateProducerMSSQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerMSSQL' is set
        if (gatewayUpdateProducerMSSQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerMSSQL' when calling gatewayUpdateProducerMSSQL(Async)");
        }

        return gatewayUpdateProducerMSSQLCall(gatewayUpdateProducerMSSQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMSSQL  (required)
     * @return GatewayUpdateProducerMSSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerMSSQLOutput gatewayUpdateProducerMSSQL(GatewayUpdateProducerMSSQL gatewayUpdateProducerMSSQL) throws ApiException {
        ApiResponse<GatewayUpdateProducerMSSQLOutput> localVarResp = gatewayUpdateProducerMSSQLWithHttpInfo(gatewayUpdateProducerMSSQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMSSQL  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerMSSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerMSSQLOutput> gatewayUpdateProducerMSSQLWithHttpInfo(GatewayUpdateProducerMSSQL gatewayUpdateProducerMSSQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerMSSQLValidateBeforeCall(gatewayUpdateProducerMSSQL, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMSSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerMSSQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMSSQLAsync(GatewayUpdateProducerMSSQL gatewayUpdateProducerMSSQL, final ApiCallback<GatewayUpdateProducerMSSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerMSSQLValidateBeforeCall(gatewayUpdateProducerMSSQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMSSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerMongo
     * @param gatewayUpdateProducerMongo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMongoCall(GatewayUpdateProducerMongo gatewayUpdateProducerMongo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerMongo;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-mongo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerMongoValidateBeforeCall(GatewayUpdateProducerMongo gatewayUpdateProducerMongo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerMongo' is set
        if (gatewayUpdateProducerMongo == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerMongo' when calling gatewayUpdateProducerMongo(Async)");
        }

        return gatewayUpdateProducerMongoCall(gatewayUpdateProducerMongo, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMongo  (required)
     * @return GatewayUpdateProducerMongoOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerMongoOutput gatewayUpdateProducerMongo(GatewayUpdateProducerMongo gatewayUpdateProducerMongo) throws ApiException {
        ApiResponse<GatewayUpdateProducerMongoOutput> localVarResp = gatewayUpdateProducerMongoWithHttpInfo(gatewayUpdateProducerMongo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMongo  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerMongoOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerMongoOutput> gatewayUpdateProducerMongoWithHttpInfo(GatewayUpdateProducerMongo gatewayUpdateProducerMongo) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerMongoValidateBeforeCall(gatewayUpdateProducerMongo, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMongoOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerMongo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMongoAsync(GatewayUpdateProducerMongo gatewayUpdateProducerMongo, final ApiCallback<GatewayUpdateProducerMongoOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerMongoValidateBeforeCall(gatewayUpdateProducerMongo, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMongoOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerMySQL
     * @param gatewayUpdateProducerMySQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMySQLCall(GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerMySQL;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerMySQLValidateBeforeCall(GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerMySQL' is set
        if (gatewayUpdateProducerMySQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerMySQL' when calling gatewayUpdateProducerMySQL(Async)");
        }

        return gatewayUpdateProducerMySQLCall(gatewayUpdateProducerMySQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMySQL  (required)
     * @return GatewayUpdateProducerMySQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerMySQLOutput gatewayUpdateProducerMySQL(GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL) throws ApiException {
        ApiResponse<GatewayUpdateProducerMySQLOutput> localVarResp = gatewayUpdateProducerMySQLWithHttpInfo(gatewayUpdateProducerMySQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerMySQL  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerMySQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerMySQLOutput> gatewayUpdateProducerMySQLWithHttpInfo(GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerMySQLValidateBeforeCall(gatewayUpdateProducerMySQL, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMySQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerMySQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerMySQLAsync(GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL, final ApiCallback<GatewayUpdateProducerMySQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerMySQLValidateBeforeCall(gatewayUpdateProducerMySQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerMySQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerNativeK8S
     * @param gatewayUpdateProducerNativeK8S  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerNativeK8SCall(GatewayUpdateProducerNativeK8S gatewayUpdateProducerNativeK8S, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerNativeK8S;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerNativeK8SValidateBeforeCall(GatewayUpdateProducerNativeK8S gatewayUpdateProducerNativeK8S, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerNativeK8S' is set
        if (gatewayUpdateProducerNativeK8S == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerNativeK8S' when calling gatewayUpdateProducerNativeK8S(Async)");
        }

        return gatewayUpdateProducerNativeK8SCall(gatewayUpdateProducerNativeK8S, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerNativeK8S  (required)
     * @return GatewayUpdateProducerNativeK8SOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerNativeK8SOutput gatewayUpdateProducerNativeK8S(GatewayUpdateProducerNativeK8S gatewayUpdateProducerNativeK8S) throws ApiException {
        ApiResponse<GatewayUpdateProducerNativeK8SOutput> localVarResp = gatewayUpdateProducerNativeK8SWithHttpInfo(gatewayUpdateProducerNativeK8S);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerNativeK8S  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerNativeK8SOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerNativeK8SOutput> gatewayUpdateProducerNativeK8SWithHttpInfo(GatewayUpdateProducerNativeK8S gatewayUpdateProducerNativeK8S) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerNativeK8SValidateBeforeCall(gatewayUpdateProducerNativeK8S, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerNativeK8SOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerNativeK8S  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerNativeK8SAsync(GatewayUpdateProducerNativeK8S gatewayUpdateProducerNativeK8S, final ApiCallback<GatewayUpdateProducerNativeK8SOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerNativeK8SValidateBeforeCall(gatewayUpdateProducerNativeK8S, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerNativeK8SOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerOracleDb
     * @param gatewayUpdateProducerOracleDb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerOracleDbCall(GatewayUpdateProducerOracleDb gatewayUpdateProducerOracleDb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerOracleDb;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerOracleDbValidateBeforeCall(GatewayUpdateProducerOracleDb gatewayUpdateProducerOracleDb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerOracleDb' is set
        if (gatewayUpdateProducerOracleDb == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerOracleDb' when calling gatewayUpdateProducerOracleDb(Async)");
        }

        return gatewayUpdateProducerOracleDbCall(gatewayUpdateProducerOracleDb, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerOracleDb  (required)
     * @return GatewayUpdateProducerOracleDbOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerOracleDbOutput gatewayUpdateProducerOracleDb(GatewayUpdateProducerOracleDb gatewayUpdateProducerOracleDb) throws ApiException {
        ApiResponse<GatewayUpdateProducerOracleDbOutput> localVarResp = gatewayUpdateProducerOracleDbWithHttpInfo(gatewayUpdateProducerOracleDb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerOracleDb  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerOracleDbOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerOracleDbOutput> gatewayUpdateProducerOracleDbWithHttpInfo(GatewayUpdateProducerOracleDb gatewayUpdateProducerOracleDb) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerOracleDbValidateBeforeCall(gatewayUpdateProducerOracleDb, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerOracleDbOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerOracleDb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerOracleDbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerOracleDbAsync(GatewayUpdateProducerOracleDb gatewayUpdateProducerOracleDb, final ApiCallback<GatewayUpdateProducerOracleDbOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerOracleDbValidateBeforeCall(gatewayUpdateProducerOracleDb, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerOracleDbOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerPing
     * @param gatewayUpdateProducerPing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerPingCall(GatewayUpdateProducerPing gatewayUpdateProducerPing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerPing;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerPingValidateBeforeCall(GatewayUpdateProducerPing gatewayUpdateProducerPing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerPing' is set
        if (gatewayUpdateProducerPing == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerPing' when calling gatewayUpdateProducerPing(Async)");
        }

        return gatewayUpdateProducerPingCall(gatewayUpdateProducerPing, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerPing  (required)
     * @return GatewayUpdateProducerPingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerPingOutput gatewayUpdateProducerPing(GatewayUpdateProducerPing gatewayUpdateProducerPing) throws ApiException {
        ApiResponse<GatewayUpdateProducerPingOutput> localVarResp = gatewayUpdateProducerPingWithHttpInfo(gatewayUpdateProducerPing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerPing  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerPingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerPingOutput> gatewayUpdateProducerPingWithHttpInfo(GatewayUpdateProducerPing gatewayUpdateProducerPing) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerPingValidateBeforeCall(gatewayUpdateProducerPing, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerPingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerPing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerPingAsync(GatewayUpdateProducerPing gatewayUpdateProducerPing, final ApiCallback<GatewayUpdateProducerPingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerPingValidateBeforeCall(gatewayUpdateProducerPing, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerPingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerPostgreSQL
     * @param gatewayUpdateProducerPostgreSQL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerPostgreSQLCall(GatewayUpdateProducerPostgreSQL gatewayUpdateProducerPostgreSQL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerPostgreSQL;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerPostgreSQLValidateBeforeCall(GatewayUpdateProducerPostgreSQL gatewayUpdateProducerPostgreSQL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerPostgreSQL' is set
        if (gatewayUpdateProducerPostgreSQL == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerPostgreSQL' when calling gatewayUpdateProducerPostgreSQL(Async)");
        }

        return gatewayUpdateProducerPostgreSQLCall(gatewayUpdateProducerPostgreSQL, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerPostgreSQL  (required)
     * @return GatewayUpdateProducerPostgreSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerPostgreSQLOutput gatewayUpdateProducerPostgreSQL(GatewayUpdateProducerPostgreSQL gatewayUpdateProducerPostgreSQL) throws ApiException {
        ApiResponse<GatewayUpdateProducerPostgreSQLOutput> localVarResp = gatewayUpdateProducerPostgreSQLWithHttpInfo(gatewayUpdateProducerPostgreSQL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerPostgreSQL  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerPostgreSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerPostgreSQLOutput> gatewayUpdateProducerPostgreSQLWithHttpInfo(GatewayUpdateProducerPostgreSQL gatewayUpdateProducerPostgreSQL) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerPostgreSQLValidateBeforeCall(gatewayUpdateProducerPostgreSQL, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerPostgreSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerPostgreSQL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerPostgreSQLAsync(GatewayUpdateProducerPostgreSQL gatewayUpdateProducerPostgreSQL, final ApiCallback<GatewayUpdateProducerPostgreSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerPostgreSQLValidateBeforeCall(gatewayUpdateProducerPostgreSQL, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerPostgreSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerRabbitMQ
     * @param gatewayUpdateProducerRabbitMQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRabbitMQCall(GatewayUpdateProducerRabbitMQ gatewayUpdateProducerRabbitMQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerRabbitMQ;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerRabbitMQValidateBeforeCall(GatewayUpdateProducerRabbitMQ gatewayUpdateProducerRabbitMQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerRabbitMQ' is set
        if (gatewayUpdateProducerRabbitMQ == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerRabbitMQ' when calling gatewayUpdateProducerRabbitMQ(Async)");
        }

        return gatewayUpdateProducerRabbitMQCall(gatewayUpdateProducerRabbitMQ, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRabbitMQ  (required)
     * @return GatewayUpdateProducerRabbitMQOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerRabbitMQOutput gatewayUpdateProducerRabbitMQ(GatewayUpdateProducerRabbitMQ gatewayUpdateProducerRabbitMQ) throws ApiException {
        ApiResponse<GatewayUpdateProducerRabbitMQOutput> localVarResp = gatewayUpdateProducerRabbitMQWithHttpInfo(gatewayUpdateProducerRabbitMQ);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRabbitMQ  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerRabbitMQOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerRabbitMQOutput> gatewayUpdateProducerRabbitMQWithHttpInfo(GatewayUpdateProducerRabbitMQ gatewayUpdateProducerRabbitMQ) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerRabbitMQValidateBeforeCall(gatewayUpdateProducerRabbitMQ, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRabbitMQOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerRabbitMQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRabbitMQAsync(GatewayUpdateProducerRabbitMQ gatewayUpdateProducerRabbitMQ, final ApiCallback<GatewayUpdateProducerRabbitMQOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerRabbitMQValidateBeforeCall(gatewayUpdateProducerRabbitMQ, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRabbitMQOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerRdp
     * @param gatewayUpdateProducerRdp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRdpCall(GatewayUpdateProducerRdp gatewayUpdateProducerRdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerRdp;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-rdp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerRdpValidateBeforeCall(GatewayUpdateProducerRdp gatewayUpdateProducerRdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerRdp' is set
        if (gatewayUpdateProducerRdp == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerRdp' when calling gatewayUpdateProducerRdp(Async)");
        }

        return gatewayUpdateProducerRdpCall(gatewayUpdateProducerRdp, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRdp  (required)
     * @return GatewayUpdateProducerRdpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerRdpOutput gatewayUpdateProducerRdp(GatewayUpdateProducerRdp gatewayUpdateProducerRdp) throws ApiException {
        ApiResponse<GatewayUpdateProducerRdpOutput> localVarResp = gatewayUpdateProducerRdpWithHttpInfo(gatewayUpdateProducerRdp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRdp  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerRdpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerRdpOutput> gatewayUpdateProducerRdpWithHttpInfo(GatewayUpdateProducerRdp gatewayUpdateProducerRdp) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerRdpValidateBeforeCall(gatewayUpdateProducerRdp, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRdpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerRdp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRdpAsync(GatewayUpdateProducerRdp gatewayUpdateProducerRdp, final ApiCallback<GatewayUpdateProducerRdpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerRdpValidateBeforeCall(gatewayUpdateProducerRdp, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRdpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerRedis
     * @param gatewayUpdateProducerRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRedisCall(GatewayUpdateProducerRedis gatewayUpdateProducerRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerRedis;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerRedisValidateBeforeCall(GatewayUpdateProducerRedis gatewayUpdateProducerRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerRedis' is set
        if (gatewayUpdateProducerRedis == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerRedis' when calling gatewayUpdateProducerRedis(Async)");
        }

        return gatewayUpdateProducerRedisCall(gatewayUpdateProducerRedis, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRedis  (required)
     * @return GatewayUpdateProducerRedisOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerRedisOutput gatewayUpdateProducerRedis(GatewayUpdateProducerRedis gatewayUpdateProducerRedis) throws ApiException {
        ApiResponse<GatewayUpdateProducerRedisOutput> localVarResp = gatewayUpdateProducerRedisWithHttpInfo(gatewayUpdateProducerRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRedis  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerRedisOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerRedisOutput> gatewayUpdateProducerRedisWithHttpInfo(GatewayUpdateProducerRedis gatewayUpdateProducerRedis) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerRedisValidateBeforeCall(gatewayUpdateProducerRedis, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRedisOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRedisAsync(GatewayUpdateProducerRedis gatewayUpdateProducerRedis, final ApiCallback<GatewayUpdateProducerRedisOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerRedisValidateBeforeCall(gatewayUpdateProducerRedis, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRedisOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerRedshift
     * @param gatewayUpdateProducerRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRedshiftCall(GatewayUpdateProducerRedshift gatewayUpdateProducerRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerRedshift;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerRedshiftValidateBeforeCall(GatewayUpdateProducerRedshift gatewayUpdateProducerRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerRedshift' is set
        if (gatewayUpdateProducerRedshift == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerRedshift' when calling gatewayUpdateProducerRedshift(Async)");
        }

        return gatewayUpdateProducerRedshiftCall(gatewayUpdateProducerRedshift, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRedshift  (required)
     * @return GatewayUpdateProducerRedshiftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerRedshiftOutput gatewayUpdateProducerRedshift(GatewayUpdateProducerRedshift gatewayUpdateProducerRedshift) throws ApiException {
        ApiResponse<GatewayUpdateProducerRedshiftOutput> localVarResp = gatewayUpdateProducerRedshiftWithHttpInfo(gatewayUpdateProducerRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerRedshift  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerRedshiftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerRedshiftOutput> gatewayUpdateProducerRedshiftWithHttpInfo(GatewayUpdateProducerRedshift gatewayUpdateProducerRedshift) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerRedshiftValidateBeforeCall(gatewayUpdateProducerRedshift, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRedshiftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerRedshiftAsync(GatewayUpdateProducerRedshift gatewayUpdateProducerRedshift, final ApiCallback<GatewayUpdateProducerRedshiftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerRedshiftValidateBeforeCall(gatewayUpdateProducerRedshift, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerRedshiftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerSnowflake
     * @param gatewayUpdateProducerSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerSnowflakeCall(GatewayUpdateProducerSnowflake gatewayUpdateProducerSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerSnowflake;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerSnowflakeValidateBeforeCall(GatewayUpdateProducerSnowflake gatewayUpdateProducerSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerSnowflake' is set
        if (gatewayUpdateProducerSnowflake == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerSnowflake' when calling gatewayUpdateProducerSnowflake(Async)");
        }

        return gatewayUpdateProducerSnowflakeCall(gatewayUpdateProducerSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerSnowflake  (required)
     * @return GatewayUpdateProducerSnowflakeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerSnowflakeOutput gatewayUpdateProducerSnowflake(GatewayUpdateProducerSnowflake gatewayUpdateProducerSnowflake) throws ApiException {
        ApiResponse<GatewayUpdateProducerSnowflakeOutput> localVarResp = gatewayUpdateProducerSnowflakeWithHttpInfo(gatewayUpdateProducerSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerSnowflake  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerSnowflakeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerSnowflakeOutput> gatewayUpdateProducerSnowflakeWithHttpInfo(GatewayUpdateProducerSnowflake gatewayUpdateProducerSnowflake) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerSnowflakeValidateBeforeCall(gatewayUpdateProducerSnowflake, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerSnowflakeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerSnowflakeAsync(GatewayUpdateProducerSnowflake gatewayUpdateProducerSnowflake, final ApiCallback<GatewayUpdateProducerSnowflakeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerSnowflakeValidateBeforeCall(gatewayUpdateProducerSnowflake, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerSnowflakeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateProducerVenafi
     * @param gatewayUpdateProducerVenafi  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerVenafiCall(GatewayUpdateProducerVenafi gatewayUpdateProducerVenafi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateProducerVenafi;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-certificate-automation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateProducerVenafiValidateBeforeCall(GatewayUpdateProducerVenafi gatewayUpdateProducerVenafi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateProducerVenafi' is set
        if (gatewayUpdateProducerVenafi == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateProducerVenafi' when calling gatewayUpdateProducerVenafi(Async)");
        }

        return gatewayUpdateProducerVenafiCall(gatewayUpdateProducerVenafi, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerVenafi  (required)
     * @return GatewayUpdateProducerVenafiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateProducerVenafiOutput gatewayUpdateProducerVenafi(GatewayUpdateProducerVenafi gatewayUpdateProducerVenafi) throws ApiException {
        ApiResponse<GatewayUpdateProducerVenafiOutput> localVarResp = gatewayUpdateProducerVenafiWithHttpInfo(gatewayUpdateProducerVenafi);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateProducerVenafi  (required)
     * @return ApiResponse&lt;GatewayUpdateProducerVenafiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateProducerVenafiOutput> gatewayUpdateProducerVenafiWithHttpInfo(GatewayUpdateProducerVenafi gatewayUpdateProducerVenafi) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateProducerVenafiValidateBeforeCall(gatewayUpdateProducerVenafi, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerVenafiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateProducerVenafi  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayUpdateProducerVenafiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateProducerVenafiAsync(GatewayUpdateProducerVenafi gatewayUpdateProducerVenafi, final ApiCallback<GatewayUpdateProducerVenafiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateProducerVenafiValidateBeforeCall(gatewayUpdateProducerVenafi, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateProducerVenafiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateRemoteAccess
     * @param gatewayUpdateRemoteAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateRemoteAccessCall(GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateRemoteAccess;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateRemoteAccessValidateBeforeCall(GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateRemoteAccess' is set
        if (gatewayUpdateRemoteAccess == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateRemoteAccess' when calling gatewayUpdateRemoteAccess(Async)");
        }

        return gatewayUpdateRemoteAccessCall(gatewayUpdateRemoteAccess, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateRemoteAccess  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object gatewayUpdateRemoteAccess(GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess) throws ApiException {
        ApiResponse<Object> localVarResp = gatewayUpdateRemoteAccessWithHttpInfo(gatewayUpdateRemoteAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateRemoteAccess  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gatewayUpdateRemoteAccessWithHttpInfo(GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateRemoteAccessValidateBeforeCall(gatewayUpdateRemoteAccess, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateRemoteAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateRemoteAccessAsync(GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateRemoteAccessValidateBeforeCall(gatewayUpdateRemoteAccess, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateRemoteAccessRdpRecordings
     * @param gatewayUpdateRemoteAccessRdpRecordings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessRdpRecordingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateRemoteAccessRdpRecordingsCall(GatewayUpdateRemoteAccessRdpRecordings gatewayUpdateRemoteAccessRdpRecordings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateRemoteAccessRdpRecordings;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-rdp-recording";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateRemoteAccessRdpRecordingsValidateBeforeCall(GatewayUpdateRemoteAccessRdpRecordings gatewayUpdateRemoteAccessRdpRecordings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateRemoteAccessRdpRecordings' is set
        if (gatewayUpdateRemoteAccessRdpRecordings == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateRemoteAccessRdpRecordings' when calling gatewayUpdateRemoteAccessRdpRecordings(Async)");
        }

        return gatewayUpdateRemoteAccessRdpRecordingsCall(gatewayUpdateRemoteAccessRdpRecordings, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateRemoteAccessRdpRecordings  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessRdpRecordingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object gatewayUpdateRemoteAccessRdpRecordings(GatewayUpdateRemoteAccessRdpRecordings gatewayUpdateRemoteAccessRdpRecordings) throws ApiException {
        ApiResponse<Object> localVarResp = gatewayUpdateRemoteAccessRdpRecordingsWithHttpInfo(gatewayUpdateRemoteAccessRdpRecordings);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateRemoteAccessRdpRecordings  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessRdpRecordingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gatewayUpdateRemoteAccessRdpRecordingsWithHttpInfo(GatewayUpdateRemoteAccessRdpRecordings gatewayUpdateRemoteAccessRdpRecordings) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateRemoteAccessRdpRecordingsValidateBeforeCall(gatewayUpdateRemoteAccessRdpRecordings, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateRemoteAccessRdpRecordings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateRemoteAccessRdpRecordingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateRemoteAccessRdpRecordingsAsync(GatewayUpdateRemoteAccessRdpRecordings gatewayUpdateRemoteAccessRdpRecordings, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateRemoteAccessRdpRecordingsValidateBeforeCall(gatewayUpdateRemoteAccessRdpRecordings, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateTlsCert
     * @param gatewayUpdateTlsCert  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateTlsCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTlsCertCall(GatewayUpdateTlsCert gatewayUpdateTlsCert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateTlsCert;

        // create path and map variables
        String localVarPath = "/gateway-update-tls-cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateTlsCertValidateBeforeCall(GatewayUpdateTlsCert gatewayUpdateTlsCert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateTlsCert' is set
        if (gatewayUpdateTlsCert == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateTlsCert' when calling gatewayUpdateTlsCert(Async)");
        }

        return gatewayUpdateTlsCertCall(gatewayUpdateTlsCert, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateTlsCert  (required)
     * @return GatewayUpdateTlsCertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateTlsCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateTlsCertOutput gatewayUpdateTlsCert(GatewayUpdateTlsCert gatewayUpdateTlsCert) throws ApiException {
        ApiResponse<GatewayUpdateTlsCertOutput> localVarResp = gatewayUpdateTlsCertWithHttpInfo(gatewayUpdateTlsCert);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gatewayUpdateTlsCert  (required)
     * @return ApiResponse&lt;GatewayUpdateTlsCertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateTlsCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateTlsCertOutput> gatewayUpdateTlsCertWithHttpInfo(GatewayUpdateTlsCert gatewayUpdateTlsCert) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateTlsCertValidateBeforeCall(gatewayUpdateTlsCert, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateTlsCertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateTlsCert  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GatewayUpdateTlsCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTlsCertAsync(GatewayUpdateTlsCert gatewayUpdateTlsCert, final ApiCallback<GatewayUpdateTlsCertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateTlsCertValidateBeforeCall(gatewayUpdateTlsCert, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateTlsCertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateTmpUsers
     * @param gatewayUpdateTmpUsers  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTmpUsersCall(GatewayUpdateTmpUsers gatewayUpdateTmpUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gatewayUpdateTmpUsers;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateTmpUsersValidateBeforeCall(GatewayUpdateTmpUsers gatewayUpdateTmpUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayUpdateTmpUsers' is set
        if (gatewayUpdateTmpUsers == null) {
            throw new ApiException("Missing the required parameter 'gatewayUpdateTmpUsers' when calling gatewayUpdateTmpUsers(Async)");
        }

        return gatewayUpdateTmpUsersCall(gatewayUpdateTmpUsers, _callback);

    }

    /**
     * 
     * 
     * @param gatewayUpdateTmpUsers  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void gatewayUpdateTmpUsers(GatewayUpdateTmpUsers gatewayUpdateTmpUsers) throws ApiException {
        gatewayUpdateTmpUsersWithHttpInfo(gatewayUpdateTmpUsers);
    }

    /**
     * 
     * 
     * @param gatewayUpdateTmpUsers  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gatewayUpdateTmpUsersWithHttpInfo(GatewayUpdateTmpUsers gatewayUpdateTmpUsers) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateTmpUsersValidateBeforeCall(gatewayUpdateTmpUsers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param gatewayUpdateTmpUsers  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTmpUsersAsync(GatewayUpdateTmpUsers gatewayUpdateTmpUsers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateTmpUsersValidateBeforeCall(gatewayUpdateTmpUsers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAcmeEab
     * @param generateAcmeEab  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateAcmeEabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAcmeEabCall(GenerateAcmeEab generateAcmeEab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateAcmeEab;

        // create path and map variables
        String localVarPath = "/generate-acme-eab";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAcmeEabValidateBeforeCall(GenerateAcmeEab generateAcmeEab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateAcmeEab' is set
        if (generateAcmeEab == null) {
            throw new ApiException("Missing the required parameter 'generateAcmeEab' when calling generateAcmeEab(Async)");
        }

        return generateAcmeEabCall(generateAcmeEab, _callback);

    }

    /**
     * 
     * 
     * @param generateAcmeEab  (required)
     * @return GenerateAcmeEabOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateAcmeEabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateAcmeEabOutput generateAcmeEab(GenerateAcmeEab generateAcmeEab) throws ApiException {
        ApiResponse<GenerateAcmeEabOutput> localVarResp = generateAcmeEabWithHttpInfo(generateAcmeEab);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param generateAcmeEab  (required)
     * @return ApiResponse&lt;GenerateAcmeEabOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateAcmeEabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateAcmeEabOutput> generateAcmeEabWithHttpInfo(GenerateAcmeEab generateAcmeEab) throws ApiException {
        okhttp3.Call localVarCall = generateAcmeEabValidateBeforeCall(generateAcmeEab, null);
        Type localVarReturnType = new TypeToken<GenerateAcmeEabOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param generateAcmeEab  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateAcmeEabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAcmeEabAsync(GenerateAcmeEab generateAcmeEab, final ApiCallback<GenerateAcmeEabOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAcmeEabValidateBeforeCall(generateAcmeEab, _callback);
        Type localVarReturnType = new TypeToken<GenerateAcmeEabOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateCA
     * @param generateCA  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCACall(GenerateCA generateCA, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateCA;

        // create path and map variables
        String localVarPath = "/generate-ca";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCAValidateBeforeCall(GenerateCA generateCA, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateCA' is set
        if (generateCA == null) {
            throw new ApiException("Missing the required parameter 'generateCA' when calling generateCA(Async)");
        }

        return generateCACall(generateCA, _callback);

    }

    /**
     * 
     * 
     * @param generateCA  (required)
     * @return GenerateCAOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCAOutput generateCA(GenerateCA generateCA) throws ApiException {
        ApiResponse<GenerateCAOutput> localVarResp = generateCAWithHttpInfo(generateCA);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param generateCA  (required)
     * @return ApiResponse&lt;GenerateCAOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateCAOutput> generateCAWithHttpInfo(GenerateCA generateCA) throws ApiException {
        okhttp3.Call localVarCall = generateCAValidateBeforeCall(generateCA, null);
        Type localVarReturnType = new TypeToken<GenerateCAOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param generateCA  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCAAsync(GenerateCA generateCA, final ApiCallback<GenerateCAOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCAValidateBeforeCall(generateCA, _callback);
        Type localVarReturnType = new TypeToken<GenerateCAOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateCsr
     * @param generateCsr  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCsrResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCsrCall(GenerateCsr generateCsr, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateCsr;

        // create path and map variables
        String localVarPath = "/generate-csr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCsrValidateBeforeCall(GenerateCsr generateCsr, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateCsr' is set
        if (generateCsr == null) {
            throw new ApiException("Missing the required parameter 'generateCsr' when calling generateCsr(Async)");
        }

        return generateCsrCall(generateCsr, _callback);

    }

    /**
     * 
     * 
     * @param generateCsr  (required)
     * @return GenerateCsrOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCsrResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCsrOutput generateCsr(GenerateCsr generateCsr) throws ApiException {
        ApiResponse<GenerateCsrOutput> localVarResp = generateCsrWithHttpInfo(generateCsr);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param generateCsr  (required)
     * @return ApiResponse&lt;GenerateCsrOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCsrResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateCsrOutput> generateCsrWithHttpInfo(GenerateCsr generateCsr) throws ApiException {
        okhttp3.Call localVarCall = generateCsrValidateBeforeCall(generateCsr, null);
        Type localVarReturnType = new TypeToken<GenerateCsrOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param generateCsr  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> generateCsrResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateCsrAsync(GenerateCsr generateCsr, final ApiCallback<GenerateCsrOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCsrValidateBeforeCall(generateCsr, _callback);
        Type localVarReturnType = new TypeToken<GenerateCsrOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountLogo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-account-logo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountLogoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAccountLogoCall(_callback);

    }

    /**
     * 
     * 
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getAccountLogo() throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getAccountLogoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getAccountLogoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountLogoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoAsync(final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountLogoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountSettings
     * @param getAccountSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSettingsCall(GetAccountSettings getAccountSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAccountSettings;

        // create path and map variables
        String localVarPath = "/get-account-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountSettingsValidateBeforeCall(GetAccountSettings getAccountSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getAccountSettings' is set
        if (getAccountSettings == null) {
            throw new ApiException("Missing the required parameter 'getAccountSettings' when calling getAccountSettings(Async)");
        }

        return getAccountSettingsCall(getAccountSettings, _callback);

    }

    /**
     * 
     * 
     * @param getAccountSettings  (required)
     * @return GetAccountSettingsCommandOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountSettingsCommandOutput getAccountSettings(GetAccountSettings getAccountSettings) throws ApiException {
        ApiResponse<GetAccountSettingsCommandOutput> localVarResp = getAccountSettingsWithHttpInfo(getAccountSettings);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getAccountSettings  (required)
     * @return ApiResponse&lt;GetAccountSettingsCommandOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAccountSettingsCommandOutput> getAccountSettingsWithHttpInfo(GetAccountSettings getAccountSettings) throws ApiException {
        okhttp3.Call localVarCall = getAccountSettingsValidateBeforeCall(getAccountSettings, null);
        Type localVarReturnType = new TypeToken<GetAccountSettingsCommandOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getAccountSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSettingsAsync(GetAccountSettings getAccountSettings, final ApiCallback<GetAccountSettingsCommandOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountSettingsValidateBeforeCall(getAccountSettings, _callback);
        Type localVarReturnType = new TypeToken<GetAccountSettingsCommandOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsData
     * @param getAnalyticsData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAnalyticsDataResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsDataCall(GetAnalyticsData getAnalyticsData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAnalyticsData;

        // create path and map variables
        String localVarPath = "/get-analytics-data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsDataValidateBeforeCall(GetAnalyticsData getAnalyticsData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getAnalyticsData' is set
        if (getAnalyticsData == null) {
            throw new ApiException("Missing the required parameter 'getAnalyticsData' when calling getAnalyticsData(Async)");
        }

        return getAnalyticsDataCall(getAnalyticsData, _callback);

    }

    /**
     * 
     * 
     * @param getAnalyticsData  (required)
     * @return AllAnalyticsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAnalyticsDataResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AllAnalyticsData getAnalyticsData(GetAnalyticsData getAnalyticsData) throws ApiException {
        ApiResponse<AllAnalyticsData> localVarResp = getAnalyticsDataWithHttpInfo(getAnalyticsData);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getAnalyticsData  (required)
     * @return ApiResponse&lt;AllAnalyticsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAnalyticsDataResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllAnalyticsData> getAnalyticsDataWithHttpInfo(GetAnalyticsData getAnalyticsData) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsDataValidateBeforeCall(getAnalyticsData, null);
        Type localVarReturnType = new TypeToken<AllAnalyticsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getAnalyticsData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAnalyticsDataResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsDataAsync(GetAnalyticsData getAnalyticsData, final ApiCallback<AllAnalyticsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsDataValidateBeforeCall(getAnalyticsData, _callback);
        Type localVarReturnType = new TypeToken<AllAnalyticsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthMethod
     * @param getAuthMethod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthMethodCall(GetAuthMethod getAuthMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAuthMethod;

        // create path and map variables
        String localVarPath = "/get-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthMethodValidateBeforeCall(GetAuthMethod getAuthMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getAuthMethod' is set
        if (getAuthMethod == null) {
            throw new ApiException("Missing the required parameter 'getAuthMethod' when calling getAuthMethod(Async)");
        }

        return getAuthMethodCall(getAuthMethod, _callback);

    }

    /**
     * 
     * 
     * @param getAuthMethod  (required)
     * @return AuthMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethod getAuthMethod(GetAuthMethod getAuthMethod) throws ApiException {
        ApiResponse<AuthMethod> localVarResp = getAuthMethodWithHttpInfo(getAuthMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getAuthMethod  (required)
     * @return ApiResponse&lt;AuthMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethod> getAuthMethodWithHttpInfo(GetAuthMethod getAuthMethod) throws ApiException {
        okhttp3.Call localVarCall = getAuthMethodValidateBeforeCall(getAuthMethod, null);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getAuthMethod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthMethodAsync(GetAuthMethod getAuthMethod, final ApiCallback<AuthMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthMethodValidateBeforeCall(getAuthMethod, _callback);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificateValue
     * @param getCertificateValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateValueCall(GetCertificateValue getCertificateValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificateValue;

        // create path and map variables
        String localVarPath = "/get-certificate-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateValueValidateBeforeCall(GetCertificateValue getCertificateValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getCertificateValue' is set
        if (getCertificateValue == null) {
            throw new ApiException("Missing the required parameter 'getCertificateValue' when calling getCertificateValue(Async)");
        }

        return getCertificateValueCall(getCertificateValue, _callback);

    }

    /**
     * 
     * 
     * @param getCertificateValue  (required)
     * @return GetCertificateValueOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateValueOutput getCertificateValue(GetCertificateValue getCertificateValue) throws ApiException {
        ApiResponse<GetCertificateValueOutput> localVarResp = getCertificateValueWithHttpInfo(getCertificateValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getCertificateValue  (required)
     * @return ApiResponse&lt;GetCertificateValueOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCertificateValueOutput> getCertificateValueWithHttpInfo(GetCertificateValue getCertificateValue) throws ApiException {
        okhttp3.Call localVarCall = getCertificateValueValidateBeforeCall(getCertificateValue, null);
        Type localVarReturnType = new TypeToken<GetCertificateValueOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getCertificateValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateValueAsync(GetCertificateValue getCertificateValue, final ApiCallback<GetCertificateValueOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateValueValidateBeforeCall(getCertificateValue, _callback);
        Type localVarReturnType = new TypeToken<GetCertificateValueOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDynamicSecretValue
     * @param getDynamicSecretValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDynamicSecretValueCall(GetDynamicSecretValue getDynamicSecretValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDynamicSecretValue;

        // create path and map variables
        String localVarPath = "/get-dynamic-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDynamicSecretValueValidateBeforeCall(GetDynamicSecretValue getDynamicSecretValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getDynamicSecretValue' is set
        if (getDynamicSecretValue == null) {
            throw new ApiException("Missing the required parameter 'getDynamicSecretValue' when calling getDynamicSecretValue(Async)");
        }

        return getDynamicSecretValueCall(getDynamicSecretValue, _callback);

    }

    /**
     * 
     * 
     * @param getDynamicSecretValue  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getDynamicSecretValue(GetDynamicSecretValue getDynamicSecretValue) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getDynamicSecretValueWithHttpInfo(getDynamicSecretValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getDynamicSecretValue  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getDynamicSecretValueWithHttpInfo(GetDynamicSecretValue getDynamicSecretValue) throws ApiException {
        okhttp3.Call localVarCall = getDynamicSecretValueValidateBeforeCall(getDynamicSecretValue, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getDynamicSecretValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDynamicSecretValueAsync(GetDynamicSecretValue getDynamicSecretValue, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDynamicSecretValueValidateBeforeCall(getDynamicSecretValue, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventForwarder
     * @param getEventForwarder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventForwarderCall(GetEventForwarder getEventForwarder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEventForwarder;

        // create path and map variables
        String localVarPath = "/get-event-forwarder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventForwarderValidateBeforeCall(GetEventForwarder getEventForwarder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getEventForwarder' is set
        if (getEventForwarder == null) {
            throw new ApiException("Missing the required parameter 'getEventForwarder' when calling getEventForwarder(Async)");
        }

        return getEventForwarderCall(getEventForwarder, _callback);

    }

    /**
     * 
     * 
     * @param getEventForwarder  (required)
     * @return GetEventForwarderOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetEventForwarderOutput getEventForwarder(GetEventForwarder getEventForwarder) throws ApiException {
        ApiResponse<GetEventForwarderOutput> localVarResp = getEventForwarderWithHttpInfo(getEventForwarder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getEventForwarder  (required)
     * @return ApiResponse&lt;GetEventForwarderOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventForwarderOutput> getEventForwarderWithHttpInfo(GetEventForwarder getEventForwarder) throws ApiException {
        okhttp3.Call localVarCall = getEventForwarderValidateBeforeCall(getEventForwarder, null);
        Type localVarReturnType = new TypeToken<GetEventForwarderOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getEventForwarder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventForwarderAsync(GetEventForwarder getEventForwarder, final ApiCallback<GetEventForwarderOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventForwarderValidateBeforeCall(getEventForwarder, _callback);
        Type localVarReturnType = new TypeToken<GetEventForwarderOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param getGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(GetGroup getGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGroup;

        // create path and map variables
        String localVarPath = "/get-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(GetGroup getGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getGroup' is set
        if (getGroup == null) {
            throw new ApiException("Missing the required parameter 'getGroup' when calling getGroup(Async)");
        }

        return getGroupCall(getGroup, _callback);

    }

    /**
     * 
     * 
     * @param getGroup  (required)
     * @return GetGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupOutput getGroup(GetGroup getGroup) throws ApiException {
        ApiResponse<GetGroupOutput> localVarResp = getGroupWithHttpInfo(getGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getGroup  (required)
     * @return ApiResponse&lt;GetGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupOutput> getGroupWithHttpInfo(GetGroup getGroup) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(getGroup, null);
        Type localVarReturnType = new TypeToken<GetGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(GetGroup getGroup, final ApiCallback<GetGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(getGroup, _callback);
        Type localVarReturnType = new TypeToken<GetGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKubeExecCreds
     * @param getKubeExecCreds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKubeExecCredsCall(GetKubeExecCreds getKubeExecCreds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getKubeExecCreds;

        // create path and map variables
        String localVarPath = "/get-kube-exec-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKubeExecCredsValidateBeforeCall(GetKubeExecCreds getKubeExecCreds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getKubeExecCreds' is set
        if (getKubeExecCreds == null) {
            throw new ApiException("Missing the required parameter 'getKubeExecCreds' when calling getKubeExecCreds(Async)");
        }

        return getKubeExecCredsCall(getKubeExecCreds, _callback);

    }

    /**
     * 
     * 
     * @param getKubeExecCreds  (required)
     * @return GetKubeExecCredsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetKubeExecCredsOutput getKubeExecCreds(GetKubeExecCreds getKubeExecCreds) throws ApiException {
        ApiResponse<GetKubeExecCredsOutput> localVarResp = getKubeExecCredsWithHttpInfo(getKubeExecCreds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getKubeExecCreds  (required)
     * @return ApiResponse&lt;GetKubeExecCredsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetKubeExecCredsOutput> getKubeExecCredsWithHttpInfo(GetKubeExecCreds getKubeExecCreds) throws ApiException {
        okhttp3.Call localVarCall = getKubeExecCredsValidateBeforeCall(getKubeExecCreds, null);
        Type localVarReturnType = new TypeToken<GetKubeExecCredsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getKubeExecCreds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKubeExecCredsAsync(GetKubeExecCreds getKubeExecCreds, final ApiCallback<GetKubeExecCredsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKubeExecCredsValidateBeforeCall(getKubeExecCreds, _callback);
        Type localVarReturnType = new TypeToken<GetKubeExecCredsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastUserEventStatus
     * @param getLastUserEventStatus  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getLastUserEventStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastUserEventStatusCall(GetLastUserEventStatus getLastUserEventStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLastUserEventStatus;

        // create path and map variables
        String localVarPath = "/user-event-last-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastUserEventStatusValidateBeforeCall(GetLastUserEventStatus getLastUserEventStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getLastUserEventStatus' is set
        if (getLastUserEventStatus == null) {
            throw new ApiException("Missing the required parameter 'getLastUserEventStatus' when calling getLastUserEventStatus(Async)");
        }

        return getLastUserEventStatusCall(getLastUserEventStatus, _callback);

    }

    /**
     * 
     * 
     * @param getLastUserEventStatus  (required)
     * @return GetUserEventStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getLastUserEventStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetUserEventStatusOutput getLastUserEventStatus(GetLastUserEventStatus getLastUserEventStatus) throws ApiException {
        ApiResponse<GetUserEventStatusOutput> localVarResp = getLastUserEventStatusWithHttpInfo(getLastUserEventStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getLastUserEventStatus  (required)
     * @return ApiResponse&lt;GetUserEventStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getLastUserEventStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserEventStatusOutput> getLastUserEventStatusWithHttpInfo(GetLastUserEventStatus getLastUserEventStatus) throws ApiException {
        okhttp3.Call localVarCall = getLastUserEventStatusValidateBeforeCall(getLastUserEventStatus, null);
        Type localVarReturnType = new TypeToken<GetUserEventStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getLastUserEventStatus  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getLastUserEventStatusResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastUserEventStatusAsync(GetLastUserEventStatus getLastUserEventStatus, final ApiCallback<GetUserEventStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastUserEventStatusValidateBeforeCall(getLastUserEventStatus, _callback);
        Type localVarReturnType = new TypeToken<GetUserEventStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPKICertificate
     * @param getPKICertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPKICertificateCall(GetPKICertificate getPKICertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPKICertificate;

        // create path and map variables
        String localVarPath = "/get-pki-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPKICertificateValidateBeforeCall(GetPKICertificate getPKICertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getPKICertificate' is set
        if (getPKICertificate == null) {
            throw new ApiException("Missing the required parameter 'getPKICertificate' when calling getPKICertificate(Async)");
        }

        return getPKICertificateCall(getPKICertificate, _callback);

    }

    /**
     * 
     * 
     * @param getPKICertificate  (required)
     * @return GetPKICertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetPKICertificateOutput getPKICertificate(GetPKICertificate getPKICertificate) throws ApiException {
        ApiResponse<GetPKICertificateOutput> localVarResp = getPKICertificateWithHttpInfo(getPKICertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getPKICertificate  (required)
     * @return ApiResponse&lt;GetPKICertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPKICertificateOutput> getPKICertificateWithHttpInfo(GetPKICertificate getPKICertificate) throws ApiException {
        okhttp3.Call localVarCall = getPKICertificateValidateBeforeCall(getPKICertificate, null);
        Type localVarReturnType = new TypeToken<GetPKICertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getPKICertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPKICertificateAsync(GetPKICertificate getPKICertificate, final ApiCallback<GetPKICertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPKICertificateValidateBeforeCall(getPKICertificate, _callback);
        Type localVarReturnType = new TypeToken<GetPKICertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRSAPublic
     * @param getRSAPublic  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRSAPublicCall(GetRSAPublic getRSAPublic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRSAPublic;

        // create path and map variables
        String localVarPath = "/get-rsa-public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRSAPublicValidateBeforeCall(GetRSAPublic getRSAPublic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getRSAPublic' is set
        if (getRSAPublic == null) {
            throw new ApiException("Missing the required parameter 'getRSAPublic' when calling getRSAPublic(Async)");
        }

        return getRSAPublicCall(getRSAPublic, _callback);

    }

    /**
     * 
     * 
     * @param getRSAPublic  (required)
     * @return GetRSAPublicOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetRSAPublicOutput getRSAPublic(GetRSAPublic getRSAPublic) throws ApiException {
        ApiResponse<GetRSAPublicOutput> localVarResp = getRSAPublicWithHttpInfo(getRSAPublic);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getRSAPublic  (required)
     * @return ApiResponse&lt;GetRSAPublicOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRSAPublicOutput> getRSAPublicWithHttpInfo(GetRSAPublic getRSAPublic) throws ApiException {
        okhttp3.Call localVarCall = getRSAPublicValidateBeforeCall(getRSAPublic, null);
        Type localVarReturnType = new TypeToken<GetRSAPublicOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getRSAPublic  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRSAPublicAsync(GetRSAPublic getRSAPublic, final ApiCallback<GetRSAPublicOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRSAPublicValidateBeforeCall(getRSAPublic, _callback);
        Type localVarReturnType = new TypeToken<GetRSAPublicOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param getRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(GetRole getRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRole;

        // create path and map variables
        String localVarPath = "/get-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(GetRole getRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getRole' is set
        if (getRole == null) {
            throw new ApiException("Missing the required parameter 'getRole' when calling getRole(Async)");
        }

        return getRoleCall(getRole, _callback);

    }

    /**
     * 
     * 
     * @param getRole  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Role getRole(GetRole getRole) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleWithHttpInfo(getRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getRole  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleWithHttpInfo(GetRole getRole) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(getRole, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(GetRole getRole, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(getRole, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRotatedSecretValue
     * @param getRotatedSecretValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRotatedSecretValueCall(GetRotatedSecretValue getRotatedSecretValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRotatedSecretValue;

        // create path and map variables
        String localVarPath = "/get-rotated-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRotatedSecretValueValidateBeforeCall(GetRotatedSecretValue getRotatedSecretValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getRotatedSecretValue' is set
        if (getRotatedSecretValue == null) {
            throw new ApiException("Missing the required parameter 'getRotatedSecretValue' when calling getRotatedSecretValue(Async)");
        }

        return getRotatedSecretValueCall(getRotatedSecretValue, _callback);

    }

    /**
     * 
     * 
     * @param getRotatedSecretValue  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getRotatedSecretValue(GetRotatedSecretValue getRotatedSecretValue) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getRotatedSecretValueWithHttpInfo(getRotatedSecretValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getRotatedSecretValue  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getRotatedSecretValueWithHttpInfo(GetRotatedSecretValue getRotatedSecretValue) throws ApiException {
        okhttp3.Call localVarCall = getRotatedSecretValueValidateBeforeCall(getRotatedSecretValue, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getRotatedSecretValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRotatedSecretValueAsync(GetRotatedSecretValue getRotatedSecretValue, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRotatedSecretValueValidateBeforeCall(getRotatedSecretValue, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSSHCertificate
     * @param getSSHCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSSHCertificateCall(GetSSHCertificate getSSHCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSSHCertificate;

        // create path and map variables
        String localVarPath = "/get-ssh-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSSHCertificateValidateBeforeCall(GetSSHCertificate getSSHCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSSHCertificate' is set
        if (getSSHCertificate == null) {
            throw new ApiException("Missing the required parameter 'getSSHCertificate' when calling getSSHCertificate(Async)");
        }

        return getSSHCertificateCall(getSSHCertificate, _callback);

    }

    /**
     * 
     * 
     * @param getSSHCertificate  (required)
     * @return GetSSHCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetSSHCertificateOutput getSSHCertificate(GetSSHCertificate getSSHCertificate) throws ApiException {
        ApiResponse<GetSSHCertificateOutput> localVarResp = getSSHCertificateWithHttpInfo(getSSHCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getSSHCertificate  (required)
     * @return ApiResponse&lt;GetSSHCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSSHCertificateOutput> getSSHCertificateWithHttpInfo(GetSSHCertificate getSSHCertificate) throws ApiException {
        okhttp3.Call localVarCall = getSSHCertificateValidateBeforeCall(getSSHCertificate, null);
        Type localVarReturnType = new TypeToken<GetSSHCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getSSHCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSSHCertificateAsync(GetSSHCertificate getSSHCertificate, final ApiCallback<GetSSHCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSSHCertificateValidateBeforeCall(getSSHCertificate, _callback);
        Type localVarReturnType = new TypeToken<GetSSHCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecretValue
     * @param getSecretValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretValueCall(GetSecretValue getSecretValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSecretValue;

        // create path and map variables
        String localVarPath = "/get-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretValueValidateBeforeCall(GetSecretValue getSecretValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSecretValue' is set
        if (getSecretValue == null) {
            throw new ApiException("Missing the required parameter 'getSecretValue' when calling getSecretValue(Async)");
        }

        return getSecretValueCall(getSecretValue, _callback);

    }

    /**
     * 
     * 
     * @param getSecretValue  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> getSecretValue(GetSecretValue getSecretValue) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = getSecretValueWithHttpInfo(getSecretValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getSecretValue  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> getSecretValueWithHttpInfo(GetSecretValue getSecretValue) throws ApiException {
        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(getSecretValue, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getSecretValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretValueAsync(GetSecretValue getSecretValue, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(getSecretValue, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTags
     * @param getTags  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTagsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsCall(GetTags getTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTags;

        // create path and map variables
        String localVarPath = "/get-tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsValidateBeforeCall(GetTags getTags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getTags' is set
        if (getTags == null) {
            throw new ApiException("Missing the required parameter 'getTags' when calling getTags(Async)");
        }

        return getTagsCall(getTags, _callback);

    }

    /**
     * 
     * 
     * @param getTags  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTagsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getTags(GetTags getTags) throws ApiException {
        ApiResponse<List<String>> localVarResp = getTagsWithHttpInfo(getTags);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getTags  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTagsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getTagsWithHttpInfo(GetTags getTags) throws ApiException {
        okhttp3.Call localVarCall = getTagsValidateBeforeCall(getTags, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getTags  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTagsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsAsync(GetTags getTags, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsValidateBeforeCall(getTags, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTarget
     * @param getTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetCall(GetTarget getTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTarget;

        // create path and map variables
        String localVarPath = "/get-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTargetValidateBeforeCall(GetTarget getTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getTarget' is set
        if (getTarget == null) {
            throw new ApiException("Missing the required parameter 'getTarget' when calling getTarget(Async)");
        }

        return getTargetCall(getTarget, _callback);

    }

    /**
     * 
     * 
     * @param getTarget  (required)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Target getTarget(GetTarget getTarget) throws ApiException {
        ApiResponse<Target> localVarResp = getTargetWithHttpInfo(getTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getTarget  (required)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Target> getTargetWithHttpInfo(GetTarget getTarget) throws ApiException {
        okhttp3.Call localVarCall = getTargetValidateBeforeCall(getTarget, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetAsync(GetTarget getTarget, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTargetValidateBeforeCall(getTarget, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTargetDetails
     * @param getTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetDetailsCall(GetTargetDetails getTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTargetDetails;

        // create path and map variables
        String localVarPath = "/get-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTargetDetailsValidateBeforeCall(GetTargetDetails getTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getTargetDetails' is set
        if (getTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'getTargetDetails' when calling getTargetDetails(Async)");
        }

        return getTargetDetailsCall(getTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param getTargetDetails  (required)
     * @return GetTargetDetailsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetTargetDetailsOutput getTargetDetails(GetTargetDetails getTargetDetails) throws ApiException {
        ApiResponse<GetTargetDetailsOutput> localVarResp = getTargetDetailsWithHttpInfo(getTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getTargetDetails  (required)
     * @return ApiResponse&lt;GetTargetDetailsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTargetDetailsOutput> getTargetDetailsWithHttpInfo(GetTargetDetails getTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = getTargetDetailsValidateBeforeCall(getTargetDetails, null);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetDetailsAsync(GetTargetDetails getTargetDetails, final ApiCallback<GetTargetDetailsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTargetDetailsValidateBeforeCall(getTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsAwsS3
     * @param gwUpdateRemoteAccessSessionLogsAwsS3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsAwsS3Call(GwUpdateRemoteAccessSessionLogsAwsS3 gwUpdateRemoteAccessSessionLogsAwsS3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsAwsS3;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-aws-s3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsAwsS3ValidateBeforeCall(GwUpdateRemoteAccessSessionLogsAwsS3 gwUpdateRemoteAccessSessionLogsAwsS3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsAwsS3' is set
        if (gwUpdateRemoteAccessSessionLogsAwsS3 == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsAwsS3' when calling gwUpdateRemoteAccessSessionLogsAwsS3(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsAwsS3Call(gwUpdateRemoteAccessSessionLogsAwsS3, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsAwsS3  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsAwsS3(GwUpdateRemoteAccessSessionLogsAwsS3 gwUpdateRemoteAccessSessionLogsAwsS3) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsAwsS3WithHttpInfo(gwUpdateRemoteAccessSessionLogsAwsS3);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsAwsS3  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsAwsS3WithHttpInfo(GwUpdateRemoteAccessSessionLogsAwsS3 gwUpdateRemoteAccessSessionLogsAwsS3) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsAwsS3ValidateBeforeCall(gwUpdateRemoteAccessSessionLogsAwsS3, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsAwsS3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsAwsS3Async(GwUpdateRemoteAccessSessionLogsAwsS3 gwUpdateRemoteAccessSessionLogsAwsS3, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsAwsS3ValidateBeforeCall(gwUpdateRemoteAccessSessionLogsAwsS3, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsAzureAnalytics
     * @param gwUpdateRemoteAccessSessionLogsAzureAnalytics  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsAzureAnalyticsCall(GwUpdateRemoteAccessSessionLogsAzureAnalytics gwUpdateRemoteAccessSessionLogsAzureAnalytics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsAzureAnalytics;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-azure-analytics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsAzureAnalyticsValidateBeforeCall(GwUpdateRemoteAccessSessionLogsAzureAnalytics gwUpdateRemoteAccessSessionLogsAzureAnalytics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsAzureAnalytics' is set
        if (gwUpdateRemoteAccessSessionLogsAzureAnalytics == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsAzureAnalytics' when calling gwUpdateRemoteAccessSessionLogsAzureAnalytics(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsAzureAnalyticsCall(gwUpdateRemoteAccessSessionLogsAzureAnalytics, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsAzureAnalytics  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsAzureAnalytics(GwUpdateRemoteAccessSessionLogsAzureAnalytics gwUpdateRemoteAccessSessionLogsAzureAnalytics) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsAzureAnalyticsWithHttpInfo(gwUpdateRemoteAccessSessionLogsAzureAnalytics);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsAzureAnalytics  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsAzureAnalyticsWithHttpInfo(GwUpdateRemoteAccessSessionLogsAzureAnalytics gwUpdateRemoteAccessSessionLogsAzureAnalytics) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsAzureAnalyticsValidateBeforeCall(gwUpdateRemoteAccessSessionLogsAzureAnalytics, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsAzureAnalytics  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsAzureAnalyticsAsync(GwUpdateRemoteAccessSessionLogsAzureAnalytics gwUpdateRemoteAccessSessionLogsAzureAnalytics, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsAzureAnalyticsValidateBeforeCall(gwUpdateRemoteAccessSessionLogsAzureAnalytics, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsDatadog
     * @param gwUpdateRemoteAccessSessionLogsDatadog  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsDatadogCall(GwUpdateRemoteAccessSessionLogsDatadog gwUpdateRemoteAccessSessionLogsDatadog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsDatadog;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-datadog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsDatadogValidateBeforeCall(GwUpdateRemoteAccessSessionLogsDatadog gwUpdateRemoteAccessSessionLogsDatadog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsDatadog' is set
        if (gwUpdateRemoteAccessSessionLogsDatadog == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsDatadog' when calling gwUpdateRemoteAccessSessionLogsDatadog(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsDatadogCall(gwUpdateRemoteAccessSessionLogsDatadog, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsDatadog  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsDatadog(GwUpdateRemoteAccessSessionLogsDatadog gwUpdateRemoteAccessSessionLogsDatadog) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsDatadogWithHttpInfo(gwUpdateRemoteAccessSessionLogsDatadog);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsDatadog  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsDatadogWithHttpInfo(GwUpdateRemoteAccessSessionLogsDatadog gwUpdateRemoteAccessSessionLogsDatadog) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsDatadogValidateBeforeCall(gwUpdateRemoteAccessSessionLogsDatadog, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsDatadog  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsDatadogAsync(GwUpdateRemoteAccessSessionLogsDatadog gwUpdateRemoteAccessSessionLogsDatadog, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsDatadogValidateBeforeCall(gwUpdateRemoteAccessSessionLogsDatadog, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsElasticsearch
     * @param gwUpdateRemoteAccessSessionLogsElasticsearch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsElasticsearchCall(GwUpdateRemoteAccessSessionLogsElasticsearch gwUpdateRemoteAccessSessionLogsElasticsearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsElasticsearch;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-elasticsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsElasticsearchValidateBeforeCall(GwUpdateRemoteAccessSessionLogsElasticsearch gwUpdateRemoteAccessSessionLogsElasticsearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsElasticsearch' is set
        if (gwUpdateRemoteAccessSessionLogsElasticsearch == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsElasticsearch' when calling gwUpdateRemoteAccessSessionLogsElasticsearch(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsElasticsearchCall(gwUpdateRemoteAccessSessionLogsElasticsearch, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsElasticsearch  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsElasticsearch(GwUpdateRemoteAccessSessionLogsElasticsearch gwUpdateRemoteAccessSessionLogsElasticsearch) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsElasticsearchWithHttpInfo(gwUpdateRemoteAccessSessionLogsElasticsearch);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsElasticsearch  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsElasticsearchWithHttpInfo(GwUpdateRemoteAccessSessionLogsElasticsearch gwUpdateRemoteAccessSessionLogsElasticsearch) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsElasticsearchValidateBeforeCall(gwUpdateRemoteAccessSessionLogsElasticsearch, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsElasticsearch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsElasticsearchAsync(GwUpdateRemoteAccessSessionLogsElasticsearch gwUpdateRemoteAccessSessionLogsElasticsearch, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsElasticsearchValidateBeforeCall(gwUpdateRemoteAccessSessionLogsElasticsearch, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsGoogleChronicle
     * @param gwUpdateRemoteAccessSessionLogsGoogleChronicle  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsGoogleChronicleCall(GwUpdateRemoteAccessSessionLogsGoogleChronicle gwUpdateRemoteAccessSessionLogsGoogleChronicle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsGoogleChronicle;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-google-chronicle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsGoogleChronicleValidateBeforeCall(GwUpdateRemoteAccessSessionLogsGoogleChronicle gwUpdateRemoteAccessSessionLogsGoogleChronicle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsGoogleChronicle' is set
        if (gwUpdateRemoteAccessSessionLogsGoogleChronicle == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsGoogleChronicle' when calling gwUpdateRemoteAccessSessionLogsGoogleChronicle(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsGoogleChronicleCall(gwUpdateRemoteAccessSessionLogsGoogleChronicle, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsGoogleChronicle  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsGoogleChronicle(GwUpdateRemoteAccessSessionLogsGoogleChronicle gwUpdateRemoteAccessSessionLogsGoogleChronicle) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsGoogleChronicleWithHttpInfo(gwUpdateRemoteAccessSessionLogsGoogleChronicle);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsGoogleChronicle  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsGoogleChronicleWithHttpInfo(GwUpdateRemoteAccessSessionLogsGoogleChronicle gwUpdateRemoteAccessSessionLogsGoogleChronicle) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsGoogleChronicleValidateBeforeCall(gwUpdateRemoteAccessSessionLogsGoogleChronicle, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsGoogleChronicle  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsGoogleChronicleAsync(GwUpdateRemoteAccessSessionLogsGoogleChronicle gwUpdateRemoteAccessSessionLogsGoogleChronicle, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsGoogleChronicleValidateBeforeCall(gwUpdateRemoteAccessSessionLogsGoogleChronicle, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsLogstash
     * @param gwUpdateRemoteAccessSessionLogsLogstash  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsLogstashCall(GwUpdateRemoteAccessSessionLogsLogstash gwUpdateRemoteAccessSessionLogsLogstash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsLogstash;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-logstash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsLogstashValidateBeforeCall(GwUpdateRemoteAccessSessionLogsLogstash gwUpdateRemoteAccessSessionLogsLogstash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsLogstash' is set
        if (gwUpdateRemoteAccessSessionLogsLogstash == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsLogstash' when calling gwUpdateRemoteAccessSessionLogsLogstash(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsLogstashCall(gwUpdateRemoteAccessSessionLogsLogstash, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogstash  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsLogstash(GwUpdateRemoteAccessSessionLogsLogstash gwUpdateRemoteAccessSessionLogsLogstash) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsLogstashWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogstash);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogstash  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsLogstashWithHttpInfo(GwUpdateRemoteAccessSessionLogsLogstash gwUpdateRemoteAccessSessionLogsLogstash) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsLogstashValidateBeforeCall(gwUpdateRemoteAccessSessionLogsLogstash, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogstash  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsLogstashAsync(GwUpdateRemoteAccessSessionLogsLogstash gwUpdateRemoteAccessSessionLogsLogstash, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsLogstashValidateBeforeCall(gwUpdateRemoteAccessSessionLogsLogstash, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsLogzIo
     * @param gwUpdateRemoteAccessSessionLogsLogzIo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsLogzIoCall(GwUpdateRemoteAccessSessionLogsLogzIo gwUpdateRemoteAccessSessionLogsLogzIo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsLogzIo;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-logz-io";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsLogzIoValidateBeforeCall(GwUpdateRemoteAccessSessionLogsLogzIo gwUpdateRemoteAccessSessionLogsLogzIo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsLogzIo' is set
        if (gwUpdateRemoteAccessSessionLogsLogzIo == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsLogzIo' when calling gwUpdateRemoteAccessSessionLogsLogzIo(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsLogzIoCall(gwUpdateRemoteAccessSessionLogsLogzIo, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogzIo  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsLogzIo(GwUpdateRemoteAccessSessionLogsLogzIo gwUpdateRemoteAccessSessionLogsLogzIo) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsLogzIoWithHttpInfo(gwUpdateRemoteAccessSessionLogsLogzIo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogzIo  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsLogzIoWithHttpInfo(GwUpdateRemoteAccessSessionLogsLogzIo gwUpdateRemoteAccessSessionLogsLogzIo) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsLogzIoValidateBeforeCall(gwUpdateRemoteAccessSessionLogsLogzIo, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsLogzIo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsLogzIoAsync(GwUpdateRemoteAccessSessionLogsLogzIo gwUpdateRemoteAccessSessionLogsLogzIo, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsLogzIoValidateBeforeCall(gwUpdateRemoteAccessSessionLogsLogzIo, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsSplunk
     * @param gwUpdateRemoteAccessSessionLogsSplunk  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSplunkCall(GwUpdateRemoteAccessSessionLogsSplunk gwUpdateRemoteAccessSessionLogsSplunk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsSplunk;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-splunk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsSplunkValidateBeforeCall(GwUpdateRemoteAccessSessionLogsSplunk gwUpdateRemoteAccessSessionLogsSplunk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSplunk' is set
        if (gwUpdateRemoteAccessSessionLogsSplunk == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSplunk' when calling gwUpdateRemoteAccessSessionLogsSplunk(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsSplunkCall(gwUpdateRemoteAccessSessionLogsSplunk, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSplunk  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsSplunk(GwUpdateRemoteAccessSessionLogsSplunk gwUpdateRemoteAccessSessionLogsSplunk) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsSplunkWithHttpInfo(gwUpdateRemoteAccessSessionLogsSplunk);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSplunk  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsSplunkWithHttpInfo(GwUpdateRemoteAccessSessionLogsSplunk gwUpdateRemoteAccessSessionLogsSplunk) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSplunkValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSplunk, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsSplunk  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSplunkAsync(GwUpdateRemoteAccessSessionLogsSplunk gwUpdateRemoteAccessSessionLogsSplunk, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSplunkValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSplunk, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsStdout
     * @param gwUpdateRemoteAccessSessionLogsStdout  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsStdoutCall(GwUpdateRemoteAccessSessionLogsStdout gwUpdateRemoteAccessSessionLogsStdout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsStdout;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-stdout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsStdoutValidateBeforeCall(GwUpdateRemoteAccessSessionLogsStdout gwUpdateRemoteAccessSessionLogsStdout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsStdout' is set
        if (gwUpdateRemoteAccessSessionLogsStdout == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsStdout' when calling gwUpdateRemoteAccessSessionLogsStdout(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsStdoutCall(gwUpdateRemoteAccessSessionLogsStdout, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsStdout  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsStdout(GwUpdateRemoteAccessSessionLogsStdout gwUpdateRemoteAccessSessionLogsStdout) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsStdoutWithHttpInfo(gwUpdateRemoteAccessSessionLogsStdout);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsStdout  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsStdoutWithHttpInfo(GwUpdateRemoteAccessSessionLogsStdout gwUpdateRemoteAccessSessionLogsStdout) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsStdoutValidateBeforeCall(gwUpdateRemoteAccessSessionLogsStdout, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsStdout  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsStdoutAsync(GwUpdateRemoteAccessSessionLogsStdout gwUpdateRemoteAccessSessionLogsStdout, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsStdoutValidateBeforeCall(gwUpdateRemoteAccessSessionLogsStdout, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsSumologic
     * @param gwUpdateRemoteAccessSessionLogsSumologic  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSumologicCall(GwUpdateRemoteAccessSessionLogsSumologic gwUpdateRemoteAccessSessionLogsSumologic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsSumologic;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-sumologic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsSumologicValidateBeforeCall(GwUpdateRemoteAccessSessionLogsSumologic gwUpdateRemoteAccessSessionLogsSumologic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSumologic' is set
        if (gwUpdateRemoteAccessSessionLogsSumologic == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSumologic' when calling gwUpdateRemoteAccessSessionLogsSumologic(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsSumologicCall(gwUpdateRemoteAccessSessionLogsSumologic, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSumologic  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsSumologic(GwUpdateRemoteAccessSessionLogsSumologic gwUpdateRemoteAccessSessionLogsSumologic) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsSumologicWithHttpInfo(gwUpdateRemoteAccessSessionLogsSumologic);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSumologic  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsSumologicWithHttpInfo(GwUpdateRemoteAccessSessionLogsSumologic gwUpdateRemoteAccessSessionLogsSumologic) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSumologicValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSumologic, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsSumologic  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSumologicAsync(GwUpdateRemoteAccessSessionLogsSumologic gwUpdateRemoteAccessSessionLogsSumologic, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSumologicValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSumologic, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gwUpdateRemoteAccessSessionLogsSyslog
     * @param gwUpdateRemoteAccessSessionLogsSyslog  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSyslogCall(GwUpdateRemoteAccessSessionLogsSyslog gwUpdateRemoteAccessSessionLogsSyslog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gwUpdateRemoteAccessSessionLogsSyslog;

        // create path and map variables
        String localVarPath = "/gateway-update-remote-access-session-forwarding-syslog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gwUpdateRemoteAccessSessionLogsSyslogValidateBeforeCall(GwUpdateRemoteAccessSessionLogsSyslog gwUpdateRemoteAccessSessionLogsSyslog, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gwUpdateRemoteAccessSessionLogsSyslog' is set
        if (gwUpdateRemoteAccessSessionLogsSyslog == null) {
            throw new ApiException("Missing the required parameter 'gwUpdateRemoteAccessSessionLogsSyslog' when calling gwUpdateRemoteAccessSessionLogsSyslog(Async)");
        }

        return gwUpdateRemoteAccessSessionLogsSyslogCall(gwUpdateRemoteAccessSessionLogsSyslog, _callback);

    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSyslog  (required)
     * @return GatewayUpdateLogForwardingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayUpdateLogForwardingOutput gwUpdateRemoteAccessSessionLogsSyslog(GwUpdateRemoteAccessSessionLogsSyslog gwUpdateRemoteAccessSessionLogsSyslog) throws ApiException {
        ApiResponse<GatewayUpdateLogForwardingOutput> localVarResp = gwUpdateRemoteAccessSessionLogsSyslogWithHttpInfo(gwUpdateRemoteAccessSessionLogsSyslog);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param gwUpdateRemoteAccessSessionLogsSyslog  (required)
     * @return ApiResponse&lt;GatewayUpdateLogForwardingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayUpdateLogForwardingOutput> gwUpdateRemoteAccessSessionLogsSyslogWithHttpInfo(GwUpdateRemoteAccessSessionLogsSyslog gwUpdateRemoteAccessSessionLogsSyslog) throws ApiException {
        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSyslogValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSyslog, null);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param gwUpdateRemoteAccessSessionLogsSyslog  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gwUpdateRemoteAccessSessionLogsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gwUpdateRemoteAccessSessionLogsSyslogAsync(GwUpdateRemoteAccessSessionLogsSyslog gwUpdateRemoteAccessSessionLogsSyslog, final ApiCallback<GatewayUpdateLogForwardingOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gwUpdateRemoteAccessSessionLogsSyslogValidateBeforeCall(gwUpdateRemoteAccessSessionLogsSyslog, _callback);
        Type localVarReturnType = new TypeToken<GatewayUpdateLogForwardingOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hmac
     * @param hmac  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> hmacResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hmacCall(Hmac hmac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hmac;

        // create path and map variables
        String localVarPath = "/hmac";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hmacValidateBeforeCall(Hmac hmac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hmac' is set
        if (hmac == null) {
            throw new ApiException("Missing the required parameter 'hmac' when calling hmac(Async)");
        }

        return hmacCall(hmac, _callback);

    }

    /**
     * 
     * 
     * @param hmac  (required)
     * @return HmacOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> hmacResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public HmacOutput hmac(Hmac hmac) throws ApiException {
        ApiResponse<HmacOutput> localVarResp = hmacWithHttpInfo(hmac);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hmac  (required)
     * @return ApiResponse&lt;HmacOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> hmacResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmacOutput> hmacWithHttpInfo(Hmac hmac) throws ApiException {
        okhttp3.Call localVarCall = hmacValidateBeforeCall(hmac, null);
        Type localVarReturnType = new TypeToken<HmacOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hmac  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> hmacResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hmacAsync(Hmac hmac, final ApiCallback<HmacOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = hmacValidateBeforeCall(hmac, _callback);
        Type localVarReturnType = new TypeToken<HmacOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importPasswords
     * @param importPasswords  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> importPasswordsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importPasswordsCall(ImportPasswords importPasswords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importPasswords;

        // create path and map variables
        String localVarPath = "/import-passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importPasswordsValidateBeforeCall(ImportPasswords importPasswords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importPasswords' is set
        if (importPasswords == null) {
            throw new ApiException("Missing the required parameter 'importPasswords' when calling importPasswords(Async)");
        }

        return importPasswordsCall(importPasswords, _callback);

    }

    /**
     * 
     * 
     * @param importPasswords  (required)
     * @return ImportPasswordsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> importPasswordsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ImportPasswordsOutput importPasswords(ImportPasswords importPasswords) throws ApiException {
        ApiResponse<ImportPasswordsOutput> localVarResp = importPasswordsWithHttpInfo(importPasswords);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param importPasswords  (required)
     * @return ApiResponse&lt;ImportPasswordsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> importPasswordsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportPasswordsOutput> importPasswordsWithHttpInfo(ImportPasswords importPasswords) throws ApiException {
        okhttp3.Call localVarCall = importPasswordsValidateBeforeCall(importPasswords, null);
        Type localVarReturnType = new TypeToken<ImportPasswordsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param importPasswords  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> importPasswordsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importPasswordsAsync(ImportPasswords importPasswords, final ApiCallback<ImportPasswordsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = importPasswordsValidateBeforeCall(importPasswords, _callback);
        Type localVarReturnType = new TypeToken<ImportPasswordsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipClientDeleteRule
     * @param kmipClientDeleteRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientDeleteRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipClientDeleteRuleCall(KmipClientDeleteRule kmipClientDeleteRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipClientDeleteRule;

        // create path and map variables
        String localVarPath = "/kmip-client-delete-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipClientDeleteRuleValidateBeforeCall(KmipClientDeleteRule kmipClientDeleteRule, final ApiCallback _callback) throws ApiException {
        return kmipClientDeleteRuleCall(kmipClientDeleteRule, _callback);

    }

    /**
     * 
     * 
     * @param kmipClientDeleteRule  (optional)
     * @return KMIPClientUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientDeleteRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KMIPClientUpdateResponse kmipClientDeleteRule(KmipClientDeleteRule kmipClientDeleteRule) throws ApiException {
        ApiResponse<KMIPClientUpdateResponse> localVarResp = kmipClientDeleteRuleWithHttpInfo(kmipClientDeleteRule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipClientDeleteRule  (optional)
     * @return ApiResponse&lt;KMIPClientUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientDeleteRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KMIPClientUpdateResponse> kmipClientDeleteRuleWithHttpInfo(KmipClientDeleteRule kmipClientDeleteRule) throws ApiException {
        okhttp3.Call localVarCall = kmipClientDeleteRuleValidateBeforeCall(kmipClientDeleteRule, null);
        Type localVarReturnType = new TypeToken<KMIPClientUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipClientDeleteRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientDeleteRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipClientDeleteRuleAsync(KmipClientDeleteRule kmipClientDeleteRule, final ApiCallback<KMIPClientUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipClientDeleteRuleValidateBeforeCall(kmipClientDeleteRule, _callback);
        Type localVarReturnType = new TypeToken<KMIPClientUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipClientSetRule
     * @param kmipClientSetRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientSetRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipClientSetRuleCall(KmipClientSetRule kmipClientSetRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipClientSetRule;

        // create path and map variables
        String localVarPath = "/kmip-client-set-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipClientSetRuleValidateBeforeCall(KmipClientSetRule kmipClientSetRule, final ApiCallback _callback) throws ApiException {
        return kmipClientSetRuleCall(kmipClientSetRule, _callback);

    }

    /**
     * 
     * 
     * @param kmipClientSetRule  (optional)
     * @return KMIPClientUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientSetRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KMIPClientUpdateResponse kmipClientSetRule(KmipClientSetRule kmipClientSetRule) throws ApiException {
        ApiResponse<KMIPClientUpdateResponse> localVarResp = kmipClientSetRuleWithHttpInfo(kmipClientSetRule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipClientSetRule  (optional)
     * @return ApiResponse&lt;KMIPClientUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientSetRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KMIPClientUpdateResponse> kmipClientSetRuleWithHttpInfo(KmipClientSetRule kmipClientSetRule) throws ApiException {
        okhttp3.Call localVarCall = kmipClientSetRuleValidateBeforeCall(kmipClientSetRule, null);
        Type localVarReturnType = new TypeToken<KMIPClientUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipClientSetRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipClientSetRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipClientSetRuleAsync(KmipClientSetRule kmipClientSetRule, final ApiCallback<KMIPClientUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipClientSetRuleValidateBeforeCall(kmipClientSetRule, _callback);
        Type localVarReturnType = new TypeToken<KMIPClientUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipCreateClient
     * @param kmipCreateClient  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipCreateClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipCreateClientCall(KmipCreateClient kmipCreateClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipCreateClient;

        // create path and map variables
        String localVarPath = "/kmip-create-client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipCreateClientValidateBeforeCall(KmipCreateClient kmipCreateClient, final ApiCallback _callback) throws ApiException {
        return kmipCreateClientCall(kmipCreateClient, _callback);

    }

    /**
     * 
     * 
     * @param kmipCreateClient  (optional)
     * @return KmipCreateClientOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipCreateClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipCreateClientOutput kmipCreateClient(KmipCreateClient kmipCreateClient) throws ApiException {
        ApiResponse<KmipCreateClientOutput> localVarResp = kmipCreateClientWithHttpInfo(kmipCreateClient);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipCreateClient  (optional)
     * @return ApiResponse&lt;KmipCreateClientOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipCreateClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipCreateClientOutput> kmipCreateClientWithHttpInfo(KmipCreateClient kmipCreateClient) throws ApiException {
        okhttp3.Call localVarCall = kmipCreateClientValidateBeforeCall(kmipCreateClient, null);
        Type localVarReturnType = new TypeToken<KmipCreateClientOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipCreateClient  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipCreateClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipCreateClientAsync(KmipCreateClient kmipCreateClient, final ApiCallback<KmipCreateClientOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipCreateClientValidateBeforeCall(kmipCreateClient, _callback);
        Type localVarReturnType = new TypeToken<KmipCreateClientOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipDeleteClient
     * @param kmipDeleteClient  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDeleteClientCall(KmipDeleteClient kmipDeleteClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipDeleteClient;

        // create path and map variables
        String localVarPath = "/kmip-delete-client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipDeleteClientValidateBeforeCall(KmipDeleteClient kmipDeleteClient, final ApiCallback _callback) throws ApiException {
        return kmipDeleteClientCall(kmipDeleteClient, _callback);

    }

    /**
     * 
     * 
     * @param kmipDeleteClient  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object kmipDeleteClient(KmipDeleteClient kmipDeleteClient) throws ApiException {
        ApiResponse<Object> localVarResp = kmipDeleteClientWithHttpInfo(kmipDeleteClient);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipDeleteClient  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> kmipDeleteClientWithHttpInfo(KmipDeleteClient kmipDeleteClient) throws ApiException {
        okhttp3.Call localVarCall = kmipDeleteClientValidateBeforeCall(kmipDeleteClient, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipDeleteClient  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDeleteClientAsync(KmipDeleteClient kmipDeleteClient, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipDeleteClientValidateBeforeCall(kmipDeleteClient, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipDeleteServer
     * @param kmipDeleteServer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDeleteServerCall(KmipDeleteServer kmipDeleteServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipDeleteServer;

        // create path and map variables
        String localVarPath = "/kmip-delete-environment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipDeleteServerValidateBeforeCall(KmipDeleteServer kmipDeleteServer, final ApiCallback _callback) throws ApiException {
        return kmipDeleteServerCall(kmipDeleteServer, _callback);

    }

    /**
     * 
     * 
     * @param kmipDeleteServer  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object kmipDeleteServer(KmipDeleteServer kmipDeleteServer) throws ApiException {
        ApiResponse<Object> localVarResp = kmipDeleteServerWithHttpInfo(kmipDeleteServer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipDeleteServer  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> kmipDeleteServerWithHttpInfo(KmipDeleteServer kmipDeleteServer) throws ApiException {
        okhttp3.Call localVarCall = kmipDeleteServerValidateBeforeCall(kmipDeleteServer, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipDeleteServer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDeleteServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDeleteServerAsync(KmipDeleteServer kmipDeleteServer, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipDeleteServerValidateBeforeCall(kmipDeleteServer, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipDescribeClient
     * @param kmipDescribeClient  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDescribeClientCall(KmipDescribeClient kmipDescribeClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipDescribeClient;

        // create path and map variables
        String localVarPath = "/kmip-get-client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipDescribeClientValidateBeforeCall(KmipDescribeClient kmipDescribeClient, final ApiCallback _callback) throws ApiException {
        return kmipDescribeClientCall(kmipDescribeClient, _callback);

    }

    /**
     * 
     * 
     * @param kmipDescribeClient  (optional)
     * @return KMIPClientGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KMIPClientGetResponse kmipDescribeClient(KmipDescribeClient kmipDescribeClient) throws ApiException {
        ApiResponse<KMIPClientGetResponse> localVarResp = kmipDescribeClientWithHttpInfo(kmipDescribeClient);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipDescribeClient  (optional)
     * @return ApiResponse&lt;KMIPClientGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KMIPClientGetResponse> kmipDescribeClientWithHttpInfo(KmipDescribeClient kmipDescribeClient) throws ApiException {
        okhttp3.Call localVarCall = kmipDescribeClientValidateBeforeCall(kmipDescribeClient, null);
        Type localVarReturnType = new TypeToken<KMIPClientGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipDescribeClient  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDescribeClientAsync(KmipDescribeClient kmipDescribeClient, final ApiCallback<KMIPClientGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipDescribeClientValidateBeforeCall(kmipDescribeClient, _callback);
        Type localVarReturnType = new TypeToken<KMIPClientGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipDescribeServer
     * @param kmipDescribeServer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDescribeServerCall(KmipDescribeServer kmipDescribeServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipDescribeServer;

        // create path and map variables
        String localVarPath = "/kmip-get-environment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipDescribeServerValidateBeforeCall(KmipDescribeServer kmipDescribeServer, final ApiCallback _callback) throws ApiException {
        return kmipDescribeServerCall(kmipDescribeServer, _callback);

    }

    /**
     * 
     * 
     * @param kmipDescribeServer  (optional)
     * @return KmipDescribeServerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipDescribeServerOutput kmipDescribeServer(KmipDescribeServer kmipDescribeServer) throws ApiException {
        ApiResponse<KmipDescribeServerOutput> localVarResp = kmipDescribeServerWithHttpInfo(kmipDescribeServer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipDescribeServer  (optional)
     * @return ApiResponse&lt;KmipDescribeServerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipDescribeServerOutput> kmipDescribeServerWithHttpInfo(KmipDescribeServer kmipDescribeServer) throws ApiException {
        okhttp3.Call localVarCall = kmipDescribeServerValidateBeforeCall(kmipDescribeServer, null);
        Type localVarReturnType = new TypeToken<KmipDescribeServerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipDescribeServer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipDescribeServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipDescribeServerAsync(KmipDescribeServer kmipDescribeServer, final ApiCallback<KmipDescribeServerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipDescribeServerValidateBeforeCall(kmipDescribeServer, _callback);
        Type localVarReturnType = new TypeToken<KmipDescribeServerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipListClients
     * @param kmipListClients  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipListClientsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipListClientsCall(KmipListClients kmipListClients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipListClients;

        // create path and map variables
        String localVarPath = "/kmip-list-clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipListClientsValidateBeforeCall(KmipListClients kmipListClients, final ApiCallback _callback) throws ApiException {
        return kmipListClientsCall(kmipListClients, _callback);

    }

    /**
     * 
     * 
     * @param kmipListClients  (optional)
     * @return KMIPClientListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipListClientsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KMIPClientListResponse kmipListClients(KmipListClients kmipListClients) throws ApiException {
        ApiResponse<KMIPClientListResponse> localVarResp = kmipListClientsWithHttpInfo(kmipListClients);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipListClients  (optional)
     * @return ApiResponse&lt;KMIPClientListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipListClientsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KMIPClientListResponse> kmipListClientsWithHttpInfo(KmipListClients kmipListClients) throws ApiException {
        okhttp3.Call localVarCall = kmipListClientsValidateBeforeCall(kmipListClients, null);
        Type localVarReturnType = new TypeToken<KMIPClientListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipListClients  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipListClientsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipListClientsAsync(KmipListClients kmipListClients, final ApiCallback<KMIPClientListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipListClientsValidateBeforeCall(kmipListClients, _callback);
        Type localVarReturnType = new TypeToken<KMIPClientListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipMoveServer
     * @param kmipMoveServer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipMoveServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipMoveServerCall(KmipMoveServer kmipMoveServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipMoveServer;

        // create path and map variables
        String localVarPath = "/kmip-move-environment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipMoveServerValidateBeforeCall(KmipMoveServer kmipMoveServer, final ApiCallback _callback) throws ApiException {
        return kmipMoveServerCall(kmipMoveServer, _callback);

    }

    /**
     * 
     * 
     * @param kmipMoveServer  (optional)
     * @return KmipMoveServerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipMoveServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipMoveServerOutput kmipMoveServer(KmipMoveServer kmipMoveServer) throws ApiException {
        ApiResponse<KmipMoveServerOutput> localVarResp = kmipMoveServerWithHttpInfo(kmipMoveServer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipMoveServer  (optional)
     * @return ApiResponse&lt;KmipMoveServerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipMoveServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipMoveServerOutput> kmipMoveServerWithHttpInfo(KmipMoveServer kmipMoveServer) throws ApiException {
        okhttp3.Call localVarCall = kmipMoveServerValidateBeforeCall(kmipMoveServer, null);
        Type localVarReturnType = new TypeToken<KmipMoveServerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipMoveServer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipMoveServerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipMoveServerAsync(KmipMoveServer kmipMoveServer, final ApiCallback<KmipMoveServerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipMoveServerValidateBeforeCall(kmipMoveServer, _callback);
        Type localVarReturnType = new TypeToken<KmipMoveServerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipRenewClientCertificate
     * @param kmipRenewClientCertificate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewClientCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipRenewClientCertificateCall(KmipRenewClientCertificate kmipRenewClientCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipRenewClientCertificate;

        // create path and map variables
        String localVarPath = "/kmip-renew-client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipRenewClientCertificateValidateBeforeCall(KmipRenewClientCertificate kmipRenewClientCertificate, final ApiCallback _callback) throws ApiException {
        return kmipRenewClientCertificateCall(kmipRenewClientCertificate, _callback);

    }

    /**
     * 
     * 
     * @param kmipRenewClientCertificate  (optional)
     * @return KmipRenewClientCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewClientCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipRenewClientCertificateOutput kmipRenewClientCertificate(KmipRenewClientCertificate kmipRenewClientCertificate) throws ApiException {
        ApiResponse<KmipRenewClientCertificateOutput> localVarResp = kmipRenewClientCertificateWithHttpInfo(kmipRenewClientCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipRenewClientCertificate  (optional)
     * @return ApiResponse&lt;KmipRenewClientCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewClientCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipRenewClientCertificateOutput> kmipRenewClientCertificateWithHttpInfo(KmipRenewClientCertificate kmipRenewClientCertificate) throws ApiException {
        okhttp3.Call localVarCall = kmipRenewClientCertificateValidateBeforeCall(kmipRenewClientCertificate, null);
        Type localVarReturnType = new TypeToken<KmipRenewClientCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipRenewClientCertificate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewClientCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipRenewClientCertificateAsync(KmipRenewClientCertificate kmipRenewClientCertificate, final ApiCallback<KmipRenewClientCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipRenewClientCertificateValidateBeforeCall(kmipRenewClientCertificate, _callback);
        Type localVarReturnType = new TypeToken<KmipRenewClientCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipRenewServerCertificate
     * @param kmipRenewServerCertificate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewServerCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipRenewServerCertificateCall(KmipRenewServerCertificate kmipRenewServerCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipRenewServerCertificate;

        // create path and map variables
        String localVarPath = "/kmip-renew-environment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipRenewServerCertificateValidateBeforeCall(KmipRenewServerCertificate kmipRenewServerCertificate, final ApiCallback _callback) throws ApiException {
        return kmipRenewServerCertificateCall(kmipRenewServerCertificate, _callback);

    }

    /**
     * 
     * 
     * @param kmipRenewServerCertificate  (optional)
     * @return KmipRenewServerCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewServerCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipRenewServerCertificateOutput kmipRenewServerCertificate(KmipRenewServerCertificate kmipRenewServerCertificate) throws ApiException {
        ApiResponse<KmipRenewServerCertificateOutput> localVarResp = kmipRenewServerCertificateWithHttpInfo(kmipRenewServerCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipRenewServerCertificate  (optional)
     * @return ApiResponse&lt;KmipRenewServerCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewServerCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipRenewServerCertificateOutput> kmipRenewServerCertificateWithHttpInfo(KmipRenewServerCertificate kmipRenewServerCertificate) throws ApiException {
        okhttp3.Call localVarCall = kmipRenewServerCertificateValidateBeforeCall(kmipRenewServerCertificate, null);
        Type localVarReturnType = new TypeToken<KmipRenewServerCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipRenewServerCertificate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipRenewServerCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipRenewServerCertificateAsync(KmipRenewServerCertificate kmipRenewServerCertificate, final ApiCallback<KmipRenewServerCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipRenewServerCertificateValidateBeforeCall(kmipRenewServerCertificate, _callback);
        Type localVarReturnType = new TypeToken<KmipRenewServerCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipServerSetup
     * @param kmipServerSetup  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipServerSetupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipServerSetupCall(KmipServerSetup kmipServerSetup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipServerSetup;

        // create path and map variables
        String localVarPath = "/kmip-create-environment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipServerSetupValidateBeforeCall(KmipServerSetup kmipServerSetup, final ApiCallback _callback) throws ApiException {
        return kmipServerSetupCall(kmipServerSetup, _callback);

    }

    /**
     * 
     * 
     * @param kmipServerSetup  (optional)
     * @return KMIPEnvironmentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipServerSetupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KMIPEnvironmentCreateResponse kmipServerSetup(KmipServerSetup kmipServerSetup) throws ApiException {
        ApiResponse<KMIPEnvironmentCreateResponse> localVarResp = kmipServerSetupWithHttpInfo(kmipServerSetup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipServerSetup  (optional)
     * @return ApiResponse&lt;KMIPEnvironmentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipServerSetupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KMIPEnvironmentCreateResponse> kmipServerSetupWithHttpInfo(KmipServerSetup kmipServerSetup) throws ApiException {
        okhttp3.Call localVarCall = kmipServerSetupValidateBeforeCall(kmipServerSetup, null);
        Type localVarReturnType = new TypeToken<KMIPEnvironmentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipServerSetup  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipServerSetupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipServerSetupAsync(KmipServerSetup kmipServerSetup, final ApiCallback<KMIPEnvironmentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipServerSetupValidateBeforeCall(kmipServerSetup, _callback);
        Type localVarReturnType = new TypeToken<KMIPEnvironmentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kmipSetServerState
     * @param kmipSetServerState  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipSetServerStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipSetServerStateCall(KmipSetServerState kmipSetServerState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = kmipSetServerState;

        // create path and map variables
        String localVarPath = "/kmip-set-environment-state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kmipSetServerStateValidateBeforeCall(KmipSetServerState kmipSetServerState, final ApiCallback _callback) throws ApiException {
        return kmipSetServerStateCall(kmipSetServerState, _callback);

    }

    /**
     * 
     * 
     * @param kmipSetServerState  (optional)
     * @return KmipSetServerStateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipSetServerStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KmipSetServerStateOutput kmipSetServerState(KmipSetServerState kmipSetServerState) throws ApiException {
        ApiResponse<KmipSetServerStateOutput> localVarResp = kmipSetServerStateWithHttpInfo(kmipSetServerState);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param kmipSetServerState  (optional)
     * @return ApiResponse&lt;KmipSetServerStateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipSetServerStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KmipSetServerStateOutput> kmipSetServerStateWithHttpInfo(KmipSetServerState kmipSetServerState) throws ApiException {
        okhttp3.Call localVarCall = kmipSetServerStateValidateBeforeCall(kmipSetServerState, null);
        Type localVarReturnType = new TypeToken<KmipSetServerStateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param kmipSetServerState  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kmipSetServerStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kmipSetServerStateAsync(KmipSetServerState kmipSetServerState, final ApiCallback<KmipSetServerStateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kmipSetServerStateValidateBeforeCall(kmipSetServerState, _callback);
        Type localVarReturnType = new TypeToken<KmipSetServerStateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kubeconfigGenerate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kubeconfigGenerateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kubeconfigGenerateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kubeconfig-generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kubeconfigGenerateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return kubeconfigGenerateCall(_callback);

    }

    /**
     * 
     * 
     * @return KubeconfigGenerateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kubeconfigGenerateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public KubeconfigGenerateOutput kubeconfigGenerate() throws ApiException {
        ApiResponse<KubeconfigGenerateOutput> localVarResp = kubeconfigGenerateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;KubeconfigGenerateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kubeconfigGenerateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KubeconfigGenerateOutput> kubeconfigGenerateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = kubeconfigGenerateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KubeconfigGenerateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> kubeconfigGenerateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kubeconfigGenerateAsync(final ApiCallback<KubeconfigGenerateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = kubeconfigGenerateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KubeconfigGenerateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAcmeAccounts
     * @param listAcmeAccounts  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAcmeAccountsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAcmeAccountsCall(ListAcmeAccounts listAcmeAccounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAcmeAccounts;

        // create path and map variables
        String localVarPath = "/list-acme-accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAcmeAccountsValidateBeforeCall(ListAcmeAccounts listAcmeAccounts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listAcmeAccounts' is set
        if (listAcmeAccounts == null) {
            throw new ApiException("Missing the required parameter 'listAcmeAccounts' when calling listAcmeAccounts(Async)");
        }

        return listAcmeAccountsCall(listAcmeAccounts, _callback);

    }

    /**
     * 
     * 
     * @param listAcmeAccounts  (required)
     * @return ListAcmeAccountsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAcmeAccountsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListAcmeAccountsOutput listAcmeAccounts(ListAcmeAccounts listAcmeAccounts) throws ApiException {
        ApiResponse<ListAcmeAccountsOutput> localVarResp = listAcmeAccountsWithHttpInfo(listAcmeAccounts);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listAcmeAccounts  (required)
     * @return ApiResponse&lt;ListAcmeAccountsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAcmeAccountsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAcmeAccountsOutput> listAcmeAccountsWithHttpInfo(ListAcmeAccounts listAcmeAccounts) throws ApiException {
        okhttp3.Call localVarCall = listAcmeAccountsValidateBeforeCall(listAcmeAccounts, null);
        Type localVarReturnType = new TypeToken<ListAcmeAccountsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listAcmeAccounts  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAcmeAccountsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAcmeAccountsAsync(ListAcmeAccounts listAcmeAccounts, final ApiCallback<ListAcmeAccountsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAcmeAccountsValidateBeforeCall(listAcmeAccounts, _callback);
        Type localVarReturnType = new TypeToken<ListAcmeAccountsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthMethods
     * @param listAuthMethods  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthMethodsCall(ListAuthMethods listAuthMethods, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAuthMethods;

        // create path and map variables
        String localVarPath = "/list-auth-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthMethodsValidateBeforeCall(ListAuthMethods listAuthMethods, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listAuthMethods' is set
        if (listAuthMethods == null) {
            throw new ApiException("Missing the required parameter 'listAuthMethods' when calling listAuthMethods(Async)");
        }

        return listAuthMethodsCall(listAuthMethods, _callback);

    }

    /**
     * 
     * 
     * @param listAuthMethods  (required)
     * @return ListAuthMethodsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListAuthMethodsOutput listAuthMethods(ListAuthMethods listAuthMethods) throws ApiException {
        ApiResponse<ListAuthMethodsOutput> localVarResp = listAuthMethodsWithHttpInfo(listAuthMethods);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listAuthMethods  (required)
     * @return ApiResponse&lt;ListAuthMethodsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuthMethodsOutput> listAuthMethodsWithHttpInfo(ListAuthMethods listAuthMethods) throws ApiException {
        okhttp3.Call localVarCall = listAuthMethodsValidateBeforeCall(listAuthMethods, null);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listAuthMethods  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthMethodsAsync(ListAuthMethods listAuthMethods, final ApiCallback<ListAuthMethodsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthMethodsValidateBeforeCall(listAuthMethods, _callback);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGateways
     * @param listGateways  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGatewaysResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewaysCall(ListGateways listGateways, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listGateways;

        // create path and map variables
        String localVarPath = "/list-gateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGatewaysValidateBeforeCall(ListGateways listGateways, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listGateways' is set
        if (listGateways == null) {
            throw new ApiException("Missing the required parameter 'listGateways' when calling listGateways(Async)");
        }

        return listGatewaysCall(listGateways, _callback);

    }

    /**
     * 
     * 
     * @param listGateways  (required)
     * @return GatewaysListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGatewaysResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewaysListResponse listGateways(ListGateways listGateways) throws ApiException {
        ApiResponse<GatewaysListResponse> localVarResp = listGatewaysWithHttpInfo(listGateways);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listGateways  (required)
     * @return ApiResponse&lt;GatewaysListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGatewaysResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewaysListResponse> listGatewaysWithHttpInfo(ListGateways listGateways) throws ApiException {
        okhttp3.Call localVarCall = listGatewaysValidateBeforeCall(listGateways, null);
        Type localVarReturnType = new TypeToken<GatewaysListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listGateways  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGatewaysResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewaysAsync(ListGateways listGateways, final ApiCallback<GatewaysListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGatewaysValidateBeforeCall(listGateways, _callback);
        Type localVarReturnType = new TypeToken<GatewaysListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGroups
     * @param listGroups  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGroupsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGroupsCall(ListGroups listGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listGroups;

        // create path and map variables
        String localVarPath = "/list-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsValidateBeforeCall(ListGroups listGroups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listGroups' is set
        if (listGroups == null) {
            throw new ApiException("Missing the required parameter 'listGroups' when calling listGroups(Async)");
        }

        return listGroupsCall(listGroups, _callback);

    }

    /**
     * 
     * 
     * @param listGroups  (required)
     * @return ListGroupsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGroupsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListGroupsOutput listGroups(ListGroups listGroups) throws ApiException {
        ApiResponse<ListGroupsOutput> localVarResp = listGroupsWithHttpInfo(listGroups);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listGroups  (required)
     * @return ApiResponse&lt;ListGroupsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGroupsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGroupsOutput> listGroupsWithHttpInfo(ListGroups listGroups) throws ApiException {
        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(listGroups, null);
        Type localVarReturnType = new TypeToken<ListGroupsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listGroups  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listGroupsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGroupsAsync(ListGroups listGroups, final ApiCallback<ListGroupsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(listGroups, _callback);
        Type localVarReturnType = new TypeToken<ListGroupsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listItems
     * @param listItems  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemsCall(ListItems listItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listItems;

        // create path and map variables
        String localVarPath = "/list-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemsValidateBeforeCall(ListItems listItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listItems' is set
        if (listItems == null) {
            throw new ApiException("Missing the required parameter 'listItems' when calling listItems(Async)");
        }

        return listItemsCall(listItems, _callback);

    }

    /**
     * 
     * 
     * @param listItems  (required)
     * @return ListItemsInPathOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListItemsInPathOutput listItems(ListItems listItems) throws ApiException {
        ApiResponse<ListItemsInPathOutput> localVarResp = listItemsWithHttpInfo(listItems);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listItems  (required)
     * @return ApiResponse&lt;ListItemsInPathOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListItemsInPathOutput> listItemsWithHttpInfo(ListItems listItems) throws ApiException {
        okhttp3.Call localVarCall = listItemsValidateBeforeCall(listItems, null);
        Type localVarReturnType = new TypeToken<ListItemsInPathOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listItems  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemsAsync(ListItems listItems, final ApiCallback<ListItemsInPathOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemsValidateBeforeCall(listItems, _callback);
        Type localVarReturnType = new TypeToken<ListItemsInPathOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoles
     * @param listRoles  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesCall(ListRoles listRoles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRoles;

        // create path and map variables
        String localVarPath = "/list-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(ListRoles listRoles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listRoles' is set
        if (listRoles == null) {
            throw new ApiException("Missing the required parameter 'listRoles' when calling listRoles(Async)");
        }

        return listRolesCall(listRoles, _callback);

    }

    /**
     * 
     * 
     * @param listRoles  (required)
     * @return ListRolesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListRolesOutput listRoles(ListRoles listRoles) throws ApiException {
        ApiResponse<ListRolesOutput> localVarResp = listRolesWithHttpInfo(listRoles);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listRoles  (required)
     * @return ApiResponse&lt;ListRolesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRolesOutput> listRolesWithHttpInfo(ListRoles listRoles) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(listRoles, null);
        Type localVarReturnType = new TypeToken<ListRolesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listRoles  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesAsync(ListRoles listRoles, final ApiCallback<ListRolesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRolesValidateBeforeCall(listRoles, _callback);
        Type localVarReturnType = new TypeToken<ListRolesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSRABastions
     * @param listSRABastions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRABastionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSRABastionsCall(ListSRABastions listSRABastions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSRABastions;

        // create path and map variables
        String localVarPath = "/list-sra-bastions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSRABastionsValidateBeforeCall(ListSRABastions listSRABastions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listSRABastions' is set
        if (listSRABastions == null) {
            throw new ApiException("Missing the required parameter 'listSRABastions' when calling listSRABastions(Async)");
        }

        return listSRABastionsCall(listSRABastions, _callback);

    }

    /**
     * 
     * 
     * @param listSRABastions  (required)
     * @return BastionsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRABastionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public BastionsList listSRABastions(ListSRABastions listSRABastions) throws ApiException {
        ApiResponse<BastionsList> localVarResp = listSRABastionsWithHttpInfo(listSRABastions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listSRABastions  (required)
     * @return ApiResponse&lt;BastionsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRABastionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BastionsList> listSRABastionsWithHttpInfo(ListSRABastions listSRABastions) throws ApiException {
        okhttp3.Call localVarCall = listSRABastionsValidateBeforeCall(listSRABastions, null);
        Type localVarReturnType = new TypeToken<BastionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listSRABastions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRABastionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSRABastionsAsync(ListSRABastions listSRABastions, final ApiCallback<BastionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSRABastionsValidateBeforeCall(listSRABastions, _callback);
        Type localVarReturnType = new TypeToken<BastionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSRASessions
     * @param listSRASessions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRASessionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSRASessionsCall(ListSRASessions listSRASessions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSRASessions;

        // create path and map variables
        String localVarPath = "/list-sra-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSRASessionsValidateBeforeCall(ListSRASessions listSRASessions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listSRASessions' is set
        if (listSRASessions == null) {
            throw new ApiException("Missing the required parameter 'listSRASessions' when calling listSRASessions(Async)");
        }

        return listSRASessionsCall(listSRASessions, _callback);

    }

    /**
     * 
     * 
     * @param listSRASessions  (required)
     * @return ListSraSessionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRASessionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListSraSessionsOutput listSRASessions(ListSRASessions listSRASessions) throws ApiException {
        ApiResponse<ListSraSessionsOutput> localVarResp = listSRASessionsWithHttpInfo(listSRASessions);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listSRASessions  (required)
     * @return ApiResponse&lt;ListSraSessionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRASessionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSraSessionsOutput> listSRASessionsWithHttpInfo(ListSRASessions listSRASessions) throws ApiException {
        okhttp3.Call localVarCall = listSRASessionsValidateBeforeCall(listSRASessions, null);
        Type localVarReturnType = new TypeToken<ListSraSessionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listSRASessions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listSRASessionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSRASessionsAsync(ListSRASessions listSRASessions, final ApiCallback<ListSraSessionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSRASessionsValidateBeforeCall(listSRASessions, _callback);
        Type localVarReturnType = new TypeToken<ListSraSessionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSharedItems
     * @param listSharedItems  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedItemsCall(ListSharedItems listSharedItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listSharedItems;

        // create path and map variables
        String localVarPath = "/list-shared-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedItemsValidateBeforeCall(ListSharedItems listSharedItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listSharedItems' is set
        if (listSharedItems == null) {
            throw new ApiException("Missing the required parameter 'listSharedItems' when calling listSharedItems(Async)");
        }

        return listSharedItemsCall(listSharedItems, _callback);

    }

    /**
     * 
     * 
     * @param listSharedItems  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void listSharedItems(ListSharedItems listSharedItems) throws ApiException {
        listSharedItemsWithHttpInfo(listSharedItems);
    }

    /**
     * 
     * 
     * @param listSharedItems  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listSharedItemsWithHttpInfo(ListSharedItems listSharedItems) throws ApiException {
        okhttp3.Call localVarCall = listSharedItemsValidateBeforeCall(listSharedItems, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param listSharedItems  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSharedItemsAsync(ListSharedItems listSharedItems, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedItemsValidateBeforeCall(listSharedItems, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTargets
     * @param listTargets  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsCall(ListTargets listTargets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTargets;

        // create path and map variables
        String localVarPath = "/list-targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTargetsValidateBeforeCall(ListTargets listTargets, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listTargets' is set
        if (listTargets == null) {
            throw new ApiException("Missing the required parameter 'listTargets' when calling listTargets(Async)");
        }

        return listTargetsCall(listTargets, _callback);

    }

    /**
     * 
     * 
     * @param listTargets  (required)
     * @return ListTargetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListTargetsOutput listTargets(ListTargets listTargets) throws ApiException {
        ApiResponse<ListTargetsOutput> localVarResp = listTargetsWithHttpInfo(listTargets);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param listTargets  (required)
     * @return ApiResponse&lt;ListTargetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTargetsOutput> listTargetsWithHttpInfo(ListTargets listTargets) throws ApiException {
        okhttp3.Call localVarCall = listTargetsValidateBeforeCall(listTargets, null);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param listTargets  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsAsync(ListTargets listTargets, final ApiCallback<ListTargetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTargetsValidateBeforeCall(listTargets, _callback);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveObjects
     * @param moveObjects  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveObjectsCall(MoveObjects moveObjects, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveObjects;

        // create path and map variables
        String localVarPath = "/move-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveObjectsValidateBeforeCall(MoveObjects moveObjects, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moveObjects' is set
        if (moveObjects == null) {
            throw new ApiException("Missing the required parameter 'moveObjects' when calling moveObjects(Async)");
        }

        return moveObjectsCall(moveObjects, _callback);

    }

    /**
     * 
     * 
     * @param moveObjects  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object moveObjects(MoveObjects moveObjects) throws ApiException {
        ApiResponse<Object> localVarResp = moveObjectsWithHttpInfo(moveObjects);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param moveObjects  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> moveObjectsWithHttpInfo(MoveObjects moveObjects) throws ApiException {
        okhttp3.Call localVarCall = moveObjectsValidateBeforeCall(moveObjects, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param moveObjects  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveObjectsAsync(MoveObjects moveObjects, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveObjectsValidateBeforeCall(moveObjects, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionCertificate
     * @param provisionCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionCertificateCall(ProvisionCertificate provisionCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionCertificate;

        // create path and map variables
        String localVarPath = "/provision-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionCertificateValidateBeforeCall(ProvisionCertificate provisionCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionCertificate' is set
        if (provisionCertificate == null) {
            throw new ApiException("Missing the required parameter 'provisionCertificate' when calling provisionCertificate(Async)");
        }

        return provisionCertificateCall(provisionCertificate, _callback);

    }

    /**
     * 
     * 
     * @param provisionCertificate  (required)
     * @return ProvisionCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionCertificateOutput provisionCertificate(ProvisionCertificate provisionCertificate) throws ApiException {
        ApiResponse<ProvisionCertificateOutput> localVarResp = provisionCertificateWithHttpInfo(provisionCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param provisionCertificate  (required)
     * @return ApiResponse&lt;ProvisionCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionCertificateOutput> provisionCertificateWithHttpInfo(ProvisionCertificate provisionCertificate) throws ApiException {
        okhttp3.Call localVarCall = provisionCertificateValidateBeforeCall(provisionCertificate, null);
        Type localVarReturnType = new TypeToken<ProvisionCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param provisionCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionCertificateAsync(ProvisionCertificate provisionCertificate, final ApiCallback<ProvisionCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionCertificateValidateBeforeCall(provisionCertificate, _callback);
        Type localVarReturnType = new TypeToken<ProvisionCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawCreds
     * @param rawCreds  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawCredsCall(RawCreds rawCreds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rawCreds;

        // create path and map variables
        String localVarPath = "/raw-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawCredsValidateBeforeCall(RawCreds rawCreds, final ApiCallback _callback) throws ApiException {
        return rawCredsCall(rawCreds, _callback);

    }

    /**
     * 
     * 
     * @param rawCreds  (optional)
     * @return SystemAccessCredentialsReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SystemAccessCredentialsReplyObj rawCreds(RawCreds rawCreds) throws ApiException {
        ApiResponse<SystemAccessCredentialsReplyObj> localVarResp = rawCredsWithHttpInfo(rawCreds);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rawCreds  (optional)
     * @return ApiResponse&lt;SystemAccessCredentialsReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemAccessCredentialsReplyObj> rawCredsWithHttpInfo(RawCreds rawCreds) throws ApiException {
        okhttp3.Call localVarCall = rawCredsValidateBeforeCall(rawCreds, null);
        Type localVarReturnType = new TypeToken<SystemAccessCredentialsReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rawCreds  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawCredsAsync(RawCreds rawCreds, final ApiCallback<SystemAccessCredentialsReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawCredsValidateBeforeCall(rawCreds, _callback);
        Type localVarReturnType = new TypeToken<SystemAccessCredentialsReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshKey
     * @param refreshKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshKeyCall(RefreshKey refreshKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshKey;

        // create path and map variables
        String localVarPath = "/refresh-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshKeyValidateBeforeCall(RefreshKey refreshKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'refreshKey' is set
        if (refreshKey == null) {
            throw new ApiException("Missing the required parameter 'refreshKey' when calling refreshKey(Async)");
        }

        return refreshKeyCall(refreshKey, _callback);

    }

    /**
     * 
     * 
     * @param refreshKey  (required)
     * @return RefreshKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshKeyOutput refreshKey(RefreshKey refreshKey) throws ApiException {
        ApiResponse<RefreshKeyOutput> localVarResp = refreshKeyWithHttpInfo(refreshKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param refreshKey  (required)
     * @return ApiResponse&lt;RefreshKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshKeyOutput> refreshKeyWithHttpInfo(RefreshKey refreshKey) throws ApiException {
        okhttp3.Call localVarCall = refreshKeyValidateBeforeCall(refreshKey, null);
        Type localVarReturnType = new TypeToken<RefreshKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param refreshKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshKeyAsync(RefreshKey refreshKey, final ApiCallback<RefreshKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshKeyValidateBeforeCall(refreshKey, _callback);
        Type localVarReturnType = new TypeToken<RefreshKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renewCertificate
     * @param renewCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> renewCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewCertificateCall(RenewCertificate renewCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewCertificate;

        // create path and map variables
        String localVarPath = "/renew-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewCertificateValidateBeforeCall(RenewCertificate renewCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'renewCertificate' is set
        if (renewCertificate == null) {
            throw new ApiException("Missing the required parameter 'renewCertificate' when calling renewCertificate(Async)");
        }

        return renewCertificateCall(renewCertificate, _callback);

    }

    /**
     * 
     * 
     * @param renewCertificate  (required)
     * @return RenewCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> renewCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RenewCertificateOutput renewCertificate(RenewCertificate renewCertificate) throws ApiException {
        ApiResponse<RenewCertificateOutput> localVarResp = renewCertificateWithHttpInfo(renewCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param renewCertificate  (required)
     * @return ApiResponse&lt;RenewCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> renewCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenewCertificateOutput> renewCertificateWithHttpInfo(RenewCertificate renewCertificate) throws ApiException {
        okhttp3.Call localVarCall = renewCertificateValidateBeforeCall(renewCertificate, null);
        Type localVarReturnType = new TypeToken<RenewCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param renewCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> renewCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewCertificateAsync(RenewCertificate renewCertificate, final ApiCallback<RenewCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewCertificateValidateBeforeCall(renewCertificate, _callback);
        Type localVarReturnType = new TypeToken<RenewCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestAccess
     * @param requestAccess  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requestAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAccessCall(RequestAccess requestAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestAccess;

        // create path and map variables
        String localVarPath = "/request-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAccessValidateBeforeCall(RequestAccess requestAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestAccess' is set
        if (requestAccess == null) {
            throw new ApiException("Missing the required parameter 'requestAccess' when calling requestAccess(Async)");
        }

        return requestAccessCall(requestAccess, _callback);

    }

    /**
     * 
     * 
     * @param requestAccess  (required)
     * @return RequestAccessOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requestAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RequestAccessOutput requestAccess(RequestAccess requestAccess) throws ApiException {
        ApiResponse<RequestAccessOutput> localVarResp = requestAccessWithHttpInfo(requestAccess);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestAccess  (required)
     * @return ApiResponse&lt;RequestAccessOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requestAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestAccessOutput> requestAccessWithHttpInfo(RequestAccess requestAccess) throws ApiException {
        okhttp3.Call localVarCall = requestAccessValidateBeforeCall(requestAccess, null);
        Type localVarReturnType = new TypeToken<RequestAccessOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestAccess  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requestAccessResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAccessAsync(RequestAccess requestAccess, final ApiCallback<RequestAccessOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAccessValidateBeforeCall(requestAccess, _callback);
        Type localVarReturnType = new TypeToken<RequestAccessOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetAccessKey
     * @param resetAccessKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetAccessKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetAccessKeyCall(ResetAccessKey resetAccessKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetAccessKey;

        // create path and map variables
        String localVarPath = "/reset-access-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetAccessKeyValidateBeforeCall(ResetAccessKey resetAccessKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resetAccessKey' is set
        if (resetAccessKey == null) {
            throw new ApiException("Missing the required parameter 'resetAccessKey' when calling resetAccessKey(Async)");
        }

        return resetAccessKeyCall(resetAccessKey, _callback);

    }

    /**
     * 
     * 
     * @param resetAccessKey  (required)
     * @return ResetAuthMethodAccessKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetAccessKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ResetAuthMethodAccessKeyOutput resetAccessKey(ResetAccessKey resetAccessKey) throws ApiException {
        ApiResponse<ResetAuthMethodAccessKeyOutput> localVarResp = resetAccessKeyWithHttpInfo(resetAccessKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resetAccessKey  (required)
     * @return ApiResponse&lt;ResetAuthMethodAccessKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetAccessKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResetAuthMethodAccessKeyOutput> resetAccessKeyWithHttpInfo(ResetAccessKey resetAccessKey) throws ApiException {
        okhttp3.Call localVarCall = resetAccessKeyValidateBeforeCall(resetAccessKey, null);
        Type localVarReturnType = new TypeToken<ResetAuthMethodAccessKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resetAccessKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetAccessKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetAccessKeyAsync(ResetAccessKey resetAccessKey, final ApiCallback<ResetAuthMethodAccessKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetAccessKeyValidateBeforeCall(resetAccessKey, _callback);
        Type localVarReturnType = new TypeToken<ResetAuthMethodAccessKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reverseRBAC
     * @param reverseRBAC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseRBACCall(ReverseRBAC reverseRBAC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reverseRBAC;

        // create path and map variables
        String localVarPath = "/reverse-rbac";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseRBACValidateBeforeCall(ReverseRBAC reverseRBAC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reverseRBAC' is set
        if (reverseRBAC == null) {
            throw new ApiException("Missing the required parameter 'reverseRBAC' when calling reverseRBAC(Async)");
        }

        return reverseRBACCall(reverseRBAC, _callback);

    }

    /**
     * 
     * 
     * @param reverseRBAC  (required)
     * @return ReverseRBACOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ReverseRBACOutput reverseRBAC(ReverseRBAC reverseRBAC) throws ApiException {
        ApiResponse<ReverseRBACOutput> localVarResp = reverseRBACWithHttpInfo(reverseRBAC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param reverseRBAC  (required)
     * @return ApiResponse&lt;ReverseRBACOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReverseRBACOutput> reverseRBACWithHttpInfo(ReverseRBAC reverseRBAC) throws ApiException {
        okhttp3.Call localVarCall = reverseRBACValidateBeforeCall(reverseRBAC, null);
        Type localVarReturnType = new TypeToken<ReverseRBACOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param reverseRBAC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseRBACAsync(ReverseRBAC reverseRBAC, final ApiCallback<ReverseRBACOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseRBACValidateBeforeCall(reverseRBAC, _callback);
        Type localVarReturnType = new TypeToken<ReverseRBACOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeCertificate
     * @param revokeCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RevokeCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateCall(RevokeCertificate revokeCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeCertificate;

        // create path and map variables
        String localVarPath = "/revoke-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCertificateValidateBeforeCall(RevokeCertificate revokeCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'revokeCertificate' is set
        if (revokeCertificate == null) {
            throw new ApiException("Missing the required parameter 'revokeCertificate' when calling revokeCertificate(Async)");
        }

        return revokeCertificateCall(revokeCertificate, _callback);

    }

    /**
     * 
     * 
     * @param revokeCertificate  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RevokeCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object revokeCertificate(RevokeCertificate revokeCertificate) throws ApiException {
        ApiResponse<Object> localVarResp = revokeCertificateWithHttpInfo(revokeCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param revokeCertificate  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RevokeCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> revokeCertificateWithHttpInfo(RevokeCertificate revokeCertificate) throws ApiException {
        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(revokeCertificate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param revokeCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RevokeCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateAsync(RevokeCertificate revokeCertificate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(revokeCertificate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeCreds
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCredsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/revoke-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCredsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return revokeCredsCall(_callback);

    }

    /**
     * 
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object revokeCreds() throws ApiException {
        ApiResponse<Object> localVarResp = revokeCredsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> revokeCredsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = revokeCredsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCredsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCredsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackSecret
     * @param rollbackSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSecretCall(RollbackSecret rollbackSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackSecret;

        // create path and map variables
        String localVarPath = "/rollback-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackSecretValidateBeforeCall(RollbackSecret rollbackSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rollbackSecret' is set
        if (rollbackSecret == null) {
            throw new ApiException("Missing the required parameter 'rollbackSecret' when calling rollbackSecret(Async)");
        }

        return rollbackSecretCall(rollbackSecret, _callback);

    }

    /**
     * 
     * 
     * @param rollbackSecret  (required)
     * @return RollbackSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RollbackSecretOutput rollbackSecret(RollbackSecret rollbackSecret) throws ApiException {
        ApiResponse<RollbackSecretOutput> localVarResp = rollbackSecretWithHttpInfo(rollbackSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rollbackSecret  (required)
     * @return ApiResponse&lt;RollbackSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackSecretOutput> rollbackSecretWithHttpInfo(RollbackSecret rollbackSecret) throws ApiException {
        okhttp3.Call localVarCall = rollbackSecretValidateBeforeCall(rollbackSecret, null);
        Type localVarReturnType = new TypeToken<RollbackSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rollbackSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSecretAsync(RollbackSecret rollbackSecret, final ApiCallback<RollbackSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackSecretValidateBeforeCall(rollbackSecret, _callback);
        Type localVarReturnType = new TypeToken<RollbackSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateKey
     * @param rotateKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeyCall(RotateKey rotateKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotateKey;

        // create path and map variables
        String localVarPath = "/rotate-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateKeyValidateBeforeCall(RotateKey rotateKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotateKey' is set
        if (rotateKey == null) {
            throw new ApiException("Missing the required parameter 'rotateKey' when calling rotateKey(Async)");
        }

        return rotateKeyCall(rotateKey, _callback);

    }

    /**
     * 
     * 
     * @param rotateKey  (required)
     * @return RotateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotateKeyOutput rotateKey(RotateKey rotateKey) throws ApiException {
        ApiResponse<RotateKeyOutput> localVarResp = rotateKeyWithHttpInfo(rotateKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotateKey  (required)
     * @return ApiResponse&lt;RotateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotateKeyOutput> rotateKeyWithHttpInfo(RotateKey rotateKey) throws ApiException {
        okhttp3.Call localVarCall = rotateKeyValidateBeforeCall(rotateKey, null);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotateKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeyAsync(RotateKey rotateKey, final ApiCallback<RotateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateKeyValidateBeforeCall(rotateKey, _callback);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateOidcClientSecret
     * @param rotateOidcClientSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateOidcClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateOidcClientSecretCall(RotateOidcClientSecret rotateOidcClientSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotateOidcClientSecret;

        // create path and map variables
        String localVarPath = "/rotate-oidc-client-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateOidcClientSecretValidateBeforeCall(RotateOidcClientSecret rotateOidcClientSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotateOidcClientSecret' is set
        if (rotateOidcClientSecret == null) {
            throw new ApiException("Missing the required parameter 'rotateOidcClientSecret' when calling rotateOidcClientSecret(Async)");
        }

        return rotateOidcClientSecretCall(rotateOidcClientSecret, _callback);

    }

    /**
     * 
     * 
     * @param rotateOidcClientSecret  (required)
     * @return RotateOidcClientOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateOidcClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotateOidcClientOutput rotateOidcClientSecret(RotateOidcClientSecret rotateOidcClientSecret) throws ApiException {
        ApiResponse<RotateOidcClientOutput> localVarResp = rotateOidcClientSecretWithHttpInfo(rotateOidcClientSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotateOidcClientSecret  (required)
     * @return ApiResponse&lt;RotateOidcClientOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateOidcClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotateOidcClientOutput> rotateOidcClientSecretWithHttpInfo(RotateOidcClientSecret rotateOidcClientSecret) throws ApiException {
        okhttp3.Call localVarCall = rotateOidcClientSecretValidateBeforeCall(rotateOidcClientSecret, null);
        Type localVarReturnType = new TypeToken<RotateOidcClientOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotateOidcClientSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateOidcClientResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateOidcClientSecretAsync(RotateOidcClientSecret rotateOidcClientSecret, final ApiCallback<RotateOidcClientOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateOidcClientSecretValidateBeforeCall(rotateOidcClientSecret, _callback);
        Type localVarReturnType = new TypeToken<RotateOidcClientOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateSecret
     * @param rotateSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateSecretCall(RotateSecret rotateSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotateSecret;

        // create path and map variables
        String localVarPath = "/gateway-rotate-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateSecretValidateBeforeCall(RotateSecret rotateSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotateSecret' is set
        if (rotateSecret == null) {
            throw new ApiException("Missing the required parameter 'rotateSecret' when calling rotateSecret(Async)");
        }

        return rotateSecretCall(rotateSecret, _callback);

    }

    /**
     * 
     * 
     * @param rotateSecret  (required)
     * @return RotatedSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretOutput rotateSecret(RotateSecret rotateSecret) throws ApiException {
        ApiResponse<RotatedSecretOutput> localVarResp = rotateSecretWithHttpInfo(rotateSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotateSecret  (required)
     * @return ApiResponse&lt;RotatedSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretOutput> rotateSecretWithHttpInfo(RotateSecret rotateSecret) throws ApiException {
        okhttp3.Call localVarCall = rotateSecretValidateBeforeCall(rotateSecret, null);
        Type localVarReturnType = new TypeToken<RotatedSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotateSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateSecretAsync(RotateSecret rotateSecret, final ApiCallback<RotatedSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateSecretValidateBeforeCall(rotateSecret, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateAws
     * @param rotatedSecretCreateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateAwsCall(RotatedSecretCreateAws rotatedSecretCreateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateAws;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateAwsValidateBeforeCall(RotatedSecretCreateAws rotatedSecretCreateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateAws' is set
        if (rotatedSecretCreateAws == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateAws' when calling rotatedSecretCreateAws(Async)");
        }

        return rotatedSecretCreateAwsCall(rotatedSecretCreateAws, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateAws  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateAws(RotatedSecretCreateAws rotatedSecretCreateAws) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateAwsWithHttpInfo(rotatedSecretCreateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateAws  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateAwsWithHttpInfo(RotatedSecretCreateAws rotatedSecretCreateAws) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateAwsValidateBeforeCall(rotatedSecretCreateAws, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateAwsAsync(RotatedSecretCreateAws rotatedSecretCreateAws, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateAwsValidateBeforeCall(rotatedSecretCreateAws, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateAzure
     * @param rotatedSecretCreateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateAzureCall(RotatedSecretCreateAzure rotatedSecretCreateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateAzure;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateAzureValidateBeforeCall(RotatedSecretCreateAzure rotatedSecretCreateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateAzure' is set
        if (rotatedSecretCreateAzure == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateAzure' when calling rotatedSecretCreateAzure(Async)");
        }

        return rotatedSecretCreateAzureCall(rotatedSecretCreateAzure, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateAzure  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateAzure(RotatedSecretCreateAzure rotatedSecretCreateAzure) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateAzureWithHttpInfo(rotatedSecretCreateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateAzure  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateAzureWithHttpInfo(RotatedSecretCreateAzure rotatedSecretCreateAzure) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateAzureValidateBeforeCall(rotatedSecretCreateAzure, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateAzureAsync(RotatedSecretCreateAzure rotatedSecretCreateAzure, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateAzureValidateBeforeCall(rotatedSecretCreateAzure, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateCassandra
     * @param rotatedSecretCreateCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateCassandraCall(RotatedSecretCreateCassandra rotatedSecretCreateCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateCassandra;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateCassandraValidateBeforeCall(RotatedSecretCreateCassandra rotatedSecretCreateCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateCassandra' is set
        if (rotatedSecretCreateCassandra == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateCassandra' when calling rotatedSecretCreateCassandra(Async)");
        }

        return rotatedSecretCreateCassandraCall(rotatedSecretCreateCassandra, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateCassandra  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateCassandra(RotatedSecretCreateCassandra rotatedSecretCreateCassandra) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateCassandraWithHttpInfo(rotatedSecretCreateCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateCassandra  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateCassandraWithHttpInfo(RotatedSecretCreateCassandra rotatedSecretCreateCassandra) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateCassandraValidateBeforeCall(rotatedSecretCreateCassandra, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateCassandraAsync(RotatedSecretCreateCassandra rotatedSecretCreateCassandra, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateCassandraValidateBeforeCall(rotatedSecretCreateCassandra, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateCustom
     * @param rotatedSecretCreateCustom  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateCustomCall(RotatedSecretCreateCustom rotatedSecretCreateCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateCustom;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateCustomValidateBeforeCall(RotatedSecretCreateCustom rotatedSecretCreateCustom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateCustom' is set
        if (rotatedSecretCreateCustom == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateCustom' when calling rotatedSecretCreateCustom(Async)");
        }

        return rotatedSecretCreateCustomCall(rotatedSecretCreateCustom, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateCustom  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateCustom(RotatedSecretCreateCustom rotatedSecretCreateCustom) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateCustomWithHttpInfo(rotatedSecretCreateCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateCustom  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateCustomWithHttpInfo(RotatedSecretCreateCustom rotatedSecretCreateCustom) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateCustomValidateBeforeCall(rotatedSecretCreateCustom, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateCustom  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateCustomAsync(RotatedSecretCreateCustom rotatedSecretCreateCustom, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateCustomValidateBeforeCall(rotatedSecretCreateCustom, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateDockerhub
     * @param rotatedSecretCreateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateDockerhubCall(RotatedSecretCreateDockerhub rotatedSecretCreateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateDockerhub;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateDockerhubValidateBeforeCall(RotatedSecretCreateDockerhub rotatedSecretCreateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateDockerhub' is set
        if (rotatedSecretCreateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateDockerhub' when calling rotatedSecretCreateDockerhub(Async)");
        }

        return rotatedSecretCreateDockerhubCall(rotatedSecretCreateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateDockerhub  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateDockerhub(RotatedSecretCreateDockerhub rotatedSecretCreateDockerhub) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateDockerhubWithHttpInfo(rotatedSecretCreateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateDockerhub  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateDockerhubWithHttpInfo(RotatedSecretCreateDockerhub rotatedSecretCreateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateDockerhubValidateBeforeCall(rotatedSecretCreateDockerhub, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateDockerhubAsync(RotatedSecretCreateDockerhub rotatedSecretCreateDockerhub, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateDockerhubValidateBeforeCall(rotatedSecretCreateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateGcp
     * @param rotatedSecretCreateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateGcpCall(RotatedSecretCreateGcp rotatedSecretCreateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateGcp;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateGcpValidateBeforeCall(RotatedSecretCreateGcp rotatedSecretCreateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateGcp' is set
        if (rotatedSecretCreateGcp == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateGcp' when calling rotatedSecretCreateGcp(Async)");
        }

        return rotatedSecretCreateGcpCall(rotatedSecretCreateGcp, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateGcp  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateGcp(RotatedSecretCreateGcp rotatedSecretCreateGcp) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateGcpWithHttpInfo(rotatedSecretCreateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateGcp  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateGcpWithHttpInfo(RotatedSecretCreateGcp rotatedSecretCreateGcp) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateGcpValidateBeforeCall(rotatedSecretCreateGcp, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateGcpAsync(RotatedSecretCreateGcp rotatedSecretCreateGcp, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateGcpValidateBeforeCall(rotatedSecretCreateGcp, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateHanadb
     * @param rotatedSecretCreateHanadb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateHanadbCall(RotatedSecretCreateHanadb rotatedSecretCreateHanadb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateHanadb;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-hanadb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateHanadbValidateBeforeCall(RotatedSecretCreateHanadb rotatedSecretCreateHanadb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateHanadb' is set
        if (rotatedSecretCreateHanadb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateHanadb' when calling rotatedSecretCreateHanadb(Async)");
        }

        return rotatedSecretCreateHanadbCall(rotatedSecretCreateHanadb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateHanadb  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateHanadb(RotatedSecretCreateHanadb rotatedSecretCreateHanadb) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateHanadbWithHttpInfo(rotatedSecretCreateHanadb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateHanadb  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateHanadbWithHttpInfo(RotatedSecretCreateHanadb rotatedSecretCreateHanadb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateHanadbValidateBeforeCall(rotatedSecretCreateHanadb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateHanadb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateHanadbAsync(RotatedSecretCreateHanadb rotatedSecretCreateHanadb, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateHanadbValidateBeforeCall(rotatedSecretCreateHanadb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateLdap
     * @param rotatedSecretCreateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateLdapCall(RotatedSecretCreateLdap rotatedSecretCreateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateLdap;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateLdapValidateBeforeCall(RotatedSecretCreateLdap rotatedSecretCreateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateLdap' is set
        if (rotatedSecretCreateLdap == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateLdap' when calling rotatedSecretCreateLdap(Async)");
        }

        return rotatedSecretCreateLdapCall(rotatedSecretCreateLdap, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateLdap  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateLdap(RotatedSecretCreateLdap rotatedSecretCreateLdap) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateLdapWithHttpInfo(rotatedSecretCreateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateLdap  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateLdapWithHttpInfo(RotatedSecretCreateLdap rotatedSecretCreateLdap) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateLdapValidateBeforeCall(rotatedSecretCreateLdap, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateLdapAsync(RotatedSecretCreateLdap rotatedSecretCreateLdap, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateLdapValidateBeforeCall(rotatedSecretCreateLdap, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateMongodb
     * @param rotatedSecretCreateMongodb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMongodbCall(RotatedSecretCreateMongodb rotatedSecretCreateMongodb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateMongodb;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-mongodb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateMongodbValidateBeforeCall(RotatedSecretCreateMongodb rotatedSecretCreateMongodb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateMongodb' is set
        if (rotatedSecretCreateMongodb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateMongodb' when calling rotatedSecretCreateMongodb(Async)");
        }

        return rotatedSecretCreateMongodbCall(rotatedSecretCreateMongodb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMongodb  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateMongodb(RotatedSecretCreateMongodb rotatedSecretCreateMongodb) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateMongodbWithHttpInfo(rotatedSecretCreateMongodb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMongodb  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateMongodbWithHttpInfo(RotatedSecretCreateMongodb rotatedSecretCreateMongodb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateMongodbValidateBeforeCall(rotatedSecretCreateMongodb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateMongodb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMongodbAsync(RotatedSecretCreateMongodb rotatedSecretCreateMongodb, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateMongodbValidateBeforeCall(rotatedSecretCreateMongodb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateMssql
     * @param rotatedSecretCreateMssql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMssqlCall(RotatedSecretCreateMssql rotatedSecretCreateMssql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateMssql;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateMssqlValidateBeforeCall(RotatedSecretCreateMssql rotatedSecretCreateMssql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateMssql' is set
        if (rotatedSecretCreateMssql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateMssql' when calling rotatedSecretCreateMssql(Async)");
        }

        return rotatedSecretCreateMssqlCall(rotatedSecretCreateMssql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMssql  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateMssql(RotatedSecretCreateMssql rotatedSecretCreateMssql) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateMssqlWithHttpInfo(rotatedSecretCreateMssql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMssql  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateMssqlWithHttpInfo(RotatedSecretCreateMssql rotatedSecretCreateMssql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateMssqlValidateBeforeCall(rotatedSecretCreateMssql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateMssql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMssqlAsync(RotatedSecretCreateMssql rotatedSecretCreateMssql, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateMssqlValidateBeforeCall(rotatedSecretCreateMssql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateMysql
     * @param rotatedSecretCreateMysql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMysqlCall(RotatedSecretCreateMysql rotatedSecretCreateMysql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateMysql;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateMysqlValidateBeforeCall(RotatedSecretCreateMysql rotatedSecretCreateMysql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateMysql' is set
        if (rotatedSecretCreateMysql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateMysql' when calling rotatedSecretCreateMysql(Async)");
        }

        return rotatedSecretCreateMysqlCall(rotatedSecretCreateMysql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMysql  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateMysql(RotatedSecretCreateMysql rotatedSecretCreateMysql) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateMysqlWithHttpInfo(rotatedSecretCreateMysql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateMysql  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateMysqlWithHttpInfo(RotatedSecretCreateMysql rotatedSecretCreateMysql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateMysqlValidateBeforeCall(rotatedSecretCreateMysql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateMysql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateMysqlAsync(RotatedSecretCreateMysql rotatedSecretCreateMysql, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateMysqlValidateBeforeCall(rotatedSecretCreateMysql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateOracledb
     * @param rotatedSecretCreateOracledb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateOracledbCall(RotatedSecretCreateOracledb rotatedSecretCreateOracledb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateOracledb;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-oracledb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateOracledbValidateBeforeCall(RotatedSecretCreateOracledb rotatedSecretCreateOracledb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateOracledb' is set
        if (rotatedSecretCreateOracledb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateOracledb' when calling rotatedSecretCreateOracledb(Async)");
        }

        return rotatedSecretCreateOracledbCall(rotatedSecretCreateOracledb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateOracledb  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateOracledb(RotatedSecretCreateOracledb rotatedSecretCreateOracledb) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateOracledbWithHttpInfo(rotatedSecretCreateOracledb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateOracledb  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateOracledbWithHttpInfo(RotatedSecretCreateOracledb rotatedSecretCreateOracledb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateOracledbValidateBeforeCall(rotatedSecretCreateOracledb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateOracledb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateOracledbAsync(RotatedSecretCreateOracledb rotatedSecretCreateOracledb, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateOracledbValidateBeforeCall(rotatedSecretCreateOracledb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreatePostgresql
     * @param rotatedSecretCreatePostgresql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreatePostgresqlCall(RotatedSecretCreatePostgresql rotatedSecretCreatePostgresql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreatePostgresql;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreatePostgresqlValidateBeforeCall(RotatedSecretCreatePostgresql rotatedSecretCreatePostgresql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreatePostgresql' is set
        if (rotatedSecretCreatePostgresql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreatePostgresql' when calling rotatedSecretCreatePostgresql(Async)");
        }

        return rotatedSecretCreatePostgresqlCall(rotatedSecretCreatePostgresql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreatePostgresql  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreatePostgresql(RotatedSecretCreatePostgresql rotatedSecretCreatePostgresql) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreatePostgresqlWithHttpInfo(rotatedSecretCreatePostgresql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreatePostgresql  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreatePostgresqlWithHttpInfo(RotatedSecretCreatePostgresql rotatedSecretCreatePostgresql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreatePostgresqlValidateBeforeCall(rotatedSecretCreatePostgresql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreatePostgresql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreatePostgresqlAsync(RotatedSecretCreatePostgresql rotatedSecretCreatePostgresql, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreatePostgresqlValidateBeforeCall(rotatedSecretCreatePostgresql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateRedis
     * @param rotatedSecretCreateRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateRedisCall(RotatedSecretCreateRedis rotatedSecretCreateRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateRedis;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateRedisValidateBeforeCall(RotatedSecretCreateRedis rotatedSecretCreateRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateRedis' is set
        if (rotatedSecretCreateRedis == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateRedis' when calling rotatedSecretCreateRedis(Async)");
        }

        return rotatedSecretCreateRedisCall(rotatedSecretCreateRedis, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateRedis  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateRedis(RotatedSecretCreateRedis rotatedSecretCreateRedis) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateRedisWithHttpInfo(rotatedSecretCreateRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateRedis  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateRedisWithHttpInfo(RotatedSecretCreateRedis rotatedSecretCreateRedis) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateRedisValidateBeforeCall(rotatedSecretCreateRedis, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateRedisAsync(RotatedSecretCreateRedis rotatedSecretCreateRedis, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateRedisValidateBeforeCall(rotatedSecretCreateRedis, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateRedshift
     * @param rotatedSecretCreateRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateRedshiftCall(RotatedSecretCreateRedshift rotatedSecretCreateRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateRedshift;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateRedshiftValidateBeforeCall(RotatedSecretCreateRedshift rotatedSecretCreateRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateRedshift' is set
        if (rotatedSecretCreateRedshift == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateRedshift' when calling rotatedSecretCreateRedshift(Async)");
        }

        return rotatedSecretCreateRedshiftCall(rotatedSecretCreateRedshift, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateRedshift  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateRedshift(RotatedSecretCreateRedshift rotatedSecretCreateRedshift) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateRedshiftWithHttpInfo(rotatedSecretCreateRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateRedshift  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateRedshiftWithHttpInfo(RotatedSecretCreateRedshift rotatedSecretCreateRedshift) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateRedshiftValidateBeforeCall(rotatedSecretCreateRedshift, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateRedshiftAsync(RotatedSecretCreateRedshift rotatedSecretCreateRedshift, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateRedshiftValidateBeforeCall(rotatedSecretCreateRedshift, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateSnowflake
     * @param rotatedSecretCreateSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateSnowflakeCall(RotatedSecretCreateSnowflake rotatedSecretCreateSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateSnowflake;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateSnowflakeValidateBeforeCall(RotatedSecretCreateSnowflake rotatedSecretCreateSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateSnowflake' is set
        if (rotatedSecretCreateSnowflake == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateSnowflake' when calling rotatedSecretCreateSnowflake(Async)");
        }

        return rotatedSecretCreateSnowflakeCall(rotatedSecretCreateSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateSnowflake  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateSnowflake(RotatedSecretCreateSnowflake rotatedSecretCreateSnowflake) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateSnowflakeWithHttpInfo(rotatedSecretCreateSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateSnowflake  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateSnowflakeWithHttpInfo(RotatedSecretCreateSnowflake rotatedSecretCreateSnowflake) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateSnowflakeValidateBeforeCall(rotatedSecretCreateSnowflake, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateSnowflakeAsync(RotatedSecretCreateSnowflake rotatedSecretCreateSnowflake, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateSnowflakeValidateBeforeCall(rotatedSecretCreateSnowflake, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateSsh
     * @param rotatedSecretCreateSsh  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateSshCall(RotatedSecretCreateSsh rotatedSecretCreateSsh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateSsh;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-ssh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateSshValidateBeforeCall(RotatedSecretCreateSsh rotatedSecretCreateSsh, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateSsh' is set
        if (rotatedSecretCreateSsh == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateSsh' when calling rotatedSecretCreateSsh(Async)");
        }

        return rotatedSecretCreateSshCall(rotatedSecretCreateSsh, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateSsh  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateSsh(RotatedSecretCreateSsh rotatedSecretCreateSsh) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateSshWithHttpInfo(rotatedSecretCreateSsh);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateSsh  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateSshWithHttpInfo(RotatedSecretCreateSsh rotatedSecretCreateSsh) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateSshValidateBeforeCall(rotatedSecretCreateSsh, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateSsh  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateSshAsync(RotatedSecretCreateSsh rotatedSecretCreateSsh, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateSshValidateBeforeCall(rotatedSecretCreateSsh, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretCreateWindows
     * @param rotatedSecretCreateWindows  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateWindowsCall(RotatedSecretCreateWindows rotatedSecretCreateWindows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretCreateWindows;

        // create path and map variables
        String localVarPath = "/rotated-secret-create-windows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretCreateWindowsValidateBeforeCall(RotatedSecretCreateWindows rotatedSecretCreateWindows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretCreateWindows' is set
        if (rotatedSecretCreateWindows == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretCreateWindows' when calling rotatedSecretCreateWindows(Async)");
        }

        return rotatedSecretCreateWindowsCall(rotatedSecretCreateWindows, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretCreateWindows  (required)
     * @return RotatedSecretCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretCreateOutput rotatedSecretCreateWindows(RotatedSecretCreateWindows rotatedSecretCreateWindows) throws ApiException {
        ApiResponse<RotatedSecretCreateOutput> localVarResp = rotatedSecretCreateWindowsWithHttpInfo(rotatedSecretCreateWindows);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretCreateWindows  (required)
     * @return ApiResponse&lt;RotatedSecretCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretCreateOutput> rotatedSecretCreateWindowsWithHttpInfo(RotatedSecretCreateWindows rotatedSecretCreateWindows) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretCreateWindowsValidateBeforeCall(rotatedSecretCreateWindows, null);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretCreateWindows  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretCreateWindowsAsync(RotatedSecretCreateWindows rotatedSecretCreateWindows, final ApiCallback<RotatedSecretCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretCreateWindowsValidateBeforeCall(rotatedSecretCreateWindows, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretDelete
     * @param rotatedSecretDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretDeleteCall(RotatedSecretDelete rotatedSecretDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretDelete;

        // create path and map variables
        String localVarPath = "/rotated-secret-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretDeleteValidateBeforeCall(RotatedSecretDelete rotatedSecretDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretDelete' is set
        if (rotatedSecretDelete == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretDelete' when calling rotatedSecretDelete(Async)");
        }

        return rotatedSecretDeleteCall(rotatedSecretDelete, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretDelete  (required)
     * @return DeleteItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemOutput rotatedSecretDelete(RotatedSecretDelete rotatedSecretDelete) throws ApiException {
        ApiResponse<DeleteItemOutput> localVarResp = rotatedSecretDeleteWithHttpInfo(rotatedSecretDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretDelete  (required)
     * @return ApiResponse&lt;DeleteItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemOutput> rotatedSecretDeleteWithHttpInfo(RotatedSecretDelete rotatedSecretDelete) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretDeleteValidateBeforeCall(rotatedSecretDelete, null);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretDeleteAsync(RotatedSecretDelete rotatedSecretDelete, final ApiCallback<DeleteItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretDeleteValidateBeforeCall(rotatedSecretDelete, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretDeleteSync
     * @param rotatedSecretDeleteSync  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretDeleteSyncCall(RotatedSecretDeleteSync rotatedSecretDeleteSync, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretDeleteSync;

        // create path and map variables
        String localVarPath = "/rotated-secret-delete-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretDeleteSyncValidateBeforeCall(RotatedSecretDeleteSync rotatedSecretDeleteSync, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretDeleteSync' is set
        if (rotatedSecretDeleteSync == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretDeleteSync' when calling rotatedSecretDeleteSync(Async)");
        }

        return rotatedSecretDeleteSyncCall(rotatedSecretDeleteSync, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretDeleteSync  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object rotatedSecretDeleteSync(RotatedSecretDeleteSync rotatedSecretDeleteSync) throws ApiException {
        ApiResponse<Object> localVarResp = rotatedSecretDeleteSyncWithHttpInfo(rotatedSecretDeleteSync);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretDeleteSync  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> rotatedSecretDeleteSyncWithHttpInfo(RotatedSecretDeleteSync rotatedSecretDeleteSync) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretDeleteSyncValidateBeforeCall(rotatedSecretDeleteSync, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretDeleteSync  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretDeleteSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretDeleteSyncAsync(RotatedSecretDeleteSync rotatedSecretDeleteSync, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretDeleteSyncValidateBeforeCall(rotatedSecretDeleteSync, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretGetValue
     * @param rotatedSecretGetValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretGetValueCall(RotatedSecretGetValue rotatedSecretGetValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretGetValue;

        // create path and map variables
        String localVarPath = "/rotated-secret-get-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretGetValueValidateBeforeCall(RotatedSecretGetValue rotatedSecretGetValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretGetValue' is set
        if (rotatedSecretGetValue == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretGetValue' when calling rotatedSecretGetValue(Async)");
        }

        return rotatedSecretGetValueCall(rotatedSecretGetValue, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretGetValue  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> rotatedSecretGetValue(RotatedSecretGetValue rotatedSecretGetValue) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = rotatedSecretGetValueWithHttpInfo(rotatedSecretGetValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretGetValue  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> rotatedSecretGetValueWithHttpInfo(RotatedSecretGetValue rotatedSecretGetValue) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretGetValueValidateBeforeCall(rotatedSecretGetValue, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretGetValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretGetValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretGetValueAsync(RotatedSecretGetValue rotatedSecretGetValue, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretGetValueValidateBeforeCall(rotatedSecretGetValue, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretList
     * @param rotatedSecretList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretListCall(RotatedSecretList rotatedSecretList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretList;

        // create path and map variables
        String localVarPath = "/rotated-secret-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretListValidateBeforeCall(RotatedSecretList rotatedSecretList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretList' is set
        if (rotatedSecretList == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretList' when calling rotatedSecretList(Async)");
        }

        return rotatedSecretListCall(rotatedSecretList, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretList  (required)
     * @return GetProducersListReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetProducersListReplyObj rotatedSecretList(RotatedSecretList rotatedSecretList) throws ApiException {
        ApiResponse<GetProducersListReplyObj> localVarResp = rotatedSecretListWithHttpInfo(rotatedSecretList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretList  (required)
     * @return ApiResponse&lt;GetProducersListReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProducersListReplyObj> rotatedSecretListWithHttpInfo(RotatedSecretList rotatedSecretList) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretListValidateBeforeCall(rotatedSecretList, null);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretListAsync(RotatedSecretList rotatedSecretList, final ApiCallback<GetProducersListReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretListValidateBeforeCall(rotatedSecretList, _callback);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretSync
     * @param rotatedSecretSync  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretSyncCall(RotatedSecretSync rotatedSecretSync, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretSync;

        // create path and map variables
        String localVarPath = "/rotated-secret-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretSyncValidateBeforeCall(RotatedSecretSync rotatedSecretSync, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretSync' is set
        if (rotatedSecretSync == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretSync' when calling rotatedSecretSync(Async)");
        }

        return rotatedSecretSyncCall(rotatedSecretSync, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretSync  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object rotatedSecretSync(RotatedSecretSync rotatedSecretSync) throws ApiException {
        ApiResponse<Object> localVarResp = rotatedSecretSyncWithHttpInfo(rotatedSecretSync);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretSync  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> rotatedSecretSyncWithHttpInfo(RotatedSecretSync rotatedSecretSync) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretSyncValidateBeforeCall(rotatedSecretSync, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretSync  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotatedSecretSyncResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretSyncAsync(RotatedSecretSync rotatedSecretSync, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretSyncValidateBeforeCall(rotatedSecretSync, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateAws
     * @param rotatedSecretUpdateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateAwsCall(RotatedSecretUpdateAws rotatedSecretUpdateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateAws;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateAwsValidateBeforeCall(RotatedSecretUpdateAws rotatedSecretUpdateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateAws' is set
        if (rotatedSecretUpdateAws == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateAws' when calling rotatedSecretUpdateAws(Async)");
        }

        return rotatedSecretUpdateAwsCall(rotatedSecretUpdateAws, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateAws  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateAws(RotatedSecretUpdateAws rotatedSecretUpdateAws) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateAwsWithHttpInfo(rotatedSecretUpdateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateAws  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateAwsWithHttpInfo(RotatedSecretUpdateAws rotatedSecretUpdateAws) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateAwsValidateBeforeCall(rotatedSecretUpdateAws, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateAwsAsync(RotatedSecretUpdateAws rotatedSecretUpdateAws, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateAwsValidateBeforeCall(rotatedSecretUpdateAws, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateAzure
     * @param rotatedSecretUpdateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateAzureCall(RotatedSecretUpdateAzure rotatedSecretUpdateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateAzure;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateAzureValidateBeforeCall(RotatedSecretUpdateAzure rotatedSecretUpdateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateAzure' is set
        if (rotatedSecretUpdateAzure == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateAzure' when calling rotatedSecretUpdateAzure(Async)");
        }

        return rotatedSecretUpdateAzureCall(rotatedSecretUpdateAzure, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateAzure  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateAzure(RotatedSecretUpdateAzure rotatedSecretUpdateAzure) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateAzureWithHttpInfo(rotatedSecretUpdateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateAzure  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateAzureWithHttpInfo(RotatedSecretUpdateAzure rotatedSecretUpdateAzure) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateAzureValidateBeforeCall(rotatedSecretUpdateAzure, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateAzureAsync(RotatedSecretUpdateAzure rotatedSecretUpdateAzure, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateAzureValidateBeforeCall(rotatedSecretUpdateAzure, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateCassandra
     * @param rotatedSecretUpdateCassandra  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateCassandraCall(RotatedSecretUpdateCassandra rotatedSecretUpdateCassandra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateCassandra;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-cassandra";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateCassandraValidateBeforeCall(RotatedSecretUpdateCassandra rotatedSecretUpdateCassandra, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateCassandra' is set
        if (rotatedSecretUpdateCassandra == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateCassandra' when calling rotatedSecretUpdateCassandra(Async)");
        }

        return rotatedSecretUpdateCassandraCall(rotatedSecretUpdateCassandra, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateCassandra  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateCassandra(RotatedSecretUpdateCassandra rotatedSecretUpdateCassandra) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateCassandraWithHttpInfo(rotatedSecretUpdateCassandra);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateCassandra  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateCassandraWithHttpInfo(RotatedSecretUpdateCassandra rotatedSecretUpdateCassandra) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateCassandraValidateBeforeCall(rotatedSecretUpdateCassandra, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateCassandra  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCassandraResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateCassandraAsync(RotatedSecretUpdateCassandra rotatedSecretUpdateCassandra, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateCassandraValidateBeforeCall(rotatedSecretUpdateCassandra, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateCustom
     * @param rotatedSecretUpdateCustom  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateCustomCall(RotatedSecretUpdateCustom rotatedSecretUpdateCustom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateCustom;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateCustomValidateBeforeCall(RotatedSecretUpdateCustom rotatedSecretUpdateCustom, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateCustom' is set
        if (rotatedSecretUpdateCustom == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateCustom' when calling rotatedSecretUpdateCustom(Async)");
        }

        return rotatedSecretUpdateCustomCall(rotatedSecretUpdateCustom, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateCustom  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateCustom(RotatedSecretUpdateCustom rotatedSecretUpdateCustom) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateCustomWithHttpInfo(rotatedSecretUpdateCustom);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateCustom  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateCustomWithHttpInfo(RotatedSecretUpdateCustom rotatedSecretUpdateCustom) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateCustomValidateBeforeCall(rotatedSecretUpdateCustom, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateCustom  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateCustomAsync(RotatedSecretUpdateCustom rotatedSecretUpdateCustom, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateCustomValidateBeforeCall(rotatedSecretUpdateCustom, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateDockerhub
     * @param rotatedSecretUpdateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateDockerhubCall(RotatedSecretUpdateDockerhub rotatedSecretUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateDockerhub;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateDockerhubValidateBeforeCall(RotatedSecretUpdateDockerhub rotatedSecretUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateDockerhub' is set
        if (rotatedSecretUpdateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateDockerhub' when calling rotatedSecretUpdateDockerhub(Async)");
        }

        return rotatedSecretUpdateDockerhubCall(rotatedSecretUpdateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateDockerhub  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateDockerhub(RotatedSecretUpdateDockerhub rotatedSecretUpdateDockerhub) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateDockerhubWithHttpInfo(rotatedSecretUpdateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateDockerhub  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateDockerhubWithHttpInfo(RotatedSecretUpdateDockerhub rotatedSecretUpdateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateDockerhubValidateBeforeCall(rotatedSecretUpdateDockerhub, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateDockerhubAsync(RotatedSecretUpdateDockerhub rotatedSecretUpdateDockerhub, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateDockerhubValidateBeforeCall(rotatedSecretUpdateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateGcp
     * @param rotatedSecretUpdateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateGcpCall(RotatedSecretUpdateGcp rotatedSecretUpdateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateGcp;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateGcpValidateBeforeCall(RotatedSecretUpdateGcp rotatedSecretUpdateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateGcp' is set
        if (rotatedSecretUpdateGcp == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateGcp' when calling rotatedSecretUpdateGcp(Async)");
        }

        return rotatedSecretUpdateGcpCall(rotatedSecretUpdateGcp, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateGcp  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateGcp(RotatedSecretUpdateGcp rotatedSecretUpdateGcp) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateGcpWithHttpInfo(rotatedSecretUpdateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateGcp  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateGcpWithHttpInfo(RotatedSecretUpdateGcp rotatedSecretUpdateGcp) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateGcpValidateBeforeCall(rotatedSecretUpdateGcp, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateGcpAsync(RotatedSecretUpdateGcp rotatedSecretUpdateGcp, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateGcpValidateBeforeCall(rotatedSecretUpdateGcp, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateHanadb
     * @param rotatedSecretUpdateHanadb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateHanadbCall(RotatedSecretUpdateHanadb rotatedSecretUpdateHanadb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateHanadb;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-hanadb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateHanadbValidateBeforeCall(RotatedSecretUpdateHanadb rotatedSecretUpdateHanadb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateHanadb' is set
        if (rotatedSecretUpdateHanadb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateHanadb' when calling rotatedSecretUpdateHanadb(Async)");
        }

        return rotatedSecretUpdateHanadbCall(rotatedSecretUpdateHanadb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateHanadb  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateHanadb(RotatedSecretUpdateHanadb rotatedSecretUpdateHanadb) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateHanadbWithHttpInfo(rotatedSecretUpdateHanadb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateHanadb  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateHanadbWithHttpInfo(RotatedSecretUpdateHanadb rotatedSecretUpdateHanadb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateHanadbValidateBeforeCall(rotatedSecretUpdateHanadb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateHanadb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateHanadbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateHanadbAsync(RotatedSecretUpdateHanadb rotatedSecretUpdateHanadb, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateHanadbValidateBeforeCall(rotatedSecretUpdateHanadb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateLdap
     * @param rotatedSecretUpdateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateLdapCall(RotatedSecretUpdateLdap rotatedSecretUpdateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateLdap;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateLdapValidateBeforeCall(RotatedSecretUpdateLdap rotatedSecretUpdateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateLdap' is set
        if (rotatedSecretUpdateLdap == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateLdap' when calling rotatedSecretUpdateLdap(Async)");
        }

        return rotatedSecretUpdateLdapCall(rotatedSecretUpdateLdap, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateLdap  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateLdap(RotatedSecretUpdateLdap rotatedSecretUpdateLdap) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateLdapWithHttpInfo(rotatedSecretUpdateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateLdap  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateLdapWithHttpInfo(RotatedSecretUpdateLdap rotatedSecretUpdateLdap) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateLdapValidateBeforeCall(rotatedSecretUpdateLdap, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateLdapAsync(RotatedSecretUpdateLdap rotatedSecretUpdateLdap, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateLdapValidateBeforeCall(rotatedSecretUpdateLdap, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateMongodb
     * @param rotatedSecretUpdateMongodb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMongodbCall(RotatedSecretUpdateMongodb rotatedSecretUpdateMongodb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateMongodb;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-mongodb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateMongodbValidateBeforeCall(RotatedSecretUpdateMongodb rotatedSecretUpdateMongodb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateMongodb' is set
        if (rotatedSecretUpdateMongodb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateMongodb' when calling rotatedSecretUpdateMongodb(Async)");
        }

        return rotatedSecretUpdateMongodbCall(rotatedSecretUpdateMongodb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMongodb  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateMongodb(RotatedSecretUpdateMongodb rotatedSecretUpdateMongodb) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateMongodbWithHttpInfo(rotatedSecretUpdateMongodb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMongodb  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateMongodbWithHttpInfo(RotatedSecretUpdateMongodb rotatedSecretUpdateMongodb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateMongodbValidateBeforeCall(rotatedSecretUpdateMongodb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateMongodb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMongodbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMongodbAsync(RotatedSecretUpdateMongodb rotatedSecretUpdateMongodb, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateMongodbValidateBeforeCall(rotatedSecretUpdateMongodb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateMssql
     * @param rotatedSecretUpdateMssql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMssqlCall(RotatedSecretUpdateMssql rotatedSecretUpdateMssql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateMssql;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateMssqlValidateBeforeCall(RotatedSecretUpdateMssql rotatedSecretUpdateMssql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateMssql' is set
        if (rotatedSecretUpdateMssql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateMssql' when calling rotatedSecretUpdateMssql(Async)");
        }

        return rotatedSecretUpdateMssqlCall(rotatedSecretUpdateMssql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMssql  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateMssql(RotatedSecretUpdateMssql rotatedSecretUpdateMssql) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateMssqlWithHttpInfo(rotatedSecretUpdateMssql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMssql  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateMssqlWithHttpInfo(RotatedSecretUpdateMssql rotatedSecretUpdateMssql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateMssqlValidateBeforeCall(rotatedSecretUpdateMssql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateMssql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMssqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMssqlAsync(RotatedSecretUpdateMssql rotatedSecretUpdateMssql, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateMssqlValidateBeforeCall(rotatedSecretUpdateMssql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateMysql
     * @param rotatedSecretUpdateMysql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMysqlCall(RotatedSecretUpdateMysql rotatedSecretUpdateMysql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateMysql;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateMysqlValidateBeforeCall(RotatedSecretUpdateMysql rotatedSecretUpdateMysql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateMysql' is set
        if (rotatedSecretUpdateMysql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateMysql' when calling rotatedSecretUpdateMysql(Async)");
        }

        return rotatedSecretUpdateMysqlCall(rotatedSecretUpdateMysql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMysql  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateMysql(RotatedSecretUpdateMysql rotatedSecretUpdateMysql) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateMysqlWithHttpInfo(rotatedSecretUpdateMysql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateMysql  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateMysqlWithHttpInfo(RotatedSecretUpdateMysql rotatedSecretUpdateMysql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateMysqlValidateBeforeCall(rotatedSecretUpdateMysql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateMysql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateMysqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateMysqlAsync(RotatedSecretUpdateMysql rotatedSecretUpdateMysql, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateMysqlValidateBeforeCall(rotatedSecretUpdateMysql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateOracledb
     * @param rotatedSecretUpdateOracledb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateOracledbCall(RotatedSecretUpdateOracledb rotatedSecretUpdateOracledb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateOracledb;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-oracledb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateOracledbValidateBeforeCall(RotatedSecretUpdateOracledb rotatedSecretUpdateOracledb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateOracledb' is set
        if (rotatedSecretUpdateOracledb == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateOracledb' when calling rotatedSecretUpdateOracledb(Async)");
        }

        return rotatedSecretUpdateOracledbCall(rotatedSecretUpdateOracledb, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateOracledb  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateOracledb(RotatedSecretUpdateOracledb rotatedSecretUpdateOracledb) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateOracledbWithHttpInfo(rotatedSecretUpdateOracledb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateOracledb  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateOracledbWithHttpInfo(RotatedSecretUpdateOracledb rotatedSecretUpdateOracledb) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateOracledbValidateBeforeCall(rotatedSecretUpdateOracledb, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateOracledb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateOracledbResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateOracledbAsync(RotatedSecretUpdateOracledb rotatedSecretUpdateOracledb, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateOracledbValidateBeforeCall(rotatedSecretUpdateOracledb, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdatePostgresql
     * @param rotatedSecretUpdatePostgresql  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdatePostgresqlCall(RotatedSecretUpdatePostgresql rotatedSecretUpdatePostgresql, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdatePostgresql;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdatePostgresqlValidateBeforeCall(RotatedSecretUpdatePostgresql rotatedSecretUpdatePostgresql, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdatePostgresql' is set
        if (rotatedSecretUpdatePostgresql == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdatePostgresql' when calling rotatedSecretUpdatePostgresql(Async)");
        }

        return rotatedSecretUpdatePostgresqlCall(rotatedSecretUpdatePostgresql, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdatePostgresql  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdatePostgresql(RotatedSecretUpdatePostgresql rotatedSecretUpdatePostgresql) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdatePostgresqlWithHttpInfo(rotatedSecretUpdatePostgresql);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdatePostgresql  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdatePostgresqlWithHttpInfo(RotatedSecretUpdatePostgresql rotatedSecretUpdatePostgresql) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdatePostgresqlValidateBeforeCall(rotatedSecretUpdatePostgresql, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdatePostgresql  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdatePostgresqlResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdatePostgresqlAsync(RotatedSecretUpdatePostgresql rotatedSecretUpdatePostgresql, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdatePostgresqlValidateBeforeCall(rotatedSecretUpdatePostgresql, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateRedis
     * @param rotatedSecretUpdateRedis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateRedisCall(RotatedSecretUpdateRedis rotatedSecretUpdateRedis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateRedis;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-redis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateRedisValidateBeforeCall(RotatedSecretUpdateRedis rotatedSecretUpdateRedis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateRedis' is set
        if (rotatedSecretUpdateRedis == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateRedis' when calling rotatedSecretUpdateRedis(Async)");
        }

        return rotatedSecretUpdateRedisCall(rotatedSecretUpdateRedis, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateRedis  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateRedis(RotatedSecretUpdateRedis rotatedSecretUpdateRedis) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateRedisWithHttpInfo(rotatedSecretUpdateRedis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateRedis  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateRedisWithHttpInfo(RotatedSecretUpdateRedis rotatedSecretUpdateRedis) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateRedisValidateBeforeCall(rotatedSecretUpdateRedis, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateRedis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedisResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateRedisAsync(RotatedSecretUpdateRedis rotatedSecretUpdateRedis, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateRedisValidateBeforeCall(rotatedSecretUpdateRedis, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateRedshift
     * @param rotatedSecretUpdateRedshift  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateRedshiftCall(RotatedSecretUpdateRedshift rotatedSecretUpdateRedshift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateRedshift;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-redshift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateRedshiftValidateBeforeCall(RotatedSecretUpdateRedshift rotatedSecretUpdateRedshift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateRedshift' is set
        if (rotatedSecretUpdateRedshift == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateRedshift' when calling rotatedSecretUpdateRedshift(Async)");
        }

        return rotatedSecretUpdateRedshiftCall(rotatedSecretUpdateRedshift, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateRedshift  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateRedshift(RotatedSecretUpdateRedshift rotatedSecretUpdateRedshift) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateRedshiftWithHttpInfo(rotatedSecretUpdateRedshift);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateRedshift  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateRedshiftWithHttpInfo(RotatedSecretUpdateRedshift rotatedSecretUpdateRedshift) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateRedshiftValidateBeforeCall(rotatedSecretUpdateRedshift, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateRedshift  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateRedshiftResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateRedshiftAsync(RotatedSecretUpdateRedshift rotatedSecretUpdateRedshift, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateRedshiftValidateBeforeCall(rotatedSecretUpdateRedshift, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateSnowflake
     * @param rotatedSecretUpdateSnowflake  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateSnowflakeCall(RotatedSecretUpdateSnowflake rotatedSecretUpdateSnowflake, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateSnowflake;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateSnowflakeValidateBeforeCall(RotatedSecretUpdateSnowflake rotatedSecretUpdateSnowflake, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateSnowflake' is set
        if (rotatedSecretUpdateSnowflake == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateSnowflake' when calling rotatedSecretUpdateSnowflake(Async)");
        }

        return rotatedSecretUpdateSnowflakeCall(rotatedSecretUpdateSnowflake, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateSnowflake  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateSnowflake(RotatedSecretUpdateSnowflake rotatedSecretUpdateSnowflake) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateSnowflakeWithHttpInfo(rotatedSecretUpdateSnowflake);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateSnowflake  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateSnowflakeWithHttpInfo(RotatedSecretUpdateSnowflake rotatedSecretUpdateSnowflake) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateSnowflakeValidateBeforeCall(rotatedSecretUpdateSnowflake, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateSnowflake  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateSnowflakeAsync(RotatedSecretUpdateSnowflake rotatedSecretUpdateSnowflake, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateSnowflakeValidateBeforeCall(rotatedSecretUpdateSnowflake, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateSsh
     * @param rotatedSecretUpdateSsh  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateSshCall(RotatedSecretUpdateSsh rotatedSecretUpdateSsh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateSsh;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-ssh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateSshValidateBeforeCall(RotatedSecretUpdateSsh rotatedSecretUpdateSsh, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateSsh' is set
        if (rotatedSecretUpdateSsh == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateSsh' when calling rotatedSecretUpdateSsh(Async)");
        }

        return rotatedSecretUpdateSshCall(rotatedSecretUpdateSsh, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateSsh  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateSsh(RotatedSecretUpdateSsh rotatedSecretUpdateSsh) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateSshWithHttpInfo(rotatedSecretUpdateSsh);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateSsh  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateSshWithHttpInfo(RotatedSecretUpdateSsh rotatedSecretUpdateSsh) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateSshValidateBeforeCall(rotatedSecretUpdateSsh, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateSsh  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateSshAsync(RotatedSecretUpdateSsh rotatedSecretUpdateSsh, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateSshValidateBeforeCall(rotatedSecretUpdateSsh, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatedSecretUpdateWindows
     * @param rotatedSecretUpdateWindows  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateWindowsCall(RotatedSecretUpdateWindows rotatedSecretUpdateWindows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rotatedSecretUpdateWindows;

        // create path and map variables
        String localVarPath = "/rotated-secret-update-windows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatedSecretUpdateWindowsValidateBeforeCall(RotatedSecretUpdateWindows rotatedSecretUpdateWindows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rotatedSecretUpdateWindows' is set
        if (rotatedSecretUpdateWindows == null) {
            throw new ApiException("Missing the required parameter 'rotatedSecretUpdateWindows' when calling rotatedSecretUpdateWindows(Async)");
        }

        return rotatedSecretUpdateWindowsCall(rotatedSecretUpdateWindows, _callback);

    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateWindows  (required)
     * @return RotatedSecretUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotatedSecretUpdateOutput rotatedSecretUpdateWindows(RotatedSecretUpdateWindows rotatedSecretUpdateWindows) throws ApiException {
        ApiResponse<RotatedSecretUpdateOutput> localVarResp = rotatedSecretUpdateWindowsWithHttpInfo(rotatedSecretUpdateWindows);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rotatedSecretUpdateWindows  (required)
     * @return ApiResponse&lt;RotatedSecretUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotatedSecretUpdateOutput> rotatedSecretUpdateWindowsWithHttpInfo(RotatedSecretUpdateWindows rotatedSecretUpdateWindows) throws ApiException {
        okhttp3.Call localVarCall = rotatedSecretUpdateWindowsValidateBeforeCall(rotatedSecretUpdateWindows, null);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rotatedSecretUpdateWindows  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> rotatedSecretUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatedSecretUpdateWindowsAsync(RotatedSecretUpdateWindows rotatedSecretUpdateWindows, final ApiCallback<RotatedSecretUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatedSecretUpdateWindowsValidateBeforeCall(rotatedSecretUpdateWindows, _callback);
        Type localVarReturnType = new TypeToken<RotatedSecretUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setItemState
     * @param setItemState  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemStateCall(SetItemState setItemState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setItemState;

        // create path and map variables
        String localVarPath = "/set-item-state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setItemStateValidateBeforeCall(SetItemState setItemState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setItemState' is set
        if (setItemState == null) {
            throw new ApiException("Missing the required parameter 'setItemState' when calling setItemState(Async)");
        }

        return setItemStateCall(setItemState, _callback);

    }

    /**
     * 
     * 
     * @param setItemState  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object setItemState(SetItemState setItemState) throws ApiException {
        ApiResponse<Object> localVarResp = setItemStateWithHttpInfo(setItemState);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param setItemState  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setItemStateWithHttpInfo(SetItemState setItemState) throws ApiException {
        okhttp3.Call localVarCall = setItemStateValidateBeforeCall(setItemState, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param setItemState  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemStateAsync(SetItemState setItemState, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setItemStateValidateBeforeCall(setItemState, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRoleRule
     * @param setRoleRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleRuleCall(SetRoleRule setRoleRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRoleRule;

        // create path and map variables
        String localVarPath = "/set-role-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRoleRuleValidateBeforeCall(SetRoleRule setRoleRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setRoleRule' is set
        if (setRoleRule == null) {
            throw new ApiException("Missing the required parameter 'setRoleRule' when calling setRoleRule(Async)");
        }

        return setRoleRuleCall(setRoleRule, _callback);

    }

    /**
     * 
     * 
     * @param setRoleRule  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object setRoleRule(SetRoleRule setRoleRule) throws ApiException {
        ApiResponse<Object> localVarResp = setRoleRuleWithHttpInfo(setRoleRule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param setRoleRule  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setRoleRuleWithHttpInfo(SetRoleRule setRoleRule) throws ApiException {
        okhttp3.Call localVarCall = setRoleRuleValidateBeforeCall(setRoleRule, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param setRoleRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleRuleAsync(SetRoleRule setRoleRule, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRoleRuleValidateBeforeCall(setRoleRule, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareItem
     * @param shareItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shareItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareItemCall(ShareItem shareItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareItem;

        // create path and map variables
        String localVarPath = "/share-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareItemValidateBeforeCall(ShareItem shareItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shareItem' is set
        if (shareItem == null) {
            throw new ApiException("Missing the required parameter 'shareItem' when calling shareItem(Async)");
        }

        return shareItemCall(shareItem, _callback);

    }

    /**
     * 
     * 
     * @param shareItem  (required)
     * @return ShareItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shareItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ShareItemOutput shareItem(ShareItem shareItem) throws ApiException {
        ApiResponse<ShareItemOutput> localVarResp = shareItemWithHttpInfo(shareItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param shareItem  (required)
     * @return ApiResponse&lt;ShareItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shareItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareItemOutput> shareItemWithHttpInfo(ShareItem shareItem) throws ApiException {
        okhttp3.Call localVarCall = shareItemValidateBeforeCall(shareItem, null);
        Type localVarReturnType = new TypeToken<ShareItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param shareItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> shareItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareItemAsync(ShareItem shareItem, final ApiCallback<ShareItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareItemValidateBeforeCall(shareItem, _callback);
        Type localVarReturnType = new TypeToken<ShareItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signDataWithClassicKey
     * @param signDataWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signDataWithClassicKeyCall(SignDataWithClassicKey signDataWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signDataWithClassicKey;

        // create path and map variables
        String localVarPath = "/sign-data-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signDataWithClassicKeyValidateBeforeCall(SignDataWithClassicKey signDataWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signDataWithClassicKey' is set
        if (signDataWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'signDataWithClassicKey' when calling signDataWithClassicKey(Async)");
        }

        return signDataWithClassicKeyCall(signDataWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param signDataWithClassicKey  (required)
     * @return SignOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignOutput signDataWithClassicKey(SignDataWithClassicKey signDataWithClassicKey) throws ApiException {
        ApiResponse<SignOutput> localVarResp = signDataWithClassicKeyWithHttpInfo(signDataWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signDataWithClassicKey  (required)
     * @return ApiResponse&lt;SignOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignOutput> signDataWithClassicKeyWithHttpInfo(SignDataWithClassicKey signDataWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = signDataWithClassicKeyValidateBeforeCall(signDataWithClassicKey, null);
        Type localVarReturnType = new TypeToken<SignOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signDataWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signDataWithClassicKeyAsync(SignDataWithClassicKey signDataWithClassicKey, final ApiCallback<SignOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signDataWithClassicKeyValidateBeforeCall(signDataWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<SignOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signEcDsa
     * @param signEcDsa  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signEcDsaCall(SignEcDsa signEcDsa, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signEcDsa;

        // create path and map variables
        String localVarPath = "/sign-ecdsa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signEcDsaValidateBeforeCall(SignEcDsa signEcDsa, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signEcDsa' is set
        if (signEcDsa == null) {
            throw new ApiException("Missing the required parameter 'signEcDsa' when calling signEcDsa(Async)");
        }

        return signEcDsaCall(signEcDsa, _callback);

    }

    /**
     * 
     * 
     * @param signEcDsa  (required)
     * @return SignEcDsaOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignEcDsaOutput signEcDsa(SignEcDsa signEcDsa) throws ApiException {
        ApiResponse<SignEcDsaOutput> localVarResp = signEcDsaWithHttpInfo(signEcDsa);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signEcDsa  (required)
     * @return ApiResponse&lt;SignEcDsaOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignEcDsaOutput> signEcDsaWithHttpInfo(SignEcDsa signEcDsa) throws ApiException {
        okhttp3.Call localVarCall = signEcDsaValidateBeforeCall(signEcDsa, null);
        Type localVarReturnType = new TypeToken<SignEcDsaOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signEcDsa  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signEcDsaAsync(SignEcDsa signEcDsa, final ApiCallback<SignEcDsaOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signEcDsaValidateBeforeCall(signEcDsa, _callback);
        Type localVarReturnType = new TypeToken<SignEcDsaOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signGPG
     * @param signGPG  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signGPGCall(SignGPG signGPG, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signGPG;

        // create path and map variables
        String localVarPath = "/sign-gpg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signGPGValidateBeforeCall(SignGPG signGPG, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signGPG' is set
        if (signGPG == null) {
            throw new ApiException("Missing the required parameter 'signGPG' when calling signGPG(Async)");
        }

        return signGPGCall(signGPG, _callback);

    }

    /**
     * 
     * 
     * @param signGPG  (required)
     * @return SignGPGOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignGPGOutput signGPG(SignGPG signGPG) throws ApiException {
        ApiResponse<SignGPGOutput> localVarResp = signGPGWithHttpInfo(signGPG);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signGPG  (required)
     * @return ApiResponse&lt;SignGPGOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignGPGOutput> signGPGWithHttpInfo(SignGPG signGPG) throws ApiException {
        okhttp3.Call localVarCall = signGPGValidateBeforeCall(signGPG, null);
        Type localVarReturnType = new TypeToken<SignGPGOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signGPG  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signGPGAsync(SignGPG signGPG, final ApiCallback<SignGPGOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signGPGValidateBeforeCall(signGPG, _callback);
        Type localVarReturnType = new TypeToken<SignGPGOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signJWTWithClassicKey
     * @param signJWTWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signJWTWithClassicKeyCall(SignJWTWithClassicKey signJWTWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signJWTWithClassicKey;

        // create path and map variables
        String localVarPath = "/sign-jwt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signJWTWithClassicKeyValidateBeforeCall(SignJWTWithClassicKey signJWTWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signJWTWithClassicKey' is set
        if (signJWTWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'signJWTWithClassicKey' when calling signJWTWithClassicKey(Async)");
        }

        return signJWTWithClassicKeyCall(signJWTWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param signJWTWithClassicKey  (required)
     * @return SignJWTOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignJWTOutput signJWTWithClassicKey(SignJWTWithClassicKey signJWTWithClassicKey) throws ApiException {
        ApiResponse<SignJWTOutput> localVarResp = signJWTWithClassicKeyWithHttpInfo(signJWTWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signJWTWithClassicKey  (required)
     * @return ApiResponse&lt;SignJWTOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignJWTOutput> signJWTWithClassicKeyWithHttpInfo(SignJWTWithClassicKey signJWTWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = signJWTWithClassicKeyValidateBeforeCall(signJWTWithClassicKey, null);
        Type localVarReturnType = new TypeToken<SignJWTOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signJWTWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signJWTWithClassicKeyAsync(SignJWTWithClassicKey signJWTWithClassicKey, final ApiCallback<SignJWTOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signJWTWithClassicKeyValidateBeforeCall(signJWTWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<SignJWTOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signPKCS1
     * @param signPKCS1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKCS1Call(SignPKCS1 signPKCS1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signPKCS1;

        // create path and map variables
        String localVarPath = "/sign-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signPKCS1ValidateBeforeCall(SignPKCS1 signPKCS1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signPKCS1' is set
        if (signPKCS1 == null) {
            throw new ApiException("Missing the required parameter 'signPKCS1' when calling signPKCS1(Async)");
        }

        return signPKCS1Call(signPKCS1, _callback);

    }

    /**
     * 
     * 
     * @param signPKCS1  (required)
     * @return SignPKCS1Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignPKCS1Output signPKCS1(SignPKCS1 signPKCS1) throws ApiException {
        ApiResponse<SignPKCS1Output> localVarResp = signPKCS1WithHttpInfo(signPKCS1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signPKCS1  (required)
     * @return ApiResponse&lt;SignPKCS1Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignPKCS1Output> signPKCS1WithHttpInfo(SignPKCS1 signPKCS1) throws ApiException {
        okhttp3.Call localVarCall = signPKCS1ValidateBeforeCall(signPKCS1, null);
        Type localVarReturnType = new TypeToken<SignPKCS1Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signPKCS1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKCS1Async(SignPKCS1 signPKCS1, final ApiCallback<SignPKCS1Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = signPKCS1ValidateBeforeCall(signPKCS1, _callback);
        Type localVarReturnType = new TypeToken<SignPKCS1Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signPKICertWithClassicKey
     * @param signPKICertWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKICertWithClassicKeyCall(SignPKICertWithClassicKey signPKICertWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signPKICertWithClassicKey;

        // create path and map variables
        String localVarPath = "/sign-pki-cert-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signPKICertWithClassicKeyValidateBeforeCall(SignPKICertWithClassicKey signPKICertWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signPKICertWithClassicKey' is set
        if (signPKICertWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'signPKICertWithClassicKey' when calling signPKICertWithClassicKey(Async)");
        }

        return signPKICertWithClassicKeyCall(signPKICertWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param signPKICertWithClassicKey  (required)
     * @return SignPKICertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignPKICertOutput signPKICertWithClassicKey(SignPKICertWithClassicKey signPKICertWithClassicKey) throws ApiException {
        ApiResponse<SignPKICertOutput> localVarResp = signPKICertWithClassicKeyWithHttpInfo(signPKICertWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signPKICertWithClassicKey  (required)
     * @return ApiResponse&lt;SignPKICertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignPKICertOutput> signPKICertWithClassicKeyWithHttpInfo(SignPKICertWithClassicKey signPKICertWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = signPKICertWithClassicKeyValidateBeforeCall(signPKICertWithClassicKey, null);
        Type localVarReturnType = new TypeToken<SignPKICertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signPKICertWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKICertWithClassicKeyAsync(SignPKICertWithClassicKey signPKICertWithClassicKey, final ApiCallback<SignPKICertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signPKICertWithClassicKeyValidateBeforeCall(signPKICertWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<SignPKICertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRsaSsaPss
     * @param signRsaSsaPss  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRsaSsaPssCall(SignRsaSsaPss signRsaSsaPss, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signRsaSsaPss;

        // create path and map variables
        String localVarPath = "/sign-rsassa-pss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRsaSsaPssValidateBeforeCall(SignRsaSsaPss signRsaSsaPss, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signRsaSsaPss' is set
        if (signRsaSsaPss == null) {
            throw new ApiException("Missing the required parameter 'signRsaSsaPss' when calling signRsaSsaPss(Async)");
        }

        return signRsaSsaPssCall(signRsaSsaPss, _callback);

    }

    /**
     * 
     * 
     * @param signRsaSsaPss  (required)
     * @return SignRsaSsaPssOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignRsaSsaPssOutput signRsaSsaPss(SignRsaSsaPss signRsaSsaPss) throws ApiException {
        ApiResponse<SignRsaSsaPssOutput> localVarResp = signRsaSsaPssWithHttpInfo(signRsaSsaPss);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param signRsaSsaPss  (required)
     * @return ApiResponse&lt;SignRsaSsaPssOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignRsaSsaPssOutput> signRsaSsaPssWithHttpInfo(SignRsaSsaPss signRsaSsaPss) throws ApiException {
        okhttp3.Call localVarCall = signRsaSsaPssValidateBeforeCall(signRsaSsaPss, null);
        Type localVarReturnType = new TypeToken<SignRsaSsaPssOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param signRsaSsaPss  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRsaSsaPssAsync(SignRsaSsaPss signRsaSsaPss, final ApiCallback<SignRsaSsaPssOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRsaSsaPssValidateBeforeCall(signRsaSsaPss, _callback);
        Type localVarReturnType = new TypeToken<SignRsaSsaPssOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for staticCredsAuth
     * @param staticCredsAuth  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staticCredsAuthCall(StaticCredsAuth staticCredsAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = staticCredsAuth;

        // create path and map variables
        String localVarPath = "/static-creds-auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staticCredsAuthValidateBeforeCall(StaticCredsAuth staticCredsAuth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'staticCredsAuth' is set
        if (staticCredsAuth == null) {
            throw new ApiException("Missing the required parameter 'staticCredsAuth' when calling staticCredsAuth(Async)");
        }

        return staticCredsAuthCall(staticCredsAuth, _callback);

    }

    /**
     * 
     * 
     * @param staticCredsAuth  (required)
     * @return StaticCredsAuthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public StaticCredsAuthOutput staticCredsAuth(StaticCredsAuth staticCredsAuth) throws ApiException {
        ApiResponse<StaticCredsAuthOutput> localVarResp = staticCredsAuthWithHttpInfo(staticCredsAuth);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param staticCredsAuth  (required)
     * @return ApiResponse&lt;StaticCredsAuthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StaticCredsAuthOutput> staticCredsAuthWithHttpInfo(StaticCredsAuth staticCredsAuth) throws ApiException {
        okhttp3.Call localVarCall = staticCredsAuthValidateBeforeCall(staticCredsAuth, null);
        Type localVarReturnType = new TypeToken<StaticCredsAuthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param staticCredsAuth  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staticCredsAuthAsync(StaticCredsAuth staticCredsAuth, final ApiCallback<StaticCredsAuthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = staticCredsAuthValidateBeforeCall(staticCredsAuth, _callback);
        Type localVarReturnType = new TypeToken<StaticCredsAuthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateArtifactory
     * @param targetCreateArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateArtifactoryCall(TargetCreateArtifactory targetCreateArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateArtifactory;

        // create path and map variables
        String localVarPath = "/target-create-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateArtifactoryValidateBeforeCall(TargetCreateArtifactory targetCreateArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateArtifactory' is set
        if (targetCreateArtifactory == null) {
            throw new ApiException("Missing the required parameter 'targetCreateArtifactory' when calling targetCreateArtifactory(Async)");
        }

        return targetCreateArtifactoryCall(targetCreateArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateArtifactory  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateArtifactory(TargetCreateArtifactory targetCreateArtifactory) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateArtifactoryWithHttpInfo(targetCreateArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateArtifactory  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateArtifactoryWithHttpInfo(TargetCreateArtifactory targetCreateArtifactory) throws ApiException {
        okhttp3.Call localVarCall = targetCreateArtifactoryValidateBeforeCall(targetCreateArtifactory, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateArtifactoryAsync(TargetCreateArtifactory targetCreateArtifactory, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateArtifactoryValidateBeforeCall(targetCreateArtifactory, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateAws
     * @param targetCreateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateAwsCall(TargetCreateAws targetCreateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateAws;

        // create path and map variables
        String localVarPath = "/target-create-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateAwsValidateBeforeCall(TargetCreateAws targetCreateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateAws' is set
        if (targetCreateAws == null) {
            throw new ApiException("Missing the required parameter 'targetCreateAws' when calling targetCreateAws(Async)");
        }

        return targetCreateAwsCall(targetCreateAws, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateAws  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateAws(TargetCreateAws targetCreateAws) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateAwsWithHttpInfo(targetCreateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateAws  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateAwsWithHttpInfo(TargetCreateAws targetCreateAws) throws ApiException {
        okhttp3.Call localVarCall = targetCreateAwsValidateBeforeCall(targetCreateAws, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateAwsAsync(TargetCreateAws targetCreateAws, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateAwsValidateBeforeCall(targetCreateAws, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateAzure
     * @param targetCreateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateAzureCall(TargetCreateAzure targetCreateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateAzure;

        // create path and map variables
        String localVarPath = "/target-create-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateAzureValidateBeforeCall(TargetCreateAzure targetCreateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateAzure' is set
        if (targetCreateAzure == null) {
            throw new ApiException("Missing the required parameter 'targetCreateAzure' when calling targetCreateAzure(Async)");
        }

        return targetCreateAzureCall(targetCreateAzure, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateAzure  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateAzure(TargetCreateAzure targetCreateAzure) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateAzureWithHttpInfo(targetCreateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateAzure  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateAzureWithHttpInfo(TargetCreateAzure targetCreateAzure) throws ApiException {
        okhttp3.Call localVarCall = targetCreateAzureValidateBeforeCall(targetCreateAzure, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateAzureAsync(TargetCreateAzure targetCreateAzure, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateAzureValidateBeforeCall(targetCreateAzure, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateDB
     * @param targetCreateDB  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateDBCall(TargetCreateDB targetCreateDB, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateDB;

        // create path and map variables
        String localVarPath = "/target-create-db";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateDBValidateBeforeCall(TargetCreateDB targetCreateDB, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateDB' is set
        if (targetCreateDB == null) {
            throw new ApiException("Missing the required parameter 'targetCreateDB' when calling targetCreateDB(Async)");
        }

        return targetCreateDBCall(targetCreateDB, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateDB  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateDB(TargetCreateDB targetCreateDB) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateDBWithHttpInfo(targetCreateDB);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateDB  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateDBWithHttpInfo(TargetCreateDB targetCreateDB) throws ApiException {
        okhttp3.Call localVarCall = targetCreateDBValidateBeforeCall(targetCreateDB, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateDB  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateDBAsync(TargetCreateDB targetCreateDB, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateDBValidateBeforeCall(targetCreateDB, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateDockerhub
     * @param targetCreateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateDockerhubCall(TargetCreateDockerhub targetCreateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateDockerhub;

        // create path and map variables
        String localVarPath = "/target-create-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateDockerhubValidateBeforeCall(TargetCreateDockerhub targetCreateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateDockerhub' is set
        if (targetCreateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'targetCreateDockerhub' when calling targetCreateDockerhub(Async)");
        }

        return targetCreateDockerhubCall(targetCreateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateDockerhub  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateDockerhub(TargetCreateDockerhub targetCreateDockerhub) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateDockerhubWithHttpInfo(targetCreateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateDockerhub  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateDockerhubWithHttpInfo(TargetCreateDockerhub targetCreateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = targetCreateDockerhubValidateBeforeCall(targetCreateDockerhub, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateDockerhubAsync(TargetCreateDockerhub targetCreateDockerhub, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateDockerhubValidateBeforeCall(targetCreateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateEks
     * @param targetCreateEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateEksCall(TargetCreateEks targetCreateEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateEks;

        // create path and map variables
        String localVarPath = "/target-create-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateEksValidateBeforeCall(TargetCreateEks targetCreateEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateEks' is set
        if (targetCreateEks == null) {
            throw new ApiException("Missing the required parameter 'targetCreateEks' when calling targetCreateEks(Async)");
        }

        return targetCreateEksCall(targetCreateEks, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateEks  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateEks(TargetCreateEks targetCreateEks) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateEksWithHttpInfo(targetCreateEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateEks  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateEksWithHttpInfo(TargetCreateEks targetCreateEks) throws ApiException {
        okhttp3.Call localVarCall = targetCreateEksValidateBeforeCall(targetCreateEks, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateEksAsync(TargetCreateEks targetCreateEks, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateEksValidateBeforeCall(targetCreateEks, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGcp
     * @param targetCreateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGcpCall(TargetCreateGcp targetCreateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGcp;

        // create path and map variables
        String localVarPath = "/target-create-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGcpValidateBeforeCall(TargetCreateGcp targetCreateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGcp' is set
        if (targetCreateGcp == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGcp' when calling targetCreateGcp(Async)");
        }

        return targetCreateGcpCall(targetCreateGcp, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGcp  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGcp(TargetCreateGcp targetCreateGcp) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGcpWithHttpInfo(targetCreateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGcp  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGcpWithHttpInfo(TargetCreateGcp targetCreateGcp) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGcpValidateBeforeCall(targetCreateGcp, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGcpAsync(TargetCreateGcp targetCreateGcp, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGcpValidateBeforeCall(targetCreateGcp, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGithub
     * @param targetCreateGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGithubCall(TargetCreateGithub targetCreateGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGithub;

        // create path and map variables
        String localVarPath = "/target-create-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGithubValidateBeforeCall(TargetCreateGithub targetCreateGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGithub' is set
        if (targetCreateGithub == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGithub' when calling targetCreateGithub(Async)");
        }

        return targetCreateGithubCall(targetCreateGithub, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGithub  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGithub(TargetCreateGithub targetCreateGithub) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGithubWithHttpInfo(targetCreateGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGithub  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGithubWithHttpInfo(TargetCreateGithub targetCreateGithub) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGithubValidateBeforeCall(targetCreateGithub, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGithubAsync(TargetCreateGithub targetCreateGithub, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGithubValidateBeforeCall(targetCreateGithub, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGitlab
     * @param targetCreateGitlab  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGitlabCall(TargetCreateGitlab targetCreateGitlab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGitlab;

        // create path and map variables
        String localVarPath = "/target-create-gitlab";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGitlabValidateBeforeCall(TargetCreateGitlab targetCreateGitlab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGitlab' is set
        if (targetCreateGitlab == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGitlab' when calling targetCreateGitlab(Async)");
        }

        return targetCreateGitlabCall(targetCreateGitlab, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGitlab  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGitlab(TargetCreateGitlab targetCreateGitlab) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGitlabWithHttpInfo(targetCreateGitlab);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGitlab  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGitlabWithHttpInfo(TargetCreateGitlab targetCreateGitlab) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGitlabValidateBeforeCall(targetCreateGitlab, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGitlab  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGitlabAsync(TargetCreateGitlab targetCreateGitlab, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGitlabValidateBeforeCall(targetCreateGitlab, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGke
     * @param targetCreateGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGkeCall(TargetCreateGke targetCreateGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGke;

        // create path and map variables
        String localVarPath = "/target-create-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGkeValidateBeforeCall(TargetCreateGke targetCreateGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGke' is set
        if (targetCreateGke == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGke' when calling targetCreateGke(Async)");
        }

        return targetCreateGkeCall(targetCreateGke, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGke  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGke(TargetCreateGke targetCreateGke) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGkeWithHttpInfo(targetCreateGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGke  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGkeWithHttpInfo(TargetCreateGke targetCreateGke) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGkeValidateBeforeCall(targetCreateGke, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGkeAsync(TargetCreateGke targetCreateGke, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGkeValidateBeforeCall(targetCreateGke, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGlobalSign
     * @param targetCreateGlobalSign  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGlobalSignCall(TargetCreateGlobalSign targetCreateGlobalSign, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGlobalSign;

        // create path and map variables
        String localVarPath = "/target-create-globalsign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGlobalSignValidateBeforeCall(TargetCreateGlobalSign targetCreateGlobalSign, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGlobalSign' is set
        if (targetCreateGlobalSign == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGlobalSign' when calling targetCreateGlobalSign(Async)");
        }

        return targetCreateGlobalSignCall(targetCreateGlobalSign, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGlobalSign  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGlobalSign(TargetCreateGlobalSign targetCreateGlobalSign) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGlobalSignWithHttpInfo(targetCreateGlobalSign);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGlobalSign  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGlobalSignWithHttpInfo(TargetCreateGlobalSign targetCreateGlobalSign) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGlobalSignValidateBeforeCall(targetCreateGlobalSign, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGlobalSign  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGlobalSignAsync(TargetCreateGlobalSign targetCreateGlobalSign, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGlobalSignValidateBeforeCall(targetCreateGlobalSign, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGlobalSignAtlas
     * @param targetCreateGlobalSignAtlas  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGlobalSignAtlasCall(TargetCreateGlobalSignAtlas targetCreateGlobalSignAtlas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGlobalSignAtlas;

        // create path and map variables
        String localVarPath = "/target-create-globalsign-atlas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGlobalSignAtlasValidateBeforeCall(TargetCreateGlobalSignAtlas targetCreateGlobalSignAtlas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGlobalSignAtlas' is set
        if (targetCreateGlobalSignAtlas == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGlobalSignAtlas' when calling targetCreateGlobalSignAtlas(Async)");
        }

        return targetCreateGlobalSignAtlasCall(targetCreateGlobalSignAtlas, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGlobalSignAtlas  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGlobalSignAtlas(TargetCreateGlobalSignAtlas targetCreateGlobalSignAtlas) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGlobalSignAtlasWithHttpInfo(targetCreateGlobalSignAtlas);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGlobalSignAtlas  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGlobalSignAtlasWithHttpInfo(TargetCreateGlobalSignAtlas targetCreateGlobalSignAtlas) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGlobalSignAtlasValidateBeforeCall(targetCreateGlobalSignAtlas, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGlobalSignAtlas  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGlobalSignAtlasAsync(TargetCreateGlobalSignAtlas targetCreateGlobalSignAtlas, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGlobalSignAtlasValidateBeforeCall(targetCreateGlobalSignAtlas, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateGodaddy
     * @param targetCreateGodaddy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGodaddyCall(TargetCreateGodaddy targetCreateGodaddy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateGodaddy;

        // create path and map variables
        String localVarPath = "/target-create-godaddy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateGodaddyValidateBeforeCall(TargetCreateGodaddy targetCreateGodaddy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateGodaddy' is set
        if (targetCreateGodaddy == null) {
            throw new ApiException("Missing the required parameter 'targetCreateGodaddy' when calling targetCreateGodaddy(Async)");
        }

        return targetCreateGodaddyCall(targetCreateGodaddy, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateGodaddy  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateGodaddy(TargetCreateGodaddy targetCreateGodaddy) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateGodaddyWithHttpInfo(targetCreateGodaddy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateGodaddy  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateGodaddyWithHttpInfo(TargetCreateGodaddy targetCreateGodaddy) throws ApiException {
        okhttp3.Call localVarCall = targetCreateGodaddyValidateBeforeCall(targetCreateGodaddy, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateGodaddy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateGodaddyAsync(TargetCreateGodaddy targetCreateGodaddy, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateGodaddyValidateBeforeCall(targetCreateGodaddy, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateHashiVault
     * @param targetCreateHashiVault  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateHashiVaultCall(TargetCreateHashiVault targetCreateHashiVault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateHashiVault;

        // create path and map variables
        String localVarPath = "/target-create-hashi-vault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateHashiVaultValidateBeforeCall(TargetCreateHashiVault targetCreateHashiVault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateHashiVault' is set
        if (targetCreateHashiVault == null) {
            throw new ApiException("Missing the required parameter 'targetCreateHashiVault' when calling targetCreateHashiVault(Async)");
        }

        return targetCreateHashiVaultCall(targetCreateHashiVault, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateHashiVault  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateHashiVault(TargetCreateHashiVault targetCreateHashiVault) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateHashiVaultWithHttpInfo(targetCreateHashiVault);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateHashiVault  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateHashiVaultWithHttpInfo(TargetCreateHashiVault targetCreateHashiVault) throws ApiException {
        okhttp3.Call localVarCall = targetCreateHashiVaultValidateBeforeCall(targetCreateHashiVault, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateHashiVault  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateHashiVaultAsync(TargetCreateHashiVault targetCreateHashiVault, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateHashiVaultValidateBeforeCall(targetCreateHashiVault, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateK8s
     * @param targetCreateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateK8sCall(TargetCreateK8s targetCreateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateK8s;

        // create path and map variables
        String localVarPath = "/target-create-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateK8sValidateBeforeCall(TargetCreateK8s targetCreateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateK8s' is set
        if (targetCreateK8s == null) {
            throw new ApiException("Missing the required parameter 'targetCreateK8s' when calling targetCreateK8s(Async)");
        }

        return targetCreateK8sCall(targetCreateK8s, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateK8s  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateK8s(TargetCreateK8s targetCreateK8s) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateK8sWithHttpInfo(targetCreateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateK8s  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateK8sWithHttpInfo(TargetCreateK8s targetCreateK8s) throws ApiException {
        okhttp3.Call localVarCall = targetCreateK8sValidateBeforeCall(targetCreateK8s, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateK8sAsync(TargetCreateK8s targetCreateK8s, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateK8sValidateBeforeCall(targetCreateK8s, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateLdap
     * @param targetCreateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateLdapCall(TargetCreateLdap targetCreateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateLdap;

        // create path and map variables
        String localVarPath = "/target-create-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateLdapValidateBeforeCall(TargetCreateLdap targetCreateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateLdap' is set
        if (targetCreateLdap == null) {
            throw new ApiException("Missing the required parameter 'targetCreateLdap' when calling targetCreateLdap(Async)");
        }

        return targetCreateLdapCall(targetCreateLdap, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateLdap  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateLdap(TargetCreateLdap targetCreateLdap) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateLdapWithHttpInfo(targetCreateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateLdap  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateLdapWithHttpInfo(TargetCreateLdap targetCreateLdap) throws ApiException {
        okhttp3.Call localVarCall = targetCreateLdapValidateBeforeCall(targetCreateLdap, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateLdapAsync(TargetCreateLdap targetCreateLdap, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateLdapValidateBeforeCall(targetCreateLdap, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateLinked
     * @param targetCreateLinked  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateLinkedCall(TargetCreateLinked targetCreateLinked, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateLinked;

        // create path and map variables
        String localVarPath = "/target-create-linked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateLinkedValidateBeforeCall(TargetCreateLinked targetCreateLinked, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateLinked' is set
        if (targetCreateLinked == null) {
            throw new ApiException("Missing the required parameter 'targetCreateLinked' when calling targetCreateLinked(Async)");
        }

        return targetCreateLinkedCall(targetCreateLinked, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateLinked  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateLinked(TargetCreateLinked targetCreateLinked) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateLinkedWithHttpInfo(targetCreateLinked);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateLinked  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateLinkedWithHttpInfo(TargetCreateLinked targetCreateLinked) throws ApiException {
        okhttp3.Call localVarCall = targetCreateLinkedValidateBeforeCall(targetCreateLinked, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateLinked  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateLinkedAsync(TargetCreateLinked targetCreateLinked, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateLinkedValidateBeforeCall(targetCreateLinked, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreatePing
     * @param targetCreatePing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreatePingCall(TargetCreatePing targetCreatePing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreatePing;

        // create path and map variables
        String localVarPath = "/target-create-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreatePingValidateBeforeCall(TargetCreatePing targetCreatePing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreatePing' is set
        if (targetCreatePing == null) {
            throw new ApiException("Missing the required parameter 'targetCreatePing' when calling targetCreatePing(Async)");
        }

        return targetCreatePingCall(targetCreatePing, _callback);

    }

    /**
     * 
     * 
     * @param targetCreatePing  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreatePing(TargetCreatePing targetCreatePing) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreatePingWithHttpInfo(targetCreatePing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreatePing  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreatePingWithHttpInfo(TargetCreatePing targetCreatePing) throws ApiException {
        okhttp3.Call localVarCall = targetCreatePingValidateBeforeCall(targetCreatePing, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreatePing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreatePingAsync(TargetCreatePing targetCreatePing, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreatePingValidateBeforeCall(targetCreatePing, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateRabbitMq
     * @param targetCreateRabbitMq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateRabbitMqCall(TargetCreateRabbitMq targetCreateRabbitMq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateRabbitMq;

        // create path and map variables
        String localVarPath = "/target-create-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateRabbitMqValidateBeforeCall(TargetCreateRabbitMq targetCreateRabbitMq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateRabbitMq' is set
        if (targetCreateRabbitMq == null) {
            throw new ApiException("Missing the required parameter 'targetCreateRabbitMq' when calling targetCreateRabbitMq(Async)");
        }

        return targetCreateRabbitMqCall(targetCreateRabbitMq, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateRabbitMq  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateRabbitMq(TargetCreateRabbitMq targetCreateRabbitMq) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateRabbitMqWithHttpInfo(targetCreateRabbitMq);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateRabbitMq  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateRabbitMqWithHttpInfo(TargetCreateRabbitMq targetCreateRabbitMq) throws ApiException {
        okhttp3.Call localVarCall = targetCreateRabbitMqValidateBeforeCall(targetCreateRabbitMq, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateRabbitMq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateRabbitMqAsync(TargetCreateRabbitMq targetCreateRabbitMq, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateRabbitMqValidateBeforeCall(targetCreateRabbitMq, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateSalesforce
     * @param targetCreateSalesforce  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSalesforceCall(TargetCreateSalesforce targetCreateSalesforce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateSalesforce;

        // create path and map variables
        String localVarPath = "/target-create-salesforce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateSalesforceValidateBeforeCall(TargetCreateSalesforce targetCreateSalesforce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateSalesforce' is set
        if (targetCreateSalesforce == null) {
            throw new ApiException("Missing the required parameter 'targetCreateSalesforce' when calling targetCreateSalesforce(Async)");
        }

        return targetCreateSalesforceCall(targetCreateSalesforce, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateSalesforce  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateSalesforce(TargetCreateSalesforce targetCreateSalesforce) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateSalesforceWithHttpInfo(targetCreateSalesforce);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateSalesforce  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateSalesforceWithHttpInfo(TargetCreateSalesforce targetCreateSalesforce) throws ApiException {
        okhttp3.Call localVarCall = targetCreateSalesforceValidateBeforeCall(targetCreateSalesforce, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateSalesforce  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSalesforceAsync(TargetCreateSalesforce targetCreateSalesforce, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateSalesforceValidateBeforeCall(targetCreateSalesforce, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateSectigo
     * @param targetCreateSectigo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSectigoCall(TargetCreateSectigo targetCreateSectigo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateSectigo;

        // create path and map variables
        String localVarPath = "/target-create-sectigo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateSectigoValidateBeforeCall(TargetCreateSectigo targetCreateSectigo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateSectigo' is set
        if (targetCreateSectigo == null) {
            throw new ApiException("Missing the required parameter 'targetCreateSectigo' when calling targetCreateSectigo(Async)");
        }

        return targetCreateSectigoCall(targetCreateSectigo, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateSectigo  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateSectigo(TargetCreateSectigo targetCreateSectigo) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateSectigoWithHttpInfo(targetCreateSectigo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateSectigo  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateSectigoWithHttpInfo(TargetCreateSectigo targetCreateSectigo) throws ApiException {
        okhttp3.Call localVarCall = targetCreateSectigoValidateBeforeCall(targetCreateSectigo, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateSectigo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSectigoAsync(TargetCreateSectigo targetCreateSectigo, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateSectigoValidateBeforeCall(targetCreateSectigo, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateSsh
     * @param targetCreateSsh  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSshCall(TargetCreateSsh targetCreateSsh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateSsh;

        // create path and map variables
        String localVarPath = "/target-create-ssh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateSshValidateBeforeCall(TargetCreateSsh targetCreateSsh, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateSsh' is set
        if (targetCreateSsh == null) {
            throw new ApiException("Missing the required parameter 'targetCreateSsh' when calling targetCreateSsh(Async)");
        }

        return targetCreateSshCall(targetCreateSsh, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateSsh  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateSsh(TargetCreateSsh targetCreateSsh) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateSshWithHttpInfo(targetCreateSsh);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateSsh  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateSshWithHttpInfo(TargetCreateSsh targetCreateSsh) throws ApiException {
        okhttp3.Call localVarCall = targetCreateSshValidateBeforeCall(targetCreateSsh, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateSsh  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateSshAsync(TargetCreateSsh targetCreateSsh, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateSshValidateBeforeCall(targetCreateSsh, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateWeb
     * @param targetCreateWeb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateWebCall(TargetCreateWeb targetCreateWeb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateWeb;

        // create path and map variables
        String localVarPath = "/target-create-web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateWebValidateBeforeCall(TargetCreateWeb targetCreateWeb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateWeb' is set
        if (targetCreateWeb == null) {
            throw new ApiException("Missing the required parameter 'targetCreateWeb' when calling targetCreateWeb(Async)");
        }

        return targetCreateWebCall(targetCreateWeb, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateWeb  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateWeb(TargetCreateWeb targetCreateWeb) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateWebWithHttpInfo(targetCreateWeb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateWeb  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateWebWithHttpInfo(TargetCreateWeb targetCreateWeb) throws ApiException {
        okhttp3.Call localVarCall = targetCreateWebValidateBeforeCall(targetCreateWeb, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateWeb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateWebAsync(TargetCreateWeb targetCreateWeb, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateWebValidateBeforeCall(targetCreateWeb, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateWindows
     * @param targetCreateWindows  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateWindowsCall(TargetCreateWindows targetCreateWindows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateWindows;

        // create path and map variables
        String localVarPath = "/target-create-windows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateWindowsValidateBeforeCall(TargetCreateWindows targetCreateWindows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateWindows' is set
        if (targetCreateWindows == null) {
            throw new ApiException("Missing the required parameter 'targetCreateWindows' when calling targetCreateWindows(Async)");
        }

        return targetCreateWindowsCall(targetCreateWindows, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateWindows  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateWindows(TargetCreateWindows targetCreateWindows) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateWindowsWithHttpInfo(targetCreateWindows);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateWindows  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateWindowsWithHttpInfo(TargetCreateWindows targetCreateWindows) throws ApiException {
        okhttp3.Call localVarCall = targetCreateWindowsValidateBeforeCall(targetCreateWindows, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateWindows  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateWindowsAsync(TargetCreateWindows targetCreateWindows, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateWindowsValidateBeforeCall(targetCreateWindows, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetCreateZeroSSL
     * @param targetCreateZeroSSL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateZeroSSLCall(TargetCreateZeroSSL targetCreateZeroSSL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetCreateZeroSSL;

        // create path and map variables
        String localVarPath = "/target-create-zerossl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetCreateZeroSSLValidateBeforeCall(TargetCreateZeroSSL targetCreateZeroSSL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetCreateZeroSSL' is set
        if (targetCreateZeroSSL == null) {
            throw new ApiException("Missing the required parameter 'targetCreateZeroSSL' when calling targetCreateZeroSSL(Async)");
        }

        return targetCreateZeroSSLCall(targetCreateZeroSSL, _callback);

    }

    /**
     * 
     * 
     * @param targetCreateZeroSSL  (required)
     * @return TargetCreateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetCreateOutput targetCreateZeroSSL(TargetCreateZeroSSL targetCreateZeroSSL) throws ApiException {
        ApiResponse<TargetCreateOutput> localVarResp = targetCreateZeroSSLWithHttpInfo(targetCreateZeroSSL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetCreateZeroSSL  (required)
     * @return ApiResponse&lt;TargetCreateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetCreateOutput> targetCreateZeroSSLWithHttpInfo(TargetCreateZeroSSL targetCreateZeroSSL) throws ApiException {
        okhttp3.Call localVarCall = targetCreateZeroSSLValidateBeforeCall(targetCreateZeroSSL, null);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetCreateZeroSSL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetCreateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetCreateZeroSSLAsync(TargetCreateZeroSSL targetCreateZeroSSL, final ApiCallback<TargetCreateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetCreateZeroSSLValidateBeforeCall(targetCreateZeroSSL, _callback);
        Type localVarReturnType = new TypeToken<TargetCreateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetDelete
     * @param targetDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetDeleteCall(TargetDelete targetDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetDelete;

        // create path and map variables
        String localVarPath = "/target-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetDeleteValidateBeforeCall(TargetDelete targetDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetDelete' is set
        if (targetDelete == null) {
            throw new ApiException("Missing the required parameter 'targetDelete' when calling targetDelete(Async)");
        }

        return targetDeleteCall(targetDelete, _callback);

    }

    /**
     * 
     * 
     * @param targetDelete  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object targetDelete(TargetDelete targetDelete) throws ApiException {
        ApiResponse<Object> localVarResp = targetDeleteWithHttpInfo(targetDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetDelete  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> targetDeleteWithHttpInfo(TargetDelete targetDelete) throws ApiException {
        okhttp3.Call localVarCall = targetDeleteValidateBeforeCall(targetDelete, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetDeleteAsync(TargetDelete targetDelete, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetDeleteValidateBeforeCall(targetDelete, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetGet
     * @param targetGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetGetCall(TargetGet targetGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetGet;

        // create path and map variables
        String localVarPath = "/target-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetGetValidateBeforeCall(TargetGet targetGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGet' is set
        if (targetGet == null) {
            throw new ApiException("Missing the required parameter 'targetGet' when calling targetGet(Async)");
        }

        return targetGetCall(targetGet, _callback);

    }

    /**
     * 
     * 
     * @param targetGet  (required)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Target targetGet(TargetGet targetGet) throws ApiException {
        ApiResponse<Target> localVarResp = targetGetWithHttpInfo(targetGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetGet  (required)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Target> targetGetWithHttpInfo(TargetGet targetGet) throws ApiException {
        okhttp3.Call localVarCall = targetGetValidateBeforeCall(targetGet, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetGetAsync(TargetGet targetGet, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetGetValidateBeforeCall(targetGet, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetGetDetails
     * @param targetGetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetGetDetailsCall(TargetGetDetails targetGetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetGetDetails;

        // create path and map variables
        String localVarPath = "/target-get-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetGetDetailsValidateBeforeCall(TargetGetDetails targetGetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetGetDetails' is set
        if (targetGetDetails == null) {
            throw new ApiException("Missing the required parameter 'targetGetDetails' when calling targetGetDetails(Async)");
        }

        return targetGetDetailsCall(targetGetDetails, _callback);

    }

    /**
     * 
     * 
     * @param targetGetDetails  (required)
     * @return GetTargetDetailsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetTargetDetailsOutput targetGetDetails(TargetGetDetails targetGetDetails) throws ApiException {
        ApiResponse<GetTargetDetailsOutput> localVarResp = targetGetDetailsWithHttpInfo(targetGetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetGetDetails  (required)
     * @return ApiResponse&lt;GetTargetDetailsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTargetDetailsOutput> targetGetDetailsWithHttpInfo(TargetGetDetails targetGetDetails) throws ApiException {
        okhttp3.Call localVarCall = targetGetDetailsValidateBeforeCall(targetGetDetails, null);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetGetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetGetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetGetDetailsAsync(TargetGetDetails targetGetDetails, final ApiCallback<GetTargetDetailsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetGetDetailsValidateBeforeCall(targetGetDetails, _callback);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetList
     * @param targetList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetListCall(TargetList targetList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetList;

        // create path and map variables
        String localVarPath = "/target-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetListValidateBeforeCall(TargetList targetList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetList' is set
        if (targetList == null) {
            throw new ApiException("Missing the required parameter 'targetList' when calling targetList(Async)");
        }

        return targetListCall(targetList, _callback);

    }

    /**
     * 
     * 
     * @param targetList  (required)
     * @return ListTargetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListTargetsOutput targetList(TargetList targetList) throws ApiException {
        ApiResponse<ListTargetsOutput> localVarResp = targetListWithHttpInfo(targetList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetList  (required)
     * @return ApiResponse&lt;ListTargetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTargetsOutput> targetListWithHttpInfo(TargetList targetList) throws ApiException {
        okhttp3.Call localVarCall = targetListValidateBeforeCall(targetList, null);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> targetListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetListAsync(TargetList targetList, final ApiCallback<ListTargetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetListValidateBeforeCall(targetList, _callback);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateArtifactory
     * @param targetUpdateArtifactory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateArtifactoryCall(TargetUpdateArtifactory targetUpdateArtifactory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateArtifactory;

        // create path and map variables
        String localVarPath = "/target-update-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateArtifactoryValidateBeforeCall(TargetUpdateArtifactory targetUpdateArtifactory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateArtifactory' is set
        if (targetUpdateArtifactory == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateArtifactory' when calling targetUpdateArtifactory(Async)");
        }

        return targetUpdateArtifactoryCall(targetUpdateArtifactory, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateArtifactory  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateArtifactory(TargetUpdateArtifactory targetUpdateArtifactory) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateArtifactoryWithHttpInfo(targetUpdateArtifactory);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateArtifactory  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateArtifactoryWithHttpInfo(TargetUpdateArtifactory targetUpdateArtifactory) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateArtifactoryValidateBeforeCall(targetUpdateArtifactory, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateArtifactory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateArtifactoryAsync(TargetUpdateArtifactory targetUpdateArtifactory, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateArtifactoryValidateBeforeCall(targetUpdateArtifactory, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateAws
     * @param targetUpdateAws  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateAwsCall(TargetUpdateAws targetUpdateAws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateAws;

        // create path and map variables
        String localVarPath = "/target-update-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateAwsValidateBeforeCall(TargetUpdateAws targetUpdateAws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateAws' is set
        if (targetUpdateAws == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateAws' when calling targetUpdateAws(Async)");
        }

        return targetUpdateAwsCall(targetUpdateAws, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateAws  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateAws(TargetUpdateAws targetUpdateAws) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateAwsWithHttpInfo(targetUpdateAws);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateAws  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateAwsWithHttpInfo(TargetUpdateAws targetUpdateAws) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateAwsValidateBeforeCall(targetUpdateAws, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateAws  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateAwsAsync(TargetUpdateAws targetUpdateAws, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateAwsValidateBeforeCall(targetUpdateAws, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateAzure
     * @param targetUpdateAzure  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateAzureCall(TargetUpdateAzure targetUpdateAzure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateAzure;

        // create path and map variables
        String localVarPath = "/target-update-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateAzureValidateBeforeCall(TargetUpdateAzure targetUpdateAzure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateAzure' is set
        if (targetUpdateAzure == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateAzure' when calling targetUpdateAzure(Async)");
        }

        return targetUpdateAzureCall(targetUpdateAzure, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateAzure  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateAzure(TargetUpdateAzure targetUpdateAzure) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateAzureWithHttpInfo(targetUpdateAzure);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateAzure  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateAzureWithHttpInfo(TargetUpdateAzure targetUpdateAzure) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateAzureValidateBeforeCall(targetUpdateAzure, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateAzure  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateAzureAsync(TargetUpdateAzure targetUpdateAzure, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateAzureValidateBeforeCall(targetUpdateAzure, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateDB
     * @param targetUpdateDB  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateDBCall(TargetUpdateDB targetUpdateDB, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateDB;

        // create path and map variables
        String localVarPath = "/target-update-db";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateDBValidateBeforeCall(TargetUpdateDB targetUpdateDB, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateDB' is set
        if (targetUpdateDB == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateDB' when calling targetUpdateDB(Async)");
        }

        return targetUpdateDBCall(targetUpdateDB, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateDB  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateDB(TargetUpdateDB targetUpdateDB) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateDBWithHttpInfo(targetUpdateDB);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateDB  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateDBWithHttpInfo(TargetUpdateDB targetUpdateDB) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateDBValidateBeforeCall(targetUpdateDB, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateDB  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDBResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateDBAsync(TargetUpdateDB targetUpdateDB, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateDBValidateBeforeCall(targetUpdateDB, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateDockerhub
     * @param targetUpdateDockerhub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateDockerhubCall(TargetUpdateDockerhub targetUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateDockerhub;

        // create path and map variables
        String localVarPath = "/target-update-dockerhub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateDockerhubValidateBeforeCall(TargetUpdateDockerhub targetUpdateDockerhub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateDockerhub' is set
        if (targetUpdateDockerhub == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateDockerhub' when calling targetUpdateDockerhub(Async)");
        }

        return targetUpdateDockerhubCall(targetUpdateDockerhub, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateDockerhub  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateDockerhub(TargetUpdateDockerhub targetUpdateDockerhub) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateDockerhubWithHttpInfo(targetUpdateDockerhub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateDockerhub  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateDockerhubWithHttpInfo(TargetUpdateDockerhub targetUpdateDockerhub) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateDockerhubValidateBeforeCall(targetUpdateDockerhub, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateDockerhub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateDockerhubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateDockerhubAsync(TargetUpdateDockerhub targetUpdateDockerhub, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateDockerhubValidateBeforeCall(targetUpdateDockerhub, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateEks
     * @param targetUpdateEks  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateEksCall(TargetUpdateEks targetUpdateEks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateEks;

        // create path and map variables
        String localVarPath = "/target-update-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateEksValidateBeforeCall(TargetUpdateEks targetUpdateEks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateEks' is set
        if (targetUpdateEks == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateEks' when calling targetUpdateEks(Async)");
        }

        return targetUpdateEksCall(targetUpdateEks, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateEks  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateEks(TargetUpdateEks targetUpdateEks) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateEksWithHttpInfo(targetUpdateEks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateEks  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateEksWithHttpInfo(TargetUpdateEks targetUpdateEks) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateEksValidateBeforeCall(targetUpdateEks, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateEks  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateEksAsync(TargetUpdateEks targetUpdateEks, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateEksValidateBeforeCall(targetUpdateEks, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGcp
     * @param targetUpdateGcp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGcpCall(TargetUpdateGcp targetUpdateGcp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGcp;

        // create path and map variables
        String localVarPath = "/target-update-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGcpValidateBeforeCall(TargetUpdateGcp targetUpdateGcp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGcp' is set
        if (targetUpdateGcp == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGcp' when calling targetUpdateGcp(Async)");
        }

        return targetUpdateGcpCall(targetUpdateGcp, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGcp  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGcp(TargetUpdateGcp targetUpdateGcp) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGcpWithHttpInfo(targetUpdateGcp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGcp  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGcpWithHttpInfo(TargetUpdateGcp targetUpdateGcp) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGcpValidateBeforeCall(targetUpdateGcp, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGcp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGcpAsync(TargetUpdateGcp targetUpdateGcp, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGcpValidateBeforeCall(targetUpdateGcp, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGithub
     * @param targetUpdateGithub  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGithubCall(TargetUpdateGithub targetUpdateGithub, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGithub;

        // create path and map variables
        String localVarPath = "/target-update-github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGithubValidateBeforeCall(TargetUpdateGithub targetUpdateGithub, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGithub' is set
        if (targetUpdateGithub == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGithub' when calling targetUpdateGithub(Async)");
        }

        return targetUpdateGithubCall(targetUpdateGithub, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGithub  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGithub(TargetUpdateGithub targetUpdateGithub) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGithubWithHttpInfo(targetUpdateGithub);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGithub  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGithubWithHttpInfo(TargetUpdateGithub targetUpdateGithub) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGithubValidateBeforeCall(targetUpdateGithub, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGithub  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGithubResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGithubAsync(TargetUpdateGithub targetUpdateGithub, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGithubValidateBeforeCall(targetUpdateGithub, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGitlab
     * @param targetUpdateGitlab  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGitlabCall(TargetUpdateGitlab targetUpdateGitlab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGitlab;

        // create path and map variables
        String localVarPath = "/target-update-gitlab";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGitlabValidateBeforeCall(TargetUpdateGitlab targetUpdateGitlab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGitlab' is set
        if (targetUpdateGitlab == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGitlab' when calling targetUpdateGitlab(Async)");
        }

        return targetUpdateGitlabCall(targetUpdateGitlab, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGitlab  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGitlab(TargetUpdateGitlab targetUpdateGitlab) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGitlabWithHttpInfo(targetUpdateGitlab);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGitlab  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGitlabWithHttpInfo(TargetUpdateGitlab targetUpdateGitlab) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGitlabValidateBeforeCall(targetUpdateGitlab, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGitlab  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGitlabResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGitlabAsync(TargetUpdateGitlab targetUpdateGitlab, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGitlabValidateBeforeCall(targetUpdateGitlab, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGke
     * @param targetUpdateGke  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGkeCall(TargetUpdateGke targetUpdateGke, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGke;

        // create path and map variables
        String localVarPath = "/target-update-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGkeValidateBeforeCall(TargetUpdateGke targetUpdateGke, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGke' is set
        if (targetUpdateGke == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGke' when calling targetUpdateGke(Async)");
        }

        return targetUpdateGkeCall(targetUpdateGke, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGke  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGke(TargetUpdateGke targetUpdateGke) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGkeWithHttpInfo(targetUpdateGke);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGke  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGkeWithHttpInfo(TargetUpdateGke targetUpdateGke) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGkeValidateBeforeCall(targetUpdateGke, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGke  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGkeAsync(TargetUpdateGke targetUpdateGke, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGkeValidateBeforeCall(targetUpdateGke, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGlobalSign
     * @param targetUpdateGlobalSign  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGlobalSignCall(TargetUpdateGlobalSign targetUpdateGlobalSign, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGlobalSign;

        // create path and map variables
        String localVarPath = "/target-update-globalsign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGlobalSignValidateBeforeCall(TargetUpdateGlobalSign targetUpdateGlobalSign, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGlobalSign' is set
        if (targetUpdateGlobalSign == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGlobalSign' when calling targetUpdateGlobalSign(Async)");
        }

        return targetUpdateGlobalSignCall(targetUpdateGlobalSign, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGlobalSign  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGlobalSign(TargetUpdateGlobalSign targetUpdateGlobalSign) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGlobalSignWithHttpInfo(targetUpdateGlobalSign);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGlobalSign  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGlobalSignWithHttpInfo(TargetUpdateGlobalSign targetUpdateGlobalSign) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGlobalSignValidateBeforeCall(targetUpdateGlobalSign, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGlobalSign  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGlobalSignAsync(TargetUpdateGlobalSign targetUpdateGlobalSign, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGlobalSignValidateBeforeCall(targetUpdateGlobalSign, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGlobalSignAtlas
     * @param targetUpdateGlobalSignAtlas  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGlobalSignAtlasCall(TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGlobalSignAtlas;

        // create path and map variables
        String localVarPath = "/target-update-globalsign-atlas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGlobalSignAtlasValidateBeforeCall(TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGlobalSignAtlas' is set
        if (targetUpdateGlobalSignAtlas == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGlobalSignAtlas' when calling targetUpdateGlobalSignAtlas(Async)");
        }

        return targetUpdateGlobalSignAtlasCall(targetUpdateGlobalSignAtlas, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGlobalSignAtlas  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGlobalSignAtlas(TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGlobalSignAtlasWithHttpInfo(targetUpdateGlobalSignAtlas);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGlobalSignAtlas  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGlobalSignAtlasWithHttpInfo(TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGlobalSignAtlasValidateBeforeCall(targetUpdateGlobalSignAtlas, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGlobalSignAtlas  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGlobalSignAtlasResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGlobalSignAtlasAsync(TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGlobalSignAtlasValidateBeforeCall(targetUpdateGlobalSignAtlas, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateGodaddy
     * @param targetUpdateGodaddy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGodaddyCall(TargetUpdateGodaddy targetUpdateGodaddy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateGodaddy;

        // create path and map variables
        String localVarPath = "/target-update-godaddy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateGodaddyValidateBeforeCall(TargetUpdateGodaddy targetUpdateGodaddy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateGodaddy' is set
        if (targetUpdateGodaddy == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateGodaddy' when calling targetUpdateGodaddy(Async)");
        }

        return targetUpdateGodaddyCall(targetUpdateGodaddy, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateGodaddy  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateGodaddy(TargetUpdateGodaddy targetUpdateGodaddy) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateGodaddyWithHttpInfo(targetUpdateGodaddy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateGodaddy  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateGodaddyWithHttpInfo(TargetUpdateGodaddy targetUpdateGodaddy) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateGodaddyValidateBeforeCall(targetUpdateGodaddy, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateGodaddy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateGodaddyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateGodaddyAsync(TargetUpdateGodaddy targetUpdateGodaddy, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateGodaddyValidateBeforeCall(targetUpdateGodaddy, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateHashiVault
     * @param targetUpdateHashiVault  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateHashiVaultCall(TargetUpdateHashiVault targetUpdateHashiVault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateHashiVault;

        // create path and map variables
        String localVarPath = "/target-update-hashi-vault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateHashiVaultValidateBeforeCall(TargetUpdateHashiVault targetUpdateHashiVault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateHashiVault' is set
        if (targetUpdateHashiVault == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateHashiVault' when calling targetUpdateHashiVault(Async)");
        }

        return targetUpdateHashiVaultCall(targetUpdateHashiVault, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateHashiVault  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateHashiVault(TargetUpdateHashiVault targetUpdateHashiVault) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateHashiVaultWithHttpInfo(targetUpdateHashiVault);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateHashiVault  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateHashiVaultWithHttpInfo(TargetUpdateHashiVault targetUpdateHashiVault) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateHashiVaultValidateBeforeCall(targetUpdateHashiVault, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateHashiVault  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateHashiVaultResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateHashiVaultAsync(TargetUpdateHashiVault targetUpdateHashiVault, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateHashiVaultValidateBeforeCall(targetUpdateHashiVault, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateK8s
     * @param targetUpdateK8s  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateK8sCall(TargetUpdateK8s targetUpdateK8s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateK8s;

        // create path and map variables
        String localVarPath = "/target-update-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateK8sValidateBeforeCall(TargetUpdateK8s targetUpdateK8s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateK8s' is set
        if (targetUpdateK8s == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateK8s' when calling targetUpdateK8s(Async)");
        }

        return targetUpdateK8sCall(targetUpdateK8s, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateK8s  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateK8s(TargetUpdateK8s targetUpdateK8s) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateK8sWithHttpInfo(targetUpdateK8s);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateK8s  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateK8sWithHttpInfo(TargetUpdateK8s targetUpdateK8s) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateK8sValidateBeforeCall(targetUpdateK8s, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateK8s  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateK8sResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateK8sAsync(TargetUpdateK8s targetUpdateK8s, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateK8sValidateBeforeCall(targetUpdateK8s, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateLdap
     * @param targetUpdateLdap  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateLdapCall(TargetUpdateLdap targetUpdateLdap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateLdap;

        // create path and map variables
        String localVarPath = "/target-update-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateLdapValidateBeforeCall(TargetUpdateLdap targetUpdateLdap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateLdap' is set
        if (targetUpdateLdap == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateLdap' when calling targetUpdateLdap(Async)");
        }

        return targetUpdateLdapCall(targetUpdateLdap, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateLdap  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateLdap(TargetUpdateLdap targetUpdateLdap) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateLdapWithHttpInfo(targetUpdateLdap);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateLdap  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateLdapWithHttpInfo(TargetUpdateLdap targetUpdateLdap) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateLdapValidateBeforeCall(targetUpdateLdap, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateLdap  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLdapResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateLdapAsync(TargetUpdateLdap targetUpdateLdap, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateLdapValidateBeforeCall(targetUpdateLdap, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateLinked
     * @param targetUpdateLinked  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateLinkedCall(TargetUpdateLinked targetUpdateLinked, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateLinked;

        // create path and map variables
        String localVarPath = "/target-update-linked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateLinkedValidateBeforeCall(TargetUpdateLinked targetUpdateLinked, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateLinked' is set
        if (targetUpdateLinked == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateLinked' when calling targetUpdateLinked(Async)");
        }

        return targetUpdateLinkedCall(targetUpdateLinked, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateLinked  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateLinked(TargetUpdateLinked targetUpdateLinked) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateLinkedWithHttpInfo(targetUpdateLinked);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateLinked  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateLinkedWithHttpInfo(TargetUpdateLinked targetUpdateLinked) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateLinkedValidateBeforeCall(targetUpdateLinked, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateLinked  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateLinkedResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateLinkedAsync(TargetUpdateLinked targetUpdateLinked, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateLinkedValidateBeforeCall(targetUpdateLinked, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdatePing
     * @param targetUpdatePing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdatePingCall(TargetUpdatePing targetUpdatePing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdatePing;

        // create path and map variables
        String localVarPath = "/target-update-ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdatePingValidateBeforeCall(TargetUpdatePing targetUpdatePing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdatePing' is set
        if (targetUpdatePing == null) {
            throw new ApiException("Missing the required parameter 'targetUpdatePing' when calling targetUpdatePing(Async)");
        }

        return targetUpdatePingCall(targetUpdatePing, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdatePing  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdatePing(TargetUpdatePing targetUpdatePing) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdatePingWithHttpInfo(targetUpdatePing);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdatePing  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdatePingWithHttpInfo(TargetUpdatePing targetUpdatePing) throws ApiException {
        okhttp3.Call localVarCall = targetUpdatePingValidateBeforeCall(targetUpdatePing, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdatePing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdatePingResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdatePingAsync(TargetUpdatePing targetUpdatePing, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdatePingValidateBeforeCall(targetUpdatePing, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateRabbitMq
     * @param targetUpdateRabbitMq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateRabbitMqCall(TargetUpdateRabbitMq targetUpdateRabbitMq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateRabbitMq;

        // create path and map variables
        String localVarPath = "/target-update-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateRabbitMqValidateBeforeCall(TargetUpdateRabbitMq targetUpdateRabbitMq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateRabbitMq' is set
        if (targetUpdateRabbitMq == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateRabbitMq' when calling targetUpdateRabbitMq(Async)");
        }

        return targetUpdateRabbitMqCall(targetUpdateRabbitMq, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateRabbitMq  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateRabbitMq(TargetUpdateRabbitMq targetUpdateRabbitMq) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateRabbitMqWithHttpInfo(targetUpdateRabbitMq);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateRabbitMq  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateRabbitMqWithHttpInfo(TargetUpdateRabbitMq targetUpdateRabbitMq) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateRabbitMqValidateBeforeCall(targetUpdateRabbitMq, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateRabbitMq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateRabbitMqResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateRabbitMqAsync(TargetUpdateRabbitMq targetUpdateRabbitMq, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateRabbitMqValidateBeforeCall(targetUpdateRabbitMq, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateSalesforce
     * @param targetUpdateSalesforce  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSalesforceCall(TargetUpdateSalesforce targetUpdateSalesforce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateSalesforce;

        // create path and map variables
        String localVarPath = "/target-update-salesforce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateSalesforceValidateBeforeCall(TargetUpdateSalesforce targetUpdateSalesforce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateSalesforce' is set
        if (targetUpdateSalesforce == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateSalesforce' when calling targetUpdateSalesforce(Async)");
        }

        return targetUpdateSalesforceCall(targetUpdateSalesforce, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateSalesforce  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateSalesforce(TargetUpdateSalesforce targetUpdateSalesforce) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateSalesforceWithHttpInfo(targetUpdateSalesforce);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateSalesforce  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateSalesforceWithHttpInfo(TargetUpdateSalesforce targetUpdateSalesforce) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateSalesforceValidateBeforeCall(targetUpdateSalesforce, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateSalesforce  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSalesforceResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSalesforceAsync(TargetUpdateSalesforce targetUpdateSalesforce, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateSalesforceValidateBeforeCall(targetUpdateSalesforce, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateSectigo
     * @param targetUpdateSectigo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSectigoCall(TargetUpdateSectigo targetUpdateSectigo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateSectigo;

        // create path and map variables
        String localVarPath = "/target-update-sectigo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateSectigoValidateBeforeCall(TargetUpdateSectigo targetUpdateSectigo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateSectigo' is set
        if (targetUpdateSectigo == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateSectigo' when calling targetUpdateSectigo(Async)");
        }

        return targetUpdateSectigoCall(targetUpdateSectigo, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateSectigo  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateSectigo(TargetUpdateSectigo targetUpdateSectigo) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateSectigoWithHttpInfo(targetUpdateSectigo);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateSectigo  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateSectigoWithHttpInfo(TargetUpdateSectigo targetUpdateSectigo) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateSectigoValidateBeforeCall(targetUpdateSectigo, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateSectigo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSectigoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSectigoAsync(TargetUpdateSectigo targetUpdateSectigo, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateSectigoValidateBeforeCall(targetUpdateSectigo, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateSsh
     * @param targetUpdateSsh  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSshCall(TargetUpdateSsh targetUpdateSsh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateSsh;

        // create path and map variables
        String localVarPath = "/target-update-ssh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateSshValidateBeforeCall(TargetUpdateSsh targetUpdateSsh, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateSsh' is set
        if (targetUpdateSsh == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateSsh' when calling targetUpdateSsh(Async)");
        }

        return targetUpdateSshCall(targetUpdateSsh, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateSsh  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateSsh(TargetUpdateSsh targetUpdateSsh) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateSshWithHttpInfo(targetUpdateSsh);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateSsh  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateSshWithHttpInfo(TargetUpdateSsh targetUpdateSsh) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateSshValidateBeforeCall(targetUpdateSsh, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateSsh  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateSshResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateSshAsync(TargetUpdateSsh targetUpdateSsh, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateSshValidateBeforeCall(targetUpdateSsh, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateWeb
     * @param targetUpdateWeb  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateWebCall(TargetUpdateWeb targetUpdateWeb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateWeb;

        // create path and map variables
        String localVarPath = "/target-update-web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateWebValidateBeforeCall(TargetUpdateWeb targetUpdateWeb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateWeb' is set
        if (targetUpdateWeb == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateWeb' when calling targetUpdateWeb(Async)");
        }

        return targetUpdateWebCall(targetUpdateWeb, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateWeb  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateWeb(TargetUpdateWeb targetUpdateWeb) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateWebWithHttpInfo(targetUpdateWeb);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateWeb  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateWebWithHttpInfo(TargetUpdateWeb targetUpdateWeb) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateWebValidateBeforeCall(targetUpdateWeb, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateWeb  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWebResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateWebAsync(TargetUpdateWeb targetUpdateWeb, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateWebValidateBeforeCall(targetUpdateWeb, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateWindows
     * @param targetUpdateWindows  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateWindowsCall(TargetUpdateWindows targetUpdateWindows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateWindows;

        // create path and map variables
        String localVarPath = "/target-update-windows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateWindowsValidateBeforeCall(TargetUpdateWindows targetUpdateWindows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateWindows' is set
        if (targetUpdateWindows == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateWindows' when calling targetUpdateWindows(Async)");
        }

        return targetUpdateWindowsCall(targetUpdateWindows, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateWindows  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateWindows(TargetUpdateWindows targetUpdateWindows) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateWindowsWithHttpInfo(targetUpdateWindows);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateWindows  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateWindowsWithHttpInfo(TargetUpdateWindows targetUpdateWindows) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateWindowsValidateBeforeCall(targetUpdateWindows, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateWindows  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateWindowsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateWindowsAsync(TargetUpdateWindows targetUpdateWindows, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateWindowsValidateBeforeCall(targetUpdateWindows, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for targetUpdateZeroSSL
     * @param targetUpdateZeroSSL  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateZeroSSLCall(TargetUpdateZeroSSL targetUpdateZeroSSL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetUpdateZeroSSL;

        // create path and map variables
        String localVarPath = "/target-update-zerossl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call targetUpdateZeroSSLValidateBeforeCall(TargetUpdateZeroSSL targetUpdateZeroSSL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'targetUpdateZeroSSL' is set
        if (targetUpdateZeroSSL == null) {
            throw new ApiException("Missing the required parameter 'targetUpdateZeroSSL' when calling targetUpdateZeroSSL(Async)");
        }

        return targetUpdateZeroSSLCall(targetUpdateZeroSSL, _callback);

    }

    /**
     * 
     * 
     * @param targetUpdateZeroSSL  (required)
     * @return TargetUpdateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TargetUpdateOutput targetUpdateZeroSSL(TargetUpdateZeroSSL targetUpdateZeroSSL) throws ApiException {
        ApiResponse<TargetUpdateOutput> localVarResp = targetUpdateZeroSSLWithHttpInfo(targetUpdateZeroSSL);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param targetUpdateZeroSSL  (required)
     * @return ApiResponse&lt;TargetUpdateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TargetUpdateOutput> targetUpdateZeroSSLWithHttpInfo(TargetUpdateZeroSSL targetUpdateZeroSSL) throws ApiException {
        okhttp3.Call localVarCall = targetUpdateZeroSSLValidateBeforeCall(targetUpdateZeroSSL, null);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param targetUpdateZeroSSL  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> targetUpdateZeroSSLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call targetUpdateZeroSSLAsync(TargetUpdateZeroSSL targetUpdateZeroSSL, final ApiCallback<TargetUpdateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = targetUpdateZeroSSLValidateBeforeCall(targetUpdateZeroSSL, _callback);
        Type localVarReturnType = new TypeToken<TargetUpdateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenize
     * @param tokenize  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeCall(Tokenize tokenize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenize;

        // create path and map variables
        String localVarPath = "/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenizeValidateBeforeCall(Tokenize tokenize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenize' is set
        if (tokenize == null) {
            throw new ApiException("Missing the required parameter 'tokenize' when calling tokenize(Async)");
        }

        return tokenizeCall(tokenize, _callback);

    }

    /**
     * 
     * 
     * @param tokenize  (required)
     * @return TokenizeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeOutput tokenize(Tokenize tokenize) throws ApiException {
        ApiResponse<TokenizeOutput> localVarResp = tokenizeWithHttpInfo(tokenize);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tokenize  (required)
     * @return ApiResponse&lt;TokenizeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeOutput> tokenizeWithHttpInfo(Tokenize tokenize) throws ApiException {
        okhttp3.Call localVarCall = tokenizeValidateBeforeCall(tokenize, null);
        Type localVarReturnType = new TypeToken<TokenizeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tokenize  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeAsync(Tokenize tokenize, final ApiCallback<TokenizeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenizeValidateBeforeCall(tokenize, _callback);
        Type localVarReturnType = new TypeToken<TokenizeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenizeBatch
     * @param batchTokenizationRequestLine  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeBatchCall(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchTokenizationRequestLine;

        // create path and map variables
        String localVarPath = "/tokenize-batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenizeBatchValidateBeforeCall(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchTokenizationRequestLine' is set
        if (batchTokenizationRequestLine == null) {
            throw new ApiException("Missing the required parameter 'batchTokenizationRequestLine' when calling tokenizeBatch(Async)");
        }

        return tokenizeBatchCall(batchTokenizationRequestLine, _callback);

    }

    /**
     * 
     * 
     * @param batchTokenizationRequestLine  (required)
     * @return TokenizeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeOutput tokenizeBatch(List<BatchTokenizationRequestLine> batchTokenizationRequestLine) throws ApiException {
        ApiResponse<TokenizeOutput> localVarResp = tokenizeBatchWithHttpInfo(batchTokenizationRequestLine);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param batchTokenizationRequestLine  (required)
     * @return ApiResponse&lt;TokenizeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeOutput> tokenizeBatchWithHttpInfo(List<BatchTokenizationRequestLine> batchTokenizationRequestLine) throws ApiException {
        okhttp3.Call localVarCall = tokenizeBatchValidateBeforeCall(batchTokenizationRequestLine, null);
        Type localVarReturnType = new TypeToken<TokenizeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param batchTokenizationRequestLine  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tokenizeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenizeBatchAsync(List<BatchTokenizationRequestLine> batchTokenizationRequestLine, final ApiCallback<TokenizeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenizeBatchValidateBeforeCall(batchTokenizationRequestLine, _callback);
        Type localVarReturnType = new TypeToken<TokenizeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidCreateChildToken
     * @param uidCreateChildToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidCreateChildTokenCall(UidCreateChildToken uidCreateChildToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uidCreateChildToken;

        // create path and map variables
        String localVarPath = "/uid-create-child-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidCreateChildTokenValidateBeforeCall(UidCreateChildToken uidCreateChildToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uidCreateChildToken' is set
        if (uidCreateChildToken == null) {
            throw new ApiException("Missing the required parameter 'uidCreateChildToken' when calling uidCreateChildToken(Async)");
        }

        return uidCreateChildTokenCall(uidCreateChildToken, _callback);

    }

    /**
     * 
     * 
     * @param uidCreateChildToken  (required)
     * @return UidCreateChildTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidCreateChildTokenOutput uidCreateChildToken(UidCreateChildToken uidCreateChildToken) throws ApiException {
        ApiResponse<UidCreateChildTokenOutput> localVarResp = uidCreateChildTokenWithHttpInfo(uidCreateChildToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uidCreateChildToken  (required)
     * @return ApiResponse&lt;UidCreateChildTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidCreateChildTokenOutput> uidCreateChildTokenWithHttpInfo(UidCreateChildToken uidCreateChildToken) throws ApiException {
        okhttp3.Call localVarCall = uidCreateChildTokenValidateBeforeCall(uidCreateChildToken, null);
        Type localVarReturnType = new TypeToken<UidCreateChildTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uidCreateChildToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidCreateChildTokenAsync(UidCreateChildToken uidCreateChildToken, final ApiCallback<UidCreateChildTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidCreateChildTokenValidateBeforeCall(uidCreateChildToken, _callback);
        Type localVarReturnType = new TypeToken<UidCreateChildTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidGenerateToken
     * @param uidGenerateToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidGenerateTokenCall(UidGenerateToken uidGenerateToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uidGenerateToken;

        // create path and map variables
        String localVarPath = "/uid-generate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidGenerateTokenValidateBeforeCall(UidGenerateToken uidGenerateToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uidGenerateToken' is set
        if (uidGenerateToken == null) {
            throw new ApiException("Missing the required parameter 'uidGenerateToken' when calling uidGenerateToken(Async)");
        }

        return uidGenerateTokenCall(uidGenerateToken, _callback);

    }

    /**
     * 
     * 
     * @param uidGenerateToken  (required)
     * @return UidGenerateTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidGenerateTokenOutput uidGenerateToken(UidGenerateToken uidGenerateToken) throws ApiException {
        ApiResponse<UidGenerateTokenOutput> localVarResp = uidGenerateTokenWithHttpInfo(uidGenerateToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uidGenerateToken  (required)
     * @return ApiResponse&lt;UidGenerateTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidGenerateTokenOutput> uidGenerateTokenWithHttpInfo(UidGenerateToken uidGenerateToken) throws ApiException {
        okhttp3.Call localVarCall = uidGenerateTokenValidateBeforeCall(uidGenerateToken, null);
        Type localVarReturnType = new TypeToken<UidGenerateTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uidGenerateToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidGenerateTokenAsync(UidGenerateToken uidGenerateToken, final ApiCallback<UidGenerateTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidGenerateTokenValidateBeforeCall(uidGenerateToken, _callback);
        Type localVarReturnType = new TypeToken<UidGenerateTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidListChildren
     * @param uidListChildren  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidListChildrenCall(UidListChildren uidListChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uidListChildren;

        // create path and map variables
        String localVarPath = "/uid-list-children";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidListChildrenValidateBeforeCall(UidListChildren uidListChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uidListChildren' is set
        if (uidListChildren == null) {
            throw new ApiException("Missing the required parameter 'uidListChildren' when calling uidListChildren(Async)");
        }

        return uidListChildrenCall(uidListChildren, _callback);

    }

    /**
     * 
     * 
     * @param uidListChildren  (required)
     * @return UniversalIdentityDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UniversalIdentityDetails uidListChildren(UidListChildren uidListChildren) throws ApiException {
        ApiResponse<UniversalIdentityDetails> localVarResp = uidListChildrenWithHttpInfo(uidListChildren);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uidListChildren  (required)
     * @return ApiResponse&lt;UniversalIdentityDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UniversalIdentityDetails> uidListChildrenWithHttpInfo(UidListChildren uidListChildren) throws ApiException {
        okhttp3.Call localVarCall = uidListChildrenValidateBeforeCall(uidListChildren, null);
        Type localVarReturnType = new TypeToken<UniversalIdentityDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uidListChildren  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidListChildrenAsync(UidListChildren uidListChildren, final ApiCallback<UniversalIdentityDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidListChildrenValidateBeforeCall(uidListChildren, _callback);
        Type localVarReturnType = new TypeToken<UniversalIdentityDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidRevokeToken
     * @param uidRevokeToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRevokeTokenCall(UidRevokeToken uidRevokeToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uidRevokeToken;

        // create path and map variables
        String localVarPath = "/uid-revoke-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidRevokeTokenValidateBeforeCall(UidRevokeToken uidRevokeToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uidRevokeToken' is set
        if (uidRevokeToken == null) {
            throw new ApiException("Missing the required parameter 'uidRevokeToken' when calling uidRevokeToken(Async)");
        }

        return uidRevokeTokenCall(uidRevokeToken, _callback);

    }

    /**
     * 
     * 
     * @param uidRevokeToken  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object uidRevokeToken(UidRevokeToken uidRevokeToken) throws ApiException {
        ApiResponse<Object> localVarResp = uidRevokeTokenWithHttpInfo(uidRevokeToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uidRevokeToken  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> uidRevokeTokenWithHttpInfo(UidRevokeToken uidRevokeToken) throws ApiException {
        okhttp3.Call localVarCall = uidRevokeTokenValidateBeforeCall(uidRevokeToken, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uidRevokeToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRevokeTokenAsync(UidRevokeToken uidRevokeToken, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidRevokeTokenValidateBeforeCall(uidRevokeToken, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidRotateToken
     * @param uidRotateToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRotateTokenCall(UidRotateToken uidRotateToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uidRotateToken;

        // create path and map variables
        String localVarPath = "/uid-rotate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidRotateTokenValidateBeforeCall(UidRotateToken uidRotateToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uidRotateToken' is set
        if (uidRotateToken == null) {
            throw new ApiException("Missing the required parameter 'uidRotateToken' when calling uidRotateToken(Async)");
        }

        return uidRotateTokenCall(uidRotateToken, _callback);

    }

    /**
     * 
     * 
     * @param uidRotateToken  (required)
     * @return UidRotateTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidRotateTokenOutput uidRotateToken(UidRotateToken uidRotateToken) throws ApiException {
        ApiResponse<UidRotateTokenOutput> localVarResp = uidRotateTokenWithHttpInfo(uidRotateToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uidRotateToken  (required)
     * @return ApiResponse&lt;UidRotateTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidRotateTokenOutput> uidRotateTokenWithHttpInfo(UidRotateToken uidRotateToken) throws ApiException {
        okhttp3.Call localVarCall = uidRotateTokenValidateBeforeCall(uidRotateToken, null);
        Type localVarReturnType = new TypeToken<UidRotateTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uidRotateToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRotateTokenAsync(UidRotateToken uidRotateToken, final ApiCallback<UidRotateTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidRotateTokenValidateBeforeCall(uidRotateToken, _callback);
        Type localVarReturnType = new TypeToken<UidRotateTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unwrapToken
     * @param unwrapToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unwrapTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unwrapTokenCall(UnwrapToken unwrapToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unwrapToken;

        // create path and map variables
        String localVarPath = "/unwrap-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unwrapTokenValidateBeforeCall(UnwrapToken unwrapToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unwrapToken' is set
        if (unwrapToken == null) {
            throw new ApiException("Missing the required parameter 'unwrapToken' when calling unwrapToken(Async)");
        }

        return unwrapTokenCall(unwrapToken, _callback);

    }

    /**
     * 
     * 
     * @param unwrapToken  (required)
     * @return UnwrapTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unwrapTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UnwrapTokenOutput unwrapToken(UnwrapToken unwrapToken) throws ApiException {
        ApiResponse<UnwrapTokenOutput> localVarResp = unwrapTokenWithHttpInfo(unwrapToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param unwrapToken  (required)
     * @return ApiResponse&lt;UnwrapTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unwrapTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnwrapTokenOutput> unwrapTokenWithHttpInfo(UnwrapToken unwrapToken) throws ApiException {
        okhttp3.Call localVarCall = unwrapTokenValidateBeforeCall(unwrapToken, null);
        Type localVarReturnType = new TypeToken<UnwrapTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param unwrapToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unwrapTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unwrapTokenAsync(UnwrapToken unwrapToken, final ApiCallback<UnwrapTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = unwrapTokenValidateBeforeCall(unwrapToken, _callback);
        Type localVarReturnType = new TypeToken<UnwrapTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAWSTarget
     * @param updateAWSTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetCall(UpdateAWSTarget updateAWSTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAWSTarget;

        // create path and map variables
        String localVarPath = "/update-aws-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAWSTargetValidateBeforeCall(UpdateAWSTarget updateAWSTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAWSTarget' is set
        if (updateAWSTarget == null) {
            throw new ApiException("Missing the required parameter 'updateAWSTarget' when calling updateAWSTarget(Async)");
        }

        return updateAWSTargetCall(updateAWSTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateAWSTarget  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAWSTarget(UpdateAWSTarget updateAWSTarget) throws ApiException {
        ApiResponse<Object> localVarResp = updateAWSTargetWithHttpInfo(updateAWSTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAWSTarget  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAWSTargetWithHttpInfo(UpdateAWSTarget updateAWSTarget) throws ApiException {
        okhttp3.Call localVarCall = updateAWSTargetValidateBeforeCall(updateAWSTarget, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAWSTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetAsync(UpdateAWSTarget updateAWSTarget, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAWSTargetValidateBeforeCall(updateAWSTarget, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAWSTargetDetails
     * @param updateAWSTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetDetailsCall(UpdateAWSTargetDetails updateAWSTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAWSTargetDetails;

        // create path and map variables
        String localVarPath = "/update-aws-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAWSTargetDetailsValidateBeforeCall(UpdateAWSTargetDetails updateAWSTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAWSTargetDetails' is set
        if (updateAWSTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateAWSTargetDetails' when calling updateAWSTargetDetails(Async)");
        }

        return updateAWSTargetDetailsCall(updateAWSTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateAWSTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateAWSTargetDetails(UpdateAWSTargetDetails updateAWSTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateAWSTargetDetailsWithHttpInfo(updateAWSTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAWSTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateAWSTargetDetailsWithHttpInfo(UpdateAWSTargetDetails updateAWSTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateAWSTargetDetailsValidateBeforeCall(updateAWSTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAWSTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetDetailsAsync(UpdateAWSTargetDetails updateAWSTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAWSTargetDetailsValidateBeforeCall(updateAWSTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountSettings
     * @param updateAccountSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSettingsCall(UpdateAccountSettings updateAccountSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountSettings;

        // create path and map variables
        String localVarPath = "/update-account-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountSettingsValidateBeforeCall(UpdateAccountSettings updateAccountSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAccountSettings' is set
        if (updateAccountSettings == null) {
            throw new ApiException("Missing the required parameter 'updateAccountSettings' when calling updateAccountSettings(Async)");
        }

        return updateAccountSettingsCall(updateAccountSettings, _callback);

    }

    /**
     * 
     * 
     * @param updateAccountSettings  (required)
     * @return UpdateAccountSettingsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountSettingsOutput updateAccountSettings(UpdateAccountSettings updateAccountSettings) throws ApiException {
        ApiResponse<UpdateAccountSettingsOutput> localVarResp = updateAccountSettingsWithHttpInfo(updateAccountSettings);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAccountSettings  (required)
     * @return ApiResponse&lt;UpdateAccountSettingsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAccountSettingsOutput> updateAccountSettingsWithHttpInfo(UpdateAccountSettings updateAccountSettings) throws ApiException {
        okhttp3.Call localVarCall = updateAccountSettingsValidateBeforeCall(updateAccountSettings, null);
        Type localVarReturnType = new TypeToken<UpdateAccountSettingsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAccountSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAccountSettingsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSettingsAsync(UpdateAccountSettings updateAccountSettings, final ApiCallback<UpdateAccountSettingsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountSettingsValidateBeforeCall(updateAccountSettings, _callback);
        Type localVarReturnType = new TypeToken<UpdateAccountSettingsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateArtifactoryTarget
     * @param updateArtifactoryTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactoryTargetCall(UpdateArtifactoryTarget updateArtifactoryTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateArtifactoryTarget;

        // create path and map variables
        String localVarPath = "/update-artifactory-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArtifactoryTargetValidateBeforeCall(UpdateArtifactoryTarget updateArtifactoryTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateArtifactoryTarget' is set
        if (updateArtifactoryTarget == null) {
            throw new ApiException("Missing the required parameter 'updateArtifactoryTarget' when calling updateArtifactoryTarget(Async)");
        }

        return updateArtifactoryTargetCall(updateArtifactoryTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateArtifactoryTarget  (required)
     * @return UpdateArtifactoryTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateArtifactoryTargetOutput updateArtifactoryTarget(UpdateArtifactoryTarget updateArtifactoryTarget) throws ApiException {
        ApiResponse<UpdateArtifactoryTargetOutput> localVarResp = updateArtifactoryTargetWithHttpInfo(updateArtifactoryTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateArtifactoryTarget  (required)
     * @return ApiResponse&lt;UpdateArtifactoryTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateArtifactoryTargetOutput> updateArtifactoryTargetWithHttpInfo(UpdateArtifactoryTarget updateArtifactoryTarget) throws ApiException {
        okhttp3.Call localVarCall = updateArtifactoryTargetValidateBeforeCall(updateArtifactoryTarget, null);
        Type localVarReturnType = new TypeToken<UpdateArtifactoryTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateArtifactoryTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateArtifactoryTargetAsync(UpdateArtifactoryTarget updateArtifactoryTarget, final ApiCallback<UpdateArtifactoryTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArtifactoryTargetValidateBeforeCall(updateArtifactoryTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateArtifactoryTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssoc
     * @param updateAssoc  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssocCall(UpdateAssoc updateAssoc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAssoc;

        // create path and map variables
        String localVarPath = "/update-assoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssocValidateBeforeCall(UpdateAssoc updateAssoc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAssoc' is set
        if (updateAssoc == null) {
            throw new ApiException("Missing the required parameter 'updateAssoc' when calling updateAssoc(Async)");
        }

        return updateAssocCall(updateAssoc, _callback);

    }

    /**
     * 
     * 
     * @param updateAssoc  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAssoc(UpdateAssoc updateAssoc) throws ApiException {
        ApiResponse<Object> localVarResp = updateAssocWithHttpInfo(updateAssoc);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAssoc  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAssocWithHttpInfo(UpdateAssoc updateAssoc) throws ApiException {
        okhttp3.Call localVarCall = updateAssocValidateBeforeCall(updateAssoc, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAssoc  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssocAsync(UpdateAssoc updateAssoc, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssocValidateBeforeCall(updateAssoc, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethod
     * @param updateAuthMethod  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodCall(UpdateAuthMethod updateAuthMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethod;

        // create path and map variables
        String localVarPath = "/update-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodValidateBeforeCall(UpdateAuthMethod updateAuthMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethod' is set
        if (updateAuthMethod == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethod' when calling updateAuthMethod(Async)");
        }

        return updateAuthMethodCall(updateAuthMethod, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethod  (required)
     * @return UpdateAuthMethodOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthMethodOutput updateAuthMethod(UpdateAuthMethod updateAuthMethod) throws ApiException {
        ApiResponse<UpdateAuthMethodOutput> localVarResp = updateAuthMethodWithHttpInfo(updateAuthMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethod  (required)
     * @return ApiResponse&lt;UpdateAuthMethodOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAuthMethodOutput> updateAuthMethodWithHttpInfo(UpdateAuthMethod updateAuthMethod) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodValidateBeforeCall(updateAuthMethod, null);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethod  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodAsync(UpdateAuthMethod updateAuthMethod, final ApiCallback<UpdateAuthMethodOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodValidateBeforeCall(updateAuthMethod, _callback);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodAWSIAM
     * @param updateAuthMethodAWSIAM  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodAWSIAMCall(UpdateAuthMethodAWSIAM updateAuthMethodAWSIAM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodAWSIAM;

        // create path and map variables
        String localVarPath = "/update-auth-method-aws-iam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodAWSIAMValidateBeforeCall(UpdateAuthMethodAWSIAM updateAuthMethodAWSIAM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodAWSIAM' is set
        if (updateAuthMethodAWSIAM == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodAWSIAM' when calling updateAuthMethodAWSIAM(Async)");
        }

        return updateAuthMethodAWSIAMCall(updateAuthMethodAWSIAM, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodAWSIAM  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodAWSIAM(UpdateAuthMethodAWSIAM updateAuthMethodAWSIAM) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodAWSIAMWithHttpInfo(updateAuthMethodAWSIAM);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodAWSIAM  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodAWSIAMWithHttpInfo(UpdateAuthMethodAWSIAM updateAuthMethodAWSIAM) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodAWSIAMValidateBeforeCall(updateAuthMethodAWSIAM, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodAWSIAM  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodAWSIAMAsync(UpdateAuthMethodAWSIAM updateAuthMethodAWSIAM, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodAWSIAMValidateBeforeCall(updateAuthMethodAWSIAM, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodAzureAD
     * @param updateAuthMethodAzureAD  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodAzureADCall(UpdateAuthMethodAzureAD updateAuthMethodAzureAD, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodAzureAD;

        // create path and map variables
        String localVarPath = "/update-auth-method-azure-ad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodAzureADValidateBeforeCall(UpdateAuthMethodAzureAD updateAuthMethodAzureAD, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodAzureAD' is set
        if (updateAuthMethodAzureAD == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodAzureAD' when calling updateAuthMethodAzureAD(Async)");
        }

        return updateAuthMethodAzureADCall(updateAuthMethodAzureAD, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodAzureAD  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodAzureAD(UpdateAuthMethodAzureAD updateAuthMethodAzureAD) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodAzureADWithHttpInfo(updateAuthMethodAzureAD);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodAzureAD  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodAzureADWithHttpInfo(UpdateAuthMethodAzureAD updateAuthMethodAzureAD) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodAzureADValidateBeforeCall(updateAuthMethodAzureAD, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodAzureAD  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodAzureADAsync(UpdateAuthMethodAzureAD updateAuthMethodAzureAD, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodAzureADValidateBeforeCall(updateAuthMethodAzureAD, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodCert
     * @param updateAuthMethodCert  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodCertCall(UpdateAuthMethodCert updateAuthMethodCert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodCert;

        // create path and map variables
        String localVarPath = "/update-auth-method-cert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodCertValidateBeforeCall(UpdateAuthMethodCert updateAuthMethodCert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodCert' is set
        if (updateAuthMethodCert == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodCert' when calling updateAuthMethodCert(Async)");
        }

        return updateAuthMethodCertCall(updateAuthMethodCert, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodCert  (required)
     * @return UpdateAuthMethodCertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthMethodCertOutput updateAuthMethodCert(UpdateAuthMethodCert updateAuthMethodCert) throws ApiException {
        ApiResponse<UpdateAuthMethodCertOutput> localVarResp = updateAuthMethodCertWithHttpInfo(updateAuthMethodCert);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodCert  (required)
     * @return ApiResponse&lt;UpdateAuthMethodCertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAuthMethodCertOutput> updateAuthMethodCertWithHttpInfo(UpdateAuthMethodCert updateAuthMethodCert) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodCertValidateBeforeCall(updateAuthMethodCert, null);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodCertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodCert  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodCertResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodCertAsync(UpdateAuthMethodCert updateAuthMethodCert, final ApiCallback<UpdateAuthMethodCertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodCertValidateBeforeCall(updateAuthMethodCert, _callback);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodCertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodGCP
     * @param updateAuthMethodGCP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodGCPCall(UpdateAuthMethodGCP updateAuthMethodGCP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodGCP;

        // create path and map variables
        String localVarPath = "/update-auth-method-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodGCPValidateBeforeCall(UpdateAuthMethodGCP updateAuthMethodGCP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodGCP' is set
        if (updateAuthMethodGCP == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodGCP' when calling updateAuthMethodGCP(Async)");
        }

        return updateAuthMethodGCPCall(updateAuthMethodGCP, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodGCP  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodGCP(UpdateAuthMethodGCP updateAuthMethodGCP) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodGCPWithHttpInfo(updateAuthMethodGCP);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodGCP  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodGCPWithHttpInfo(UpdateAuthMethodGCP updateAuthMethodGCP) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodGCPValidateBeforeCall(updateAuthMethodGCP, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodGCP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodGCPAsync(UpdateAuthMethodGCP updateAuthMethodGCP, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodGCPValidateBeforeCall(updateAuthMethodGCP, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodK8S
     * @param updateAuthMethodK8S  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodK8SCall(UpdateAuthMethodK8S updateAuthMethodK8S, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodK8S;

        // create path and map variables
        String localVarPath = "/update-auth-method-k8s";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodK8SValidateBeforeCall(UpdateAuthMethodK8S updateAuthMethodK8S, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodK8S' is set
        if (updateAuthMethodK8S == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodK8S' when calling updateAuthMethodK8S(Async)");
        }

        return updateAuthMethodK8SCall(updateAuthMethodK8S, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodK8S  (required)
     * @return UpdateAuthMethodK8SOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthMethodK8SOutput updateAuthMethodK8S(UpdateAuthMethodK8S updateAuthMethodK8S) throws ApiException {
        ApiResponse<UpdateAuthMethodK8SOutput> localVarResp = updateAuthMethodK8SWithHttpInfo(updateAuthMethodK8S);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodK8S  (required)
     * @return ApiResponse&lt;UpdateAuthMethodK8SOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAuthMethodK8SOutput> updateAuthMethodK8SWithHttpInfo(UpdateAuthMethodK8S updateAuthMethodK8S) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodK8SValidateBeforeCall(updateAuthMethodK8S, null);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodK8SOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodK8S  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodK8SAsync(UpdateAuthMethodK8S updateAuthMethodK8S, final ApiCallback<UpdateAuthMethodK8SOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodK8SValidateBeforeCall(updateAuthMethodK8S, _callback);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodK8SOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodLDAP
     * @param updateAuthMethodLDAP  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodLDAPCall(UpdateAuthMethodLDAP updateAuthMethodLDAP, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodLDAP;

        // create path and map variables
        String localVarPath = "/update-auth-method-ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodLDAPValidateBeforeCall(UpdateAuthMethodLDAP updateAuthMethodLDAP, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodLDAP' is set
        if (updateAuthMethodLDAP == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodLDAP' when calling updateAuthMethodLDAP(Async)");
        }

        return updateAuthMethodLDAPCall(updateAuthMethodLDAP, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodLDAP  (required)
     * @return UpdateAuthMethodLDAPOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthMethodLDAPOutput updateAuthMethodLDAP(UpdateAuthMethodLDAP updateAuthMethodLDAP) throws ApiException {
        ApiResponse<UpdateAuthMethodLDAPOutput> localVarResp = updateAuthMethodLDAPWithHttpInfo(updateAuthMethodLDAP);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodLDAP  (required)
     * @return ApiResponse&lt;UpdateAuthMethodLDAPOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAuthMethodLDAPOutput> updateAuthMethodLDAPWithHttpInfo(UpdateAuthMethodLDAP updateAuthMethodLDAP) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodLDAPValidateBeforeCall(updateAuthMethodLDAP, null);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodLDAPOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodLDAP  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodLDAPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodLDAPAsync(UpdateAuthMethodLDAP updateAuthMethodLDAP, final ApiCallback<UpdateAuthMethodLDAPOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodLDAPValidateBeforeCall(updateAuthMethodLDAP, _callback);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodLDAPOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodOAuth2
     * @param updateAuthMethodOAuth2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOAuth2Call(UpdateAuthMethodOAuth2 updateAuthMethodOAuth2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodOAuth2;

        // create path and map variables
        String localVarPath = "/update-auth-method-oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodOAuth2ValidateBeforeCall(UpdateAuthMethodOAuth2 updateAuthMethodOAuth2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodOAuth2' is set
        if (updateAuthMethodOAuth2 == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodOAuth2' when calling updateAuthMethodOAuth2(Async)");
        }

        return updateAuthMethodOAuth2Call(updateAuthMethodOAuth2, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodOAuth2  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodOAuth2(UpdateAuthMethodOAuth2 updateAuthMethodOAuth2) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodOAuth2WithHttpInfo(updateAuthMethodOAuth2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodOAuth2  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodOAuth2WithHttpInfo(UpdateAuthMethodOAuth2 updateAuthMethodOAuth2) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodOAuth2ValidateBeforeCall(updateAuthMethodOAuth2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodOAuth2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOAuth2Async(UpdateAuthMethodOAuth2 updateAuthMethodOAuth2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodOAuth2ValidateBeforeCall(updateAuthMethodOAuth2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodOCI
     * @param updateAuthMethodOCI  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOCICall(UpdateAuthMethodOCI updateAuthMethodOCI, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodOCI;

        // create path and map variables
        String localVarPath = "/update-auth-method-oci";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodOCIValidateBeforeCall(UpdateAuthMethodOCI updateAuthMethodOCI, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodOCI' is set
        if (updateAuthMethodOCI == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodOCI' when calling updateAuthMethodOCI(Async)");
        }

        return updateAuthMethodOCICall(updateAuthMethodOCI, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodOCI  (required)
     * @return UpdateAuthMethodOCIOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAuthMethodOCIOutput updateAuthMethodOCI(UpdateAuthMethodOCI updateAuthMethodOCI) throws ApiException {
        ApiResponse<UpdateAuthMethodOCIOutput> localVarResp = updateAuthMethodOCIWithHttpInfo(updateAuthMethodOCI);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodOCI  (required)
     * @return ApiResponse&lt;UpdateAuthMethodOCIOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAuthMethodOCIOutput> updateAuthMethodOCIWithHttpInfo(UpdateAuthMethodOCI updateAuthMethodOCI) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodOCIValidateBeforeCall(updateAuthMethodOCI, null);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodOCIOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodOCI  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOCIResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOCIAsync(UpdateAuthMethodOCI updateAuthMethodOCI, final ApiCallback<UpdateAuthMethodOCIOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodOCIValidateBeforeCall(updateAuthMethodOCI, _callback);
        Type localVarReturnType = new TypeToken<UpdateAuthMethodOCIOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodOIDC
     * @param updateAuthMethodOIDC  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOIDCCall(UpdateAuthMethodOIDC updateAuthMethodOIDC, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodOIDC;

        // create path and map variables
        String localVarPath = "/update-auth-method-oidc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodOIDCValidateBeforeCall(UpdateAuthMethodOIDC updateAuthMethodOIDC, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodOIDC' is set
        if (updateAuthMethodOIDC == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodOIDC' when calling updateAuthMethodOIDC(Async)");
        }

        return updateAuthMethodOIDCCall(updateAuthMethodOIDC, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodOIDC  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodOIDC(UpdateAuthMethodOIDC updateAuthMethodOIDC) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodOIDCWithHttpInfo(updateAuthMethodOIDC);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodOIDC  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodOIDCWithHttpInfo(UpdateAuthMethodOIDC updateAuthMethodOIDC) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodOIDCValidateBeforeCall(updateAuthMethodOIDC, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodOIDC  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodOIDCResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodOIDCAsync(UpdateAuthMethodOIDC updateAuthMethodOIDC, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodOIDCValidateBeforeCall(updateAuthMethodOIDC, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodSAML
     * @param updateAuthMethodSAML  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodSAMLCall(UpdateAuthMethodSAML updateAuthMethodSAML, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodSAML;

        // create path and map variables
        String localVarPath = "/update-auth-method-saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodSAMLValidateBeforeCall(UpdateAuthMethodSAML updateAuthMethodSAML, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodSAML' is set
        if (updateAuthMethodSAML == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodSAML' when calling updateAuthMethodSAML(Async)");
        }

        return updateAuthMethodSAMLCall(updateAuthMethodSAML, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodSAML  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodSAML(UpdateAuthMethodSAML updateAuthMethodSAML) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodSAMLWithHttpInfo(updateAuthMethodSAML);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodSAML  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodSAMLWithHttpInfo(UpdateAuthMethodSAML updateAuthMethodSAML) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodSAMLValidateBeforeCall(updateAuthMethodSAML, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodSAML  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodSAMLAsync(UpdateAuthMethodSAML updateAuthMethodSAML, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodSAMLValidateBeforeCall(updateAuthMethodSAML, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthMethodUniversalIdentity
     * @param updateAuthMethodUniversalIdentity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodUniversalIdentityCall(UpdateAuthMethodUniversalIdentity updateAuthMethodUniversalIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthMethodUniversalIdentity;

        // create path and map variables
        String localVarPath = "/update-auth-method-universal-identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthMethodUniversalIdentityValidateBeforeCall(UpdateAuthMethodUniversalIdentity updateAuthMethodUniversalIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAuthMethodUniversalIdentity' is set
        if (updateAuthMethodUniversalIdentity == null) {
            throw new ApiException("Missing the required parameter 'updateAuthMethodUniversalIdentity' when calling updateAuthMethodUniversalIdentity(Async)");
        }

        return updateAuthMethodUniversalIdentityCall(updateAuthMethodUniversalIdentity, _callback);

    }

    /**
     * 
     * 
     * @param updateAuthMethodUniversalIdentity  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthMethodUniversalIdentity(UpdateAuthMethodUniversalIdentity updateAuthMethodUniversalIdentity) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthMethodUniversalIdentityWithHttpInfo(updateAuthMethodUniversalIdentity);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAuthMethodUniversalIdentity  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthMethodUniversalIdentityWithHttpInfo(UpdateAuthMethodUniversalIdentity updateAuthMethodUniversalIdentity) throws ApiException {
        okhttp3.Call localVarCall = updateAuthMethodUniversalIdentityValidateBeforeCall(updateAuthMethodUniversalIdentity, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAuthMethodUniversalIdentity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthMethodUniversalIdentityAsync(UpdateAuthMethodUniversalIdentity updateAuthMethodUniversalIdentity, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthMethodUniversalIdentityValidateBeforeCall(updateAuthMethodUniversalIdentity, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAzureTarget
     * @param updateAzureTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAzureTargetCall(UpdateAzureTarget updateAzureTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAzureTarget;

        // create path and map variables
        String localVarPath = "/update-azure-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAzureTargetValidateBeforeCall(UpdateAzureTarget updateAzureTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateAzureTarget' is set
        if (updateAzureTarget == null) {
            throw new ApiException("Missing the required parameter 'updateAzureTarget' when calling updateAzureTarget(Async)");
        }

        return updateAzureTargetCall(updateAzureTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateAzureTarget  (required)
     * @return UpdateAzureTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAzureTargetOutput updateAzureTarget(UpdateAzureTarget updateAzureTarget) throws ApiException {
        ApiResponse<UpdateAzureTargetOutput> localVarResp = updateAzureTargetWithHttpInfo(updateAzureTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateAzureTarget  (required)
     * @return ApiResponse&lt;UpdateAzureTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAzureTargetOutput> updateAzureTargetWithHttpInfo(UpdateAzureTarget updateAzureTarget) throws ApiException {
        okhttp3.Call localVarCall = updateAzureTargetValidateBeforeCall(updateAzureTarget, null);
        Type localVarReturnType = new TypeToken<UpdateAzureTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateAzureTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAzureTargetAsync(UpdateAzureTarget updateAzureTarget, final ApiCallback<UpdateAzureTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAzureTargetValidateBeforeCall(updateAzureTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateAzureTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCertificateValue
     * @param updateCertificateValue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCertificateValueCall(UpdateCertificateValue updateCertificateValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCertificateValue;

        // create path and map variables
        String localVarPath = "/update-certificate-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCertificateValueValidateBeforeCall(UpdateCertificateValue updateCertificateValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateCertificateValue' is set
        if (updateCertificateValue == null) {
            throw new ApiException("Missing the required parameter 'updateCertificateValue' when calling updateCertificateValue(Async)");
        }

        return updateCertificateValueCall(updateCertificateValue, _callback);

    }

    /**
     * 
     * 
     * @param updateCertificateValue  (required)
     * @return UpdateCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCertificateOutput updateCertificateValue(UpdateCertificateValue updateCertificateValue) throws ApiException {
        ApiResponse<UpdateCertificateOutput> localVarResp = updateCertificateValueWithHttpInfo(updateCertificateValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateCertificateValue  (required)
     * @return ApiResponse&lt;UpdateCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCertificateOutput> updateCertificateValueWithHttpInfo(UpdateCertificateValue updateCertificateValue) throws ApiException {
        okhttp3.Call localVarCall = updateCertificateValueValidateBeforeCall(updateCertificateValue, null);
        Type localVarReturnType = new TypeToken<UpdateCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateCertificateValue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCertificateValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCertificateValueAsync(UpdateCertificateValue updateCertificateValue, final ApiCallback<UpdateCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCertificateValueValidateBeforeCall(updateCertificateValue, _callback);
        Type localVarReturnType = new TypeToken<UpdateCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClassicKeyCertificate
     * @param updateClassicKeyCertificate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UpdateClassicKeyCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassicKeyCertificateCall(UpdateClassicKeyCertificate updateClassicKeyCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClassicKeyCertificate;

        // create path and map variables
        String localVarPath = "/update-classic-key-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClassicKeyCertificateValidateBeforeCall(UpdateClassicKeyCertificate updateClassicKeyCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateClassicKeyCertificate' is set
        if (updateClassicKeyCertificate == null) {
            throw new ApiException("Missing the required parameter 'updateClassicKeyCertificate' when calling updateClassicKeyCertificate(Async)");
        }

        return updateClassicKeyCertificateCall(updateClassicKeyCertificate, _callback);

    }

    /**
     * 
     * 
     * @param updateClassicKeyCertificate  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UpdateClassicKeyCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateClassicKeyCertificate(UpdateClassicKeyCertificate updateClassicKeyCertificate) throws ApiException {
        ApiResponse<Object> localVarResp = updateClassicKeyCertificateWithHttpInfo(updateClassicKeyCertificate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateClassicKeyCertificate  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UpdateClassicKeyCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateClassicKeyCertificateWithHttpInfo(UpdateClassicKeyCertificate updateClassicKeyCertificate) throws ApiException {
        okhttp3.Call localVarCall = updateClassicKeyCertificateValidateBeforeCall(updateClassicKeyCertificate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateClassicKeyCertificate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UpdateClassicKeyCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClassicKeyCertificateAsync(UpdateClassicKeyCertificate updateClassicKeyCertificate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClassicKeyCertificateValidateBeforeCall(updateClassicKeyCertificate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDBTarget
     * @param updateDBTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetCall(UpdateDBTarget updateDBTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDBTarget;

        // create path and map variables
        String localVarPath = "/update-db-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDBTargetValidateBeforeCall(UpdateDBTarget updateDBTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateDBTarget' is set
        if (updateDBTarget == null) {
            throw new ApiException("Missing the required parameter 'updateDBTarget' when calling updateDBTarget(Async)");
        }

        return updateDBTargetCall(updateDBTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateDBTarget  (required)
     * @return UpdateDBTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDBTargetOutput updateDBTarget(UpdateDBTarget updateDBTarget) throws ApiException {
        ApiResponse<UpdateDBTargetOutput> localVarResp = updateDBTargetWithHttpInfo(updateDBTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateDBTarget  (required)
     * @return ApiResponse&lt;UpdateDBTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDBTargetOutput> updateDBTargetWithHttpInfo(UpdateDBTarget updateDBTarget) throws ApiException {
        okhttp3.Call localVarCall = updateDBTargetValidateBeforeCall(updateDBTarget, null);
        Type localVarReturnType = new TypeToken<UpdateDBTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateDBTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetAsync(UpdateDBTarget updateDBTarget, final ApiCallback<UpdateDBTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDBTargetValidateBeforeCall(updateDBTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateDBTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDBTargetDetails
     * @param updateDBTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetDetailsCall(UpdateDBTargetDetails updateDBTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDBTargetDetails;

        // create path and map variables
        String localVarPath = "/update-db-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDBTargetDetailsValidateBeforeCall(UpdateDBTargetDetails updateDBTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateDBTargetDetails' is set
        if (updateDBTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateDBTargetDetails' when calling updateDBTargetDetails(Async)");
        }

        return updateDBTargetDetailsCall(updateDBTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateDBTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateDBTargetDetails(UpdateDBTargetDetails updateDBTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateDBTargetDetailsWithHttpInfo(updateDBTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateDBTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateDBTargetDetailsWithHttpInfo(UpdateDBTargetDetails updateDBTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateDBTargetDetailsValidateBeforeCall(updateDBTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateDBTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetDetailsAsync(UpdateDBTargetDetails updateDBTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDBTargetDetailsValidateBeforeCall(updateDBTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDockerhubTarget
     * @param updateDockerhubTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDockerhubTargetCall(UpdateDockerhubTarget updateDockerhubTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDockerhubTarget;

        // create path and map variables
        String localVarPath = "/update-dockerhub-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDockerhubTargetValidateBeforeCall(UpdateDockerhubTarget updateDockerhubTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateDockerhubTarget' is set
        if (updateDockerhubTarget == null) {
            throw new ApiException("Missing the required parameter 'updateDockerhubTarget' when calling updateDockerhubTarget(Async)");
        }

        return updateDockerhubTargetCall(updateDockerhubTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateDockerhubTarget  (required)
     * @return UpdateDockerhubTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDockerhubTargetOutput updateDockerhubTarget(UpdateDockerhubTarget updateDockerhubTarget) throws ApiException {
        ApiResponse<UpdateDockerhubTargetOutput> localVarResp = updateDockerhubTargetWithHttpInfo(updateDockerhubTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateDockerhubTarget  (required)
     * @return ApiResponse&lt;UpdateDockerhubTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDockerhubTargetOutput> updateDockerhubTargetWithHttpInfo(UpdateDockerhubTarget updateDockerhubTarget) throws ApiException {
        okhttp3.Call localVarCall = updateDockerhubTargetValidateBeforeCall(updateDockerhubTarget, null);
        Type localVarReturnType = new TypeToken<UpdateDockerhubTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateDockerhubTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDockerhubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDockerhubTargetAsync(UpdateDockerhubTarget updateDockerhubTarget, final ApiCallback<UpdateDockerhubTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDockerhubTargetValidateBeforeCall(updateDockerhubTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateDockerhubTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEKSTarget
     * @param updateEKSTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEKSTargetCall(UpdateEKSTarget updateEKSTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEKSTarget;

        // create path and map variables
        String localVarPath = "/update-eks-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEKSTargetValidateBeforeCall(UpdateEKSTarget updateEKSTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateEKSTarget' is set
        if (updateEKSTarget == null) {
            throw new ApiException("Missing the required parameter 'updateEKSTarget' when calling updateEKSTarget(Async)");
        }

        return updateEKSTargetCall(updateEKSTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateEKSTarget  (required)
     * @return UpdateEKSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEKSTargetOutput updateEKSTarget(UpdateEKSTarget updateEKSTarget) throws ApiException {
        ApiResponse<UpdateEKSTargetOutput> localVarResp = updateEKSTargetWithHttpInfo(updateEKSTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateEKSTarget  (required)
     * @return ApiResponse&lt;UpdateEKSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateEKSTargetOutput> updateEKSTargetWithHttpInfo(UpdateEKSTarget updateEKSTarget) throws ApiException {
        okhttp3.Call localVarCall = updateEKSTargetValidateBeforeCall(updateEKSTarget, null);
        Type localVarReturnType = new TypeToken<UpdateEKSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateEKSTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEKSTargetAsync(UpdateEKSTarget updateEKSTarget, final ApiCallback<UpdateEKSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEKSTargetValidateBeforeCall(updateEKSTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateEKSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventForwarder
     * @param updateEventForwarder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventForwarderCall(UpdateEventForwarder updateEventForwarder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEventForwarder;

        // create path and map variables
        String localVarPath = "/update-event-forwarder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventForwarderValidateBeforeCall(UpdateEventForwarder updateEventForwarder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateEventForwarder' is set
        if (updateEventForwarder == null) {
            throw new ApiException("Missing the required parameter 'updateEventForwarder' when calling updateEventForwarder(Async)");
        }

        return updateEventForwarderCall(updateEventForwarder, _callback);

    }

    /**
     * 
     * 
     * @param updateEventForwarder  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateEventForwarder(UpdateEventForwarder updateEventForwarder) throws ApiException {
        ApiResponse<Object> localVarResp = updateEventForwarderWithHttpInfo(updateEventForwarder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateEventForwarder  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateEventForwarderWithHttpInfo(UpdateEventForwarder updateEventForwarder) throws ApiException {
        okhttp3.Call localVarCall = updateEventForwarderValidateBeforeCall(updateEventForwarder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateEventForwarder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEventForwarderResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventForwarderAsync(UpdateEventForwarder updateEventForwarder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventForwarderValidateBeforeCall(updateEventForwarder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGKETarget
     * @param updateGKETarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGKETargetCall(UpdateGKETarget updateGKETarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGKETarget;

        // create path and map variables
        String localVarPath = "/update-gke-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGKETargetValidateBeforeCall(UpdateGKETarget updateGKETarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGKETarget' is set
        if (updateGKETarget == null) {
            throw new ApiException("Missing the required parameter 'updateGKETarget' when calling updateGKETarget(Async)");
        }

        return updateGKETargetCall(updateGKETarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGKETarget  (required)
     * @return UpdateGKETargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGKETargetOutput updateGKETarget(UpdateGKETarget updateGKETarget) throws ApiException {
        ApiResponse<UpdateGKETargetOutput> localVarResp = updateGKETargetWithHttpInfo(updateGKETarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGKETarget  (required)
     * @return ApiResponse&lt;UpdateGKETargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGKETargetOutput> updateGKETargetWithHttpInfo(UpdateGKETarget updateGKETarget) throws ApiException {
        okhttp3.Call localVarCall = updateGKETargetValidateBeforeCall(updateGKETarget, null);
        Type localVarReturnType = new TypeToken<UpdateGKETargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGKETarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGKETargetAsync(UpdateGKETarget updateGKETarget, final ApiCallback<UpdateGKETargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGKETargetValidateBeforeCall(updateGKETarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGKETargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGcpTarget
     * @param updateGcpTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGcpTargetCall(UpdateGcpTarget updateGcpTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGcpTarget;

        // create path and map variables
        String localVarPath = "/update-gcp-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGcpTargetValidateBeforeCall(UpdateGcpTarget updateGcpTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGcpTarget' is set
        if (updateGcpTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGcpTarget' when calling updateGcpTarget(Async)");
        }

        return updateGcpTargetCall(updateGcpTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGcpTarget  (required)
     * @return UpdateGcpTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGcpTargetOutput updateGcpTarget(UpdateGcpTarget updateGcpTarget) throws ApiException {
        ApiResponse<UpdateGcpTargetOutput> localVarResp = updateGcpTargetWithHttpInfo(updateGcpTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGcpTarget  (required)
     * @return ApiResponse&lt;UpdateGcpTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGcpTargetOutput> updateGcpTargetWithHttpInfo(UpdateGcpTarget updateGcpTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGcpTargetValidateBeforeCall(updateGcpTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGcpTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGcpTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGcpTargetAsync(UpdateGcpTarget updateGcpTarget, final ApiCallback<UpdateGcpTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGcpTargetValidateBeforeCall(updateGcpTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGcpTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGithubTarget
     * @param updateGithubTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGithubTargetCall(UpdateGithubTarget updateGithubTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGithubTarget;

        // create path and map variables
        String localVarPath = "/update-github-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGithubTargetValidateBeforeCall(UpdateGithubTarget updateGithubTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGithubTarget' is set
        if (updateGithubTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGithubTarget' when calling updateGithubTarget(Async)");
        }

        return updateGithubTargetCall(updateGithubTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGithubTarget  (required)
     * @return UpdateGithubTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGithubTargetOutput updateGithubTarget(UpdateGithubTarget updateGithubTarget) throws ApiException {
        ApiResponse<UpdateGithubTargetOutput> localVarResp = updateGithubTargetWithHttpInfo(updateGithubTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGithubTarget  (required)
     * @return ApiResponse&lt;UpdateGithubTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGithubTargetOutput> updateGithubTargetWithHttpInfo(UpdateGithubTarget updateGithubTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGithubTargetValidateBeforeCall(updateGithubTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGithubTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGithubTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGithubTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGithubTargetAsync(UpdateGithubTarget updateGithubTarget, final ApiCallback<UpdateGithubTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGithubTargetValidateBeforeCall(updateGithubTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGithubTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGitlabTarget
     * @param updateGitlabTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGitlabTargetCall(UpdateGitlabTarget updateGitlabTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGitlabTarget;

        // create path and map variables
        String localVarPath = "/update-gitlab-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGitlabTargetValidateBeforeCall(UpdateGitlabTarget updateGitlabTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGitlabTarget' is set
        if (updateGitlabTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGitlabTarget' when calling updateGitlabTarget(Async)");
        }

        return updateGitlabTargetCall(updateGitlabTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGitlabTarget  (required)
     * @return UpdateGitlabTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGitlabTargetOutput updateGitlabTarget(UpdateGitlabTarget updateGitlabTarget) throws ApiException {
        ApiResponse<UpdateGitlabTargetOutput> localVarResp = updateGitlabTargetWithHttpInfo(updateGitlabTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGitlabTarget  (required)
     * @return ApiResponse&lt;UpdateGitlabTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGitlabTargetOutput> updateGitlabTargetWithHttpInfo(UpdateGitlabTarget updateGitlabTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGitlabTargetValidateBeforeCall(updateGitlabTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGitlabTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGitlabTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGitlabTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGitlabTargetAsync(UpdateGitlabTarget updateGitlabTarget, final ApiCallback<UpdateGitlabTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGitlabTargetValidateBeforeCall(updateGitlabTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGitlabTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalSignAtlasTarget
     * @param updateGlobalSignAtlasTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSignAtlasTargetCall(UpdateGlobalSignAtlasTarget updateGlobalSignAtlasTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGlobalSignAtlasTarget;

        // create path and map variables
        String localVarPath = "/update-globalsign-atlas-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalSignAtlasTargetValidateBeforeCall(UpdateGlobalSignAtlasTarget updateGlobalSignAtlasTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGlobalSignAtlasTarget' is set
        if (updateGlobalSignAtlasTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGlobalSignAtlasTarget' when calling updateGlobalSignAtlasTarget(Async)");
        }

        return updateGlobalSignAtlasTargetCall(updateGlobalSignAtlasTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGlobalSignAtlasTarget  (required)
     * @return UpdateGlobalSignAtlasTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGlobalSignAtlasTargetOutput updateGlobalSignAtlasTarget(UpdateGlobalSignAtlasTarget updateGlobalSignAtlasTarget) throws ApiException {
        ApiResponse<UpdateGlobalSignAtlasTargetOutput> localVarResp = updateGlobalSignAtlasTargetWithHttpInfo(updateGlobalSignAtlasTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGlobalSignAtlasTarget  (required)
     * @return ApiResponse&lt;UpdateGlobalSignAtlasTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGlobalSignAtlasTargetOutput> updateGlobalSignAtlasTargetWithHttpInfo(UpdateGlobalSignAtlasTarget updateGlobalSignAtlasTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalSignAtlasTargetValidateBeforeCall(updateGlobalSignAtlasTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGlobalSignAtlasTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGlobalSignAtlasTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignAtlasTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSignAtlasTargetAsync(UpdateGlobalSignAtlasTarget updateGlobalSignAtlasTarget, final ApiCallback<UpdateGlobalSignAtlasTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalSignAtlasTargetValidateBeforeCall(updateGlobalSignAtlasTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGlobalSignAtlasTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalSignTarget
     * @param updateGlobalSignTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSignTargetCall(UpdateGlobalSignTarget updateGlobalSignTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGlobalSignTarget;

        // create path and map variables
        String localVarPath = "/update-globalsign-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalSignTargetValidateBeforeCall(UpdateGlobalSignTarget updateGlobalSignTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGlobalSignTarget' is set
        if (updateGlobalSignTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGlobalSignTarget' when calling updateGlobalSignTarget(Async)");
        }

        return updateGlobalSignTargetCall(updateGlobalSignTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGlobalSignTarget  (required)
     * @return UpdateGlobalSignTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGlobalSignTargetOutput updateGlobalSignTarget(UpdateGlobalSignTarget updateGlobalSignTarget) throws ApiException {
        ApiResponse<UpdateGlobalSignTargetOutput> localVarResp = updateGlobalSignTargetWithHttpInfo(updateGlobalSignTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGlobalSignTarget  (required)
     * @return ApiResponse&lt;UpdateGlobalSignTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGlobalSignTargetOutput> updateGlobalSignTargetWithHttpInfo(UpdateGlobalSignTarget updateGlobalSignTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalSignTargetValidateBeforeCall(updateGlobalSignTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGlobalSignTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGlobalSignTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGlobalSignTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSignTargetAsync(UpdateGlobalSignTarget updateGlobalSignTarget, final ApiCallback<UpdateGlobalSignTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalSignTargetValidateBeforeCall(updateGlobalSignTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGlobalSignTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGodaddyTarget
     * @param updateGodaddyTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGodaddyTargetCall(UpdateGodaddyTarget updateGodaddyTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGodaddyTarget;

        // create path and map variables
        String localVarPath = "/update-godaddy-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGodaddyTargetValidateBeforeCall(UpdateGodaddyTarget updateGodaddyTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGodaddyTarget' is set
        if (updateGodaddyTarget == null) {
            throw new ApiException("Missing the required parameter 'updateGodaddyTarget' when calling updateGodaddyTarget(Async)");
        }

        return updateGodaddyTargetCall(updateGodaddyTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateGodaddyTarget  (required)
     * @return UpdateGodaddyTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGodaddyTargetOutput updateGodaddyTarget(UpdateGodaddyTarget updateGodaddyTarget) throws ApiException {
        ApiResponse<UpdateGodaddyTargetOutput> localVarResp = updateGodaddyTargetWithHttpInfo(updateGodaddyTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGodaddyTarget  (required)
     * @return ApiResponse&lt;UpdateGodaddyTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGodaddyTargetOutput> updateGodaddyTargetWithHttpInfo(UpdateGodaddyTarget updateGodaddyTarget) throws ApiException {
        okhttp3.Call localVarCall = updateGodaddyTargetValidateBeforeCall(updateGodaddyTarget, null);
        Type localVarReturnType = new TypeToken<UpdateGodaddyTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGodaddyTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGodaddyTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGodaddyTargetAsync(UpdateGodaddyTarget updateGodaddyTarget, final ApiCallback<UpdateGodaddyTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGodaddyTargetValidateBeforeCall(updateGodaddyTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateGodaddyTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param updateGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(UpdateGroup updateGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroup;

        // create path and map variables
        String localVarPath = "/update-group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(UpdateGroup updateGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGroup' is set
        if (updateGroup == null) {
            throw new ApiException("Missing the required parameter 'updateGroup' when calling updateGroup(Async)");
        }

        return updateGroupCall(updateGroup, _callback);

    }

    /**
     * 
     * 
     * @param updateGroup  (required)
     * @return UpdateGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupOutput updateGroup(UpdateGroup updateGroup) throws ApiException {
        ApiResponse<UpdateGroupOutput> localVarResp = updateGroupWithHttpInfo(updateGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateGroup  (required)
     * @return ApiResponse&lt;UpdateGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGroupOutput> updateGroupWithHttpInfo(UpdateGroup updateGroup) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(updateGroup, null);
        Type localVarReturnType = new TypeToken<UpdateGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGroupResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(UpdateGroup updateGroup, final ApiCallback<UpdateGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(updateGroup, _callback);
        Type localVarReturnType = new TypeToken<UpdateGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHashiVaultTarget
     * @param updateHashiVaultTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHashiVaultTargetCall(UpdateHashiVaultTarget updateHashiVaultTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateHashiVaultTarget;

        // create path and map variables
        String localVarPath = "/update-hashi-vault-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHashiVaultTargetValidateBeforeCall(UpdateHashiVaultTarget updateHashiVaultTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateHashiVaultTarget' is set
        if (updateHashiVaultTarget == null) {
            throw new ApiException("Missing the required parameter 'updateHashiVaultTarget' when calling updateHashiVaultTarget(Async)");
        }

        return updateHashiVaultTargetCall(updateHashiVaultTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateHashiVaultTarget  (required)
     * @return UpdateHashiVaultTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHashiVaultTargetOutput updateHashiVaultTarget(UpdateHashiVaultTarget updateHashiVaultTarget) throws ApiException {
        ApiResponse<UpdateHashiVaultTargetOutput> localVarResp = updateHashiVaultTargetWithHttpInfo(updateHashiVaultTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateHashiVaultTarget  (required)
     * @return ApiResponse&lt;UpdateHashiVaultTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHashiVaultTargetOutput> updateHashiVaultTargetWithHttpInfo(UpdateHashiVaultTarget updateHashiVaultTarget) throws ApiException {
        okhttp3.Call localVarCall = updateHashiVaultTargetValidateBeforeCall(updateHashiVaultTarget, null);
        Type localVarReturnType = new TypeToken<UpdateHashiVaultTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateHashiVaultTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateHashiVaultTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHashiVaultTargetAsync(UpdateHashiVaultTarget updateHashiVaultTarget, final ApiCallback<UpdateHashiVaultTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHashiVaultTargetValidateBeforeCall(updateHashiVaultTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateHashiVaultTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItem
     * @param updateItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemCall(UpdateItem updateItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateItem;

        // create path and map variables
        String localVarPath = "/update-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(UpdateItem updateItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateItem' is set
        if (updateItem == null) {
            throw new ApiException("Missing the required parameter 'updateItem' when calling updateItem(Async)");
        }

        return updateItemCall(updateItem, _callback);

    }

    /**
     * 
     * 
     * @param updateItem  (required)
     * @return UpdateItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemOutput updateItem(UpdateItem updateItem) throws ApiException {
        ApiResponse<UpdateItemOutput> localVarResp = updateItemWithHttpInfo(updateItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateItem  (required)
     * @return ApiResponse&lt;UpdateItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateItemOutput> updateItemWithHttpInfo(UpdateItem updateItem) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(updateItem, null);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemAsync(UpdateItem updateItem, final ApiCallback<UpdateItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(updateItem, _callback);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLdapTarget
     * @param updateLdapTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLdapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLdapTargetCall(UpdateLdapTarget updateLdapTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLdapTarget;

        // create path and map variables
        String localVarPath = "/update-ldap-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLdapTargetValidateBeforeCall(UpdateLdapTarget updateLdapTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateLdapTarget' is set
        if (updateLdapTarget == null) {
            throw new ApiException("Missing the required parameter 'updateLdapTarget' when calling updateLdapTarget(Async)");
        }

        return updateLdapTargetCall(updateLdapTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateLdapTarget  (required)
     * @return UpdateLdapTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLdapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLdapTargetOutput updateLdapTarget(UpdateLdapTarget updateLdapTarget) throws ApiException {
        ApiResponse<UpdateLdapTargetOutput> localVarResp = updateLdapTargetWithHttpInfo(updateLdapTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateLdapTarget  (required)
     * @return ApiResponse&lt;UpdateLdapTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLdapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateLdapTargetOutput> updateLdapTargetWithHttpInfo(UpdateLdapTarget updateLdapTarget) throws ApiException {
        okhttp3.Call localVarCall = updateLdapTargetValidateBeforeCall(updateLdapTarget, null);
        Type localVarReturnType = new TypeToken<UpdateLdapTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateLdapTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLdapTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLdapTargetAsync(UpdateLdapTarget updateLdapTarget, final ApiCallback<UpdateLdapTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLdapTargetValidateBeforeCall(updateLdapTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateLdapTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLdapTargetDetails
     * @param updateLdapTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLdapTargetDetailsCall(UpdateLdapTargetDetails updateLdapTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLdapTargetDetails;

        // create path and map variables
        String localVarPath = "/update-ldap-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLdapTargetDetailsValidateBeforeCall(UpdateLdapTargetDetails updateLdapTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateLdapTargetDetails' is set
        if (updateLdapTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateLdapTargetDetails' when calling updateLdapTargetDetails(Async)");
        }

        return updateLdapTargetDetailsCall(updateLdapTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateLdapTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateLdapTargetDetails(UpdateLdapTargetDetails updateLdapTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateLdapTargetDetailsWithHttpInfo(updateLdapTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateLdapTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateLdapTargetDetailsWithHttpInfo(UpdateLdapTargetDetails updateLdapTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateLdapTargetDetailsValidateBeforeCall(updateLdapTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateLdapTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLdapTargetDetailsAsync(UpdateLdapTargetDetails updateLdapTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLdapTargetDetailsValidateBeforeCall(updateLdapTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLinkedTarget
     * @param updateLinkedTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkedTargetCall(UpdateLinkedTarget updateLinkedTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLinkedTarget;

        // create path and map variables
        String localVarPath = "/update-linked-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkedTargetValidateBeforeCall(UpdateLinkedTarget updateLinkedTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateLinkedTarget' is set
        if (updateLinkedTarget == null) {
            throw new ApiException("Missing the required parameter 'updateLinkedTarget' when calling updateLinkedTarget(Async)");
        }

        return updateLinkedTargetCall(updateLinkedTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateLinkedTarget  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLinkedTarget(UpdateLinkedTarget updateLinkedTarget) throws ApiException {
        ApiResponse<Object> localVarResp = updateLinkedTargetWithHttpInfo(updateLinkedTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateLinkedTarget  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLinkedTargetWithHttpInfo(UpdateLinkedTarget updateLinkedTarget) throws ApiException {
        okhttp3.Call localVarCall = updateLinkedTargetValidateBeforeCall(updateLinkedTarget, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateLinkedTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateLinkedTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkedTargetAsync(UpdateLinkedTarget updateLinkedTarget, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkedTargetValidateBeforeCall(updateLinkedTarget, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNativeK8STarget
     * @param updateNativeK8STarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNativeK8STargetCall(UpdateNativeK8STarget updateNativeK8STarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateNativeK8STarget;

        // create path and map variables
        String localVarPath = "/update-k8s-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNativeK8STargetValidateBeforeCall(UpdateNativeK8STarget updateNativeK8STarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateNativeK8STarget' is set
        if (updateNativeK8STarget == null) {
            throw new ApiException("Missing the required parameter 'updateNativeK8STarget' when calling updateNativeK8STarget(Async)");
        }

        return updateNativeK8STargetCall(updateNativeK8STarget, _callback);

    }

    /**
     * 
     * 
     * @param updateNativeK8STarget  (required)
     * @return UpdateNativeK8STargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNativeK8STargetOutput updateNativeK8STarget(UpdateNativeK8STarget updateNativeK8STarget) throws ApiException {
        ApiResponse<UpdateNativeK8STargetOutput> localVarResp = updateNativeK8STargetWithHttpInfo(updateNativeK8STarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateNativeK8STarget  (required)
     * @return ApiResponse&lt;UpdateNativeK8STargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateNativeK8STargetOutput> updateNativeK8STargetWithHttpInfo(UpdateNativeK8STarget updateNativeK8STarget) throws ApiException {
        okhttp3.Call localVarCall = updateNativeK8STargetValidateBeforeCall(updateNativeK8STarget, null);
        Type localVarReturnType = new TypeToken<UpdateNativeK8STargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateNativeK8STarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNativeK8STargetAsync(UpdateNativeK8STarget updateNativeK8STarget, final ApiCallback<UpdateNativeK8STargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNativeK8STargetValidateBeforeCall(updateNativeK8STarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateNativeK8STargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOidcApp
     * @param updateOidcApp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOidcAppCall(UpdateOidcApp updateOidcApp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOidcApp;

        // create path and map variables
        String localVarPath = "/update-oidc-app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOidcAppValidateBeforeCall(UpdateOidcApp updateOidcApp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateOidcApp' is set
        if (updateOidcApp == null) {
            throw new ApiException("Missing the required parameter 'updateOidcApp' when calling updateOidcApp(Async)");
        }

        return updateOidcAppCall(updateOidcApp, _callback);

    }

    /**
     * 
     * 
     * @param updateOidcApp  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateOidcApp(UpdateOidcApp updateOidcApp) throws ApiException {
        ApiResponse<Object> localVarResp = updateOidcAppWithHttpInfo(updateOidcApp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateOidcApp  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateOidcAppWithHttpInfo(UpdateOidcApp updateOidcApp) throws ApiException {
        okhttp3.Call localVarCall = updateOidcAppValidateBeforeCall(updateOidcApp, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateOidcApp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateOidcAppResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOidcAppAsync(UpdateOidcApp updateOidcApp, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOidcAppValidateBeforeCall(updateOidcApp, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePKICertIssuer
     * @param updatePKICertIssuer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePKICertIssuerCall(UpdatePKICertIssuer updatePKICertIssuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePKICertIssuer;

        // create path and map variables
        String localVarPath = "/update-pki-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePKICertIssuerValidateBeforeCall(UpdatePKICertIssuer updatePKICertIssuer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updatePKICertIssuer' is set
        if (updatePKICertIssuer == null) {
            throw new ApiException("Missing the required parameter 'updatePKICertIssuer' when calling updatePKICertIssuer(Async)");
        }

        return updatePKICertIssuerCall(updatePKICertIssuer, _callback);

    }

    /**
     * 
     * 
     * @param updatePKICertIssuer  (required)
     * @return UpdatePKICertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePKICertIssuerOutput updatePKICertIssuer(UpdatePKICertIssuer updatePKICertIssuer) throws ApiException {
        ApiResponse<UpdatePKICertIssuerOutput> localVarResp = updatePKICertIssuerWithHttpInfo(updatePKICertIssuer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updatePKICertIssuer  (required)
     * @return ApiResponse&lt;UpdatePKICertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePKICertIssuerOutput> updatePKICertIssuerWithHttpInfo(UpdatePKICertIssuer updatePKICertIssuer) throws ApiException {
        okhttp3.Call localVarCall = updatePKICertIssuerValidateBeforeCall(updatePKICertIssuer, null);
        Type localVarReturnType = new TypeToken<UpdatePKICertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updatePKICertIssuer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePKICertIssuerAsync(UpdatePKICertIssuer updatePKICertIssuer, final ApiCallback<UpdatePKICertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePKICertIssuerValidateBeforeCall(updatePKICertIssuer, _callback);
        Type localVarReturnType = new TypeToken<UpdatePKICertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePingTarget
     * @param updatePingTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePingTargetCall(UpdatePingTarget updatePingTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePingTarget;

        // create path and map variables
        String localVarPath = "/update-ping-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePingTargetValidateBeforeCall(UpdatePingTarget updatePingTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updatePingTarget' is set
        if (updatePingTarget == null) {
            throw new ApiException("Missing the required parameter 'updatePingTarget' when calling updatePingTarget(Async)");
        }

        return updatePingTargetCall(updatePingTarget, _callback);

    }

    /**
     * 
     * 
     * @param updatePingTarget  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updatePingTarget(UpdatePingTarget updatePingTarget) throws ApiException {
        ApiResponse<Object> localVarResp = updatePingTargetWithHttpInfo(updatePingTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updatePingTarget  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updatePingTargetWithHttpInfo(UpdatePingTarget updatePingTarget) throws ApiException {
        okhttp3.Call localVarCall = updatePingTargetValidateBeforeCall(updatePingTarget, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updatePingTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updatePingTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePingTargetAsync(UpdatePingTarget updatePingTarget, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePingTargetValidateBeforeCall(updatePingTarget, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRDPTargetDetails
     * @param updateRDPTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRDPTargetDetailsCall(UpdateRDPTargetDetails updateRDPTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRDPTargetDetails;

        // create path and map variables
        String localVarPath = "/update-rdp-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRDPTargetDetailsValidateBeforeCall(UpdateRDPTargetDetails updateRDPTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRDPTargetDetails' is set
        if (updateRDPTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateRDPTargetDetails' when calling updateRDPTargetDetails(Async)");
        }

        return updateRDPTargetDetailsCall(updateRDPTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateRDPTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateRDPTargetDetails(UpdateRDPTargetDetails updateRDPTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateRDPTargetDetailsWithHttpInfo(updateRDPTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRDPTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateRDPTargetDetailsWithHttpInfo(UpdateRDPTargetDetails updateRDPTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateRDPTargetDetailsValidateBeforeCall(updateRDPTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRDPTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRDPTargetDetailsAsync(UpdateRDPTargetDetails updateRDPTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRDPTargetDetailsValidateBeforeCall(updateRDPTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRabbitMQTarget
     * @param updateRabbitMQTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetCall(UpdateRabbitMQTarget updateRabbitMQTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRabbitMQTarget;

        // create path and map variables
        String localVarPath = "/update-rabbitmq-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRabbitMQTargetValidateBeforeCall(UpdateRabbitMQTarget updateRabbitMQTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRabbitMQTarget' is set
        if (updateRabbitMQTarget == null) {
            throw new ApiException("Missing the required parameter 'updateRabbitMQTarget' when calling updateRabbitMQTarget(Async)");
        }

        return updateRabbitMQTargetCall(updateRabbitMQTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateRabbitMQTarget  (required)
     * @return UpdateRabbitMQTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRabbitMQTargetOutput updateRabbitMQTarget(UpdateRabbitMQTarget updateRabbitMQTarget) throws ApiException {
        ApiResponse<UpdateRabbitMQTargetOutput> localVarResp = updateRabbitMQTargetWithHttpInfo(updateRabbitMQTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRabbitMQTarget  (required)
     * @return ApiResponse&lt;UpdateRabbitMQTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRabbitMQTargetOutput> updateRabbitMQTargetWithHttpInfo(UpdateRabbitMQTarget updateRabbitMQTarget) throws ApiException {
        okhttp3.Call localVarCall = updateRabbitMQTargetValidateBeforeCall(updateRabbitMQTarget, null);
        Type localVarReturnType = new TypeToken<UpdateRabbitMQTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRabbitMQTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetAsync(UpdateRabbitMQTarget updateRabbitMQTarget, final ApiCallback<UpdateRabbitMQTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRabbitMQTargetValidateBeforeCall(updateRabbitMQTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateRabbitMQTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRabbitMQTargetDetails
     * @param updateRabbitMQTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetDetailsCall(UpdateRabbitMQTargetDetails updateRabbitMQTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRabbitMQTargetDetails;

        // create path and map variables
        String localVarPath = "/update-rabbitmq-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRabbitMQTargetDetailsValidateBeforeCall(UpdateRabbitMQTargetDetails updateRabbitMQTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRabbitMQTargetDetails' is set
        if (updateRabbitMQTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateRabbitMQTargetDetails' when calling updateRabbitMQTargetDetails(Async)");
        }

        return updateRabbitMQTargetDetailsCall(updateRabbitMQTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateRabbitMQTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateRabbitMQTargetDetails(UpdateRabbitMQTargetDetails updateRabbitMQTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateRabbitMQTargetDetailsWithHttpInfo(updateRabbitMQTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRabbitMQTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateRabbitMQTargetDetailsWithHttpInfo(UpdateRabbitMQTargetDetails updateRabbitMQTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateRabbitMQTargetDetailsValidateBeforeCall(updateRabbitMQTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRabbitMQTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetDetailsAsync(UpdateRabbitMQTargetDetails updateRabbitMQTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRabbitMQTargetDetailsValidateBeforeCall(updateRabbitMQTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param updateRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRole;

        // create path and map variables
        String localVarPath = "/update-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(UpdateRole updateRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRole' is set
        if (updateRole == null) {
            throw new ApiException("Missing the required parameter 'updateRole' when calling updateRole(Async)");
        }

        return updateRoleCall(updateRole, _callback);

    }

    /**
     * 
     * 
     * @param updateRole  (required)
     * @return UpdateRoleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleOutput updateRole(UpdateRole updateRole) throws ApiException {
        ApiResponse<UpdateRoleOutput> localVarResp = updateRoleWithHttpInfo(updateRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRole  (required)
     * @return ApiResponse&lt;UpdateRoleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRoleOutput> updateRoleWithHttpInfo(UpdateRole updateRole) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(updateRole, null);
        Type localVarReturnType = new TypeToken<UpdateRoleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(UpdateRole updateRole, final ApiCallback<UpdateRoleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(updateRole, _callback);
        Type localVarReturnType = new TypeToken<UpdateRoleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRotatedSecret
     * @param updateRotatedSecret  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotatedSecretCall(UpdateRotatedSecret updateRotatedSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRotatedSecret;

        // create path and map variables
        String localVarPath = "/update-rotated-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRotatedSecretValidateBeforeCall(UpdateRotatedSecret updateRotatedSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRotatedSecret' is set
        if (updateRotatedSecret == null) {
            throw new ApiException("Missing the required parameter 'updateRotatedSecret' when calling updateRotatedSecret(Async)");
        }

        return updateRotatedSecretCall(updateRotatedSecret, _callback);

    }

    /**
     * 
     * 
     * @param updateRotatedSecret  (required)
     * @return UpdateRotatedSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRotatedSecretOutput updateRotatedSecret(UpdateRotatedSecret updateRotatedSecret) throws ApiException {
        ApiResponse<UpdateRotatedSecretOutput> localVarResp = updateRotatedSecretWithHttpInfo(updateRotatedSecret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRotatedSecret  (required)
     * @return ApiResponse&lt;UpdateRotatedSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRotatedSecretOutput> updateRotatedSecretWithHttpInfo(UpdateRotatedSecret updateRotatedSecret) throws ApiException {
        okhttp3.Call localVarCall = updateRotatedSecretValidateBeforeCall(updateRotatedSecret, null);
        Type localVarReturnType = new TypeToken<UpdateRotatedSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRotatedSecret  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotatedSecretAsync(UpdateRotatedSecret updateRotatedSecret, final ApiCallback<UpdateRotatedSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRotatedSecretValidateBeforeCall(updateRotatedSecret, _callback);
        Type localVarReturnType = new TypeToken<UpdateRotatedSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRotationSettings
     * @param updateRotationSettings  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotationSettingsCall(UpdateRotationSettings updateRotationSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRotationSettings;

        // create path and map variables
        String localVarPath = "/update-rotation-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRotationSettingsValidateBeforeCall(UpdateRotationSettings updateRotationSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateRotationSettings' is set
        if (updateRotationSettings == null) {
            throw new ApiException("Missing the required parameter 'updateRotationSettings' when calling updateRotationSettings(Async)");
        }

        return updateRotationSettingsCall(updateRotationSettings, _callback);

    }

    /**
     * 
     * 
     * @param updateRotationSettings  (required)
     * @return RotateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotateKeyOutput updateRotationSettings(UpdateRotationSettings updateRotationSettings) throws ApiException {
        ApiResponse<RotateKeyOutput> localVarResp = updateRotationSettingsWithHttpInfo(updateRotationSettings);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateRotationSettings  (required)
     * @return ApiResponse&lt;RotateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotateKeyOutput> updateRotationSettingsWithHttpInfo(UpdateRotationSettings updateRotationSettings) throws ApiException {
        okhttp3.Call localVarCall = updateRotationSettingsValidateBeforeCall(updateRotationSettings, null);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateRotationSettings  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotationSettingsAsync(UpdateRotationSettings updateRotationSettings, final ApiCallback<RotateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRotationSettingsValidateBeforeCall(updateRotationSettings, _callback);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSSHCertIssuer
     * @param updateSSHCertIssuer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHCertIssuerCall(UpdateSSHCertIssuer updateSSHCertIssuer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSSHCertIssuer;

        // create path and map variables
        String localVarPath = "/update-ssh-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSSHCertIssuerValidateBeforeCall(UpdateSSHCertIssuer updateSSHCertIssuer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSSHCertIssuer' is set
        if (updateSSHCertIssuer == null) {
            throw new ApiException("Missing the required parameter 'updateSSHCertIssuer' when calling updateSSHCertIssuer(Async)");
        }

        return updateSSHCertIssuerCall(updateSSHCertIssuer, _callback);

    }

    /**
     * 
     * 
     * @param updateSSHCertIssuer  (required)
     * @return UpdateSSHCertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSSHCertIssuerOutput updateSSHCertIssuer(UpdateSSHCertIssuer updateSSHCertIssuer) throws ApiException {
        ApiResponse<UpdateSSHCertIssuerOutput> localVarResp = updateSSHCertIssuerWithHttpInfo(updateSSHCertIssuer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateSSHCertIssuer  (required)
     * @return ApiResponse&lt;UpdateSSHCertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSSHCertIssuerOutput> updateSSHCertIssuerWithHttpInfo(UpdateSSHCertIssuer updateSSHCertIssuer) throws ApiException {
        okhttp3.Call localVarCall = updateSSHCertIssuerValidateBeforeCall(updateSSHCertIssuer, null);
        Type localVarReturnType = new TypeToken<UpdateSSHCertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateSSHCertIssuer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHCertIssuerAsync(UpdateSSHCertIssuer updateSSHCertIssuer, final ApiCallback<UpdateSSHCertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSSHCertIssuerValidateBeforeCall(updateSSHCertIssuer, _callback);
        Type localVarReturnType = new TypeToken<UpdateSSHCertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSSHTarget
     * @param updateSSHTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetCall(UpdateSSHTarget updateSSHTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSSHTarget;

        // create path and map variables
        String localVarPath = "/update-ssh-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSSHTargetValidateBeforeCall(UpdateSSHTarget updateSSHTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSSHTarget' is set
        if (updateSSHTarget == null) {
            throw new ApiException("Missing the required parameter 'updateSSHTarget' when calling updateSSHTarget(Async)");
        }

        return updateSSHTargetCall(updateSSHTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateSSHTarget  (required)
     * @return UpdateSSHTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSSHTargetOutput updateSSHTarget(UpdateSSHTarget updateSSHTarget) throws ApiException {
        ApiResponse<UpdateSSHTargetOutput> localVarResp = updateSSHTargetWithHttpInfo(updateSSHTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateSSHTarget  (required)
     * @return ApiResponse&lt;UpdateSSHTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSSHTargetOutput> updateSSHTargetWithHttpInfo(UpdateSSHTarget updateSSHTarget) throws ApiException {
        okhttp3.Call localVarCall = updateSSHTargetValidateBeforeCall(updateSSHTarget, null);
        Type localVarReturnType = new TypeToken<UpdateSSHTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateSSHTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetAsync(UpdateSSHTarget updateSSHTarget, final ApiCallback<UpdateSSHTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSSHTargetValidateBeforeCall(updateSSHTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateSSHTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSSHTargetDetails
     * @param updateSSHTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetDetailsCall(UpdateSSHTargetDetails updateSSHTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSSHTargetDetails;

        // create path and map variables
        String localVarPath = "/update-ssh-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSSHTargetDetailsValidateBeforeCall(UpdateSSHTargetDetails updateSSHTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSSHTargetDetails' is set
        if (updateSSHTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateSSHTargetDetails' when calling updateSSHTargetDetails(Async)");
        }

        return updateSSHTargetDetailsCall(updateSSHTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateSSHTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateSSHTargetDetails(UpdateSSHTargetDetails updateSSHTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateSSHTargetDetailsWithHttpInfo(updateSSHTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateSSHTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateSSHTargetDetailsWithHttpInfo(UpdateSSHTargetDetails updateSSHTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateSSHTargetDetailsValidateBeforeCall(updateSSHTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateSSHTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetDetailsAsync(UpdateSSHTargetDetails updateSSHTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSSHTargetDetailsValidateBeforeCall(updateSSHTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSalesforceTarget
     * @param updateSalesforceTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSalesforceTargetCall(UpdateSalesforceTarget updateSalesforceTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSalesforceTarget;

        // create path and map variables
        String localVarPath = "/update-salesforce-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSalesforceTargetValidateBeforeCall(UpdateSalesforceTarget updateSalesforceTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSalesforceTarget' is set
        if (updateSalesforceTarget == null) {
            throw new ApiException("Missing the required parameter 'updateSalesforceTarget' when calling updateSalesforceTarget(Async)");
        }

        return updateSalesforceTargetCall(updateSalesforceTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateSalesforceTarget  (required)
     * @return UpdateSalesforceTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSalesforceTargetOutput updateSalesforceTarget(UpdateSalesforceTarget updateSalesforceTarget) throws ApiException {
        ApiResponse<UpdateSalesforceTargetOutput> localVarResp = updateSalesforceTargetWithHttpInfo(updateSalesforceTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateSalesforceTarget  (required)
     * @return ApiResponse&lt;UpdateSalesforceTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSalesforceTargetOutput> updateSalesforceTargetWithHttpInfo(UpdateSalesforceTarget updateSalesforceTarget) throws ApiException {
        okhttp3.Call localVarCall = updateSalesforceTargetValidateBeforeCall(updateSalesforceTarget, null);
        Type localVarReturnType = new TypeToken<UpdateSalesforceTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateSalesforceTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSalesforceTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSalesforceTargetAsync(UpdateSalesforceTarget updateSalesforceTarget, final ApiCallback<UpdateSalesforceTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSalesforceTargetValidateBeforeCall(updateSalesforceTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateSalesforceTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSecretVal
     * @param updateSecretVal  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretValCall(UpdateSecretVal updateSecretVal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSecretVal;

        // create path and map variables
        String localVarPath = "/update-secret-val";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecretValValidateBeforeCall(UpdateSecretVal updateSecretVal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSecretVal' is set
        if (updateSecretVal == null) {
            throw new ApiException("Missing the required parameter 'updateSecretVal' when calling updateSecretVal(Async)");
        }

        return updateSecretValCall(updateSecretVal, _callback);

    }

    /**
     * 
     * 
     * @param updateSecretVal  (required)
     * @return UpdateSecretValOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSecretValOutput updateSecretVal(UpdateSecretVal updateSecretVal) throws ApiException {
        ApiResponse<UpdateSecretValOutput> localVarResp = updateSecretValWithHttpInfo(updateSecretVal);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateSecretVal  (required)
     * @return ApiResponse&lt;UpdateSecretValOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSecretValOutput> updateSecretValWithHttpInfo(UpdateSecretVal updateSecretVal) throws ApiException {
        okhttp3.Call localVarCall = updateSecretValValidateBeforeCall(updateSecretVal, null);
        Type localVarReturnType = new TypeToken<UpdateSecretValOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateSecretVal  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretValAsync(UpdateSecretVal updateSecretVal, final ApiCallback<UpdateSecretValOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecretValValidateBeforeCall(updateSecretVal, _callback);
        Type localVarReturnType = new TypeToken<UpdateSecretValOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTarget
     * @param updateTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetCall(UpdateTarget updateTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTarget;

        // create path and map variables
        String localVarPath = "/update-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetValidateBeforeCall(UpdateTarget updateTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateTarget' is set
        if (updateTarget == null) {
            throw new ApiException("Missing the required parameter 'updateTarget' when calling updateTarget(Async)");
        }

        return updateTargetCall(updateTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateTarget  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateTarget(UpdateTarget updateTarget) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateTargetWithHttpInfo(updateTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateTarget  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateTargetWithHttpInfo(UpdateTarget updateTarget) throws ApiException {
        okhttp3.Call localVarCall = updateTargetValidateBeforeCall(updateTarget, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetAsync(UpdateTarget updateTarget, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetValidateBeforeCall(updateTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTargetDetails
     * @param updateTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetDetailsCall(UpdateTargetDetails updateTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTargetDetails;

        // create path and map variables
        String localVarPath = "/update-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetDetailsValidateBeforeCall(UpdateTargetDetails updateTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateTargetDetails' is set
        if (updateTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateTargetDetails' when calling updateTargetDetails(Async)");
        }

        return updateTargetDetailsCall(updateTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateTargetDetails(UpdateTargetDetails updateTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateTargetDetailsWithHttpInfo(updateTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateTargetDetailsWithHttpInfo(UpdateTargetDetails updateTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateTargetDetailsValidateBeforeCall(updateTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetDetailsAsync(UpdateTargetDetails updateTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetDetailsValidateBeforeCall(updateTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebTarget
     * @param updateWebTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetCall(UpdateWebTarget updateWebTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWebTarget;

        // create path and map variables
        String localVarPath = "/update-web-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebTargetValidateBeforeCall(UpdateWebTarget updateWebTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateWebTarget' is set
        if (updateWebTarget == null) {
            throw new ApiException("Missing the required parameter 'updateWebTarget' when calling updateWebTarget(Async)");
        }

        return updateWebTargetCall(updateWebTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateWebTarget  (required)
     * @return UpdateWebTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebTargetOutput updateWebTarget(UpdateWebTarget updateWebTarget) throws ApiException {
        ApiResponse<UpdateWebTargetOutput> localVarResp = updateWebTargetWithHttpInfo(updateWebTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateWebTarget  (required)
     * @return ApiResponse&lt;UpdateWebTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateWebTargetOutput> updateWebTargetWithHttpInfo(UpdateWebTarget updateWebTarget) throws ApiException {
        okhttp3.Call localVarCall = updateWebTargetValidateBeforeCall(updateWebTarget, null);
        Type localVarReturnType = new TypeToken<UpdateWebTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateWebTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetAsync(UpdateWebTarget updateWebTarget, final ApiCallback<UpdateWebTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebTargetValidateBeforeCall(updateWebTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateWebTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebTargetDetails
     * @param updateWebTargetDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetDetailsCall(UpdateWebTargetDetails updateWebTargetDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWebTargetDetails;

        // create path and map variables
        String localVarPath = "/update-web-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebTargetDetailsValidateBeforeCall(UpdateWebTargetDetails updateWebTargetDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateWebTargetDetails' is set
        if (updateWebTargetDetails == null) {
            throw new ApiException("Missing the required parameter 'updateWebTargetDetails' when calling updateWebTargetDetails(Async)");
        }

        return updateWebTargetDetailsCall(updateWebTargetDetails, _callback);

    }

    /**
     * 
     * 
     * @param updateWebTargetDetails  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateWebTargetDetails(UpdateWebTargetDetails updateWebTargetDetails) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateWebTargetDetailsWithHttpInfo(updateWebTargetDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateWebTargetDetails  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateWebTargetDetailsWithHttpInfo(UpdateWebTargetDetails updateWebTargetDetails) throws ApiException {
        okhttp3.Call localVarCall = updateWebTargetDetailsValidateBeforeCall(updateWebTargetDetails, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateWebTargetDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetDetailsAsync(UpdateWebTargetDetails updateWebTargetDetails, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebTargetDetailsValidateBeforeCall(updateWebTargetDetails, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWindowsTarget
     * @param updateWindowsTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWindowsTargetCall(UpdateWindowsTarget updateWindowsTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWindowsTarget;

        // create path and map variables
        String localVarPath = "/update-windows-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWindowsTargetValidateBeforeCall(UpdateWindowsTarget updateWindowsTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateWindowsTarget' is set
        if (updateWindowsTarget == null) {
            throw new ApiException("Missing the required parameter 'updateWindowsTarget' when calling updateWindowsTarget(Async)");
        }

        return updateWindowsTargetCall(updateWindowsTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateWindowsTarget  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateWindowsTarget(UpdateWindowsTarget updateWindowsTarget) throws ApiException {
        ApiResponse<Object> localVarResp = updateWindowsTargetWithHttpInfo(updateWindowsTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateWindowsTarget  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateWindowsTargetWithHttpInfo(UpdateWindowsTarget updateWindowsTarget) throws ApiException {
        okhttp3.Call localVarCall = updateWindowsTargetValidateBeforeCall(updateWindowsTarget, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateWindowsTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWindowsTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWindowsTargetAsync(UpdateWindowsTarget updateWindowsTarget, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWindowsTargetValidateBeforeCall(updateWindowsTarget, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateZeroSSLTarget
     * @param updateZeroSSLTarget  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZeroSSLTargetCall(UpdateZeroSSLTarget updateZeroSSLTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateZeroSSLTarget;

        // create path and map variables
        String localVarPath = "/update-zerossl-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZeroSSLTargetValidateBeforeCall(UpdateZeroSSLTarget updateZeroSSLTarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateZeroSSLTarget' is set
        if (updateZeroSSLTarget == null) {
            throw new ApiException("Missing the required parameter 'updateZeroSSLTarget' when calling updateZeroSSLTarget(Async)");
        }

        return updateZeroSSLTargetCall(updateZeroSSLTarget, _callback);

    }

    /**
     * 
     * 
     * @param updateZeroSSLTarget  (required)
     * @return UpdateZeroSSLTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateZeroSSLTargetOutput updateZeroSSLTarget(UpdateZeroSSLTarget updateZeroSSLTarget) throws ApiException {
        ApiResponse<UpdateZeroSSLTargetOutput> localVarResp = updateZeroSSLTargetWithHttpInfo(updateZeroSSLTarget);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param updateZeroSSLTarget  (required)
     * @return ApiResponse&lt;UpdateZeroSSLTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateZeroSSLTargetOutput> updateZeroSSLTargetWithHttpInfo(UpdateZeroSSLTarget updateZeroSSLTarget) throws ApiException {
        okhttp3.Call localVarCall = updateZeroSSLTargetValidateBeforeCall(updateZeroSSLTarget, null);
        Type localVarReturnType = new TypeToken<UpdateZeroSSLTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param updateZeroSSLTarget  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateZeroSSLTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZeroSSLTargetAsync(UpdateZeroSSLTarget updateZeroSSLTarget, final ApiCallback<UpdateZeroSSLTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZeroSSLTargetValidateBeforeCall(updateZeroSSLTarget, _callback);
        Type localVarReturnType = new TypeToken<UpdateZeroSSLTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadRSA
     * @param uploadRSA  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRSACall(UploadRSA uploadRSA, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadRSA;

        // create path and map variables
        String localVarPath = "/upload-rsa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadRSAValidateBeforeCall(UploadRSA uploadRSA, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadRSA' is set
        if (uploadRSA == null) {
            throw new ApiException("Missing the required parameter 'uploadRSA' when calling uploadRSA(Async)");
        }

        return uploadRSACall(uploadRSA, _callback);

    }

    /**
     * 
     * 
     * @param uploadRSA  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object uploadRSA(UploadRSA uploadRSA) throws ApiException {
        ApiResponse<Object> localVarResp = uploadRSAWithHttpInfo(uploadRSA);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uploadRSA  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> uploadRSAWithHttpInfo(UploadRSA uploadRSA) throws ApiException {
        okhttp3.Call localVarCall = uploadRSAValidateBeforeCall(uploadRSA, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uploadRSA  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRSAAsync(UploadRSA uploadRSA, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadRSAValidateBeforeCall(uploadRSA, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uscCreate
     * @param uscCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscCreateCall(UscCreate uscCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uscCreate;

        // create path and map variables
        String localVarPath = "/usc-create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uscCreateValidateBeforeCall(UscCreate uscCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uscCreate' is set
        if (uscCreate == null) {
            throw new ApiException("Missing the required parameter 'uscCreate' when calling uscCreate(Async)");
        }

        return uscCreateCall(uscCreate, _callback);

    }

    /**
     * 
     * 
     * @param uscCreate  (required)
     * @return UscCreateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UscCreateSecretOutput uscCreate(UscCreate uscCreate) throws ApiException {
        ApiResponse<UscCreateSecretOutput> localVarResp = uscCreateWithHttpInfo(uscCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uscCreate  (required)
     * @return ApiResponse&lt;UscCreateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UscCreateSecretOutput> uscCreateWithHttpInfo(UscCreate uscCreate) throws ApiException {
        okhttp3.Call localVarCall = uscCreateValidateBeforeCall(uscCreate, null);
        Type localVarReturnType = new TypeToken<UscCreateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uscCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscCreateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscCreateAsync(UscCreate uscCreate, final ApiCallback<UscCreateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uscCreateValidateBeforeCall(uscCreate, _callback);
        Type localVarReturnType = new TypeToken<UscCreateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uscDelete
     * @param uscDelete  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> uscDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscDeleteCall(UscDelete uscDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uscDelete;

        // create path and map variables
        String localVarPath = "/usc-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uscDeleteValidateBeforeCall(UscDelete uscDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uscDelete' is set
        if (uscDelete == null) {
            throw new ApiException("Missing the required parameter 'uscDelete' when calling uscDelete(Async)");
        }

        return uscDeleteCall(uscDelete, _callback);

    }

    /**
     * 
     * 
     * @param uscDelete  (required)
     * @return UscDeleteSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> uscDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UscDeleteSecretOutput uscDelete(UscDelete uscDelete) throws ApiException {
        ApiResponse<UscDeleteSecretOutput> localVarResp = uscDeleteWithHttpInfo(uscDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uscDelete  (required)
     * @return ApiResponse&lt;UscDeleteSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> uscDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UscDeleteSecretOutput> uscDeleteWithHttpInfo(UscDelete uscDelete) throws ApiException {
        okhttp3.Call localVarCall = uscDeleteValidateBeforeCall(uscDelete, null);
        Type localVarReturnType = new TypeToken<UscDeleteSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uscDelete  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> uscDeleteResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscDeleteAsync(UscDelete uscDelete, final ApiCallback<UscDeleteSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uscDeleteValidateBeforeCall(uscDelete, _callback);
        Type localVarReturnType = new TypeToken<UscDeleteSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uscGet
     * @param uscGet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscGetCall(UscGet uscGet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uscGet;

        // create path and map variables
        String localVarPath = "/usc-get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uscGetValidateBeforeCall(UscGet uscGet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uscGet' is set
        if (uscGet == null) {
            throw new ApiException("Missing the required parameter 'uscGet' when calling uscGet(Async)");
        }

        return uscGetCall(uscGet, _callback);

    }

    /**
     * 
     * 
     * @param uscGet  (required)
     * @return UscGetSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UscGetSecretOutput uscGet(UscGet uscGet) throws ApiException {
        ApiResponse<UscGetSecretOutput> localVarResp = uscGetWithHttpInfo(uscGet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uscGet  (required)
     * @return ApiResponse&lt;UscGetSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UscGetSecretOutput> uscGetWithHttpInfo(UscGet uscGet) throws ApiException {
        okhttp3.Call localVarCall = uscGetValidateBeforeCall(uscGet, null);
        Type localVarReturnType = new TypeToken<UscGetSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uscGet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscGetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscGetAsync(UscGet uscGet, final ApiCallback<UscGetSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uscGetValidateBeforeCall(uscGet, _callback);
        Type localVarReturnType = new TypeToken<UscGetSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uscList
     * @param uscList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscListCall(UscList uscList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uscList;

        // create path and map variables
        String localVarPath = "/usc-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uscListValidateBeforeCall(UscList uscList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uscList' is set
        if (uscList == null) {
            throw new ApiException("Missing the required parameter 'uscList' when calling uscList(Async)");
        }

        return uscListCall(uscList, _callback);

    }

    /**
     * 
     * 
     * @param uscList  (required)
     * @return UscListSecretsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UscListSecretsOutput uscList(UscList uscList) throws ApiException {
        ApiResponse<UscListSecretsOutput> localVarResp = uscListWithHttpInfo(uscList);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uscList  (required)
     * @return ApiResponse&lt;UscListSecretsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UscListSecretsOutput> uscListWithHttpInfo(UscList uscList) throws ApiException {
        okhttp3.Call localVarCall = uscListValidateBeforeCall(uscList, null);
        Type localVarReturnType = new TypeToken<UscListSecretsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uscList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscListResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscListAsync(UscList uscList, final ApiCallback<UscListSecretsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uscListValidateBeforeCall(uscList, _callback);
        Type localVarReturnType = new TypeToken<UscListSecretsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uscUpdate
     * @param uscUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscUpdateCall(UscUpdate uscUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uscUpdate;

        // create path and map variables
        String localVarPath = "/usc-update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uscUpdateValidateBeforeCall(UscUpdate uscUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uscUpdate' is set
        if (uscUpdate == null) {
            throw new ApiException("Missing the required parameter 'uscUpdate' when calling uscUpdate(Async)");
        }

        return uscUpdateCall(uscUpdate, _callback);

    }

    /**
     * 
     * 
     * @param uscUpdate  (required)
     * @return UscUpdateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UscUpdateSecretOutput uscUpdate(UscUpdate uscUpdate) throws ApiException {
        ApiResponse<UscUpdateSecretOutput> localVarResp = uscUpdateWithHttpInfo(uscUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uscUpdate  (required)
     * @return ApiResponse&lt;UscUpdateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UscUpdateSecretOutput> uscUpdateWithHttpInfo(UscUpdate uscUpdate) throws ApiException {
        okhttp3.Call localVarCall = uscUpdateValidateBeforeCall(uscUpdate, null);
        Type localVarReturnType = new TypeToken<UscUpdateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uscUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uscUpdateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uscUpdateAsync(UscUpdate uscUpdate, final ApiCallback<UscUpdateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uscUpdateValidateBeforeCall(uscUpdate, _callback);
        Type localVarReturnType = new TypeToken<UscUpdateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateToken
     * @param validateToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTokenCall(ValidateToken validateToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateToken;

        // create path and map variables
        String localVarPath = "/validate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTokenValidateBeforeCall(ValidateToken validateToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validateToken' is set
        if (validateToken == null) {
            throw new ApiException("Missing the required parameter 'validateToken' when calling validateToken(Async)");
        }

        return validateTokenCall(validateToken, _callback);

    }

    /**
     * 
     * 
     * @param validateToken  (required)
     * @return ValidateTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTokenOutput validateToken(ValidateToken validateToken) throws ApiException {
        ApiResponse<ValidateTokenOutput> localVarResp = validateTokenWithHttpInfo(validateToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param validateToken  (required)
     * @return ApiResponse&lt;ValidateTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateTokenOutput> validateTokenWithHttpInfo(ValidateToken validateToken) throws ApiException {
        okhttp3.Call localVarCall = validateTokenValidateBeforeCall(validateToken, null);
        Type localVarReturnType = new TypeToken<ValidateTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param validateToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTokenAsync(ValidateToken validateToken, final ApiCallback<ValidateTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTokenValidateBeforeCall(validateToken, _callback);
        Type localVarReturnType = new TypeToken<ValidateTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyDataWithClassicKey
     * @param verifyDataWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDataWithClassicKeyCall(VerifyDataWithClassicKey verifyDataWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyDataWithClassicKey;

        // create path and map variables
        String localVarPath = "/verify-data-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDataWithClassicKeyValidateBeforeCall(VerifyDataWithClassicKey verifyDataWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyDataWithClassicKey' is set
        if (verifyDataWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'verifyDataWithClassicKey' when calling verifyDataWithClassicKey(Async)");
        }

        return verifyDataWithClassicKeyCall(verifyDataWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param verifyDataWithClassicKey  (required)
     * @return VerifyPKICertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyPKICertOutput verifyDataWithClassicKey(VerifyDataWithClassicKey verifyDataWithClassicKey) throws ApiException {
        ApiResponse<VerifyPKICertOutput> localVarResp = verifyDataWithClassicKeyWithHttpInfo(verifyDataWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyDataWithClassicKey  (required)
     * @return ApiResponse&lt;VerifyPKICertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyPKICertOutput> verifyDataWithClassicKeyWithHttpInfo(VerifyDataWithClassicKey verifyDataWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = verifyDataWithClassicKeyValidateBeforeCall(verifyDataWithClassicKey, null);
        Type localVarReturnType = new TypeToken<VerifyPKICertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyDataWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyDataWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDataWithClassicKeyAsync(VerifyDataWithClassicKey verifyDataWithClassicKey, final ApiCallback<VerifyPKICertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDataWithClassicKeyValidateBeforeCall(verifyDataWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<VerifyPKICertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEcDsa
     * @param verifyEcDsa  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEcDsaCall(VerifyEcDsa verifyEcDsa, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyEcDsa;

        // create path and map variables
        String localVarPath = "/verify-ecdsa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEcDsaValidateBeforeCall(VerifyEcDsa verifyEcDsa, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyEcDsa' is set
        if (verifyEcDsa == null) {
            throw new ApiException("Missing the required parameter 'verifyEcDsa' when calling verifyEcDsa(Async)");
        }

        return verifyEcDsaCall(verifyEcDsa, _callback);

    }

    /**
     * 
     * 
     * @param verifyEcDsa  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyEcDsa(VerifyEcDsa verifyEcDsa) throws ApiException {
        ApiResponse<Object> localVarResp = verifyEcDsaWithHttpInfo(verifyEcDsa);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyEcDsa  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyEcDsaWithHttpInfo(VerifyEcDsa verifyEcDsa) throws ApiException {
        okhttp3.Call localVarCall = verifyEcDsaValidateBeforeCall(verifyEcDsa, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyEcDsa  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyEcDsaResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEcDsaAsync(VerifyEcDsa verifyEcDsa, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEcDsaValidateBeforeCall(verifyEcDsa, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyGPG
     * @param verifyGPG  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyGPGCall(VerifyGPG verifyGPG, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyGPG;

        // create path and map variables
        String localVarPath = "/verify-gpg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyGPGValidateBeforeCall(VerifyGPG verifyGPG, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyGPG' is set
        if (verifyGPG == null) {
            throw new ApiException("Missing the required parameter 'verifyGPG' when calling verifyGPG(Async)");
        }

        return verifyGPGCall(verifyGPG, _callback);

    }

    /**
     * 
     * 
     * @param verifyGPG  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyGPG(VerifyGPG verifyGPG) throws ApiException {
        ApiResponse<Object> localVarResp = verifyGPGWithHttpInfo(verifyGPG);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyGPG  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyGPGWithHttpInfo(VerifyGPG verifyGPG) throws ApiException {
        okhttp3.Call localVarCall = verifyGPGValidateBeforeCall(verifyGPG, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyGPG  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyGPGResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyGPGAsync(VerifyGPG verifyGPG, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyGPGValidateBeforeCall(verifyGPG, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyJWTWithClassicKey
     * @param verifyJWTWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyJWTWithClassicKeyCall(VerifyJWTWithClassicKey verifyJWTWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyJWTWithClassicKey;

        // create path and map variables
        String localVarPath = "/verify-jwt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyJWTWithClassicKeyValidateBeforeCall(VerifyJWTWithClassicKey verifyJWTWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyJWTWithClassicKey' is set
        if (verifyJWTWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'verifyJWTWithClassicKey' when calling verifyJWTWithClassicKey(Async)");
        }

        return verifyJWTWithClassicKeyCall(verifyJWTWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param verifyJWTWithClassicKey  (required)
     * @return VerifyJWTOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyJWTOutput verifyJWTWithClassicKey(VerifyJWTWithClassicKey verifyJWTWithClassicKey) throws ApiException {
        ApiResponse<VerifyJWTOutput> localVarResp = verifyJWTWithClassicKeyWithHttpInfo(verifyJWTWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyJWTWithClassicKey  (required)
     * @return ApiResponse&lt;VerifyJWTOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyJWTOutput> verifyJWTWithClassicKeyWithHttpInfo(VerifyJWTWithClassicKey verifyJWTWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = verifyJWTWithClassicKeyValidateBeforeCall(verifyJWTWithClassicKey, null);
        Type localVarReturnType = new TypeToken<VerifyJWTOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyJWTWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyJWTWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyJWTWithClassicKeyAsync(VerifyJWTWithClassicKey verifyJWTWithClassicKey, final ApiCallback<VerifyJWTOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyJWTWithClassicKeyValidateBeforeCall(verifyJWTWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<VerifyJWTOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPKCS1
     * @param verifyPKCS1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKCS1Call(VerifyPKCS1 verifyPKCS1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyPKCS1;

        // create path and map variables
        String localVarPath = "/verify-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPKCS1ValidateBeforeCall(VerifyPKCS1 verifyPKCS1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyPKCS1' is set
        if (verifyPKCS1 == null) {
            throw new ApiException("Missing the required parameter 'verifyPKCS1' when calling verifyPKCS1(Async)");
        }

        return verifyPKCS1Call(verifyPKCS1, _callback);

    }

    /**
     * 
     * 
     * @param verifyPKCS1  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyPKCS1(VerifyPKCS1 verifyPKCS1) throws ApiException {
        ApiResponse<Object> localVarResp = verifyPKCS1WithHttpInfo(verifyPKCS1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyPKCS1  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyPKCS1WithHttpInfo(VerifyPKCS1 verifyPKCS1) throws ApiException {
        okhttp3.Call localVarCall = verifyPKCS1ValidateBeforeCall(verifyPKCS1, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyPKCS1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKCS1Async(VerifyPKCS1 verifyPKCS1, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPKCS1ValidateBeforeCall(verifyPKCS1, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPKICertWithClassicKey
     * @param verifyPKICertWithClassicKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKICertWithClassicKeyCall(VerifyPKICertWithClassicKey verifyPKICertWithClassicKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyPKICertWithClassicKey;

        // create path and map variables
        String localVarPath = "/verify-pki-cert-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPKICertWithClassicKeyValidateBeforeCall(VerifyPKICertWithClassicKey verifyPKICertWithClassicKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyPKICertWithClassicKey' is set
        if (verifyPKICertWithClassicKey == null) {
            throw new ApiException("Missing the required parameter 'verifyPKICertWithClassicKey' when calling verifyPKICertWithClassicKey(Async)");
        }

        return verifyPKICertWithClassicKeyCall(verifyPKICertWithClassicKey, _callback);

    }

    /**
     * 
     * 
     * @param verifyPKICertWithClassicKey  (required)
     * @return VerifyPKICertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyPKICertOutput verifyPKICertWithClassicKey(VerifyPKICertWithClassicKey verifyPKICertWithClassicKey) throws ApiException {
        ApiResponse<VerifyPKICertOutput> localVarResp = verifyPKICertWithClassicKeyWithHttpInfo(verifyPKICertWithClassicKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyPKICertWithClassicKey  (required)
     * @return ApiResponse&lt;VerifyPKICertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyPKICertOutput> verifyPKICertWithClassicKeyWithHttpInfo(VerifyPKICertWithClassicKey verifyPKICertWithClassicKey) throws ApiException {
        okhttp3.Call localVarCall = verifyPKICertWithClassicKeyValidateBeforeCall(verifyPKICertWithClassicKey, null);
        Type localVarReturnType = new TypeToken<VerifyPKICertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyPKICertWithClassicKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKICertWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKICertWithClassicKeyAsync(VerifyPKICertWithClassicKey verifyPKICertWithClassicKey, final ApiCallback<VerifyPKICertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPKICertWithClassicKeyValidateBeforeCall(verifyPKICertWithClassicKey, _callback);
        Type localVarReturnType = new TypeToken<VerifyPKICertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyRsaSsaPss
     * @param verifyRsaSsaPss  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRsaSsaPssCall(VerifyRsaSsaPss verifyRsaSsaPss, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyRsaSsaPss;

        // create path and map variables
        String localVarPath = "/verify-rsassa-pss";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyRsaSsaPssValidateBeforeCall(VerifyRsaSsaPss verifyRsaSsaPss, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyRsaSsaPss' is set
        if (verifyRsaSsaPss == null) {
            throw new ApiException("Missing the required parameter 'verifyRsaSsaPss' when calling verifyRsaSsaPss(Async)");
        }

        return verifyRsaSsaPssCall(verifyRsaSsaPss, _callback);

    }

    /**
     * 
     * 
     * @param verifyRsaSsaPss  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyRsaSsaPss(VerifyRsaSsaPss verifyRsaSsaPss) throws ApiException {
        ApiResponse<Object> localVarResp = verifyRsaSsaPssWithHttpInfo(verifyRsaSsaPss);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyRsaSsaPss  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyRsaSsaPssWithHttpInfo(VerifyRsaSsaPss verifyRsaSsaPss) throws ApiException {
        okhttp3.Call localVarCall = verifyRsaSsaPssValidateBeforeCall(verifyRsaSsaPss, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyRsaSsaPss  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyRsaSsaPssResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyRsaSsaPssAsync(VerifyRsaSsaPss verifyRsaSsaPss, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyRsaSsaPssValidateBeforeCall(verifyRsaSsaPss, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
