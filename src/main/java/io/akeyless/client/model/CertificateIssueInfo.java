/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.PKICertificateIssueDetails;
import io.akeyless.client.model.SSHCertificateIssueDetails;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CertificateIssueInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CertificateIssueInfo {
  public static final String SERIALIZED_NAME_CERT_ISSUER_TYPE = "cert_issuer_type";
  @SerializedName(SERIALIZED_NAME_CERT_ISSUER_TYPE)
  @javax.annotation.Nullable
  private String certIssuerType;

  public static final String SERIALIZED_NAME_MAX_TTL = "max_ttl";
  @SerializedName(SERIALIZED_NAME_MAX_TTL)
  @javax.annotation.Nullable
  private Long maxTtl;

  public static final String SERIALIZED_NAME_PKI_CERT_ISSUER_DETAILS = "pki_cert_issuer_details";
  @SerializedName(SERIALIZED_NAME_PKI_CERT_ISSUER_DETAILS)
  @javax.annotation.Nullable
  private PKICertificateIssueDetails pkiCertIssuerDetails;

  public static final String SERIALIZED_NAME_SSH_CERT_ISSUER_DETAILS = "ssh_cert_issuer_details";
  @SerializedName(SERIALIZED_NAME_SSH_CERT_ISSUER_DETAILS)
  @javax.annotation.Nullable
  private SSHCertificateIssueDetails sshCertIssuerDetails;

  public CertificateIssueInfo() {
  }

  public CertificateIssueInfo certIssuerType(@javax.annotation.Nullable String certIssuerType) {
    this.certIssuerType = certIssuerType;
    return this;
  }

  /**
   * Get certIssuerType
   * @return certIssuerType
   */
  @javax.annotation.Nullable
  public String getCertIssuerType() {
    return certIssuerType;
  }

  public void setCertIssuerType(@javax.annotation.Nullable String certIssuerType) {
    this.certIssuerType = certIssuerType;
  }


  public CertificateIssueInfo maxTtl(@javax.annotation.Nullable Long maxTtl) {
    this.maxTtl = maxTtl;
    return this;
  }

  /**
   * Get maxTtl
   * @return maxTtl
   */
  @javax.annotation.Nullable
  public Long getMaxTtl() {
    return maxTtl;
  }

  public void setMaxTtl(@javax.annotation.Nullable Long maxTtl) {
    this.maxTtl = maxTtl;
  }


  public CertificateIssueInfo pkiCertIssuerDetails(@javax.annotation.Nullable PKICertificateIssueDetails pkiCertIssuerDetails) {
    this.pkiCertIssuerDetails = pkiCertIssuerDetails;
    return this;
  }

  /**
   * Get pkiCertIssuerDetails
   * @return pkiCertIssuerDetails
   */
  @javax.annotation.Nullable
  public PKICertificateIssueDetails getPkiCertIssuerDetails() {
    return pkiCertIssuerDetails;
  }

  public void setPkiCertIssuerDetails(@javax.annotation.Nullable PKICertificateIssueDetails pkiCertIssuerDetails) {
    this.pkiCertIssuerDetails = pkiCertIssuerDetails;
  }


  public CertificateIssueInfo sshCertIssuerDetails(@javax.annotation.Nullable SSHCertificateIssueDetails sshCertIssuerDetails) {
    this.sshCertIssuerDetails = sshCertIssuerDetails;
    return this;
  }

  /**
   * Get sshCertIssuerDetails
   * @return sshCertIssuerDetails
   */
  @javax.annotation.Nullable
  public SSHCertificateIssueDetails getSshCertIssuerDetails() {
    return sshCertIssuerDetails;
  }

  public void setSshCertIssuerDetails(@javax.annotation.Nullable SSHCertificateIssueDetails sshCertIssuerDetails) {
    this.sshCertIssuerDetails = sshCertIssuerDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateIssueInfo certificateIssueInfo = (CertificateIssueInfo) o;
    return Objects.equals(this.certIssuerType, certificateIssueInfo.certIssuerType) &&
        Objects.equals(this.maxTtl, certificateIssueInfo.maxTtl) &&
        Objects.equals(this.pkiCertIssuerDetails, certificateIssueInfo.pkiCertIssuerDetails) &&
        Objects.equals(this.sshCertIssuerDetails, certificateIssueInfo.sshCertIssuerDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certIssuerType, maxTtl, pkiCertIssuerDetails, sshCertIssuerDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateIssueInfo {\n");
    sb.append("    certIssuerType: ").append(toIndentedString(certIssuerType)).append("\n");
    sb.append("    maxTtl: ").append(toIndentedString(maxTtl)).append("\n");
    sb.append("    pkiCertIssuerDetails: ").append(toIndentedString(pkiCertIssuerDetails)).append("\n");
    sb.append("    sshCertIssuerDetails: ").append(toIndentedString(sshCertIssuerDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_issuer_type");
    openapiFields.add("max_ttl");
    openapiFields.add("pki_cert_issuer_details");
    openapiFields.add("ssh_cert_issuer_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateIssueInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateIssueInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateIssueInfo is not found in the empty JSON string", CertificateIssueInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateIssueInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateIssueInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cert_issuer_type") != null && !jsonObj.get("cert_issuer_type").isJsonNull()) && !jsonObj.get("cert_issuer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_issuer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert_issuer_type").toString()));
      }
      // validate the optional field `pki_cert_issuer_details`
      if (jsonObj.get("pki_cert_issuer_details") != null && !jsonObj.get("pki_cert_issuer_details").isJsonNull()) {
        PKICertificateIssueDetails.validateJsonElement(jsonObj.get("pki_cert_issuer_details"));
      }
      // validate the optional field `ssh_cert_issuer_details`
      if (jsonObj.get("ssh_cert_issuer_details") != null && !jsonObj.get("ssh_cert_issuer_details").isJsonNull()) {
        SSHCertificateIssueDetails.validateJsonElement(jsonObj.get("ssh_cert_issuer_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateIssueInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateIssueInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateIssueInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateIssueInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateIssueInfo>() {
           @Override
           public void write(JsonWriter out, CertificateIssueInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateIssueInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateIssueInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateIssueInfo
   * @throws IOException if the JSON string is invalid with respect to CertificateIssueInfo
   */
  public static CertificateIssueInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateIssueInfo.class);
  }

  /**
   * Convert an instance of CertificateIssueInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

