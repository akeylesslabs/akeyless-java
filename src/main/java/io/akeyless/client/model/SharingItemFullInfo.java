/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.RuleAssigner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SharingItemFullInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SharingItemFullInfo {
  public static final String SERIALIZED_NAME_ASSIGNERS = "assigners";
  @SerializedName(SERIALIZED_NAME_ASSIGNERS)
  @javax.annotation.Nullable
  private List<RuleAssigner> assigners = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  @javax.annotation.Nullable
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CB = "cb";
  @SerializedName(SERIALIZED_NAME_CB)
  @javax.annotation.Nullable
  private Integer cb;

  public static final String SERIALIZED_NAME_IS_LIMIT_ACCESS = "is_limit_access";
  @SerializedName(SERIALIZED_NAME_IS_LIMIT_ACCESS)
  @javax.annotation.Nullable
  private Boolean isLimitAccess;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_ACCESS_USED = "number_of_access_used";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ACCESS_USED)
  @javax.annotation.Nullable
  private Long numberOfAccessUsed;

  public static final String SERIALIZED_NAME_NUMBER_OF_ALLOWED_ACCESS = "number_of_allowed_access";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ALLOWED_ACCESS)
  @javax.annotation.Nullable
  private Long numberOfAllowedAccess;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private Long startTime;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Long ttl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public SharingItemFullInfo() {
  }

  public SharingItemFullInfo assigners(@javax.annotation.Nullable List<RuleAssigner> assigners) {
    this.assigners = assigners;
    return this;
  }

  public SharingItemFullInfo addAssignersItem(RuleAssigner assignersItem) {
    if (this.assigners == null) {
      this.assigners = new ArrayList<>();
    }
    this.assigners.add(assignersItem);
    return this;
  }

  /**
   * Get assigners
   * @return assigners
   */
  @javax.annotation.Nullable
  public List<RuleAssigner> getAssigners() {
    return assigners;
  }

  public void setAssigners(@javax.annotation.Nullable List<RuleAssigner> assigners) {
    this.assigners = assigners;
  }


  public SharingItemFullInfo capabilities(@javax.annotation.Nullable List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public SharingItemFullInfo addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The approved/denied capabilities in the path
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(@javax.annotation.Nullable List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public SharingItemFullInfo cb(@javax.annotation.Nullable Integer cb) {
    this.cb = cb;
    return this;
  }

  /**
   * Get cb
   * @return cb
   */
  @javax.annotation.Nullable
  public Integer getCb() {
    return cb;
  }

  public void setCb(@javax.annotation.Nullable Integer cb) {
    this.cb = cb;
  }


  public SharingItemFullInfo isLimitAccess(@javax.annotation.Nullable Boolean isLimitAccess) {
    this.isLimitAccess = isLimitAccess;
    return this;
  }

  /**
   * flag that indicate that this rule is allowed to be access RemainingAccess of times.
   * @return isLimitAccess
   */
  @javax.annotation.Nullable
  public Boolean getIsLimitAccess() {
    return isLimitAccess;
  }

  public void setIsLimitAccess(@javax.annotation.Nullable Boolean isLimitAccess) {
    this.isLimitAccess = isLimitAccess;
  }


  public SharingItemFullInfo name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public SharingItemFullInfo numberOfAccessUsed(@javax.annotation.Nullable Long numberOfAccessUsed) {
    this.numberOfAccessUsed = numberOfAccessUsed;
    return this;
  }

  /**
   * Get numberOfAccessUsed
   * @return numberOfAccessUsed
   */
  @javax.annotation.Nullable
  public Long getNumberOfAccessUsed() {
    return numberOfAccessUsed;
  }

  public void setNumberOfAccessUsed(@javax.annotation.Nullable Long numberOfAccessUsed) {
    this.numberOfAccessUsed = numberOfAccessUsed;
  }


  public SharingItemFullInfo numberOfAllowedAccess(@javax.annotation.Nullable Long numberOfAllowedAccess) {
    this.numberOfAllowedAccess = numberOfAllowedAccess;
    return this;
  }

  /**
   * Get numberOfAllowedAccess
   * @return numberOfAllowedAccess
   */
  @javax.annotation.Nullable
  public Long getNumberOfAllowedAccess() {
    return numberOfAllowedAccess;
  }

  public void setNumberOfAllowedAccess(@javax.annotation.Nullable Long numberOfAllowedAccess) {
    this.numberOfAllowedAccess = numberOfAllowedAccess;
  }


  public SharingItemFullInfo path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * The path the rule refers to
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public SharingItemFullInfo startTime(@javax.annotation.Nullable Long startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable Long startTime) {
    this.startTime = startTime;
  }


  public SharingItemFullInfo ttl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
  }


  public SharingItemFullInfo type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharingItemFullInfo sharingItemFullInfo = (SharingItemFullInfo) o;
    return Objects.equals(this.assigners, sharingItemFullInfo.assigners) &&
        Objects.equals(this.capabilities, sharingItemFullInfo.capabilities) &&
        Objects.equals(this.cb, sharingItemFullInfo.cb) &&
        Objects.equals(this.isLimitAccess, sharingItemFullInfo.isLimitAccess) &&
        Objects.equals(this.name, sharingItemFullInfo.name) &&
        Objects.equals(this.numberOfAccessUsed, sharingItemFullInfo.numberOfAccessUsed) &&
        Objects.equals(this.numberOfAllowedAccess, sharingItemFullInfo.numberOfAllowedAccess) &&
        Objects.equals(this.path, sharingItemFullInfo.path) &&
        Objects.equals(this.startTime, sharingItemFullInfo.startTime) &&
        Objects.equals(this.ttl, sharingItemFullInfo.ttl) &&
        Objects.equals(this.type, sharingItemFullInfo.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigners, capabilities, cb, isLimitAccess, name, numberOfAccessUsed, numberOfAllowedAccess, path, startTime, ttl, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharingItemFullInfo {\n");
    sb.append("    assigners: ").append(toIndentedString(assigners)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    cb: ").append(toIndentedString(cb)).append("\n");
    sb.append("    isLimitAccess: ").append(toIndentedString(isLimitAccess)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfAccessUsed: ").append(toIndentedString(numberOfAccessUsed)).append("\n");
    sb.append("    numberOfAllowedAccess: ").append(toIndentedString(numberOfAllowedAccess)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigners");
    openapiFields.add("capabilities");
    openapiFields.add("cb");
    openapiFields.add("is_limit_access");
    openapiFields.add("name");
    openapiFields.add("number_of_access_used");
    openapiFields.add("number_of_allowed_access");
    openapiFields.add("path");
    openapiFields.add("start_time");
    openapiFields.add("ttl");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharingItemFullInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharingItemFullInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharingItemFullInfo is not found in the empty JSON string", SharingItemFullInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharingItemFullInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharingItemFullInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assigners") != null && !jsonObj.get("assigners").isJsonNull()) {
        JsonArray jsonArrayassigners = jsonObj.getAsJsonArray("assigners");
        if (jsonArrayassigners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assigners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assigners` to be an array in the JSON string but got `%s`", jsonObj.get("assigners").toString()));
          }

          // validate the optional field `assigners` (array)
          for (int i = 0; i < jsonArrayassigners.size(); i++) {
            RuleAssigner.validateJsonElement(jsonArrayassigners.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharingItemFullInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharingItemFullInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharingItemFullInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharingItemFullInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SharingItemFullInfo>() {
           @Override
           public void write(JsonWriter out, SharingItemFullInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharingItemFullInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharingItemFullInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharingItemFullInfo
   * @throws IOException if the JSON string is invalid with respect to SharingItemFullInfo
   */
  public static SharingItemFullInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharingItemFullInfo.class);
  }

  /**
   * Convert an instance of SharingItemFullInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

