/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretUpdateGcp is a command that updates a GCP dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretUpdateGcp {
  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_GCP_CRED_TYPE = "gcp-cred-type";
  @SerializedName(SERIALIZED_NAME_GCP_CRED_TYPE)
  @javax.annotation.Nullable
  private String gcpCredType;

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  @javax.annotation.Nullable
  private String gcpKey;

  public static final String SERIALIZED_NAME_GCP_KEY_ALGO = "gcp-key-algo";
  @SerializedName(SERIALIZED_NAME_GCP_KEY_ALGO)
  @javax.annotation.Nullable
  private String gcpKeyAlgo;

  public static final String SERIALIZED_NAME_GCP_SA_EMAIL = "gcp-sa-email";
  @SerializedName(SERIALIZED_NAME_GCP_SA_EMAIL)
  @javax.annotation.Nullable
  private String gcpSaEmail;

  public static final String SERIALIZED_NAME_GCP_TOKEN_SCOPES = "gcp-token-scopes";
  @SerializedName(SERIALIZED_NAME_GCP_TOKEN_SCOPES)
  @javax.annotation.Nullable
  private String gcpTokenScopes;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_ROLE_BINDING = "role-binding";
  @SerializedName(SERIALIZED_NAME_ROLE_BINDING)
  @javax.annotation.Nullable
  private String roleBinding;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_TYPE = "service-account-type";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_TYPE)
  @javax.annotation.Nonnull
  private String serviceAccountType = "fixed";

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretUpdateGcp() {
  }

  public DynamicSecretUpdateGcp deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretUpdateGcp description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretUpdateGcp gcpCredType(@javax.annotation.Nullable String gcpCredType) {
    this.gcpCredType = gcpCredType;
    return this;
  }

  /**
   * Get gcpCredType
   * @return gcpCredType
   */
  @javax.annotation.Nullable
  public String getGcpCredType() {
    return gcpCredType;
  }

  public void setGcpCredType(@javax.annotation.Nullable String gcpCredType) {
    this.gcpCredType = gcpCredType;
  }


  public DynamicSecretUpdateGcp gcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
    return this;
  }

  /**
   * Base64-encoded service account private key text
   * @return gcpKey
   */
  @javax.annotation.Nullable
  public String getGcpKey() {
    return gcpKey;
  }

  public void setGcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public DynamicSecretUpdateGcp gcpKeyAlgo(@javax.annotation.Nullable String gcpKeyAlgo) {
    this.gcpKeyAlgo = gcpKeyAlgo;
    return this;
  }

  /**
   * Service account key algorithm, e.g. KEY_ALG_RSA_1024
   * @return gcpKeyAlgo
   */
  @javax.annotation.Nullable
  public String getGcpKeyAlgo() {
    return gcpKeyAlgo;
  }

  public void setGcpKeyAlgo(@javax.annotation.Nullable String gcpKeyAlgo) {
    this.gcpKeyAlgo = gcpKeyAlgo;
  }


  public DynamicSecretUpdateGcp gcpSaEmail(@javax.annotation.Nullable String gcpSaEmail) {
    this.gcpSaEmail = gcpSaEmail;
    return this;
  }

  /**
   * The email of the fixed service acocunt to generate keys or tokens for. (revelant for service-account-type&#x3D;fixed)
   * @return gcpSaEmail
   */
  @javax.annotation.Nullable
  public String getGcpSaEmail() {
    return gcpSaEmail;
  }

  public void setGcpSaEmail(@javax.annotation.Nullable String gcpSaEmail) {
    this.gcpSaEmail = gcpSaEmail;
  }


  public DynamicSecretUpdateGcp gcpTokenScopes(@javax.annotation.Nullable String gcpTokenScopes) {
    this.gcpTokenScopes = gcpTokenScopes;
    return this;
  }

  /**
   * Access token scopes list, e.g. scope1,scope2
   * @return gcpTokenScopes
   */
  @javax.annotation.Nullable
  public String getGcpTokenScopes() {
    return gcpTokenScopes;
  }

  public void setGcpTokenScopes(@javax.annotation.Nullable String gcpTokenScopes) {
    this.gcpTokenScopes = gcpTokenScopes;
  }


  public DynamicSecretUpdateGcp json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretUpdateGcp name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretUpdateGcp newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public DynamicSecretUpdateGcp producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretUpdateGcp roleBinding(@javax.annotation.Nullable String roleBinding) {
    this.roleBinding = roleBinding;
    return this;
  }

  /**
   * Role binding definitions in json format
   * @return roleBinding
   */
  @javax.annotation.Nullable
  public String getRoleBinding() {
    return roleBinding;
  }

  public void setRoleBinding(@javax.annotation.Nullable String roleBinding) {
    this.roleBinding = roleBinding;
  }


  public DynamicSecretUpdateGcp serviceAccountType(@javax.annotation.Nonnull String serviceAccountType) {
    this.serviceAccountType = serviceAccountType;
    return this;
  }

  /**
   * The type of the gcp dynamic secret. Options[fixed, dynamic]
   * @return serviceAccountType
   */
  @javax.annotation.Nonnull
  public String getServiceAccountType() {
    return serviceAccountType;
  }

  public void setServiceAccountType(@javax.annotation.Nonnull String serviceAccountType) {
    this.serviceAccountType = serviceAccountType;
  }


  public DynamicSecretUpdateGcp tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretUpdateGcp addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretUpdateGcp targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretUpdateGcp token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretUpdateGcp uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretUpdateGcp userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretUpdateGcp dynamicSecretUpdateGcp = (DynamicSecretUpdateGcp) o;
    return Objects.equals(this.deleteProtection, dynamicSecretUpdateGcp.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretUpdateGcp.description) &&
        Objects.equals(this.gcpCredType, dynamicSecretUpdateGcp.gcpCredType) &&
        Objects.equals(this.gcpKey, dynamicSecretUpdateGcp.gcpKey) &&
        Objects.equals(this.gcpKeyAlgo, dynamicSecretUpdateGcp.gcpKeyAlgo) &&
        Objects.equals(this.gcpSaEmail, dynamicSecretUpdateGcp.gcpSaEmail) &&
        Objects.equals(this.gcpTokenScopes, dynamicSecretUpdateGcp.gcpTokenScopes) &&
        Objects.equals(this.json, dynamicSecretUpdateGcp.json) &&
        Objects.equals(this.name, dynamicSecretUpdateGcp.name) &&
        Objects.equals(this.newName, dynamicSecretUpdateGcp.newName) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretUpdateGcp.producerEncryptionKeyName) &&
        Objects.equals(this.roleBinding, dynamicSecretUpdateGcp.roleBinding) &&
        Objects.equals(this.serviceAccountType, dynamicSecretUpdateGcp.serviceAccountType) &&
        Objects.equals(this.tags, dynamicSecretUpdateGcp.tags) &&
        Objects.equals(this.targetName, dynamicSecretUpdateGcp.targetName) &&
        Objects.equals(this.token, dynamicSecretUpdateGcp.token) &&
        Objects.equals(this.uidToken, dynamicSecretUpdateGcp.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretUpdateGcp.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteProtection, description, gcpCredType, gcpKey, gcpKeyAlgo, gcpSaEmail, gcpTokenScopes, json, name, newName, producerEncryptionKeyName, roleBinding, serviceAccountType, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretUpdateGcp {\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gcpCredType: ").append(toIndentedString(gcpCredType)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    gcpKeyAlgo: ").append(toIndentedString(gcpKeyAlgo)).append("\n");
    sb.append("    gcpSaEmail: ").append(toIndentedString(gcpSaEmail)).append("\n");
    sb.append("    gcpTokenScopes: ").append(toIndentedString(gcpTokenScopes)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    roleBinding: ").append(toIndentedString(roleBinding)).append("\n");
    sb.append("    serviceAccountType: ").append(toIndentedString(serviceAccountType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("gcp-cred-type");
    openapiFields.add("gcp-key");
    openapiFields.add("gcp-key-algo");
    openapiFields.add("gcp-sa-email");
    openapiFields.add("gcp-token-scopes");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("role-binding");
    openapiFields.add("service-account-type");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("service-account-type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretUpdateGcp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretUpdateGcp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretUpdateGcp is not found in the empty JSON string", DynamicSecretUpdateGcp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretUpdateGcp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretUpdateGcp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretUpdateGcp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gcp-cred-type") != null && !jsonObj.get("gcp-cred-type").isJsonNull()) && !jsonObj.get("gcp-cred-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-cred-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-cred-type").toString()));
      }
      if ((jsonObj.get("gcp-key") != null && !jsonObj.get("gcp-key").isJsonNull()) && !jsonObj.get("gcp-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key").toString()));
      }
      if ((jsonObj.get("gcp-key-algo") != null && !jsonObj.get("gcp-key-algo").isJsonNull()) && !jsonObj.get("gcp-key-algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key-algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key-algo").toString()));
      }
      if ((jsonObj.get("gcp-sa-email") != null && !jsonObj.get("gcp-sa-email").isJsonNull()) && !jsonObj.get("gcp-sa-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-sa-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-sa-email").toString()));
      }
      if ((jsonObj.get("gcp-token-scopes") != null && !jsonObj.get("gcp-token-scopes").isJsonNull()) && !jsonObj.get("gcp-token-scopes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-token-scopes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-token-scopes").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("role-binding") != null && !jsonObj.get("role-binding").isJsonNull()) && !jsonObj.get("role-binding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role-binding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role-binding").toString()));
      }
      if (!jsonObj.get("service-account-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service-account-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service-account-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretUpdateGcp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretUpdateGcp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretUpdateGcp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretUpdateGcp.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretUpdateGcp>() {
           @Override
           public void write(JsonWriter out, DynamicSecretUpdateGcp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretUpdateGcp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretUpdateGcp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretUpdateGcp
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretUpdateGcp
   */
  public static DynamicSecretUpdateGcp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretUpdateGcp.class);
  }

  /**
   * Convert an instance of DynamicSecretUpdateGcp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

