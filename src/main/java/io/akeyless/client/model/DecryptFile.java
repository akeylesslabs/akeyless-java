/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DecryptFile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DecryptFile {
  public static final String SERIALIZED_NAME_CYPHERTEXT_HEADER = "cyphertext-header";
  @SerializedName(SERIALIZED_NAME_CYPHERTEXT_HEADER)
  private String cyphertextHeader;

  public static final String SERIALIZED_NAME_DISPLAY_ID = "display-id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  private String displayId;

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private String in;

  public static final String SERIALIZED_NAME_ITEM_ID = "item-id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Long itemId;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_NAME = "key-name";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_OUT = "out";
  @SerializedName(SERIALIZED_NAME_OUT)
  private String out;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public DecryptFile() { 
  }

  public DecryptFile cyphertextHeader(String cyphertextHeader) {
    
    this.cyphertextHeader = cyphertextHeader;
    return this;
  }

   /**
   * Get cyphertextHeader
   * @return cyphertextHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCyphertextHeader() {
    return cyphertextHeader;
  }


  public void setCyphertextHeader(String cyphertextHeader) {
    this.cyphertextHeader = cyphertextHeader;
  }


  public DecryptFile displayId(String displayId) {
    
    this.displayId = displayId;
    return this;
  }

   /**
   * The display id of the key to use in the decryption process
   * @return displayId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display id of the key to use in the decryption process")

  public String getDisplayId() {
    return displayId;
  }


  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }


  public DecryptFile in(String in) {
    
    this.in = in;
    return this;
  }

   /**
   * Path to the file to be decrypted. If not provided, the content will be taken from stdin
   * @return in
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Path to the file to be decrypted. If not provided, the content will be taken from stdin")

  public String getIn() {
    return in;
  }


  public void setIn(String in) {
    this.in = in;
  }


  public DecryptFile itemId(Long itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * The item id of the key to use in the decryption process
   * @return itemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item id of the key to use in the decryption process")

  public Long getItemId() {
    return itemId;
  }


  public void setItemId(Long itemId) {
    this.itemId = itemId;
  }


  public DecryptFile json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public DecryptFile keyName(String keyName) {
    
    this.keyName = keyName;
    return this;
  }

   /**
   * The name of the key to use in the decryption process
   * @return keyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the key to use in the decryption process")

  public String getKeyName() {
    return keyName;
  }


  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public DecryptFile out(String out) {
    
    this.out = out;
    return this;
  }

   /**
   * Path to the output file. If not provided, the output will be sent to stdout
   * @return out
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path to the output file. If not provided, the output will be sent to stdout")

  public String getOut() {
    return out;
  }


  public void setOut(String out) {
    this.out = out;
  }


  public DecryptFile token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public DecryptFile uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecryptFile decryptFile = (DecryptFile) o;
    return Objects.equals(this.cyphertextHeader, decryptFile.cyphertextHeader) &&
        Objects.equals(this.displayId, decryptFile.displayId) &&
        Objects.equals(this.in, decryptFile.in) &&
        Objects.equals(this.itemId, decryptFile.itemId) &&
        Objects.equals(this.json, decryptFile.json) &&
        Objects.equals(this.keyName, decryptFile.keyName) &&
        Objects.equals(this.out, decryptFile.out) &&
        Objects.equals(this.token, decryptFile.token) &&
        Objects.equals(this.uidToken, decryptFile.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cyphertextHeader, displayId, in, itemId, json, keyName, out, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecryptFile {\n");
    sb.append("    cyphertextHeader: ").append(toIndentedString(cyphertextHeader)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    out: ").append(toIndentedString(out)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

