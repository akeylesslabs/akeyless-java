/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CertificateTemplateInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CertificateTemplateInfo {
  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  @javax.annotation.Nullable
  private String commonName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_CSR_CNF_BASE64 = "csr_cnf_base_64";
  @SerializedName(SERIALIZED_NAME_CSR_CNF_BASE64)
  @javax.annotation.Nullable
  private String csrCnfBase64;

  public static final String SERIALIZED_NAME_DIGEST_ALGO = "digest_algo";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGO)
  @javax.annotation.Nullable
  private String digestAlgo;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  @javax.annotation.Nullable
  private String locality;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private String organization;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  @javax.annotation.Nullable
  private String province;

  public static final String SERIALIZED_NAME_SELF_SIGNED_ENABLED = "self_signed_enabled";
  @SerializedName(SERIALIZED_NAME_SELF_SIGNED_ENABLED)
  @javax.annotation.Nullable
  private Boolean selfSignedEnabled;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Long ttl;

  public CertificateTemplateInfo() {
  }

  public CertificateTemplateInfo commonName(@javax.annotation.Nullable String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(@javax.annotation.Nullable String commonName) {
    this.commonName = commonName;
  }


  public CertificateTemplateInfo country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public CertificateTemplateInfo csrCnfBase64(@javax.annotation.Nullable String csrCnfBase64) {
    this.csrCnfBase64 = csrCnfBase64;
    return this;
  }

  /**
   * Get csrCnfBase64
   * @return csrCnfBase64
   */
  @javax.annotation.Nullable
  public String getCsrCnfBase64() {
    return csrCnfBase64;
  }

  public void setCsrCnfBase64(@javax.annotation.Nullable String csrCnfBase64) {
    this.csrCnfBase64 = csrCnfBase64;
  }


  public CertificateTemplateInfo digestAlgo(@javax.annotation.Nullable String digestAlgo) {
    this.digestAlgo = digestAlgo;
    return this;
  }

  /**
   * Get digestAlgo
   * @return digestAlgo
   */
  @javax.annotation.Nullable
  public String getDigestAlgo() {
    return digestAlgo;
  }

  public void setDigestAlgo(@javax.annotation.Nullable String digestAlgo) {
    this.digestAlgo = digestAlgo;
  }


  public CertificateTemplateInfo locality(@javax.annotation.Nullable String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * Get locality
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(@javax.annotation.Nullable String locality) {
    this.locality = locality;
  }


  public CertificateTemplateInfo organization(@javax.annotation.Nullable String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable String organization) {
    this.organization = organization;
  }


  public CertificateTemplateInfo province(@javax.annotation.Nullable String province) {
    this.province = province;
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public String getProvince() {
    return province;
  }

  public void setProvince(@javax.annotation.Nullable String province) {
    this.province = province;
  }


  public CertificateTemplateInfo selfSignedEnabled(@javax.annotation.Nullable Boolean selfSignedEnabled) {
    this.selfSignedEnabled = selfSignedEnabled;
    return this;
  }

  /**
   * Get selfSignedEnabled
   * @return selfSignedEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSelfSignedEnabled() {
    return selfSignedEnabled;
  }

  public void setSelfSignedEnabled(@javax.annotation.Nullable Boolean selfSignedEnabled) {
    this.selfSignedEnabled = selfSignedEnabled;
  }


  public CertificateTemplateInfo ttl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Long ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateTemplateInfo certificateTemplateInfo = (CertificateTemplateInfo) o;
    return Objects.equals(this.commonName, certificateTemplateInfo.commonName) &&
        Objects.equals(this.country, certificateTemplateInfo.country) &&
        Objects.equals(this.csrCnfBase64, certificateTemplateInfo.csrCnfBase64) &&
        Objects.equals(this.digestAlgo, certificateTemplateInfo.digestAlgo) &&
        Objects.equals(this.locality, certificateTemplateInfo.locality) &&
        Objects.equals(this.organization, certificateTemplateInfo.organization) &&
        Objects.equals(this.province, certificateTemplateInfo.province) &&
        Objects.equals(this.selfSignedEnabled, certificateTemplateInfo.selfSignedEnabled) &&
        Objects.equals(this.ttl, certificateTemplateInfo.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, country, csrCnfBase64, digestAlgo, locality, organization, province, selfSignedEnabled, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateTemplateInfo {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    csrCnfBase64: ").append(toIndentedString(csrCnfBase64)).append("\n");
    sb.append("    digestAlgo: ").append(toIndentedString(digestAlgo)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    selfSignedEnabled: ").append(toIndentedString(selfSignedEnabled)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("common_name");
    openapiFields.add("country");
    openapiFields.add("csr_cnf_base_64");
    openapiFields.add("digest_algo");
    openapiFields.add("locality");
    openapiFields.add("organization");
    openapiFields.add("province");
    openapiFields.add("self_signed_enabled");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateTemplateInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateTemplateInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateTemplateInfo is not found in the empty JSON string", CertificateTemplateInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateTemplateInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateTemplateInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("common_name") != null && !jsonObj.get("common_name").isJsonNull()) && !jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("csr_cnf_base_64") != null && !jsonObj.get("csr_cnf_base_64").isJsonNull()) && !jsonObj.get("csr_cnf_base_64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr_cnf_base_64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr_cnf_base_64").toString()));
      }
      if ((jsonObj.get("digest_algo") != null && !jsonObj.get("digest_algo").isJsonNull()) && !jsonObj.get("digest_algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest_algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest_algo").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) && !jsonObj.get("province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateTemplateInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateTemplateInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateTemplateInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateTemplateInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateTemplateInfo>() {
           @Override
           public void write(JsonWriter out, CertificateTemplateInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateTemplateInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateTemplateInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateTemplateInfo
   * @throws IOException if the JSON string is invalid with respect to CertificateTemplateInfo
   */
  public static CertificateTemplateInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateTemplateInfo.class);
  }

  /**
   * Convert an instance of CertificateTemplateInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

