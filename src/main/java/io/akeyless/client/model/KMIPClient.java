/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.PathRule;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * KMIPClient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class KMIPClient {
  public static final String SERIALIZED_NAME_ACTIVATE_KEYS_ON_CREATION = "activate_keys_on_creation";
  @SerializedName(SERIALIZED_NAME_ACTIVATE_KEYS_ON_CREATION)
  @javax.annotation.Nullable
  private Boolean activateKeysOnCreation;

  public static final String SERIALIZED_NAME_CERTIFICATE_ISSUE_DATE = "certificate_issue_date";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ISSUE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime certificateIssueDate;

  public static final String SERIALIZED_NAME_CERTIFICATE_TTL_IN_SECONDS = "certificate_ttl_in_seconds";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TTL_IN_SECONDS)
  @javax.annotation.Nullable
  private Long certificateTtlInSeconds;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  @javax.annotation.Nullable
  private List<PathRule> rules = new ArrayList<>();

  public KMIPClient() {
  }

  public KMIPClient activateKeysOnCreation(@javax.annotation.Nullable Boolean activateKeysOnCreation) {
    this.activateKeysOnCreation = activateKeysOnCreation;
    return this;
  }

  /**
   * Get activateKeysOnCreation
   * @return activateKeysOnCreation
   */
  @javax.annotation.Nullable
  public Boolean getActivateKeysOnCreation() {
    return activateKeysOnCreation;
  }

  public void setActivateKeysOnCreation(@javax.annotation.Nullable Boolean activateKeysOnCreation) {
    this.activateKeysOnCreation = activateKeysOnCreation;
  }


  public KMIPClient certificateIssueDate(@javax.annotation.Nullable OffsetDateTime certificateIssueDate) {
    this.certificateIssueDate = certificateIssueDate;
    return this;
  }

  /**
   * Get certificateIssueDate
   * @return certificateIssueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateIssueDate() {
    return certificateIssueDate;
  }

  public void setCertificateIssueDate(@javax.annotation.Nullable OffsetDateTime certificateIssueDate) {
    this.certificateIssueDate = certificateIssueDate;
  }


  public KMIPClient certificateTtlInSeconds(@javax.annotation.Nullable Long certificateTtlInSeconds) {
    this.certificateTtlInSeconds = certificateTtlInSeconds;
    return this;
  }

  /**
   * Get certificateTtlInSeconds
   * @return certificateTtlInSeconds
   */
  @javax.annotation.Nullable
  public Long getCertificateTtlInSeconds() {
    return certificateTtlInSeconds;
  }

  public void setCertificateTtlInSeconds(@javax.annotation.Nullable Long certificateTtlInSeconds) {
    this.certificateTtlInSeconds = certificateTtlInSeconds;
  }


  public KMIPClient id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public KMIPClient name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public KMIPClient rules(@javax.annotation.Nullable List<PathRule> rules) {
    this.rules = rules;
    return this;
  }

  public KMIPClient addRulesItem(PathRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nullable
  public List<PathRule> getRules() {
    return rules;
  }

  public void setRules(@javax.annotation.Nullable List<PathRule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KMIPClient kmIPClient = (KMIPClient) o;
    return Objects.equals(this.activateKeysOnCreation, kmIPClient.activateKeysOnCreation) &&
        Objects.equals(this.certificateIssueDate, kmIPClient.certificateIssueDate) &&
        Objects.equals(this.certificateTtlInSeconds, kmIPClient.certificateTtlInSeconds) &&
        Objects.equals(this.id, kmIPClient.id) &&
        Objects.equals(this.name, kmIPClient.name) &&
        Objects.equals(this.rules, kmIPClient.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activateKeysOnCreation, certificateIssueDate, certificateTtlInSeconds, id, name, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KMIPClient {\n");
    sb.append("    activateKeysOnCreation: ").append(toIndentedString(activateKeysOnCreation)).append("\n");
    sb.append("    certificateIssueDate: ").append(toIndentedString(certificateIssueDate)).append("\n");
    sb.append("    certificateTtlInSeconds: ").append(toIndentedString(certificateTtlInSeconds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activate_keys_on_creation");
    openapiFields.add("certificate_issue_date");
    openapiFields.add("certificate_ttl_in_seconds");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KMIPClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KMIPClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KMIPClient is not found in the empty JSON string", KMIPClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KMIPClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KMIPClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            PathRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KMIPClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KMIPClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KMIPClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KMIPClient.class));

       return (TypeAdapter<T>) new TypeAdapter<KMIPClient>() {
           @Override
           public void write(JsonWriter out, KMIPClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KMIPClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KMIPClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KMIPClient
   * @throws IOException if the JSON string is invalid with respect to KMIPClient
   */
  public static KMIPClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KMIPClient.class);
  }

  /**
   * Convert an instance of KMIPClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

