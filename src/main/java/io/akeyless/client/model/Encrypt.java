/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * Encrypt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Encrypt {
  public static final String SERIALIZED_NAME_DISPLAY_ID = "display-id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  @javax.annotation.Nullable
  private String displayId;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONTEXT = "encryption-context";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONTEXT)
  @javax.annotation.Nullable
  private Map<String, String> encryptionContext = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_FORMAT = "input-format";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT)
  @javax.annotation.Nullable
  private String inputFormat;

  public static final String SERIALIZED_NAME_ITEM_ID = "item-id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  @javax.annotation.Nullable
  private Long itemId;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_NAME = "key-name";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  @javax.annotation.Nonnull
  private String keyName;

  public static final String SERIALIZED_NAME_PLAINTEXT = "plaintext";
  @SerializedName(SERIALIZED_NAME_PLAINTEXT)
  @javax.annotation.Nullable
  private String plaintext;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private Integer version;

  public Encrypt() {
  }

  public Encrypt displayId(@javax.annotation.Nullable String displayId) {
    this.displayId = displayId;
    return this;
  }

  /**
   * The display id of the key to use in the encryption process
   * @return displayId
   */
  @javax.annotation.Nullable
  public String getDisplayId() {
    return displayId;
  }

  public void setDisplayId(@javax.annotation.Nullable String displayId) {
    this.displayId = displayId;
  }


  public Encrypt encryptionContext(@javax.annotation.Nullable Map<String, String> encryptionContext) {
    this.encryptionContext = encryptionContext;
    return this;
  }

  public Encrypt putEncryptionContextItem(String key, String encryptionContextItem) {
    if (this.encryptionContext == null) {
      this.encryptionContext = new HashMap<>();
    }
    this.encryptionContext.put(key, encryptionContextItem);
    return this;
  }

  /**
   * name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
   * @return encryptionContext
   */
  @javax.annotation.Nullable
  public Map<String, String> getEncryptionContext() {
    return encryptionContext;
  }

  public void setEncryptionContext(@javax.annotation.Nullable Map<String, String> encryptionContext) {
    this.encryptionContext = encryptionContext;
  }


  public Encrypt inputFormat(@javax.annotation.Nullable String inputFormat) {
    this.inputFormat = inputFormat;
    return this;
  }

  /**
   * Select default assumed format for any plaintext input. Currently supported options: [base64]
   * @return inputFormat
   */
  @javax.annotation.Nullable
  public String getInputFormat() {
    return inputFormat;
  }

  public void setInputFormat(@javax.annotation.Nullable String inputFormat) {
    this.inputFormat = inputFormat;
  }


  public Encrypt itemId(@javax.annotation.Nullable Long itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The item id of the key to use in the encryption process
   * @return itemId
   */
  @javax.annotation.Nullable
  public Long getItemId() {
    return itemId;
  }

  public void setItemId(@javax.annotation.Nullable Long itemId) {
    this.itemId = itemId;
  }


  public Encrypt json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public Encrypt keyName(@javax.annotation.Nonnull String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * The name of the key to use in the encryption process
   * @return keyName
   */
  @javax.annotation.Nonnull
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(@javax.annotation.Nonnull String keyName) {
    this.keyName = keyName;
  }


  public Encrypt plaintext(@javax.annotation.Nullable String plaintext) {
    this.plaintext = plaintext;
    return this;
  }

  /**
   * Data to be encrypted
   * @return plaintext
   */
  @javax.annotation.Nullable
  public String getPlaintext() {
    return plaintext;
  }

  public void setPlaintext(@javax.annotation.Nullable String plaintext) {
    this.plaintext = plaintext;
  }


  public Encrypt token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public Encrypt uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public Encrypt version(@javax.annotation.Nullable Integer version) {
    this.version = version;
    return this;
  }

  /**
   * key version (relevant only for classic key)
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Encrypt encrypt = (Encrypt) o;
    return Objects.equals(this.displayId, encrypt.displayId) &&
        Objects.equals(this.encryptionContext, encrypt.encryptionContext) &&
        Objects.equals(this.inputFormat, encrypt.inputFormat) &&
        Objects.equals(this.itemId, encrypt.itemId) &&
        Objects.equals(this.json, encrypt.json) &&
        Objects.equals(this.keyName, encrypt.keyName) &&
        Objects.equals(this.plaintext, encrypt.plaintext) &&
        Objects.equals(this.token, encrypt.token) &&
        Objects.equals(this.uidToken, encrypt.uidToken) &&
        Objects.equals(this.version, encrypt.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayId, encryptionContext, inputFormat, itemId, json, keyName, plaintext, token, uidToken, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Encrypt {\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    encryptionContext: ").append(toIndentedString(encryptionContext)).append("\n");
    sb.append("    inputFormat: ").append(toIndentedString(inputFormat)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    plaintext: ").append(toIndentedString(plaintext)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display-id");
    openapiFields.add("encryption-context");
    openapiFields.add("input-format");
    openapiFields.add("item-id");
    openapiFields.add("json");
    openapiFields.add("key-name");
    openapiFields.add("plaintext");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("key-name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Encrypt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Encrypt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Encrypt is not found in the empty JSON string", Encrypt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Encrypt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Encrypt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Encrypt.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display-id") != null && !jsonObj.get("display-id").isJsonNull()) && !jsonObj.get("display-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display-id").toString()));
      }
      if ((jsonObj.get("input-format") != null && !jsonObj.get("input-format").isJsonNull()) && !jsonObj.get("input-format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input-format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input-format").toString()));
      }
      if (!jsonObj.get("key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-name").toString()));
      }
      if ((jsonObj.get("plaintext") != null && !jsonObj.get("plaintext").isJsonNull()) && !jsonObj.get("plaintext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaintext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaintext").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Encrypt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Encrypt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Encrypt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Encrypt.class));

       return (TypeAdapter<T>) new TypeAdapter<Encrypt>() {
           @Override
           public void write(JsonWriter out, Encrypt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Encrypt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Encrypt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Encrypt
   * @throws IOException if the JSON string is invalid with respect to Encrypt
   */
  public static Encrypt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Encrypt.class);
  }

  /**
   * Convert an instance of Encrypt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

