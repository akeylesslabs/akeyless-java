/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * Connect is a command that performs secure remote access
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Connect {
  public static final String SERIALIZED_NAME_HELPER = "Helper";
  @SerializedName(SERIALIZED_NAME_HELPER)
  @javax.annotation.Nullable
  private Object helper;

  public static final String SERIALIZED_NAME_RC_FILE_OVERRIDE = "RcFileOverride";
  @SerializedName(SERIALIZED_NAME_RC_FILE_OVERRIDE)
  @javax.annotation.Nullable
  private String rcFileOverride;

  public static final String SERIALIZED_NAME_BASTION_CTRL_PATH = "bastion-ctrl-path";
  @SerializedName(SERIALIZED_NAME_BASTION_CTRL_PATH)
  @javax.annotation.Nullable
  private String bastionCtrlPath;

  public static final String SERIALIZED_NAME_BASTION_CTRL_PORT = "bastion-ctrl-port";
  @SerializedName(SERIALIZED_NAME_BASTION_CTRL_PORT)
  @javax.annotation.Nullable
  private String bastionCtrlPort;

  public static final String SERIALIZED_NAME_BASTION_CTRL_PROTO = "bastion-ctrl-proto";
  @SerializedName(SERIALIZED_NAME_BASTION_CTRL_PROTO)
  @javax.annotation.Nullable
  private String bastionCtrlProto;

  public static final String SERIALIZED_NAME_BASTION_CTRL_SUBDOMAIN = "bastion-ctrl-subdomain";
  @SerializedName(SERIALIZED_NAME_BASTION_CTRL_SUBDOMAIN)
  @javax.annotation.Nullable
  private String bastionCtrlSubdomain;

  public static final String SERIALIZED_NAME_CERT_ISSUER_NAME = "cert-issuer-name";
  @SerializedName(SERIALIZED_NAME_CERT_ISSUER_NAME)
  @javax.annotation.Nullable
  private String certIssuerName;

  public static final String SERIALIZED_NAME_GATEWAY_URL = "gateway-url";
  @SerializedName(SERIALIZED_NAME_GATEWAY_URL)
  @javax.annotation.Nullable
  private String gatewayUrl;

  public static final String SERIALIZED_NAME_IDENTITY_FILE = "identity-file";
  @SerializedName(SERIALIZED_NAME_IDENTITY_FILE)
  @javax.annotation.Nullable
  private String identityFile;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_JUSTIFICATION = "justification";
  @SerializedName(SERIALIZED_NAME_JUSTIFICATION)
  @javax.annotation.Nullable
  private String justification;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_SRA_CTRL_PATH = "sra-ctrl-path";
  @SerializedName(SERIALIZED_NAME_SRA_CTRL_PATH)
  @javax.annotation.Nullable
  private String sraCtrlPath;

  public static final String SERIALIZED_NAME_SRA_CTRL_PORT = "sra-ctrl-port";
  @SerializedName(SERIALIZED_NAME_SRA_CTRL_PORT)
  @javax.annotation.Nullable
  private String sraCtrlPort = "9900";

  public static final String SERIALIZED_NAME_SRA_CTRL_PROTO = "sra-ctrl-proto";
  @SerializedName(SERIALIZED_NAME_SRA_CTRL_PROTO)
  @javax.annotation.Nullable
  private String sraCtrlProto = "http";

  public static final String SERIALIZED_NAME_SRA_CTRL_SUBDOMAIN = "sra-ctrl-subdomain";
  @SerializedName(SERIALIZED_NAME_SRA_CTRL_SUBDOMAIN)
  @javax.annotation.Nullable
  private String sraCtrlSubdomain;

  public static final String SERIALIZED_NAME_SSH_COMMAND = "ssh-command";
  @SerializedName(SERIALIZED_NAME_SSH_COMMAND)
  @javax.annotation.Nullable
  private String sshCommand;

  public static final String SERIALIZED_NAME_SSH_EXTRA_ARGS = "ssh-extra-args";
  @SerializedName(SERIALIZED_NAME_SSH_EXTRA_ARGS)
  @javax.annotation.Nullable
  private String sshExtraArgs;

  public static final String SERIALIZED_NAME_SSH_LEGACY_SIGNING_ALG = "ssh-legacy-signing-alg";
  @SerializedName(SERIALIZED_NAME_SSH_LEGACY_SIGNING_ALG)
  @javax.annotation.Nullable
  private Boolean sshLegacySigningAlg = false;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nullable
  private String target;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USE_SSH_AGENT = "use-ssh-agent";
  @SerializedName(SERIALIZED_NAME_USE_SSH_AGENT)
  @javax.annotation.Nullable
  private Boolean useSshAgent;

  public static final String SERIALIZED_NAME_VIA_BASTION = "via-bastion";
  @SerializedName(SERIALIZED_NAME_VIA_BASTION)
  @javax.annotation.Nullable
  private String viaBastion;

  public static final String SERIALIZED_NAME_VIA_SRA = "via-sra";
  @SerializedName(SERIALIZED_NAME_VIA_SRA)
  @javax.annotation.Nullable
  private String viaSra;

  public Connect() {
  }

  public Connect helper(@javax.annotation.Nullable Object helper) {
    this.helper = helper;
    return this;
  }

  /**
   * Get helper
   * @return helper
   */
  @javax.annotation.Nullable
  public Object getHelper() {
    return helper;
  }

  public void setHelper(@javax.annotation.Nullable Object helper) {
    this.helper = helper;
  }


  public Connect rcFileOverride(@javax.annotation.Nullable String rcFileOverride) {
    this.rcFileOverride = rcFileOverride;
    return this;
  }

  /**
   * used to override .akeyless-connect.rc in tests
   * @return rcFileOverride
   */
  @javax.annotation.Nullable
  public String getRcFileOverride() {
    return rcFileOverride;
  }

  public void setRcFileOverride(@javax.annotation.Nullable String rcFileOverride) {
    this.rcFileOverride = rcFileOverride;
  }


  public Connect bastionCtrlPath(@javax.annotation.Nullable String bastionCtrlPath) {
    this.bastionCtrlPath = bastionCtrlPath;
    return this;
  }

  /**
   * Deprecated. use bastion-ctrl-path
   * @return bastionCtrlPath
   */
  @javax.annotation.Nullable
  public String getBastionCtrlPath() {
    return bastionCtrlPath;
  }

  public void setBastionCtrlPath(@javax.annotation.Nullable String bastionCtrlPath) {
    this.bastionCtrlPath = bastionCtrlPath;
  }


  public Connect bastionCtrlPort(@javax.annotation.Nullable String bastionCtrlPort) {
    this.bastionCtrlPort = bastionCtrlPort;
    return this;
  }

  /**
   * Deprecated. use sra-ctrl-port
   * @return bastionCtrlPort
   */
  @javax.annotation.Nullable
  public String getBastionCtrlPort() {
    return bastionCtrlPort;
  }

  public void setBastionCtrlPort(@javax.annotation.Nullable String bastionCtrlPort) {
    this.bastionCtrlPort = bastionCtrlPort;
  }


  public Connect bastionCtrlProto(@javax.annotation.Nullable String bastionCtrlProto) {
    this.bastionCtrlProto = bastionCtrlProto;
    return this;
  }

  /**
   * Deprecated. use sra-ctrl-proto
   * @return bastionCtrlProto
   */
  @javax.annotation.Nullable
  public String getBastionCtrlProto() {
    return bastionCtrlProto;
  }

  public void setBastionCtrlProto(@javax.annotation.Nullable String bastionCtrlProto) {
    this.bastionCtrlProto = bastionCtrlProto;
  }


  public Connect bastionCtrlSubdomain(@javax.annotation.Nullable String bastionCtrlSubdomain) {
    this.bastionCtrlSubdomain = bastionCtrlSubdomain;
    return this;
  }

  /**
   * Deprecated. use sra-ctrl-subdomain
   * @return bastionCtrlSubdomain
   */
  @javax.annotation.Nullable
  public String getBastionCtrlSubdomain() {
    return bastionCtrlSubdomain;
  }

  public void setBastionCtrlSubdomain(@javax.annotation.Nullable String bastionCtrlSubdomain) {
    this.bastionCtrlSubdomain = bastionCtrlSubdomain;
  }


  public Connect certIssuerName(@javax.annotation.Nullable String certIssuerName) {
    this.certIssuerName = certIssuerName;
    return this;
  }

  /**
   * The Akeyless certificate issuer name
   * @return certIssuerName
   */
  @javax.annotation.Nullable
  public String getCertIssuerName() {
    return certIssuerName;
  }

  public void setCertIssuerName(@javax.annotation.Nullable String certIssuerName) {
    this.certIssuerName = certIssuerName;
  }


  public Connect gatewayUrl(@javax.annotation.Nullable String gatewayUrl) {
    this.gatewayUrl = gatewayUrl;
    return this;
  }

  /**
   * The Gateway URL (configuration management) address, e.g. http://localhost:8000
   * @return gatewayUrl
   */
  @javax.annotation.Nullable
  public String getGatewayUrl() {
    return gatewayUrl;
  }

  public void setGatewayUrl(@javax.annotation.Nullable String gatewayUrl) {
    this.gatewayUrl = gatewayUrl;
  }


  public Connect identityFile(@javax.annotation.Nullable String identityFile) {
    this.identityFile = identityFile;
    return this;
  }

  /**
   * The file from which the identity (private key) for public key authentication is read
   * @return identityFile
   */
  @javax.annotation.Nullable
  public String getIdentityFile() {
    return identityFile;
  }

  public void setIdentityFile(@javax.annotation.Nullable String identityFile) {
    this.identityFile = identityFile;
  }


  public Connect json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public Connect justification(@javax.annotation.Nullable String justification) {
    this.justification = justification;
    return this;
  }

  /**
   * Get justification
   * @return justification
   */
  @javax.annotation.Nullable
  public String getJustification() {
    return justification;
  }

  public void setJustification(@javax.annotation.Nullable String justification) {
    this.justification = justification;
  }


  public Connect name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The Secret name (for database and AWS producers - producer name)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Connect sraCtrlPath(@javax.annotation.Nullable String sraCtrlPath) {
    this.sraCtrlPath = sraCtrlPath;
    return this;
  }

  /**
   * The Bastion API path
   * @return sraCtrlPath
   */
  @javax.annotation.Nullable
  public String getSraCtrlPath() {
    return sraCtrlPath;
  }

  public void setSraCtrlPath(@javax.annotation.Nullable String sraCtrlPath) {
    this.sraCtrlPath = sraCtrlPath;
  }


  public Connect sraCtrlPort(@javax.annotation.Nullable String sraCtrlPort) {
    this.sraCtrlPort = sraCtrlPort;
    return this;
  }

  /**
   * The Bastion API Port
   * @return sraCtrlPort
   */
  @javax.annotation.Nullable
  public String getSraCtrlPort() {
    return sraCtrlPort;
  }

  public void setSraCtrlPort(@javax.annotation.Nullable String sraCtrlPort) {
    this.sraCtrlPort = sraCtrlPort;
  }


  public Connect sraCtrlProto(@javax.annotation.Nullable String sraCtrlProto) {
    this.sraCtrlProto = sraCtrlProto;
    return this;
  }

  /**
   * The SRA API protocol
   * @return sraCtrlProto
   */
  @javax.annotation.Nullable
  public String getSraCtrlProto() {
    return sraCtrlProto;
  }

  public void setSraCtrlProto(@javax.annotation.Nullable String sraCtrlProto) {
    this.sraCtrlProto = sraCtrlProto;
  }


  public Connect sraCtrlSubdomain(@javax.annotation.Nullable String sraCtrlSubdomain) {
    this.sraCtrlSubdomain = sraCtrlSubdomain;
    return this;
  }

  /**
   * The SRA API prefix
   * @return sraCtrlSubdomain
   */
  @javax.annotation.Nullable
  public String getSraCtrlSubdomain() {
    return sraCtrlSubdomain;
  }

  public void setSraCtrlSubdomain(@javax.annotation.Nullable String sraCtrlSubdomain) {
    this.sraCtrlSubdomain = sraCtrlSubdomain;
  }


  public Connect sshCommand(@javax.annotation.Nullable String sshCommand) {
    this.sshCommand = sshCommand;
    return this;
  }

  /**
   * Path to SSH executable. e.g. /usr/bin/ssh
   * @return sshCommand
   */
  @javax.annotation.Nullable
  public String getSshCommand() {
    return sshCommand;
  }

  public void setSshCommand(@javax.annotation.Nullable String sshCommand) {
    this.sshCommand = sshCommand;
  }


  public Connect sshExtraArgs(@javax.annotation.Nullable String sshExtraArgs) {
    this.sshExtraArgs = sshExtraArgs;
    return this;
  }

  /**
   * Additional SSH arguments (except -i)
   * @return sshExtraArgs
   */
  @javax.annotation.Nullable
  public String getSshExtraArgs() {
    return sshExtraArgs;
  }

  public void setSshExtraArgs(@javax.annotation.Nullable String sshExtraArgs) {
    this.sshExtraArgs = sshExtraArgs;
  }


  public Connect sshLegacySigningAlg(@javax.annotation.Nullable Boolean sshLegacySigningAlg) {
    this.sshLegacySigningAlg = sshLegacySigningAlg;
    return this;
  }

  /**
   * Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the ssh certificate.
   * @return sshLegacySigningAlg
   */
  @javax.annotation.Nullable
  public Boolean getSshLegacySigningAlg() {
    return sshLegacySigningAlg;
  }

  public void setSshLegacySigningAlg(@javax.annotation.Nullable Boolean sshLegacySigningAlg) {
    this.sshLegacySigningAlg = sshLegacySigningAlg;
  }


  public Connect target(@javax.annotation.Nullable String target) {
    this.target = target;
    return this;
  }

  /**
   * The target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nullable String target) {
    this.target = target;
  }


  public Connect token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public Connect uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public Connect useSshAgent(@javax.annotation.Nullable Boolean useSshAgent) {
    this.useSshAgent = useSshAgent;
    return this;
  }

  /**
   * Enable ssh-agent
   * @return useSshAgent
   */
  @javax.annotation.Nullable
  public Boolean getUseSshAgent() {
    return useSshAgent;
  }

  public void setUseSshAgent(@javax.annotation.Nullable Boolean useSshAgent) {
    this.useSshAgent = useSshAgent;
  }


  public Connect viaBastion(@javax.annotation.Nullable String viaBastion) {
    this.viaBastion = viaBastion;
    return this;
  }

  /**
   * Deprecated. Use via-sra
   * @return viaBastion
   */
  @javax.annotation.Nullable
  public String getViaBastion() {
    return viaBastion;
  }

  public void setViaBastion(@javax.annotation.Nullable String viaBastion) {
    this.viaBastion = viaBastion;
  }


  public Connect viaSra(@javax.annotation.Nullable String viaSra) {
    this.viaSra = viaSra;
    return this;
  }

  /**
   * The jump box server
   * @return viaSra
   */
  @javax.annotation.Nullable
  public String getViaSra() {
    return viaSra;
  }

  public void setViaSra(@javax.annotation.Nullable String viaSra) {
    this.viaSra = viaSra;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connect connect = (Connect) o;
    return Objects.equals(this.helper, connect.helper) &&
        Objects.equals(this.rcFileOverride, connect.rcFileOverride) &&
        Objects.equals(this.bastionCtrlPath, connect.bastionCtrlPath) &&
        Objects.equals(this.bastionCtrlPort, connect.bastionCtrlPort) &&
        Objects.equals(this.bastionCtrlProto, connect.bastionCtrlProto) &&
        Objects.equals(this.bastionCtrlSubdomain, connect.bastionCtrlSubdomain) &&
        Objects.equals(this.certIssuerName, connect.certIssuerName) &&
        Objects.equals(this.gatewayUrl, connect.gatewayUrl) &&
        Objects.equals(this.identityFile, connect.identityFile) &&
        Objects.equals(this.json, connect.json) &&
        Objects.equals(this.justification, connect.justification) &&
        Objects.equals(this.name, connect.name) &&
        Objects.equals(this.sraCtrlPath, connect.sraCtrlPath) &&
        Objects.equals(this.sraCtrlPort, connect.sraCtrlPort) &&
        Objects.equals(this.sraCtrlProto, connect.sraCtrlProto) &&
        Objects.equals(this.sraCtrlSubdomain, connect.sraCtrlSubdomain) &&
        Objects.equals(this.sshCommand, connect.sshCommand) &&
        Objects.equals(this.sshExtraArgs, connect.sshExtraArgs) &&
        Objects.equals(this.sshLegacySigningAlg, connect.sshLegacySigningAlg) &&
        Objects.equals(this.target, connect.target) &&
        Objects.equals(this.token, connect.token) &&
        Objects.equals(this.uidToken, connect.uidToken) &&
        Objects.equals(this.useSshAgent, connect.useSshAgent) &&
        Objects.equals(this.viaBastion, connect.viaBastion) &&
        Objects.equals(this.viaSra, connect.viaSra);
  }

  @Override
  public int hashCode() {
    return Objects.hash(helper, rcFileOverride, bastionCtrlPath, bastionCtrlPort, bastionCtrlProto, bastionCtrlSubdomain, certIssuerName, gatewayUrl, identityFile, json, justification, name, sraCtrlPath, sraCtrlPort, sraCtrlProto, sraCtrlSubdomain, sshCommand, sshExtraArgs, sshLegacySigningAlg, target, token, uidToken, useSshAgent, viaBastion, viaSra);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connect {\n");
    sb.append("    helper: ").append(toIndentedString(helper)).append("\n");
    sb.append("    rcFileOverride: ").append(toIndentedString(rcFileOverride)).append("\n");
    sb.append("    bastionCtrlPath: ").append(toIndentedString(bastionCtrlPath)).append("\n");
    sb.append("    bastionCtrlPort: ").append(toIndentedString(bastionCtrlPort)).append("\n");
    sb.append("    bastionCtrlProto: ").append(toIndentedString(bastionCtrlProto)).append("\n");
    sb.append("    bastionCtrlSubdomain: ").append(toIndentedString(bastionCtrlSubdomain)).append("\n");
    sb.append("    certIssuerName: ").append(toIndentedString(certIssuerName)).append("\n");
    sb.append("    gatewayUrl: ").append(toIndentedString(gatewayUrl)).append("\n");
    sb.append("    identityFile: ").append(toIndentedString(identityFile)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    justification: ").append(toIndentedString(justification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sraCtrlPath: ").append(toIndentedString(sraCtrlPath)).append("\n");
    sb.append("    sraCtrlPort: ").append(toIndentedString(sraCtrlPort)).append("\n");
    sb.append("    sraCtrlProto: ").append(toIndentedString(sraCtrlProto)).append("\n");
    sb.append("    sraCtrlSubdomain: ").append(toIndentedString(sraCtrlSubdomain)).append("\n");
    sb.append("    sshCommand: ").append(toIndentedString(sshCommand)).append("\n");
    sb.append("    sshExtraArgs: ").append(toIndentedString(sshExtraArgs)).append("\n");
    sb.append("    sshLegacySigningAlg: ").append(toIndentedString(sshLegacySigningAlg)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    useSshAgent: ").append(toIndentedString(useSshAgent)).append("\n");
    sb.append("    viaBastion: ").append(toIndentedString(viaBastion)).append("\n");
    sb.append("    viaSra: ").append(toIndentedString(viaSra)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Helper");
    openapiFields.add("RcFileOverride");
    openapiFields.add("bastion-ctrl-path");
    openapiFields.add("bastion-ctrl-port");
    openapiFields.add("bastion-ctrl-proto");
    openapiFields.add("bastion-ctrl-subdomain");
    openapiFields.add("cert-issuer-name");
    openapiFields.add("gateway-url");
    openapiFields.add("identity-file");
    openapiFields.add("json");
    openapiFields.add("justification");
    openapiFields.add("name");
    openapiFields.add("sra-ctrl-path");
    openapiFields.add("sra-ctrl-port");
    openapiFields.add("sra-ctrl-proto");
    openapiFields.add("sra-ctrl-subdomain");
    openapiFields.add("ssh-command");
    openapiFields.add("ssh-extra-args");
    openapiFields.add("ssh-legacy-signing-alg");
    openapiFields.add("target");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("use-ssh-agent");
    openapiFields.add("via-bastion");
    openapiFields.add("via-sra");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connect is not found in the empty JSON string", Connect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RcFileOverride") != null && !jsonObj.get("RcFileOverride").isJsonNull()) && !jsonObj.get("RcFileOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RcFileOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RcFileOverride").toString()));
      }
      if ((jsonObj.get("bastion-ctrl-path") != null && !jsonObj.get("bastion-ctrl-path").isJsonNull()) && !jsonObj.get("bastion-ctrl-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion-ctrl-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion-ctrl-path").toString()));
      }
      if ((jsonObj.get("bastion-ctrl-port") != null && !jsonObj.get("bastion-ctrl-port").isJsonNull()) && !jsonObj.get("bastion-ctrl-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion-ctrl-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion-ctrl-port").toString()));
      }
      if ((jsonObj.get("bastion-ctrl-proto") != null && !jsonObj.get("bastion-ctrl-proto").isJsonNull()) && !jsonObj.get("bastion-ctrl-proto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion-ctrl-proto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion-ctrl-proto").toString()));
      }
      if ((jsonObj.get("bastion-ctrl-subdomain") != null && !jsonObj.get("bastion-ctrl-subdomain").isJsonNull()) && !jsonObj.get("bastion-ctrl-subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion-ctrl-subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion-ctrl-subdomain").toString()));
      }
      if ((jsonObj.get("cert-issuer-name") != null && !jsonObj.get("cert-issuer-name").isJsonNull()) && !jsonObj.get("cert-issuer-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-issuer-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-issuer-name").toString()));
      }
      if ((jsonObj.get("gateway-url") != null && !jsonObj.get("gateway-url").isJsonNull()) && !jsonObj.get("gateway-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway-url").toString()));
      }
      if ((jsonObj.get("identity-file") != null && !jsonObj.get("identity-file").isJsonNull()) && !jsonObj.get("identity-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity-file").toString()));
      }
      if ((jsonObj.get("justification") != null && !jsonObj.get("justification").isJsonNull()) && !jsonObj.get("justification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `justification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("justification").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sra-ctrl-path") != null && !jsonObj.get("sra-ctrl-path").isJsonNull()) && !jsonObj.get("sra-ctrl-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sra-ctrl-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sra-ctrl-path").toString()));
      }
      if ((jsonObj.get("sra-ctrl-port") != null && !jsonObj.get("sra-ctrl-port").isJsonNull()) && !jsonObj.get("sra-ctrl-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sra-ctrl-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sra-ctrl-port").toString()));
      }
      if ((jsonObj.get("sra-ctrl-proto") != null && !jsonObj.get("sra-ctrl-proto").isJsonNull()) && !jsonObj.get("sra-ctrl-proto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sra-ctrl-proto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sra-ctrl-proto").toString()));
      }
      if ((jsonObj.get("sra-ctrl-subdomain") != null && !jsonObj.get("sra-ctrl-subdomain").isJsonNull()) && !jsonObj.get("sra-ctrl-subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sra-ctrl-subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sra-ctrl-subdomain").toString()));
      }
      if ((jsonObj.get("ssh-command") != null && !jsonObj.get("ssh-command").isJsonNull()) && !jsonObj.get("ssh-command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh-command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh-command").toString()));
      }
      if ((jsonObj.get("ssh-extra-args") != null && !jsonObj.get("ssh-extra-args").isJsonNull()) && !jsonObj.get("ssh-extra-args").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh-extra-args` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh-extra-args").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("via-bastion") != null && !jsonObj.get("via-bastion").isJsonNull()) && !jsonObj.get("via-bastion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `via-bastion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("via-bastion").toString()));
      }
      if ((jsonObj.get("via-sra") != null && !jsonObj.get("via-sra").isJsonNull()) && !jsonObj.get("via-sra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `via-sra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("via-sra").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connect.class));

       return (TypeAdapter<T>) new TypeAdapter<Connect>() {
           @Override
           public void write(JsonWriter out, Connect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connect
   * @throws IOException if the JSON string is invalid with respect to Connect
   */
  public static Connect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connect.class);
  }

  /**
   * Convert an instance of Connect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

