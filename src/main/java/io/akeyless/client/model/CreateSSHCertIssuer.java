/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CreateSSHCertIssuer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateSSHCertIssuer {
  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_ALLOWED_USERS = "allowed-users";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USERS)
  @javax.annotation.Nonnull
  private String allowedUsers = "-";

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  @javax.annotation.Nullable
  private Map<String, String> extensions = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTERNAL_USERNAME = "external-username";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USERNAME)
  @javax.annotation.Nullable
  private String externalUsername = "false";

  public static final String SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME = "fixed-user-claim-keyname";
  @SerializedName(SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME)
  @javax.annotation.Nullable
  private String fixedUserClaimKeyname;

  public static final String SERIALIZED_NAME_HOST_PROVIDER = "host-provider";
  @SerializedName(SERIALIZED_NAME_HOST_PROVIDER)
  @javax.annotation.Nullable
  private String hostProvider;

  public static final String SERIALIZED_NAME_ITEM_CUSTOM_FIELDS = "item-custom-fields";
  @SerializedName(SERIALIZED_NAME_ITEM_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> itemCustomFields = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private String metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PRINCIPALS = "principals";
  @SerializedName(SERIALIZED_NAME_PRINCIPALS)
  @javax.annotation.Nullable
  private String principals;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_API = "secure-access-api";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_API)
  @javax.annotation.Nullable
  private String secureAccessApi;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_API = "secure-access-bastion-api";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_API)
  @javax.annotation.Nullable
  private String secureAccessBastionApi;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_SSH = "secure-access-bastion-ssh";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_SSH)
  @javax.annotation.Nullable
  private String secureAccessBastionSsh;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENFORCE_HOSTS_RESTRICTION = "secure-access-enforce-hosts-restriction";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENFORCE_HOSTS_RESTRICTION)
  @javax.annotation.Nullable
  private Boolean secureAccessEnforceHostsRestriction;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_GATEWAY = "secure-access-gateway";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_GATEWAY)
  @javax.annotation.Nullable
  private String secureAccessGateway;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_SSH = "secure-access-ssh";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_SSH)
  @javax.annotation.Nullable
  private String secureAccessSsh;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS_USER = "secure-access-ssh-creds-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS_USER)
  @javax.annotation.Nullable
  private String secureAccessSshCredsUser;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_BASTION = "secure-access-use-internal-bastion";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_BASTION)
  @javax.annotation.Nullable
  private Boolean secureAccessUseInternalBastion;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_SSH_ACCESS = "secure-access-use-internal-ssh-access";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_SSH_ACCESS)
  @javax.annotation.Nullable
  private Boolean secureAccessUseInternalSshAccess;

  public static final String SERIALIZED_NAME_SIGNER_KEY_NAME = "signer-key-name";
  @SerializedName(SERIALIZED_NAME_SIGNER_KEY_NAME)
  @javax.annotation.Nonnull
  private String signerKeyName;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private List<String> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nullable
  private List<String> target = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nonnull
  private Long ttl;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public CreateSSHCertIssuer() {
  }

  public CreateSSHCertIssuer providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }


  public CreateSSHCertIssuer allowedUsers(@javax.annotation.Nonnull String allowedUsers) {
    this.allowedUsers = allowedUsers;
    return this;
  }

  /**
   * Users allowed to fetch the certificate, e.g root,ubuntu
   * @return allowedUsers
   */
  @javax.annotation.Nonnull
  public String getAllowedUsers() {
    return allowedUsers;
  }

  public void setAllowedUsers(@javax.annotation.Nonnull String allowedUsers) {
    this.allowedUsers = allowedUsers;
  }


  public CreateSSHCertIssuer deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public CreateSSHCertIssuer description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateSSHCertIssuer extensions(@javax.annotation.Nullable Map<String, String> extensions) {
    this.extensions = extensions;
    return this;
  }

  public CreateSSHCertIssuer putExtensionsItem(String key, String extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new HashMap<>();
    }
    this.extensions.put(key, extensionsItem);
    return this;
  }

  /**
   * Signed certificates with extensions, e.g permit-port-forwarding&#x3D;\\\&quot;\\\&quot;
   * @return extensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtensions() {
    return extensions;
  }

  public void setExtensions(@javax.annotation.Nullable Map<String, String> extensions) {
    this.extensions = extensions;
  }


  public CreateSSHCertIssuer externalUsername(@javax.annotation.Nullable String externalUsername) {
    this.externalUsername = externalUsername;
    return this;
  }

  /**
   * Externally provided username [true/false]
   * @return externalUsername
   */
  @javax.annotation.Nullable
  public String getExternalUsername() {
    return externalUsername;
  }

  public void setExternalUsername(@javax.annotation.Nullable String externalUsername) {
    this.externalUsername = externalUsername;
  }


  public CreateSSHCertIssuer fixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
    return this;
  }

  /**
   * For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username&#x3D;true)
   * @return fixedUserClaimKeyname
   */
  @javax.annotation.Nullable
  public String getFixedUserClaimKeyname() {
    return fixedUserClaimKeyname;
  }

  public void setFixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
  }


  public CreateSSHCertIssuer hostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
    return this;
  }

  /**
   * Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
   * @return hostProvider
   */
  @javax.annotation.Nullable
  public String getHostProvider() {
    return hostProvider;
  }

  public void setHostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
  }


  public CreateSSHCertIssuer itemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
    return this;
  }

  public CreateSSHCertIssuer putItemCustomFieldsItem(String key, String itemCustomFieldsItem) {
    if (this.itemCustomFields == null) {
      this.itemCustomFields = new HashMap<>();
    }
    this.itemCustomFields.put(key, itemCustomFieldsItem);
    return this;
  }

  /**
   * Additional custom fields to associate with the item
   * @return itemCustomFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemCustomFields() {
    return itemCustomFields;
  }

  public void setItemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
  }


  public CreateSSHCertIssuer json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateSSHCertIssuer metadata(@javax.annotation.Nullable String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Deprecated - use description
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable String metadata) {
    this.metadata = metadata;
  }


  public CreateSSHCertIssuer name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * SSH certificate issuer name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateSSHCertIssuer principals(@javax.annotation.Nullable String principals) {
    this.principals = principals;
    return this;
  }

  /**
   * Signed certificates with principal, e.g example_role1,example_role2
   * @return principals
   */
  @javax.annotation.Nullable
  public String getPrincipals() {
    return principals;
  }

  public void setPrincipals(@javax.annotation.Nullable String principals) {
    this.principals = principals;
  }


  public CreateSSHCertIssuer secureAccessApi(@javax.annotation.Nullable String secureAccessApi) {
    this.secureAccessApi = secureAccessApi;
    return this;
  }

  /**
   * Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900
   * @return secureAccessApi
   */
  @javax.annotation.Nullable
  public String getSecureAccessApi() {
    return secureAccessApi;
  }

  public void setSecureAccessApi(@javax.annotation.Nullable String secureAccessApi) {
    this.secureAccessApi = secureAccessApi;
  }


  public CreateSSHCertIssuer secureAccessBastionApi(@javax.annotation.Nullable String secureAccessBastionApi) {
    this.secureAccessBastionApi = secureAccessBastionApi;
    return this;
  }

  /**
   * Deprecated. use secure-access-api
   * @return secureAccessBastionApi
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionApi() {
    return secureAccessBastionApi;
  }

  public void setSecureAccessBastionApi(@javax.annotation.Nullable String secureAccessBastionApi) {
    this.secureAccessBastionApi = secureAccessBastionApi;
  }


  public CreateSSHCertIssuer secureAccessBastionSsh(@javax.annotation.Nullable String secureAccessBastionSsh) {
    this.secureAccessBastionSsh = secureAccessBastionSsh;
    return this;
  }

  /**
   * Deprecated. use secure-access-ssh
   * @return secureAccessBastionSsh
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionSsh() {
    return secureAccessBastionSsh;
  }

  public void setSecureAccessBastionSsh(@javax.annotation.Nullable String secureAccessBastionSsh) {
    this.secureAccessBastionSsh = secureAccessBastionSsh;
  }


  public CreateSSHCertIssuer secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public CreateSSHCertIssuer secureAccessEnforceHostsRestriction(@javax.annotation.Nullable Boolean secureAccessEnforceHostsRestriction) {
    this.secureAccessEnforceHostsRestriction = secureAccessEnforceHostsRestriction;
    return this;
  }

  /**
   * Enable this flag to enforce connections only to the hosts listed in --secure-access-host
   * @return secureAccessEnforceHostsRestriction
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessEnforceHostsRestriction() {
    return secureAccessEnforceHostsRestriction;
  }

  public void setSecureAccessEnforceHostsRestriction(@javax.annotation.Nullable Boolean secureAccessEnforceHostsRestriction) {
    this.secureAccessEnforceHostsRestriction = secureAccessEnforceHostsRestriction;
  }


  public CreateSSHCertIssuer secureAccessGateway(@javax.annotation.Nullable String secureAccessGateway) {
    this.secureAccessGateway = secureAccessGateway;
    return this;
  }

  /**
   * Get secureAccessGateway
   * @return secureAccessGateway
   */
  @javax.annotation.Nullable
  public String getSecureAccessGateway() {
    return secureAccessGateway;
  }

  public void setSecureAccessGateway(@javax.annotation.Nullable String secureAccessGateway) {
    this.secureAccessGateway = secureAccessGateway;
  }


  public CreateSSHCertIssuer secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public CreateSSHCertIssuer addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public CreateSSHCertIssuer secureAccessSsh(@javax.annotation.Nullable String secureAccessSsh) {
    this.secureAccessSsh = secureAccessSsh;
    return this;
  }

  /**
   * Bastion&#39;s SSH server. E.g. my.sra-server:22
   * @return secureAccessSsh
   */
  @javax.annotation.Nullable
  public String getSecureAccessSsh() {
    return secureAccessSsh;
  }

  public void setSecureAccessSsh(@javax.annotation.Nullable String secureAccessSsh) {
    this.secureAccessSsh = secureAccessSsh;
  }


  public CreateSSHCertIssuer secureAccessSshCredsUser(@javax.annotation.Nullable String secureAccessSshCredsUser) {
    this.secureAccessSshCredsUser = secureAccessSshCredsUser;
    return this;
  }

  /**
   * SSH username to connect to target server, must be in &#39;Allowed Users&#39; list
   * @return secureAccessSshCredsUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessSshCredsUser() {
    return secureAccessSshCredsUser;
  }

  public void setSecureAccessSshCredsUser(@javax.annotation.Nullable String secureAccessSshCredsUser) {
    this.secureAccessSshCredsUser = secureAccessSshCredsUser;
  }


  public CreateSSHCertIssuer secureAccessUseInternalBastion(@javax.annotation.Nullable Boolean secureAccessUseInternalBastion) {
    this.secureAccessUseInternalBastion = secureAccessUseInternalBastion;
    return this;
  }

  /**
   * Deprecated. Use secure-access-use-internal-ssh-access
   * @return secureAccessUseInternalBastion
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessUseInternalBastion() {
    return secureAccessUseInternalBastion;
  }

  public void setSecureAccessUseInternalBastion(@javax.annotation.Nullable Boolean secureAccessUseInternalBastion) {
    this.secureAccessUseInternalBastion = secureAccessUseInternalBastion;
  }


  public CreateSSHCertIssuer secureAccessUseInternalSshAccess(@javax.annotation.Nullable Boolean secureAccessUseInternalSshAccess) {
    this.secureAccessUseInternalSshAccess = secureAccessUseInternalSshAccess;
    return this;
  }

  /**
   * Use internal SSH Access
   * @return secureAccessUseInternalSshAccess
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessUseInternalSshAccess() {
    return secureAccessUseInternalSshAccess;
  }

  public void setSecureAccessUseInternalSshAccess(@javax.annotation.Nullable Boolean secureAccessUseInternalSshAccess) {
    this.secureAccessUseInternalSshAccess = secureAccessUseInternalSshAccess;
  }


  public CreateSSHCertIssuer signerKeyName(@javax.annotation.Nonnull String signerKeyName) {
    this.signerKeyName = signerKeyName;
    return this;
  }

  /**
   * A key to sign the certificate with
   * @return signerKeyName
   */
  @javax.annotation.Nonnull
  public String getSignerKeyName() {
    return signerKeyName;
  }

  public void setSignerKeyName(@javax.annotation.Nonnull String signerKeyName) {
    this.signerKeyName = signerKeyName;
  }


  public CreateSSHCertIssuer tag(@javax.annotation.Nullable List<String> tag) {
    this.tag = tag;
    return this;
  }

  public CreateSSHCertIssuer addTagItem(String tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * List of the tags attached to this key
   * @return tag
   */
  @javax.annotation.Nullable
  public List<String> getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable List<String> tag) {
    this.tag = tag;
  }


  public CreateSSHCertIssuer target(@javax.annotation.Nullable List<String> target) {
    this.target = target;
    return this;
  }

  public CreateSSHCertIssuer addTargetItem(String targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

  /**
   * A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times
   * @return target
   */
  @javax.annotation.Nullable
  public List<String> getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nullable List<String> target) {
    this.target = target;
  }


  public CreateSSHCertIssuer token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateSSHCertIssuer ttl(@javax.annotation.Nonnull Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The requested Time To Live for the certificate, in seconds
   * @return ttl
   */
  @javax.annotation.Nonnull
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nonnull Long ttl) {
    this.ttl = ttl;
  }


  public CreateSSHCertIssuer uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSSHCertIssuer createSSHCertIssuer = (CreateSSHCertIssuer) o;
    return Objects.equals(this.providerType, createSSHCertIssuer.providerType) &&
        Objects.equals(this.allowedUsers, createSSHCertIssuer.allowedUsers) &&
        Objects.equals(this.deleteProtection, createSSHCertIssuer.deleteProtection) &&
        Objects.equals(this.description, createSSHCertIssuer.description) &&
        Objects.equals(this.extensions, createSSHCertIssuer.extensions) &&
        Objects.equals(this.externalUsername, createSSHCertIssuer.externalUsername) &&
        Objects.equals(this.fixedUserClaimKeyname, createSSHCertIssuer.fixedUserClaimKeyname) &&
        Objects.equals(this.hostProvider, createSSHCertIssuer.hostProvider) &&
        Objects.equals(this.itemCustomFields, createSSHCertIssuer.itemCustomFields) &&
        Objects.equals(this.json, createSSHCertIssuer.json) &&
        Objects.equals(this.metadata, createSSHCertIssuer.metadata) &&
        Objects.equals(this.name, createSSHCertIssuer.name) &&
        Objects.equals(this.principals, createSSHCertIssuer.principals) &&
        Objects.equals(this.secureAccessApi, createSSHCertIssuer.secureAccessApi) &&
        Objects.equals(this.secureAccessBastionApi, createSSHCertIssuer.secureAccessBastionApi) &&
        Objects.equals(this.secureAccessBastionSsh, createSSHCertIssuer.secureAccessBastionSsh) &&
        Objects.equals(this.secureAccessEnable, createSSHCertIssuer.secureAccessEnable) &&
        Objects.equals(this.secureAccessEnforceHostsRestriction, createSSHCertIssuer.secureAccessEnforceHostsRestriction) &&
        Objects.equals(this.secureAccessGateway, createSSHCertIssuer.secureAccessGateway) &&
        Objects.equals(this.secureAccessHost, createSSHCertIssuer.secureAccessHost) &&
        Objects.equals(this.secureAccessSsh, createSSHCertIssuer.secureAccessSsh) &&
        Objects.equals(this.secureAccessSshCredsUser, createSSHCertIssuer.secureAccessSshCredsUser) &&
        Objects.equals(this.secureAccessUseInternalBastion, createSSHCertIssuer.secureAccessUseInternalBastion) &&
        Objects.equals(this.secureAccessUseInternalSshAccess, createSSHCertIssuer.secureAccessUseInternalSshAccess) &&
        Objects.equals(this.signerKeyName, createSSHCertIssuer.signerKeyName) &&
        Objects.equals(this.tag, createSSHCertIssuer.tag) &&
        Objects.equals(this.target, createSSHCertIssuer.target) &&
        Objects.equals(this.token, createSSHCertIssuer.token) &&
        Objects.equals(this.ttl, createSSHCertIssuer.ttl) &&
        Objects.equals(this.uidToken, createSSHCertIssuer.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerType, allowedUsers, deleteProtection, description, extensions, externalUsername, fixedUserClaimKeyname, hostProvider, itemCustomFields, json, metadata, name, principals, secureAccessApi, secureAccessBastionApi, secureAccessBastionSsh, secureAccessEnable, secureAccessEnforceHostsRestriction, secureAccessGateway, secureAccessHost, secureAccessSsh, secureAccessSshCredsUser, secureAccessUseInternalBastion, secureAccessUseInternalSshAccess, signerKeyName, tag, target, token, ttl, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSSHCertIssuer {\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    allowedUsers: ").append(toIndentedString(allowedUsers)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    externalUsername: ").append(toIndentedString(externalUsername)).append("\n");
    sb.append("    fixedUserClaimKeyname: ").append(toIndentedString(fixedUserClaimKeyname)).append("\n");
    sb.append("    hostProvider: ").append(toIndentedString(hostProvider)).append("\n");
    sb.append("    itemCustomFields: ").append(toIndentedString(itemCustomFields)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    secureAccessApi: ").append(toIndentedString(secureAccessApi)).append("\n");
    sb.append("    secureAccessBastionApi: ").append(toIndentedString(secureAccessBastionApi)).append("\n");
    sb.append("    secureAccessBastionSsh: ").append(toIndentedString(secureAccessBastionSsh)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessEnforceHostsRestriction: ").append(toIndentedString(secureAccessEnforceHostsRestriction)).append("\n");
    sb.append("    secureAccessGateway: ").append(toIndentedString(secureAccessGateway)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessSsh: ").append(toIndentedString(secureAccessSsh)).append("\n");
    sb.append("    secureAccessSshCredsUser: ").append(toIndentedString(secureAccessSshCredsUser)).append("\n");
    sb.append("    secureAccessUseInternalBastion: ").append(toIndentedString(secureAccessUseInternalBastion)).append("\n");
    sb.append("    secureAccessUseInternalSshAccess: ").append(toIndentedString(secureAccessUseInternalSshAccess)).append("\n");
    sb.append("    signerKeyName: ").append(toIndentedString(signerKeyName)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProviderType");
    openapiFields.add("allowed-users");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("extensions");
    openapiFields.add("external-username");
    openapiFields.add("fixed-user-claim-keyname");
    openapiFields.add("host-provider");
    openapiFields.add("item-custom-fields");
    openapiFields.add("json");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("principals");
    openapiFields.add("secure-access-api");
    openapiFields.add("secure-access-bastion-api");
    openapiFields.add("secure-access-bastion-ssh");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-enforce-hosts-restriction");
    openapiFields.add("secure-access-gateway");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-ssh");
    openapiFields.add("secure-access-ssh-creds-user");
    openapiFields.add("secure-access-use-internal-bastion");
    openapiFields.add("secure-access-use-internal-ssh-access");
    openapiFields.add("signer-key-name");
    openapiFields.add("tag");
    openapiFields.add("target");
    openapiFields.add("token");
    openapiFields.add("ttl");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed-users");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("signer-key-name");
    openapiRequiredFields.add("ttl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSSHCertIssuer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSSHCertIssuer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSSHCertIssuer is not found in the empty JSON string", CreateSSHCertIssuer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSSHCertIssuer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSSHCertIssuer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSSHCertIssuer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) && !jsonObj.get("ProviderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderType").toString()));
      }
      if (!jsonObj.get("allowed-users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed-users").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("external-username") != null && !jsonObj.get("external-username").isJsonNull()) && !jsonObj.get("external-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-username").toString()));
      }
      if ((jsonObj.get("fixed-user-claim-keyname") != null && !jsonObj.get("fixed-user-claim-keyname").isJsonNull()) && !jsonObj.get("fixed-user-claim-keyname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed-user-claim-keyname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed-user-claim-keyname").toString()));
      }
      if ((jsonObj.get("host-provider") != null && !jsonObj.get("host-provider").isJsonNull()) && !jsonObj.get("host-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-provider").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("principals") != null && !jsonObj.get("principals").isJsonNull()) && !jsonObj.get("principals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principals").toString()));
      }
      if ((jsonObj.get("secure-access-api") != null && !jsonObj.get("secure-access-api").isJsonNull()) && !jsonObj.get("secure-access-api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-api").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-api") != null && !jsonObj.get("secure-access-bastion-api").isJsonNull()) && !jsonObj.get("secure-access-bastion-api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-api").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-ssh") != null && !jsonObj.get("secure-access-bastion-ssh").isJsonNull()) && !jsonObj.get("secure-access-bastion-ssh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-ssh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-ssh").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      if ((jsonObj.get("secure-access-gateway") != null && !jsonObj.get("secure-access-gateway").isJsonNull()) && !jsonObj.get("secure-access-gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-gateway").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      if ((jsonObj.get("secure-access-ssh") != null && !jsonObj.get("secure-access-ssh").isJsonNull()) && !jsonObj.get("secure-access-ssh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-ssh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-ssh").toString()));
      }
      if ((jsonObj.get("secure-access-ssh-creds-user") != null && !jsonObj.get("secure-access-ssh-creds-user").isJsonNull()) && !jsonObj.get("secure-access-ssh-creds-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-ssh-creds-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-ssh-creds-user").toString()));
      }
      if (!jsonObj.get("signer-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer-key-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull() && !jsonObj.get("tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull() && !jsonObj.get("target").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be an array in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSSHCertIssuer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSSHCertIssuer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSSHCertIssuer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSSHCertIssuer.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSSHCertIssuer>() {
           @Override
           public void write(JsonWriter out, CreateSSHCertIssuer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSSHCertIssuer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSSHCertIssuer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSSHCertIssuer
   * @throws IOException if the JSON string is invalid with respect to CreateSSHCertIssuer
   */
  public static CreateSSHCertIssuer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSSHCertIssuer.class);
  }

  /**
   * Convert an instance of CreateSSHCertIssuer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

