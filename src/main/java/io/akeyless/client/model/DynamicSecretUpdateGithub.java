/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretUpdateGithub is a command that updates github dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretUpdateGithub {
  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_GITHUB_APP_ID = "github-app-id";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_ID)
  @javax.annotation.Nullable
  private Long githubAppId;

  public static final String SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY = "github-app-private-key";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String githubAppPrivateKey;

  public static final String SERIALIZED_NAME_GITHUB_BASE_URL = "github-base-url";
  @SerializedName(SERIALIZED_NAME_GITHUB_BASE_URL)
  @javax.annotation.Nullable
  private String githubBaseUrl = "https://api.github.com/";

  public static final String SERIALIZED_NAME_INSTALLATION_ID = "installation-id";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ID)
  @javax.annotation.Nullable
  private Long installationId;

  public static final String SERIALIZED_NAME_INSTALLATION_ORGANIZATION = "installation-organization";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ORGANIZATION)
  @javax.annotation.Nullable
  private String installationOrganization;

  public static final String SERIALIZED_NAME_INSTALLATION_REPOSITORY = "installation-repository";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_REPOSITORY)
  @javax.annotation.Nullable
  private String installationRepository;

  public static final String SERIALIZED_NAME_ITEM_CUSTOM_FIELDS = "item-custom-fields";
  @SerializedName(SERIALIZED_NAME_ITEM_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> itemCustomFields = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TOKEN_PERMISSIONS = "token-permissions";
  @SerializedName(SERIALIZED_NAME_TOKEN_PERMISSIONS)
  @javax.annotation.Nullable
  private List<String> tokenPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_REPOSITORIES = "token-repositories";
  @SerializedName(SERIALIZED_NAME_TOKEN_REPOSITORIES)
  @javax.annotation.Nullable
  private List<String> tokenRepositories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_TTL = "token-ttl";
  @SerializedName(SERIALIZED_NAME_TOKEN_TTL)
  @javax.annotation.Nullable
  private String tokenTtl = "60m";

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public DynamicSecretUpdateGithub() {
  }

  public DynamicSecretUpdateGithub deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretUpdateGithub description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretUpdateGithub githubAppId(@javax.annotation.Nullable Long githubAppId) {
    this.githubAppId = githubAppId;
    return this;
  }

  /**
   * Github app id
   * @return githubAppId
   */
  @javax.annotation.Nullable
  public Long getGithubAppId() {
    return githubAppId;
  }

  public void setGithubAppId(@javax.annotation.Nullable Long githubAppId) {
    this.githubAppId = githubAppId;
  }


  public DynamicSecretUpdateGithub githubAppPrivateKey(@javax.annotation.Nullable String githubAppPrivateKey) {
    this.githubAppPrivateKey = githubAppPrivateKey;
    return this;
  }

  /**
   * App private key
   * @return githubAppPrivateKey
   */
  @javax.annotation.Nullable
  public String getGithubAppPrivateKey() {
    return githubAppPrivateKey;
  }

  public void setGithubAppPrivateKey(@javax.annotation.Nullable String githubAppPrivateKey) {
    this.githubAppPrivateKey = githubAppPrivateKey;
  }


  public DynamicSecretUpdateGithub githubBaseUrl(@javax.annotation.Nullable String githubBaseUrl) {
    this.githubBaseUrl = githubBaseUrl;
    return this;
  }

  /**
   * Base URL
   * @return githubBaseUrl
   */
  @javax.annotation.Nullable
  public String getGithubBaseUrl() {
    return githubBaseUrl;
  }

  public void setGithubBaseUrl(@javax.annotation.Nullable String githubBaseUrl) {
    this.githubBaseUrl = githubBaseUrl;
  }


  public DynamicSecretUpdateGithub installationId(@javax.annotation.Nullable Long installationId) {
    this.installationId = installationId;
    return this;
  }

  /**
   * GitHub application installation id
   * @return installationId
   */
  @javax.annotation.Nullable
  public Long getInstallationId() {
    return installationId;
  }

  public void setInstallationId(@javax.annotation.Nullable Long installationId) {
    this.installationId = installationId;
  }


  public DynamicSecretUpdateGithub installationOrganization(@javax.annotation.Nullable String installationOrganization) {
    this.installationOrganization = installationOrganization;
    return this;
  }

  /**
   * Optional, mutually exclusive with installation id, GitHub organization name
   * @return installationOrganization
   */
  @javax.annotation.Nullable
  public String getInstallationOrganization() {
    return installationOrganization;
  }

  public void setInstallationOrganization(@javax.annotation.Nullable String installationOrganization) {
    this.installationOrganization = installationOrganization;
  }


  public DynamicSecretUpdateGithub installationRepository(@javax.annotation.Nullable String installationRepository) {
    this.installationRepository = installationRepository;
    return this;
  }

  /**
   * Optional, mutually exclusive with installation id, GitHub repository &#39;&lt;owner&gt;/&lt;repo-name&gt;&#39;
   * @return installationRepository
   */
  @javax.annotation.Nullable
  public String getInstallationRepository() {
    return installationRepository;
  }

  public void setInstallationRepository(@javax.annotation.Nullable String installationRepository) {
    this.installationRepository = installationRepository;
  }


  public DynamicSecretUpdateGithub itemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
    return this;
  }

  public DynamicSecretUpdateGithub putItemCustomFieldsItem(String key, String itemCustomFieldsItem) {
    if (this.itemCustomFields == null) {
      this.itemCustomFields = new HashMap<>();
    }
    this.itemCustomFields.put(key, itemCustomFieldsItem);
    return this;
  }

  /**
   * Additional custom fields to associate with the item
   * @return itemCustomFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemCustomFields() {
    return itemCustomFields;
  }

  public void setItemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
  }


  public DynamicSecretUpdateGithub json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretUpdateGithub name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretUpdateGithub newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public DynamicSecretUpdateGithub tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretUpdateGithub addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretUpdateGithub targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretUpdateGithub token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretUpdateGithub tokenPermissions(@javax.annotation.Nullable List<String> tokenPermissions) {
    this.tokenPermissions = tokenPermissions;
    return this;
  }

  public DynamicSecretUpdateGithub addTokenPermissionsItem(String tokenPermissionsItem) {
    if (this.tokenPermissions == null) {
      this.tokenPermissions = new ArrayList<>();
    }
    this.tokenPermissions.add(tokenPermissionsItem);
    return this;
  }

  /**
   * Optional - installation token&#39;s allowed permissions
   * @return tokenPermissions
   */
  @javax.annotation.Nullable
  public List<String> getTokenPermissions() {
    return tokenPermissions;
  }

  public void setTokenPermissions(@javax.annotation.Nullable List<String> tokenPermissions) {
    this.tokenPermissions = tokenPermissions;
  }


  public DynamicSecretUpdateGithub tokenRepositories(@javax.annotation.Nullable List<String> tokenRepositories) {
    this.tokenRepositories = tokenRepositories;
    return this;
  }

  public DynamicSecretUpdateGithub addTokenRepositoriesItem(String tokenRepositoriesItem) {
    if (this.tokenRepositories == null) {
      this.tokenRepositories = new ArrayList<>();
    }
    this.tokenRepositories.add(tokenRepositoriesItem);
    return this;
  }

  /**
   * Optional - installation token&#39;s allowed repositories
   * @return tokenRepositories
   */
  @javax.annotation.Nullable
  public List<String> getTokenRepositories() {
    return tokenRepositories;
  }

  public void setTokenRepositories(@javax.annotation.Nullable List<String> tokenRepositories) {
    this.tokenRepositories = tokenRepositories;
  }


  public DynamicSecretUpdateGithub tokenTtl(@javax.annotation.Nullable String tokenTtl) {
    this.tokenTtl = tokenTtl;
    return this;
  }

  /**
   * Token TTL
   * @return tokenTtl
   */
  @javax.annotation.Nullable
  public String getTokenTtl() {
    return tokenTtl;
  }

  public void setTokenTtl(@javax.annotation.Nullable String tokenTtl) {
    this.tokenTtl = tokenTtl;
  }


  public DynamicSecretUpdateGithub uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretUpdateGithub dynamicSecretUpdateGithub = (DynamicSecretUpdateGithub) o;
    return Objects.equals(this.deleteProtection, dynamicSecretUpdateGithub.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretUpdateGithub.description) &&
        Objects.equals(this.githubAppId, dynamicSecretUpdateGithub.githubAppId) &&
        Objects.equals(this.githubAppPrivateKey, dynamicSecretUpdateGithub.githubAppPrivateKey) &&
        Objects.equals(this.githubBaseUrl, dynamicSecretUpdateGithub.githubBaseUrl) &&
        Objects.equals(this.installationId, dynamicSecretUpdateGithub.installationId) &&
        Objects.equals(this.installationOrganization, dynamicSecretUpdateGithub.installationOrganization) &&
        Objects.equals(this.installationRepository, dynamicSecretUpdateGithub.installationRepository) &&
        Objects.equals(this.itemCustomFields, dynamicSecretUpdateGithub.itemCustomFields) &&
        Objects.equals(this.json, dynamicSecretUpdateGithub.json) &&
        Objects.equals(this.name, dynamicSecretUpdateGithub.name) &&
        Objects.equals(this.newName, dynamicSecretUpdateGithub.newName) &&
        Objects.equals(this.tags, dynamicSecretUpdateGithub.tags) &&
        Objects.equals(this.targetName, dynamicSecretUpdateGithub.targetName) &&
        Objects.equals(this.token, dynamicSecretUpdateGithub.token) &&
        Objects.equals(this.tokenPermissions, dynamicSecretUpdateGithub.tokenPermissions) &&
        Objects.equals(this.tokenRepositories, dynamicSecretUpdateGithub.tokenRepositories) &&
        Objects.equals(this.tokenTtl, dynamicSecretUpdateGithub.tokenTtl) &&
        Objects.equals(this.uidToken, dynamicSecretUpdateGithub.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteProtection, description, githubAppId, githubAppPrivateKey, githubBaseUrl, installationId, installationOrganization, installationRepository, itemCustomFields, json, name, newName, tags, targetName, token, tokenPermissions, tokenRepositories, tokenTtl, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretUpdateGithub {\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    githubAppId: ").append(toIndentedString(githubAppId)).append("\n");
    sb.append("    githubAppPrivateKey: ").append(toIndentedString(githubAppPrivateKey)).append("\n");
    sb.append("    githubBaseUrl: ").append(toIndentedString(githubBaseUrl)).append("\n");
    sb.append("    installationId: ").append(toIndentedString(installationId)).append("\n");
    sb.append("    installationOrganization: ").append(toIndentedString(installationOrganization)).append("\n");
    sb.append("    installationRepository: ").append(toIndentedString(installationRepository)).append("\n");
    sb.append("    itemCustomFields: ").append(toIndentedString(itemCustomFields)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenPermissions: ").append(toIndentedString(tokenPermissions)).append("\n");
    sb.append("    tokenRepositories: ").append(toIndentedString(tokenRepositories)).append("\n");
    sb.append("    tokenTtl: ").append(toIndentedString(tokenTtl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("github-app-id");
    openapiFields.add("github-app-private-key");
    openapiFields.add("github-base-url");
    openapiFields.add("installation-id");
    openapiFields.add("installation-organization");
    openapiFields.add("installation-repository");
    openapiFields.add("item-custom-fields");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("token-permissions");
    openapiFields.add("token-repositories");
    openapiFields.add("token-ttl");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretUpdateGithub
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretUpdateGithub.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretUpdateGithub is not found in the empty JSON string", DynamicSecretUpdateGithub.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretUpdateGithub.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretUpdateGithub` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretUpdateGithub.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("github-app-private-key") != null && !jsonObj.get("github-app-private-key").isJsonNull()) && !jsonObj.get("github-app-private-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github-app-private-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github-app-private-key").toString()));
      }
      if ((jsonObj.get("github-base-url") != null && !jsonObj.get("github-base-url").isJsonNull()) && !jsonObj.get("github-base-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github-base-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github-base-url").toString()));
      }
      if ((jsonObj.get("installation-organization") != null && !jsonObj.get("installation-organization").isJsonNull()) && !jsonObj.get("installation-organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installation-organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installation-organization").toString()));
      }
      if ((jsonObj.get("installation-repository") != null && !jsonObj.get("installation-repository").isJsonNull()) && !jsonObj.get("installation-repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installation-repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installation-repository").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("token-permissions") != null && !jsonObj.get("token-permissions").isJsonNull() && !jsonObj.get("token-permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token-permissions` to be an array in the JSON string but got `%s`", jsonObj.get("token-permissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("token-repositories") != null && !jsonObj.get("token-repositories").isJsonNull() && !jsonObj.get("token-repositories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token-repositories` to be an array in the JSON string but got `%s`", jsonObj.get("token-repositories").toString()));
      }
      if ((jsonObj.get("token-ttl") != null && !jsonObj.get("token-ttl").isJsonNull()) && !jsonObj.get("token-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token-ttl").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretUpdateGithub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretUpdateGithub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretUpdateGithub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretUpdateGithub.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretUpdateGithub>() {
           @Override
           public void write(JsonWriter out, DynamicSecretUpdateGithub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretUpdateGithub read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretUpdateGithub given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretUpdateGithub
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretUpdateGithub
   */
  public static DynamicSecretUpdateGithub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretUpdateGithub.class);
  }

  /**
   * Convert an instance of DynamicSecretUpdateGithub to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

