/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ValidateTokenOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ValidateTokenOutput {
  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  @javax.annotation.Nullable
  private String expiration;

  public static final String SERIALIZED_NAME_IS_VALID = "is_valid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  @javax.annotation.Nullable
  private Boolean isValid;

  public static final String SERIALIZED_NAME_LAST_ROTATE = "last_rotate";
  @SerializedName(SERIALIZED_NAME_LAST_ROTATE)
  @javax.annotation.Nullable
  private String lastRotate;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Integer ttl;

  public ValidateTokenOutput() {
  }

  public ValidateTokenOutput expiration(@javax.annotation.Nullable String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(@javax.annotation.Nullable String expiration) {
    this.expiration = expiration;
  }


  public ValidateTokenOutput isValid(@javax.annotation.Nullable Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

  /**
   * Get isValid
   * @return isValid
   */
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(@javax.annotation.Nullable Boolean isValid) {
    this.isValid = isValid;
  }


  public ValidateTokenOutput lastRotate(@javax.annotation.Nullable String lastRotate) {
    this.lastRotate = lastRotate;
    return this;
  }

  /**
   * Get lastRotate
   * @return lastRotate
   */
  @javax.annotation.Nullable
  public String getLastRotate() {
    return lastRotate;
  }

  public void setLastRotate(@javax.annotation.Nullable String lastRotate) {
    this.lastRotate = lastRotate;
  }


  public ValidateTokenOutput reason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
  }


  public ValidateTokenOutput ttl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateTokenOutput validateTokenOutput = (ValidateTokenOutput) o;
    return Objects.equals(this.expiration, validateTokenOutput.expiration) &&
        Objects.equals(this.isValid, validateTokenOutput.isValid) &&
        Objects.equals(this.lastRotate, validateTokenOutput.lastRotate) &&
        Objects.equals(this.reason, validateTokenOutput.reason) &&
        Objects.equals(this.ttl, validateTokenOutput.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiration, isValid, lastRotate, reason, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateTokenOutput {\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    lastRotate: ").append(toIndentedString(lastRotate)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiration");
    openapiFields.add("is_valid");
    openapiFields.add("last_rotate");
    openapiFields.add("reason");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidateTokenOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateTokenOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateTokenOutput is not found in the empty JSON string", ValidateTokenOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateTokenOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateTokenOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("last_rotate") != null && !jsonObj.get("last_rotate").isJsonNull()) && !jsonObj.get("last_rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_rotate").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateTokenOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateTokenOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateTokenOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateTokenOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateTokenOutput>() {
           @Override
           public void write(JsonWriter out, ValidateTokenOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateTokenOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidateTokenOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidateTokenOutput
   * @throws IOException if the JSON string is invalid with respect to ValidateTokenOutput
   */
  public static ValidateTokenOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateTokenOutput.class);
  }

  /**
   * Convert an instance of ValidateTokenOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

