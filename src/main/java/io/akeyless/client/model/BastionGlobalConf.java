/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * BastionGlobalConf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class BastionGlobalConf {
  public static final String SERIALIZED_NAME_ALLOWED_BASTION_URLS = "allowed_bastion_urls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BASTION_URLS)
  @javax.annotation.Nullable
  private List<String> allowedBastionUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGACY_SIGNING_ALG = "legacy_signing_alg";
  @SerializedName(SERIALIZED_NAME_LEGACY_SIGNING_ALG)
  @javax.annotation.Nullable
  private Boolean legacySigningAlg;

  public static final String SERIALIZED_NAME_RDP_USERNAME_SUB_CLAIM = "rdp_username_sub_claim";
  @SerializedName(SERIALIZED_NAME_RDP_USERNAME_SUB_CLAIM)
  @javax.annotation.Nullable
  private String rdpUsernameSubClaim;

  public static final String SERIALIZED_NAME_SSH_USERNAME_SUB_CLAIM = "ssh_username_sub_claim";
  @SerializedName(SERIALIZED_NAME_SSH_USERNAME_SUB_CLAIM)
  @javax.annotation.Nullable
  private String sshUsernameSubClaim;

  public BastionGlobalConf() {
  }

  public BastionGlobalConf allowedBastionUrls(@javax.annotation.Nullable List<String> allowedBastionUrls) {
    this.allowedBastionUrls = allowedBastionUrls;
    return this;
  }

  public BastionGlobalConf addAllowedBastionUrlsItem(String allowedBastionUrlsItem) {
    if (this.allowedBastionUrls == null) {
      this.allowedBastionUrls = new ArrayList<>();
    }
    this.allowedBastionUrls.add(allowedBastionUrlsItem);
    return this;
  }

  /**
   * Get allowedBastionUrls
   * @return allowedBastionUrls
   */
  @javax.annotation.Nullable
  public List<String> getAllowedBastionUrls() {
    return allowedBastionUrls;
  }

  public void setAllowedBastionUrls(@javax.annotation.Nullable List<String> allowedBastionUrls) {
    this.allowedBastionUrls = allowedBastionUrls;
  }


  public BastionGlobalConf legacySigningAlg(@javax.annotation.Nullable Boolean legacySigningAlg) {
    this.legacySigningAlg = legacySigningAlg;
    return this;
  }

  /**
   * Get legacySigningAlg
   * @return legacySigningAlg
   */
  @javax.annotation.Nullable
  public Boolean getLegacySigningAlg() {
    return legacySigningAlg;
  }

  public void setLegacySigningAlg(@javax.annotation.Nullable Boolean legacySigningAlg) {
    this.legacySigningAlg = legacySigningAlg;
  }


  public BastionGlobalConf rdpUsernameSubClaim(@javax.annotation.Nullable String rdpUsernameSubClaim) {
    this.rdpUsernameSubClaim = rdpUsernameSubClaim;
    return this;
  }

  /**
   * Get rdpUsernameSubClaim
   * @return rdpUsernameSubClaim
   */
  @javax.annotation.Nullable
  public String getRdpUsernameSubClaim() {
    return rdpUsernameSubClaim;
  }

  public void setRdpUsernameSubClaim(@javax.annotation.Nullable String rdpUsernameSubClaim) {
    this.rdpUsernameSubClaim = rdpUsernameSubClaim;
  }


  public BastionGlobalConf sshUsernameSubClaim(@javax.annotation.Nullable String sshUsernameSubClaim) {
    this.sshUsernameSubClaim = sshUsernameSubClaim;
    return this;
  }

  /**
   * Get sshUsernameSubClaim
   * @return sshUsernameSubClaim
   */
  @javax.annotation.Nullable
  public String getSshUsernameSubClaim() {
    return sshUsernameSubClaim;
  }

  public void setSshUsernameSubClaim(@javax.annotation.Nullable String sshUsernameSubClaim) {
    this.sshUsernameSubClaim = sshUsernameSubClaim;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BastionGlobalConf bastionGlobalConf = (BastionGlobalConf) o;
    return Objects.equals(this.allowedBastionUrls, bastionGlobalConf.allowedBastionUrls) &&
        Objects.equals(this.legacySigningAlg, bastionGlobalConf.legacySigningAlg) &&
        Objects.equals(this.rdpUsernameSubClaim, bastionGlobalConf.rdpUsernameSubClaim) &&
        Objects.equals(this.sshUsernameSubClaim, bastionGlobalConf.sshUsernameSubClaim);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedBastionUrls, legacySigningAlg, rdpUsernameSubClaim, sshUsernameSubClaim);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BastionGlobalConf {\n");
    sb.append("    allowedBastionUrls: ").append(toIndentedString(allowedBastionUrls)).append("\n");
    sb.append("    legacySigningAlg: ").append(toIndentedString(legacySigningAlg)).append("\n");
    sb.append("    rdpUsernameSubClaim: ").append(toIndentedString(rdpUsernameSubClaim)).append("\n");
    sb.append("    sshUsernameSubClaim: ").append(toIndentedString(sshUsernameSubClaim)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_bastion_urls");
    openapiFields.add("legacy_signing_alg");
    openapiFields.add("rdp_username_sub_claim");
    openapiFields.add("ssh_username_sub_claim");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BastionGlobalConf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BastionGlobalConf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BastionGlobalConf is not found in the empty JSON string", BastionGlobalConf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BastionGlobalConf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BastionGlobalConf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_bastion_urls") != null && !jsonObj.get("allowed_bastion_urls").isJsonNull() && !jsonObj.get("allowed_bastion_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_bastion_urls` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_bastion_urls").toString()));
      }
      if ((jsonObj.get("rdp_username_sub_claim") != null && !jsonObj.get("rdp_username_sub_claim").isJsonNull()) && !jsonObj.get("rdp_username_sub_claim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp_username_sub_claim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp_username_sub_claim").toString()));
      }
      if ((jsonObj.get("ssh_username_sub_claim") != null && !jsonObj.get("ssh_username_sub_claim").isJsonNull()) && !jsonObj.get("ssh_username_sub_claim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_username_sub_claim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_username_sub_claim").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BastionGlobalConf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BastionGlobalConf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BastionGlobalConf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BastionGlobalConf.class));

       return (TypeAdapter<T>) new TypeAdapter<BastionGlobalConf>() {
           @Override
           public void write(JsonWriter out, BastionGlobalConf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BastionGlobalConf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BastionGlobalConf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BastionGlobalConf
   * @throws IOException if the JSON string is invalid with respect to BastionGlobalConf
   */
  public static BastionGlobalConf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BastionGlobalConf.class);
  }

  /**
   * Convert an instance of BastionGlobalConf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

