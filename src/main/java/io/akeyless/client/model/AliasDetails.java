/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * AliasDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AliasDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_ALIAS = "account-alias";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ALIAS)
  @javax.annotation.Nonnull
  private String accountAlias;

  public static final String SERIALIZED_NAME_AUTH_METHOD_NAME = "auth-method-name";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD_NAME)
  @javax.annotation.Nonnull
  private String authMethodName;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public AliasDetails() {
  }

  public AliasDetails accountAlias(@javax.annotation.Nonnull String accountAlias) {
    this.accountAlias = accountAlias;
    return this;
  }

  /**
   * Account alias
   * @return accountAlias
   */
  @javax.annotation.Nonnull
  public String getAccountAlias() {
    return accountAlias;
  }

  public void setAccountAlias(@javax.annotation.Nonnull String accountAlias) {
    this.accountAlias = accountAlias;
  }


  public AliasDetails authMethodName(@javax.annotation.Nonnull String authMethodName) {
    this.authMethodName = authMethodName;
    return this;
  }

  /**
   * Auth method name
   * @return authMethodName
   */
  @javax.annotation.Nonnull
  public String getAuthMethodName() {
    return authMethodName;
  }

  public void setAuthMethodName(@javax.annotation.Nonnull String authMethodName) {
    this.authMethodName = authMethodName;
  }


  public AliasDetails json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AliasDetails aliasDetails = (AliasDetails) o;
    return Objects.equals(this.accountAlias, aliasDetails.accountAlias) &&
        Objects.equals(this.authMethodName, aliasDetails.authMethodName) &&
        Objects.equals(this.json, aliasDetails.json);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAlias, authMethodName, json);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AliasDetails {\n");
    sb.append("    accountAlias: ").append(toIndentedString(accountAlias)).append("\n");
    sb.append("    authMethodName: ").append(toIndentedString(authMethodName)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account-alias");
    openapiFields.add("auth-method-name");
    openapiFields.add("json");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account-alias");
    openapiRequiredFields.add("auth-method-name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AliasDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AliasDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AliasDetails is not found in the empty JSON string", AliasDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AliasDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AliasDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AliasDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account-alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-alias").toString()));
      }
      if (!jsonObj.get("auth-method-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-method-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-method-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AliasDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AliasDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AliasDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AliasDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AliasDetails>() {
           @Override
           public void write(JsonWriter out, AliasDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AliasDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AliasDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AliasDetails
   * @throws IOException if the JSON string is invalid with respect to AliasDetails
   */
  public static AliasDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AliasDetails.class);
  }

  /**
   * Convert an instance of AliasDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

