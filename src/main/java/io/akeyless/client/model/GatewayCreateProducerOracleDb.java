/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayCreateProducerOracleDb is a command that creates oracle db producer [Deprecated: Use dynamic-secret-create-oracledb command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayCreateProducerOracleDb {
  public static final String SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE = "custom-username-template";
  @SerializedName(SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE)
  @javax.annotation.Nullable
  private String customUsernameTemplate;

  public static final String SERIALIZED_NAME_DB_SERVER_CERTIFICATES = "db-server-certificates";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_CERTIFICATES)
  @javax.annotation.Nullable
  private String dbServerCertificates;

  public static final String SERIALIZED_NAME_DB_SERVER_NAME = "db-server-name";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_NAME)
  @javax.annotation.Nullable
  private String dbServerName;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_ORACLE_HOST = "oracle-host";
  @SerializedName(SERIALIZED_NAME_ORACLE_HOST)
  @javax.annotation.Nullable
  private String oracleHost = "127.0.0.1";

  public static final String SERIALIZED_NAME_ORACLE_PASSWORD = "oracle-password";
  @SerializedName(SERIALIZED_NAME_ORACLE_PASSWORD)
  @javax.annotation.Nullable
  private String oraclePassword;

  public static final String SERIALIZED_NAME_ORACLE_PORT = "oracle-port";
  @SerializedName(SERIALIZED_NAME_ORACLE_PORT)
  @javax.annotation.Nullable
  private String oraclePort = "1521";

  public static final String SERIALIZED_NAME_ORACLE_REVOCATION_STATEMENTS = "oracle-revocation-statements";
  @SerializedName(SERIALIZED_NAME_ORACLE_REVOCATION_STATEMENTS)
  @javax.annotation.Nullable
  private String oracleRevocationStatements;

  public static final String SERIALIZED_NAME_ORACLE_SCREATION_STATEMENTS = "oracle-screation-statements";
  @SerializedName(SERIALIZED_NAME_ORACLE_SCREATION_STATEMENTS)
  @javax.annotation.Nullable
  private String oracleScreationStatements;

  public static final String SERIALIZED_NAME_ORACLE_SERVICE_NAME = "oracle-service-name";
  @SerializedName(SERIALIZED_NAME_ORACLE_SERVICE_NAME)
  @javax.annotation.Nullable
  private String oracleServiceName;

  public static final String SERIALIZED_NAME_ORACLE_USERNAME = "oracle-username";
  @SerializedName(SERIALIZED_NAME_ORACLE_USERNAME)
  @javax.annotation.Nullable
  private String oracleUsername;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable = "false";

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public GatewayCreateProducerOracleDb() {
  }

  public GatewayCreateProducerOracleDb customUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
    return this;
  }

  /**
   * Customize how temporary usernames are generated using go template
   * @return customUsernameTemplate
   */
  @javax.annotation.Nullable
  public String getCustomUsernameTemplate() {
    return customUsernameTemplate;
  }

  public void setCustomUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
  }


  public GatewayCreateProducerOracleDb dbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
    return this;
  }

  /**
   * (Optional) DB server certificates
   * @return dbServerCertificates
   */
  @javax.annotation.Nullable
  public String getDbServerCertificates() {
    return dbServerCertificates;
  }

  public void setDbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
  }


  public GatewayCreateProducerOracleDb dbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
    return this;
  }

  /**
   * (Optional) Server name for certificate verification
   * @return dbServerName
   */
  @javax.annotation.Nullable
  public String getDbServerName() {
    return dbServerName;
  }

  public void setDbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
  }


  public GatewayCreateProducerOracleDb deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GatewayCreateProducerOracleDb json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayCreateProducerOracleDb name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayCreateProducerOracleDb oracleHost(@javax.annotation.Nullable String oracleHost) {
    this.oracleHost = oracleHost;
    return this;
  }

  /**
   * Oracle Host
   * @return oracleHost
   */
  @javax.annotation.Nullable
  public String getOracleHost() {
    return oracleHost;
  }

  public void setOracleHost(@javax.annotation.Nullable String oracleHost) {
    this.oracleHost = oracleHost;
  }


  public GatewayCreateProducerOracleDb oraclePassword(@javax.annotation.Nullable String oraclePassword) {
    this.oraclePassword = oraclePassword;
    return this;
  }

  /**
   * Oracle Password
   * @return oraclePassword
   */
  @javax.annotation.Nullable
  public String getOraclePassword() {
    return oraclePassword;
  }

  public void setOraclePassword(@javax.annotation.Nullable String oraclePassword) {
    this.oraclePassword = oraclePassword;
  }


  public GatewayCreateProducerOracleDb oraclePort(@javax.annotation.Nullable String oraclePort) {
    this.oraclePort = oraclePort;
    return this;
  }

  /**
   * Oracle Port
   * @return oraclePort
   */
  @javax.annotation.Nullable
  public String getOraclePort() {
    return oraclePort;
  }

  public void setOraclePort(@javax.annotation.Nullable String oraclePort) {
    this.oraclePort = oraclePort;
  }


  public GatewayCreateProducerOracleDb oracleRevocationStatements(@javax.annotation.Nullable String oracleRevocationStatements) {
    this.oracleRevocationStatements = oracleRevocationStatements;
    return this;
  }

  /**
   * Oracle Revocation statements
   * @return oracleRevocationStatements
   */
  @javax.annotation.Nullable
  public String getOracleRevocationStatements() {
    return oracleRevocationStatements;
  }

  public void setOracleRevocationStatements(@javax.annotation.Nullable String oracleRevocationStatements) {
    this.oracleRevocationStatements = oracleRevocationStatements;
  }


  public GatewayCreateProducerOracleDb oracleScreationStatements(@javax.annotation.Nullable String oracleScreationStatements) {
    this.oracleScreationStatements = oracleScreationStatements;
    return this;
  }

  /**
   * Oracle Creation statements
   * @return oracleScreationStatements
   */
  @javax.annotation.Nullable
  public String getOracleScreationStatements() {
    return oracleScreationStatements;
  }

  public void setOracleScreationStatements(@javax.annotation.Nullable String oracleScreationStatements) {
    this.oracleScreationStatements = oracleScreationStatements;
  }


  public GatewayCreateProducerOracleDb oracleServiceName(@javax.annotation.Nullable String oracleServiceName) {
    this.oracleServiceName = oracleServiceName;
    return this;
  }

  /**
   * Oracle DB Name
   * @return oracleServiceName
   */
  @javax.annotation.Nullable
  public String getOracleServiceName() {
    return oracleServiceName;
  }

  public void setOracleServiceName(@javax.annotation.Nullable String oracleServiceName) {
    this.oracleServiceName = oracleServiceName;
  }


  public GatewayCreateProducerOracleDb oracleUsername(@javax.annotation.Nullable String oracleUsername) {
    this.oracleUsername = oracleUsername;
    return this;
  }

  /**
   * Oracle Username
   * @return oracleUsername
   */
  @javax.annotation.Nullable
  public String getOracleUsername() {
    return oracleUsername;
  }

  public void setOracleUsername(@javax.annotation.Nullable String oracleUsername) {
    this.oracleUsername = oracleUsername;
  }


  public GatewayCreateProducerOracleDb passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public GatewayCreateProducerOracleDb producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public GatewayCreateProducerOracleDb secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public GatewayCreateProducerOracleDb secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public GatewayCreateProducerOracleDb secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public GatewayCreateProducerOracleDb secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public GatewayCreateProducerOracleDb addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public GatewayCreateProducerOracleDb secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public GatewayCreateProducerOracleDb tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GatewayCreateProducerOracleDb addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public GatewayCreateProducerOracleDb targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public GatewayCreateProducerOracleDb token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayCreateProducerOracleDb uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayCreateProducerOracleDb userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerOracleDb gatewayCreateProducerOracleDb = (GatewayCreateProducerOracleDb) o;
    return Objects.equals(this.customUsernameTemplate, gatewayCreateProducerOracleDb.customUsernameTemplate) &&
        Objects.equals(this.dbServerCertificates, gatewayCreateProducerOracleDb.dbServerCertificates) &&
        Objects.equals(this.dbServerName, gatewayCreateProducerOracleDb.dbServerName) &&
        Objects.equals(this.deleteProtection, gatewayCreateProducerOracleDb.deleteProtection) &&
        Objects.equals(this.json, gatewayCreateProducerOracleDb.json) &&
        Objects.equals(this.name, gatewayCreateProducerOracleDb.name) &&
        Objects.equals(this.oracleHost, gatewayCreateProducerOracleDb.oracleHost) &&
        Objects.equals(this.oraclePassword, gatewayCreateProducerOracleDb.oraclePassword) &&
        Objects.equals(this.oraclePort, gatewayCreateProducerOracleDb.oraclePort) &&
        Objects.equals(this.oracleRevocationStatements, gatewayCreateProducerOracleDb.oracleRevocationStatements) &&
        Objects.equals(this.oracleScreationStatements, gatewayCreateProducerOracleDb.oracleScreationStatements) &&
        Objects.equals(this.oracleServiceName, gatewayCreateProducerOracleDb.oracleServiceName) &&
        Objects.equals(this.oracleUsername, gatewayCreateProducerOracleDb.oracleUsername) &&
        Objects.equals(this.passwordLength, gatewayCreateProducerOracleDb.passwordLength) &&
        Objects.equals(this.producerEncryptionKeyName, gatewayCreateProducerOracleDb.producerEncryptionKeyName) &&
        Objects.equals(this.secureAccessBastionIssuer, gatewayCreateProducerOracleDb.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, gatewayCreateProducerOracleDb.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessEnable, gatewayCreateProducerOracleDb.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, gatewayCreateProducerOracleDb.secureAccessHost) &&
        Objects.equals(this.secureAccessWeb, gatewayCreateProducerOracleDb.secureAccessWeb) &&
        Objects.equals(this.tags, gatewayCreateProducerOracleDb.tags) &&
        Objects.equals(this.targetName, gatewayCreateProducerOracleDb.targetName) &&
        Objects.equals(this.token, gatewayCreateProducerOracleDb.token) &&
        Objects.equals(this.uidToken, gatewayCreateProducerOracleDb.uidToken) &&
        Objects.equals(this.userTtl, gatewayCreateProducerOracleDb.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customUsernameTemplate, dbServerCertificates, dbServerName, deleteProtection, json, name, oracleHost, oraclePassword, oraclePort, oracleRevocationStatements, oracleScreationStatements, oracleServiceName, oracleUsername, passwordLength, producerEncryptionKeyName, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessEnable, secureAccessHost, secureAccessWeb, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerOracleDb {\n");
    sb.append("    customUsernameTemplate: ").append(toIndentedString(customUsernameTemplate)).append("\n");
    sb.append("    dbServerCertificates: ").append(toIndentedString(dbServerCertificates)).append("\n");
    sb.append("    dbServerName: ").append(toIndentedString(dbServerName)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oracleHost: ").append(toIndentedString(oracleHost)).append("\n");
    sb.append("    oraclePassword: ").append(toIndentedString(oraclePassword)).append("\n");
    sb.append("    oraclePort: ").append(toIndentedString(oraclePort)).append("\n");
    sb.append("    oracleRevocationStatements: ").append(toIndentedString(oracleRevocationStatements)).append("\n");
    sb.append("    oracleScreationStatements: ").append(toIndentedString(oracleScreationStatements)).append("\n");
    sb.append("    oracleServiceName: ").append(toIndentedString(oracleServiceName)).append("\n");
    sb.append("    oracleUsername: ").append(toIndentedString(oracleUsername)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom-username-template");
    openapiFields.add("db-server-certificates");
    openapiFields.add("db-server-name");
    openapiFields.add("delete_protection");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("oracle-host");
    openapiFields.add("oracle-password");
    openapiFields.add("oracle-port");
    openapiFields.add("oracle-revocation-statements");
    openapiFields.add("oracle-screation-statements");
    openapiFields.add("oracle-service-name");
    openapiFields.add("oracle-username");
    openapiFields.add("password-length");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-web");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayCreateProducerOracleDb
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayCreateProducerOracleDb.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayCreateProducerOracleDb is not found in the empty JSON string", GatewayCreateProducerOracleDb.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayCreateProducerOracleDb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayCreateProducerOracleDb` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayCreateProducerOracleDb.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom-username-template") != null && !jsonObj.get("custom-username-template").isJsonNull()) && !jsonObj.get("custom-username-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-username-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-username-template").toString()));
      }
      if ((jsonObj.get("db-server-certificates") != null && !jsonObj.get("db-server-certificates").isJsonNull()) && !jsonObj.get("db-server-certificates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-certificates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-certificates").toString()));
      }
      if ((jsonObj.get("db-server-name") != null && !jsonObj.get("db-server-name").isJsonNull()) && !jsonObj.get("db-server-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-name").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("oracle-host") != null && !jsonObj.get("oracle-host").isJsonNull()) && !jsonObj.get("oracle-host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-host").toString()));
      }
      if ((jsonObj.get("oracle-password") != null && !jsonObj.get("oracle-password").isJsonNull()) && !jsonObj.get("oracle-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-password").toString()));
      }
      if ((jsonObj.get("oracle-port") != null && !jsonObj.get("oracle-port").isJsonNull()) && !jsonObj.get("oracle-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-port").toString()));
      }
      if ((jsonObj.get("oracle-revocation-statements") != null && !jsonObj.get("oracle-revocation-statements").isJsonNull()) && !jsonObj.get("oracle-revocation-statements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-revocation-statements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-revocation-statements").toString()));
      }
      if ((jsonObj.get("oracle-screation-statements") != null && !jsonObj.get("oracle-screation-statements").isJsonNull()) && !jsonObj.get("oracle-screation-statements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-screation-statements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-screation-statements").toString()));
      }
      if ((jsonObj.get("oracle-service-name") != null && !jsonObj.get("oracle-service-name").isJsonNull()) && !jsonObj.get("oracle-service-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-service-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-service-name").toString()));
      }
      if ((jsonObj.get("oracle-username") != null && !jsonObj.get("oracle-username").isJsonNull()) && !jsonObj.get("oracle-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-username").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayCreateProducerOracleDb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayCreateProducerOracleDb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayCreateProducerOracleDb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayCreateProducerOracleDb.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayCreateProducerOracleDb>() {
           @Override
           public void write(JsonWriter out, GatewayCreateProducerOracleDb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayCreateProducerOracleDb read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayCreateProducerOracleDb given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayCreateProducerOracleDb
   * @throws IOException if the JSON string is invalid with respect to GatewayCreateProducerOracleDb
   */
  public static GatewayCreateProducerOracleDb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayCreateProducerOracleDb.class);
  }

  /**
   * Convert an instance of GatewayCreateProducerOracleDb to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

