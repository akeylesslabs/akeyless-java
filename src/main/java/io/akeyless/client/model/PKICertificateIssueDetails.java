/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.CertificateExpirationEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * PKICertificateIssueDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PKICertificateIssueDetails {
  public static final String SERIALIZED_NAME_ACME_ENABLED = "acme_enabled";
  @SerializedName(SERIALIZED_NAME_ACME_ENABLED)
  @javax.annotation.Nullable
  private Boolean acmeEnabled;

  public static final String SERIALIZED_NAME_ALLOW_ANY_NAME = "allow_any_name";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANY_NAME)
  @javax.annotation.Nullable
  private Boolean allowAnyName;

  public static final String SERIALIZED_NAME_ALLOW_COPY_EXT_FROM_CSR = "allow_copy_ext_from_csr";
  @SerializedName(SERIALIZED_NAME_ALLOW_COPY_EXT_FROM_CSR)
  @javax.annotation.Nullable
  private Boolean allowCopyExtFromCsr;

  public static final String SERIALIZED_NAME_ALLOW_SUBDOMAINS = "allow_subdomains";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUBDOMAINS)
  @javax.annotation.Nullable
  private Boolean allowSubdomains;

  public static final String SERIALIZED_NAME_ALLOWED_DOMAINS_LIST = "allowed_domains_list";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DOMAINS_LIST)
  @javax.annotation.Nullable
  private List<String> allowedDomainsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_EXTRA_EXTENSIONS = "allowed_extra_extensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXTRA_EXTENSIONS)
  @javax.annotation.Nullable
  private Map<String, List<String>> allowedExtraExtensions = new HashMap<>();

  public static final String SERIALIZED_NAME_ALLOWED_IP_SANS = "allowed_ip_sans";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IP_SANS)
  @javax.annotation.Nullable
  private List<String> allowedIpSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_URI_SANS = "allowed_uri_sans";
  @SerializedName(SERIALIZED_NAME_ALLOWED_URI_SANS)
  @javax.annotation.Nullable
  private List<String> allowedUriSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_RENEW_CERTIFICATE = "auto_renew_certificate";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW_CERTIFICATE)
  @javax.annotation.Nullable
  private Boolean autoRenewCertificate;

  public static final String SERIALIZED_NAME_BASIC_CONSTRAINTS_VALID_FOR_NON_CA = "basic_constraints_valid_for_non_ca";
  @SerializedName(SERIALIZED_NAME_BASIC_CONSTRAINTS_VALID_FOR_NON_CA)
  @javax.annotation.Nullable
  private Boolean basicConstraintsValidForNonCa;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_MODE = "certificate_authority_mode";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_MODE)
  @javax.annotation.Nullable
  private String certificateAuthorityMode;

  public static final String SERIALIZED_NAME_CLIENT_FLAG = "client_flag";
  @SerializedName(SERIALIZED_NAME_CLIENT_FLAG)
  @javax.annotation.Nullable
  private Boolean clientFlag;

  public static final String SERIALIZED_NAME_CODE_SIGNING_FLAG = "code_signing_flag";
  @SerializedName(SERIALIZED_NAME_CODE_SIGNING_FLAG)
  @javax.annotation.Nullable
  private Boolean codeSigningFlag;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private List<String> country = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_PRIVATE_CRL = "create_private_crl";
  @SerializedName(SERIALIZED_NAME_CREATE_PRIVATE_CRL)
  @javax.annotation.Nullable
  private Boolean createPrivateCrl;

  public static final String SERIALIZED_NAME_CREATE_PUBLIC_CRL = "create_public_crl";
  @SerializedName(SERIALIZED_NAME_CREATE_PUBLIC_CRL)
  @javax.annotation.Nullable
  private Boolean createPublicCrl;

  public static final String SERIALIZED_NAME_DESTINATION_PATH = "destination_path";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PATH)
  @javax.annotation.Nullable
  private String destinationPath;

  public static final String SERIALIZED_NAME_DISABLE_WILDCARDS = "disable_wildcards";
  @SerializedName(SERIALIZED_NAME_DISABLE_WILDCARDS)
  @javax.annotation.Nullable
  private Boolean disableWildcards;

  public static final String SERIALIZED_NAME_ENFORCE_HOSTNAMES = "enforce_hostnames";
  @SerializedName(SERIALIZED_NAME_ENFORCE_HOSTNAMES)
  @javax.annotation.Nullable
  private Boolean enforceHostnames;

  public static final String SERIALIZED_NAME_EXPIRATION_EVENTS = "expiration_events";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENTS)
  @javax.annotation.Nullable
  private List<CertificateExpirationEvent> expirationEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_GW_CLUSTER_ID = "gw_cluster_id";
  @SerializedName(SERIALIZED_NAME_GW_CLUSTER_ID)
  @javax.annotation.Nullable
  private Long gwClusterId;

  public static final String SERIALIZED_NAME_GW_CLUSTER_URL = "gw_cluster_url";
  @SerializedName(SERIALIZED_NAME_GW_CLUSTER_URL)
  @javax.annotation.Nullable
  private String gwClusterUrl;

  public static final String SERIALIZED_NAME_IS_CA = "is_ca";
  @SerializedName(SERIALIZED_NAME_IS_CA)
  @javax.annotation.Nullable
  private Boolean isCa;

  public static final String SERIALIZED_NAME_KEY_BITS = "key_bits";
  @SerializedName(SERIALIZED_NAME_KEY_BITS)
  @javax.annotation.Nullable
  private Long keyBits;

  public static final String SERIALIZED_NAME_KEY_TYPE = "key_type";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  @javax.annotation.Nullable
  private String keyType;

  public static final String SERIALIZED_NAME_KEY_USAGE_LIST = "key_usage_list";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE_LIST)
  @javax.annotation.Nullable
  private List<String> keyUsageList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  @javax.annotation.Nullable
  private List<String> locality = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PATH_LEN = "max_path_len";
  @SerializedName(SERIALIZED_NAME_MAX_PATH_LEN)
  @javax.annotation.Nullable
  private Long maxPathLen;

  public static final String SERIALIZED_NAME_NON_CRITICAL_KEY_USAGE = "non_critical_key_usage";
  @SerializedName(SERIALIZED_NAME_NON_CRITICAL_KEY_USAGE)
  @javax.annotation.Nullable
  private Boolean nonCriticalKeyUsage;

  public static final String SERIALIZED_NAME_NOT_BEFORE_DURATION = "not_before_duration";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE_DURATION)
  @javax.annotation.Nullable
  private Long notBeforeDuration;

  public static final String SERIALIZED_NAME_ORGANIZATION_LIST = "organization_list";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_LIST)
  @javax.annotation.Nullable
  private List<String> organizationList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_UNIT_LIST = "organization_unit_list";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_UNIT_LIST)
  @javax.annotation.Nullable
  private List<String> organizationUnitList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PKI_ISSUER_TYPE = "pki_issuer_type";
  @SerializedName(SERIALIZED_NAME_PKI_ISSUER_TYPE)
  @javax.annotation.Nullable
  private String pkiIssuerType;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  @javax.annotation.Nullable
  private List<String> postalCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTECT_GENERATED_CERTIFICATES = "protect_generated_certificates";
  @SerializedName(SERIALIZED_NAME_PROTECT_GENERATED_CERTIFICATES)
  @javax.annotation.Nullable
  private Boolean protectGeneratedCertificates;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  @javax.annotation.Nullable
  private List<String> province = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENEW_BEFORE_EXPIRATION_IN_DAYS = "renew_before_expiration_in_days";
  @SerializedName(SERIALIZED_NAME_RENEW_BEFORE_EXPIRATION_IN_DAYS)
  @javax.annotation.Nullable
  private Long renewBeforeExpirationInDays;

  public static final String SERIALIZED_NAME_REQUIRE_CN = "require_cn";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CN)
  @javax.annotation.Nullable
  private Boolean requireCn;

  public static final String SERIALIZED_NAME_SERVER_FLAG = "server_flag";
  @SerializedName(SERIALIZED_NAME_SERVER_FLAG)
  @javax.annotation.Nullable
  private Boolean serverFlag;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street_address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  @javax.annotation.Nullable
  private List<String> streetAddress = new ArrayList<>();

  public PKICertificateIssueDetails() {
  }

  public PKICertificateIssueDetails acmeEnabled(@javax.annotation.Nullable Boolean acmeEnabled) {
    this.acmeEnabled = acmeEnabled;
    return this;
  }

  /**
   * Get acmeEnabled
   * @return acmeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAcmeEnabled() {
    return acmeEnabled;
  }

  public void setAcmeEnabled(@javax.annotation.Nullable Boolean acmeEnabled) {
    this.acmeEnabled = acmeEnabled;
  }


  public PKICertificateIssueDetails allowAnyName(@javax.annotation.Nullable Boolean allowAnyName) {
    this.allowAnyName = allowAnyName;
    return this;
  }

  /**
   * Get allowAnyName
   * @return allowAnyName
   */
  @javax.annotation.Nullable
  public Boolean getAllowAnyName() {
    return allowAnyName;
  }

  public void setAllowAnyName(@javax.annotation.Nullable Boolean allowAnyName) {
    this.allowAnyName = allowAnyName;
  }


  public PKICertificateIssueDetails allowCopyExtFromCsr(@javax.annotation.Nullable Boolean allowCopyExtFromCsr) {
    this.allowCopyExtFromCsr = allowCopyExtFromCsr;
    return this;
  }

  /**
   * Get allowCopyExtFromCsr
   * @return allowCopyExtFromCsr
   */
  @javax.annotation.Nullable
  public Boolean getAllowCopyExtFromCsr() {
    return allowCopyExtFromCsr;
  }

  public void setAllowCopyExtFromCsr(@javax.annotation.Nullable Boolean allowCopyExtFromCsr) {
    this.allowCopyExtFromCsr = allowCopyExtFromCsr;
  }


  public PKICertificateIssueDetails allowSubdomains(@javax.annotation.Nullable Boolean allowSubdomains) {
    this.allowSubdomains = allowSubdomains;
    return this;
  }

  /**
   * Get allowSubdomains
   * @return allowSubdomains
   */
  @javax.annotation.Nullable
  public Boolean getAllowSubdomains() {
    return allowSubdomains;
  }

  public void setAllowSubdomains(@javax.annotation.Nullable Boolean allowSubdomains) {
    this.allowSubdomains = allowSubdomains;
  }


  public PKICertificateIssueDetails allowedDomainsList(@javax.annotation.Nullable List<String> allowedDomainsList) {
    this.allowedDomainsList = allowedDomainsList;
    return this;
  }

  public PKICertificateIssueDetails addAllowedDomainsListItem(String allowedDomainsListItem) {
    if (this.allowedDomainsList == null) {
      this.allowedDomainsList = new ArrayList<>();
    }
    this.allowedDomainsList.add(allowedDomainsListItem);
    return this;
  }

  /**
   * Get allowedDomainsList
   * @return allowedDomainsList
   */
  @javax.annotation.Nullable
  public List<String> getAllowedDomainsList() {
    return allowedDomainsList;
  }

  public void setAllowedDomainsList(@javax.annotation.Nullable List<String> allowedDomainsList) {
    this.allowedDomainsList = allowedDomainsList;
  }


  public PKICertificateIssueDetails allowedExtraExtensions(@javax.annotation.Nullable Map<String, List<String>> allowedExtraExtensions) {
    this.allowedExtraExtensions = allowedExtraExtensions;
    return this;
  }

  public PKICertificateIssueDetails putAllowedExtraExtensionsItem(String key, List<String> allowedExtraExtensionsItem) {
    if (this.allowedExtraExtensions == null) {
      this.allowedExtraExtensions = new HashMap<>();
    }
    this.allowedExtraExtensions.put(key, allowedExtraExtensionsItem);
    return this;
  }

  /**
   * Get allowedExtraExtensions
   * @return allowedExtraExtensions
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getAllowedExtraExtensions() {
    return allowedExtraExtensions;
  }

  public void setAllowedExtraExtensions(@javax.annotation.Nullable Map<String, List<String>> allowedExtraExtensions) {
    this.allowedExtraExtensions = allowedExtraExtensions;
  }


  public PKICertificateIssueDetails allowedIpSans(@javax.annotation.Nullable List<String> allowedIpSans) {
    this.allowedIpSans = allowedIpSans;
    return this;
  }

  public PKICertificateIssueDetails addAllowedIpSansItem(String allowedIpSansItem) {
    if (this.allowedIpSans == null) {
      this.allowedIpSans = new ArrayList<>();
    }
    this.allowedIpSans.add(allowedIpSansItem);
    return this;
  }

  /**
   * Get allowedIpSans
   * @return allowedIpSans
   */
  @javax.annotation.Nullable
  public List<String> getAllowedIpSans() {
    return allowedIpSans;
  }

  public void setAllowedIpSans(@javax.annotation.Nullable List<String> allowedIpSans) {
    this.allowedIpSans = allowedIpSans;
  }


  public PKICertificateIssueDetails allowedUriSans(@javax.annotation.Nullable List<String> allowedUriSans) {
    this.allowedUriSans = allowedUriSans;
    return this;
  }

  public PKICertificateIssueDetails addAllowedUriSansItem(String allowedUriSansItem) {
    if (this.allowedUriSans == null) {
      this.allowedUriSans = new ArrayList<>();
    }
    this.allowedUriSans.add(allowedUriSansItem);
    return this;
  }

  /**
   * Get allowedUriSans
   * @return allowedUriSans
   */
  @javax.annotation.Nullable
  public List<String> getAllowedUriSans() {
    return allowedUriSans;
  }

  public void setAllowedUriSans(@javax.annotation.Nullable List<String> allowedUriSans) {
    this.allowedUriSans = allowedUriSans;
  }


  public PKICertificateIssueDetails autoRenewCertificate(@javax.annotation.Nullable Boolean autoRenewCertificate) {
    this.autoRenewCertificate = autoRenewCertificate;
    return this;
  }

  /**
   * Get autoRenewCertificate
   * @return autoRenewCertificate
   */
  @javax.annotation.Nullable
  public Boolean getAutoRenewCertificate() {
    return autoRenewCertificate;
  }

  public void setAutoRenewCertificate(@javax.annotation.Nullable Boolean autoRenewCertificate) {
    this.autoRenewCertificate = autoRenewCertificate;
  }


  public PKICertificateIssueDetails basicConstraintsValidForNonCa(@javax.annotation.Nullable Boolean basicConstraintsValidForNonCa) {
    this.basicConstraintsValidForNonCa = basicConstraintsValidForNonCa;
    return this;
  }

  /**
   * Get basicConstraintsValidForNonCa
   * @return basicConstraintsValidForNonCa
   */
  @javax.annotation.Nullable
  public Boolean getBasicConstraintsValidForNonCa() {
    return basicConstraintsValidForNonCa;
  }

  public void setBasicConstraintsValidForNonCa(@javax.annotation.Nullable Boolean basicConstraintsValidForNonCa) {
    this.basicConstraintsValidForNonCa = basicConstraintsValidForNonCa;
  }


  public PKICertificateIssueDetails certificateAuthorityMode(@javax.annotation.Nullable String certificateAuthorityMode) {
    this.certificateAuthorityMode = certificateAuthorityMode;
    return this;
  }

  /**
   * Get certificateAuthorityMode
   * @return certificateAuthorityMode
   */
  @javax.annotation.Nullable
  public String getCertificateAuthorityMode() {
    return certificateAuthorityMode;
  }

  public void setCertificateAuthorityMode(@javax.annotation.Nullable String certificateAuthorityMode) {
    this.certificateAuthorityMode = certificateAuthorityMode;
  }


  public PKICertificateIssueDetails clientFlag(@javax.annotation.Nullable Boolean clientFlag) {
    this.clientFlag = clientFlag;
    return this;
  }

  /**
   * Get clientFlag
   * @return clientFlag
   */
  @javax.annotation.Nullable
  public Boolean getClientFlag() {
    return clientFlag;
  }

  public void setClientFlag(@javax.annotation.Nullable Boolean clientFlag) {
    this.clientFlag = clientFlag;
  }


  public PKICertificateIssueDetails codeSigningFlag(@javax.annotation.Nullable Boolean codeSigningFlag) {
    this.codeSigningFlag = codeSigningFlag;
    return this;
  }

  /**
   * Get codeSigningFlag
   * @return codeSigningFlag
   */
  @javax.annotation.Nullable
  public Boolean getCodeSigningFlag() {
    return codeSigningFlag;
  }

  public void setCodeSigningFlag(@javax.annotation.Nullable Boolean codeSigningFlag) {
    this.codeSigningFlag = codeSigningFlag;
  }


  public PKICertificateIssueDetails country(@javax.annotation.Nullable List<String> country) {
    this.country = country;
    return this;
  }

  public PKICertificateIssueDetails addCountryItem(String countryItem) {
    if (this.country == null) {
      this.country = new ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public List<String> getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable List<String> country) {
    this.country = country;
  }


  public PKICertificateIssueDetails createPrivateCrl(@javax.annotation.Nullable Boolean createPrivateCrl) {
    this.createPrivateCrl = createPrivateCrl;
    return this;
  }

  /**
   * Get createPrivateCrl
   * @return createPrivateCrl
   */
  @javax.annotation.Nullable
  public Boolean getCreatePrivateCrl() {
    return createPrivateCrl;
  }

  public void setCreatePrivateCrl(@javax.annotation.Nullable Boolean createPrivateCrl) {
    this.createPrivateCrl = createPrivateCrl;
  }


  public PKICertificateIssueDetails createPublicCrl(@javax.annotation.Nullable Boolean createPublicCrl) {
    this.createPublicCrl = createPublicCrl;
    return this;
  }

  /**
   * Get createPublicCrl
   * @return createPublicCrl
   */
  @javax.annotation.Nullable
  public Boolean getCreatePublicCrl() {
    return createPublicCrl;
  }

  public void setCreatePublicCrl(@javax.annotation.Nullable Boolean createPublicCrl) {
    this.createPublicCrl = createPublicCrl;
  }


  public PKICertificateIssueDetails destinationPath(@javax.annotation.Nullable String destinationPath) {
    this.destinationPath = destinationPath;
    return this;
  }

  /**
   * DestinationPath is the destination to save generated certificates
   * @return destinationPath
   */
  @javax.annotation.Nullable
  public String getDestinationPath() {
    return destinationPath;
  }

  public void setDestinationPath(@javax.annotation.Nullable String destinationPath) {
    this.destinationPath = destinationPath;
  }


  public PKICertificateIssueDetails disableWildcards(@javax.annotation.Nullable Boolean disableWildcards) {
    this.disableWildcards = disableWildcards;
    return this;
  }

  /**
   * Get disableWildcards
   * @return disableWildcards
   */
  @javax.annotation.Nullable
  public Boolean getDisableWildcards() {
    return disableWildcards;
  }

  public void setDisableWildcards(@javax.annotation.Nullable Boolean disableWildcards) {
    this.disableWildcards = disableWildcards;
  }


  public PKICertificateIssueDetails enforceHostnames(@javax.annotation.Nullable Boolean enforceHostnames) {
    this.enforceHostnames = enforceHostnames;
    return this;
  }

  /**
   * Get enforceHostnames
   * @return enforceHostnames
   */
  @javax.annotation.Nullable
  public Boolean getEnforceHostnames() {
    return enforceHostnames;
  }

  public void setEnforceHostnames(@javax.annotation.Nullable Boolean enforceHostnames) {
    this.enforceHostnames = enforceHostnames;
  }


  public PKICertificateIssueDetails expirationEvents(@javax.annotation.Nullable List<CertificateExpirationEvent> expirationEvents) {
    this.expirationEvents = expirationEvents;
    return this;
  }

  public PKICertificateIssueDetails addExpirationEventsItem(CertificateExpirationEvent expirationEventsItem) {
    if (this.expirationEvents == null) {
      this.expirationEvents = new ArrayList<>();
    }
    this.expirationEvents.add(expirationEventsItem);
    return this;
  }

  /**
   * ExpirationNotification holds a list of expiration notices that should be sent in case a certificate is about to expire, this value is being propagated to the Certificate resources that are created
   * @return expirationEvents
   */
  @javax.annotation.Nullable
  public List<CertificateExpirationEvent> getExpirationEvents() {
    return expirationEvents;
  }

  public void setExpirationEvents(@javax.annotation.Nullable List<CertificateExpirationEvent> expirationEvents) {
    this.expirationEvents = expirationEvents;
  }


  public PKICertificateIssueDetails gwClusterId(@javax.annotation.Nullable Long gwClusterId) {
    this.gwClusterId = gwClusterId;
    return this;
  }

  /**
   * Get gwClusterId
   * @return gwClusterId
   */
  @javax.annotation.Nullable
  public Long getGwClusterId() {
    return gwClusterId;
  }

  public void setGwClusterId(@javax.annotation.Nullable Long gwClusterId) {
    this.gwClusterId = gwClusterId;
  }


  public PKICertificateIssueDetails gwClusterUrl(@javax.annotation.Nullable String gwClusterUrl) {
    this.gwClusterUrl = gwClusterUrl;
    return this;
  }

  /**
   * GWClusterURL is required when CAMode is \&quot;public\&quot; and it defines the cluster URL the PKI should be issued from. The GW cluster must have permissions to read associated target&#39;s details
   * @return gwClusterUrl
   */
  @javax.annotation.Nullable
  public String getGwClusterUrl() {
    return gwClusterUrl;
  }

  public void setGwClusterUrl(@javax.annotation.Nullable String gwClusterUrl) {
    this.gwClusterUrl = gwClusterUrl;
  }


  public PKICertificateIssueDetails isCa(@javax.annotation.Nullable Boolean isCa) {
    this.isCa = isCa;
    return this;
  }

  /**
   * Get isCa
   * @return isCa
   */
  @javax.annotation.Nullable
  public Boolean getIsCa() {
    return isCa;
  }

  public void setIsCa(@javax.annotation.Nullable Boolean isCa) {
    this.isCa = isCa;
  }


  public PKICertificateIssueDetails keyBits(@javax.annotation.Nullable Long keyBits) {
    this.keyBits = keyBits;
    return this;
  }

  /**
   * Get keyBits
   * @return keyBits
   */
  @javax.annotation.Nullable
  public Long getKeyBits() {
    return keyBits;
  }

  public void setKeyBits(@javax.annotation.Nullable Long keyBits) {
    this.keyBits = keyBits;
  }


  public PKICertificateIssueDetails keyType(@javax.annotation.Nullable String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * Get keyType
   * @return keyType
   */
  @javax.annotation.Nullable
  public String getKeyType() {
    return keyType;
  }

  public void setKeyType(@javax.annotation.Nullable String keyType) {
    this.keyType = keyType;
  }


  public PKICertificateIssueDetails keyUsageList(@javax.annotation.Nullable List<String> keyUsageList) {
    this.keyUsageList = keyUsageList;
    return this;
  }

  public PKICertificateIssueDetails addKeyUsageListItem(String keyUsageListItem) {
    if (this.keyUsageList == null) {
      this.keyUsageList = new ArrayList<>();
    }
    this.keyUsageList.add(keyUsageListItem);
    return this;
  }

  /**
   * Get keyUsageList
   * @return keyUsageList
   */
  @javax.annotation.Nullable
  public List<String> getKeyUsageList() {
    return keyUsageList;
  }

  public void setKeyUsageList(@javax.annotation.Nullable List<String> keyUsageList) {
    this.keyUsageList = keyUsageList;
  }


  public PKICertificateIssueDetails locality(@javax.annotation.Nullable List<String> locality) {
    this.locality = locality;
    return this;
  }

  public PKICertificateIssueDetails addLocalityItem(String localityItem) {
    if (this.locality == null) {
      this.locality = new ArrayList<>();
    }
    this.locality.add(localityItem);
    return this;
  }

  /**
   * Get locality
   * @return locality
   */
  @javax.annotation.Nullable
  public List<String> getLocality() {
    return locality;
  }

  public void setLocality(@javax.annotation.Nullable List<String> locality) {
    this.locality = locality;
  }


  public PKICertificateIssueDetails maxPathLen(@javax.annotation.Nullable Long maxPathLen) {
    this.maxPathLen = maxPathLen;
    return this;
  }

  /**
   * Get maxPathLen
   * @return maxPathLen
   */
  @javax.annotation.Nullable
  public Long getMaxPathLen() {
    return maxPathLen;
  }

  public void setMaxPathLen(@javax.annotation.Nullable Long maxPathLen) {
    this.maxPathLen = maxPathLen;
  }


  public PKICertificateIssueDetails nonCriticalKeyUsage(@javax.annotation.Nullable Boolean nonCriticalKeyUsage) {
    this.nonCriticalKeyUsage = nonCriticalKeyUsage;
    return this;
  }

  /**
   * Get nonCriticalKeyUsage
   * @return nonCriticalKeyUsage
   */
  @javax.annotation.Nullable
  public Boolean getNonCriticalKeyUsage() {
    return nonCriticalKeyUsage;
  }

  public void setNonCriticalKeyUsage(@javax.annotation.Nullable Boolean nonCriticalKeyUsage) {
    this.nonCriticalKeyUsage = nonCriticalKeyUsage;
  }


  public PKICertificateIssueDetails notBeforeDuration(@javax.annotation.Nullable Long notBeforeDuration) {
    this.notBeforeDuration = notBeforeDuration;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return notBeforeDuration
   */
  @javax.annotation.Nullable
  public Long getNotBeforeDuration() {
    return notBeforeDuration;
  }

  public void setNotBeforeDuration(@javax.annotation.Nullable Long notBeforeDuration) {
    this.notBeforeDuration = notBeforeDuration;
  }


  public PKICertificateIssueDetails organizationList(@javax.annotation.Nullable List<String> organizationList) {
    this.organizationList = organizationList;
    return this;
  }

  public PKICertificateIssueDetails addOrganizationListItem(String organizationListItem) {
    if (this.organizationList == null) {
      this.organizationList = new ArrayList<>();
    }
    this.organizationList.add(organizationListItem);
    return this;
  }

  /**
   * Get organizationList
   * @return organizationList
   */
  @javax.annotation.Nullable
  public List<String> getOrganizationList() {
    return organizationList;
  }

  public void setOrganizationList(@javax.annotation.Nullable List<String> organizationList) {
    this.organizationList = organizationList;
  }


  public PKICertificateIssueDetails organizationUnitList(@javax.annotation.Nullable List<String> organizationUnitList) {
    this.organizationUnitList = organizationUnitList;
    return this;
  }

  public PKICertificateIssueDetails addOrganizationUnitListItem(String organizationUnitListItem) {
    if (this.organizationUnitList == null) {
      this.organizationUnitList = new ArrayList<>();
    }
    this.organizationUnitList.add(organizationUnitListItem);
    return this;
  }

  /**
   * Get organizationUnitList
   * @return organizationUnitList
   */
  @javax.annotation.Nullable
  public List<String> getOrganizationUnitList() {
    return organizationUnitList;
  }

  public void setOrganizationUnitList(@javax.annotation.Nullable List<String> organizationUnitList) {
    this.organizationUnitList = organizationUnitList;
  }


  public PKICertificateIssueDetails pkiIssuerType(@javax.annotation.Nullable String pkiIssuerType) {
    this.pkiIssuerType = pkiIssuerType;
    return this;
  }

  /**
   * Get pkiIssuerType
   * @return pkiIssuerType
   */
  @javax.annotation.Nullable
  public String getPkiIssuerType() {
    return pkiIssuerType;
  }

  public void setPkiIssuerType(@javax.annotation.Nullable String pkiIssuerType) {
    this.pkiIssuerType = pkiIssuerType;
  }


  public PKICertificateIssueDetails postalCode(@javax.annotation.Nullable List<String> postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  public PKICertificateIssueDetails addPostalCodeItem(String postalCodeItem) {
    if (this.postalCode == null) {
      this.postalCode = new ArrayList<>();
    }
    this.postalCode.add(postalCodeItem);
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public List<String> getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(@javax.annotation.Nullable List<String> postalCode) {
    this.postalCode = postalCode;
  }


  public PKICertificateIssueDetails protectGeneratedCertificates(@javax.annotation.Nullable Boolean protectGeneratedCertificates) {
    this.protectGeneratedCertificates = protectGeneratedCertificates;
    return this;
  }

  /**
   * ProtectGeneratedCertificates dictates whether the created certificates should be protected from deletion
   * @return protectGeneratedCertificates
   */
  @javax.annotation.Nullable
  public Boolean getProtectGeneratedCertificates() {
    return protectGeneratedCertificates;
  }

  public void setProtectGeneratedCertificates(@javax.annotation.Nullable Boolean protectGeneratedCertificates) {
    this.protectGeneratedCertificates = protectGeneratedCertificates;
  }


  public PKICertificateIssueDetails province(@javax.annotation.Nullable List<String> province) {
    this.province = province;
    return this;
  }

  public PKICertificateIssueDetails addProvinceItem(String provinceItem) {
    if (this.province == null) {
      this.province = new ArrayList<>();
    }
    this.province.add(provinceItem);
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public List<String> getProvince() {
    return province;
  }

  public void setProvince(@javax.annotation.Nullable List<String> province) {
    this.province = province;
  }


  public PKICertificateIssueDetails renewBeforeExpirationInDays(@javax.annotation.Nullable Long renewBeforeExpirationInDays) {
    this.renewBeforeExpirationInDays = renewBeforeExpirationInDays;
    return this;
  }

  /**
   * Get renewBeforeExpirationInDays
   * @return renewBeforeExpirationInDays
   */
  @javax.annotation.Nullable
  public Long getRenewBeforeExpirationInDays() {
    return renewBeforeExpirationInDays;
  }

  public void setRenewBeforeExpirationInDays(@javax.annotation.Nullable Long renewBeforeExpirationInDays) {
    this.renewBeforeExpirationInDays = renewBeforeExpirationInDays;
  }


  public PKICertificateIssueDetails requireCn(@javax.annotation.Nullable Boolean requireCn) {
    this.requireCn = requireCn;
    return this;
  }

  /**
   * Get requireCn
   * @return requireCn
   */
  @javax.annotation.Nullable
  public Boolean getRequireCn() {
    return requireCn;
  }

  public void setRequireCn(@javax.annotation.Nullable Boolean requireCn) {
    this.requireCn = requireCn;
  }


  public PKICertificateIssueDetails serverFlag(@javax.annotation.Nullable Boolean serverFlag) {
    this.serverFlag = serverFlag;
    return this;
  }

  /**
   * Get serverFlag
   * @return serverFlag
   */
  @javax.annotation.Nullable
  public Boolean getServerFlag() {
    return serverFlag;
  }

  public void setServerFlag(@javax.annotation.Nullable Boolean serverFlag) {
    this.serverFlag = serverFlag;
  }


  public PKICertificateIssueDetails streetAddress(@javax.annotation.Nullable List<String> streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  public PKICertificateIssueDetails addStreetAddressItem(String streetAddressItem) {
    if (this.streetAddress == null) {
      this.streetAddress = new ArrayList<>();
    }
    this.streetAddress.add(streetAddressItem);
    return this;
  }

  /**
   * Get streetAddress
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public List<String> getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(@javax.annotation.Nullable List<String> streetAddress) {
    this.streetAddress = streetAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PKICertificateIssueDetails pkICertificateIssueDetails = (PKICertificateIssueDetails) o;
    return Objects.equals(this.acmeEnabled, pkICertificateIssueDetails.acmeEnabled) &&
        Objects.equals(this.allowAnyName, pkICertificateIssueDetails.allowAnyName) &&
        Objects.equals(this.allowCopyExtFromCsr, pkICertificateIssueDetails.allowCopyExtFromCsr) &&
        Objects.equals(this.allowSubdomains, pkICertificateIssueDetails.allowSubdomains) &&
        Objects.equals(this.allowedDomainsList, pkICertificateIssueDetails.allowedDomainsList) &&
        Objects.equals(this.allowedExtraExtensions, pkICertificateIssueDetails.allowedExtraExtensions) &&
        Objects.equals(this.allowedIpSans, pkICertificateIssueDetails.allowedIpSans) &&
        Objects.equals(this.allowedUriSans, pkICertificateIssueDetails.allowedUriSans) &&
        Objects.equals(this.autoRenewCertificate, pkICertificateIssueDetails.autoRenewCertificate) &&
        Objects.equals(this.basicConstraintsValidForNonCa, pkICertificateIssueDetails.basicConstraintsValidForNonCa) &&
        Objects.equals(this.certificateAuthorityMode, pkICertificateIssueDetails.certificateAuthorityMode) &&
        Objects.equals(this.clientFlag, pkICertificateIssueDetails.clientFlag) &&
        Objects.equals(this.codeSigningFlag, pkICertificateIssueDetails.codeSigningFlag) &&
        Objects.equals(this.country, pkICertificateIssueDetails.country) &&
        Objects.equals(this.createPrivateCrl, pkICertificateIssueDetails.createPrivateCrl) &&
        Objects.equals(this.createPublicCrl, pkICertificateIssueDetails.createPublicCrl) &&
        Objects.equals(this.destinationPath, pkICertificateIssueDetails.destinationPath) &&
        Objects.equals(this.disableWildcards, pkICertificateIssueDetails.disableWildcards) &&
        Objects.equals(this.enforceHostnames, pkICertificateIssueDetails.enforceHostnames) &&
        Objects.equals(this.expirationEvents, pkICertificateIssueDetails.expirationEvents) &&
        Objects.equals(this.gwClusterId, pkICertificateIssueDetails.gwClusterId) &&
        Objects.equals(this.gwClusterUrl, pkICertificateIssueDetails.gwClusterUrl) &&
        Objects.equals(this.isCa, pkICertificateIssueDetails.isCa) &&
        Objects.equals(this.keyBits, pkICertificateIssueDetails.keyBits) &&
        Objects.equals(this.keyType, pkICertificateIssueDetails.keyType) &&
        Objects.equals(this.keyUsageList, pkICertificateIssueDetails.keyUsageList) &&
        Objects.equals(this.locality, pkICertificateIssueDetails.locality) &&
        Objects.equals(this.maxPathLen, pkICertificateIssueDetails.maxPathLen) &&
        Objects.equals(this.nonCriticalKeyUsage, pkICertificateIssueDetails.nonCriticalKeyUsage) &&
        Objects.equals(this.notBeforeDuration, pkICertificateIssueDetails.notBeforeDuration) &&
        Objects.equals(this.organizationList, pkICertificateIssueDetails.organizationList) &&
        Objects.equals(this.organizationUnitList, pkICertificateIssueDetails.organizationUnitList) &&
        Objects.equals(this.pkiIssuerType, pkICertificateIssueDetails.pkiIssuerType) &&
        Objects.equals(this.postalCode, pkICertificateIssueDetails.postalCode) &&
        Objects.equals(this.protectGeneratedCertificates, pkICertificateIssueDetails.protectGeneratedCertificates) &&
        Objects.equals(this.province, pkICertificateIssueDetails.province) &&
        Objects.equals(this.renewBeforeExpirationInDays, pkICertificateIssueDetails.renewBeforeExpirationInDays) &&
        Objects.equals(this.requireCn, pkICertificateIssueDetails.requireCn) &&
        Objects.equals(this.serverFlag, pkICertificateIssueDetails.serverFlag) &&
        Objects.equals(this.streetAddress, pkICertificateIssueDetails.streetAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acmeEnabled, allowAnyName, allowCopyExtFromCsr, allowSubdomains, allowedDomainsList, allowedExtraExtensions, allowedIpSans, allowedUriSans, autoRenewCertificate, basicConstraintsValidForNonCa, certificateAuthorityMode, clientFlag, codeSigningFlag, country, createPrivateCrl, createPublicCrl, destinationPath, disableWildcards, enforceHostnames, expirationEvents, gwClusterId, gwClusterUrl, isCa, keyBits, keyType, keyUsageList, locality, maxPathLen, nonCriticalKeyUsage, notBeforeDuration, organizationList, organizationUnitList, pkiIssuerType, postalCode, protectGeneratedCertificates, province, renewBeforeExpirationInDays, requireCn, serverFlag, streetAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PKICertificateIssueDetails {\n");
    sb.append("    acmeEnabled: ").append(toIndentedString(acmeEnabled)).append("\n");
    sb.append("    allowAnyName: ").append(toIndentedString(allowAnyName)).append("\n");
    sb.append("    allowCopyExtFromCsr: ").append(toIndentedString(allowCopyExtFromCsr)).append("\n");
    sb.append("    allowSubdomains: ").append(toIndentedString(allowSubdomains)).append("\n");
    sb.append("    allowedDomainsList: ").append(toIndentedString(allowedDomainsList)).append("\n");
    sb.append("    allowedExtraExtensions: ").append(toIndentedString(allowedExtraExtensions)).append("\n");
    sb.append("    allowedIpSans: ").append(toIndentedString(allowedIpSans)).append("\n");
    sb.append("    allowedUriSans: ").append(toIndentedString(allowedUriSans)).append("\n");
    sb.append("    autoRenewCertificate: ").append(toIndentedString(autoRenewCertificate)).append("\n");
    sb.append("    basicConstraintsValidForNonCa: ").append(toIndentedString(basicConstraintsValidForNonCa)).append("\n");
    sb.append("    certificateAuthorityMode: ").append(toIndentedString(certificateAuthorityMode)).append("\n");
    sb.append("    clientFlag: ").append(toIndentedString(clientFlag)).append("\n");
    sb.append("    codeSigningFlag: ").append(toIndentedString(codeSigningFlag)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createPrivateCrl: ").append(toIndentedString(createPrivateCrl)).append("\n");
    sb.append("    createPublicCrl: ").append(toIndentedString(createPublicCrl)).append("\n");
    sb.append("    destinationPath: ").append(toIndentedString(destinationPath)).append("\n");
    sb.append("    disableWildcards: ").append(toIndentedString(disableWildcards)).append("\n");
    sb.append("    enforceHostnames: ").append(toIndentedString(enforceHostnames)).append("\n");
    sb.append("    expirationEvents: ").append(toIndentedString(expirationEvents)).append("\n");
    sb.append("    gwClusterId: ").append(toIndentedString(gwClusterId)).append("\n");
    sb.append("    gwClusterUrl: ").append(toIndentedString(gwClusterUrl)).append("\n");
    sb.append("    isCa: ").append(toIndentedString(isCa)).append("\n");
    sb.append("    keyBits: ").append(toIndentedString(keyBits)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    keyUsageList: ").append(toIndentedString(keyUsageList)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    maxPathLen: ").append(toIndentedString(maxPathLen)).append("\n");
    sb.append("    nonCriticalKeyUsage: ").append(toIndentedString(nonCriticalKeyUsage)).append("\n");
    sb.append("    notBeforeDuration: ").append(toIndentedString(notBeforeDuration)).append("\n");
    sb.append("    organizationList: ").append(toIndentedString(organizationList)).append("\n");
    sb.append("    organizationUnitList: ").append(toIndentedString(organizationUnitList)).append("\n");
    sb.append("    pkiIssuerType: ").append(toIndentedString(pkiIssuerType)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    protectGeneratedCertificates: ").append(toIndentedString(protectGeneratedCertificates)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    renewBeforeExpirationInDays: ").append(toIndentedString(renewBeforeExpirationInDays)).append("\n");
    sb.append("    requireCn: ").append(toIndentedString(requireCn)).append("\n");
    sb.append("    serverFlag: ").append(toIndentedString(serverFlag)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acme_enabled");
    openapiFields.add("allow_any_name");
    openapiFields.add("allow_copy_ext_from_csr");
    openapiFields.add("allow_subdomains");
    openapiFields.add("allowed_domains_list");
    openapiFields.add("allowed_extra_extensions");
    openapiFields.add("allowed_ip_sans");
    openapiFields.add("allowed_uri_sans");
    openapiFields.add("auto_renew_certificate");
    openapiFields.add("basic_constraints_valid_for_non_ca");
    openapiFields.add("certificate_authority_mode");
    openapiFields.add("client_flag");
    openapiFields.add("code_signing_flag");
    openapiFields.add("country");
    openapiFields.add("create_private_crl");
    openapiFields.add("create_public_crl");
    openapiFields.add("destination_path");
    openapiFields.add("disable_wildcards");
    openapiFields.add("enforce_hostnames");
    openapiFields.add("expiration_events");
    openapiFields.add("gw_cluster_id");
    openapiFields.add("gw_cluster_url");
    openapiFields.add("is_ca");
    openapiFields.add("key_bits");
    openapiFields.add("key_type");
    openapiFields.add("key_usage_list");
    openapiFields.add("locality");
    openapiFields.add("max_path_len");
    openapiFields.add("non_critical_key_usage");
    openapiFields.add("not_before_duration");
    openapiFields.add("organization_list");
    openapiFields.add("organization_unit_list");
    openapiFields.add("pki_issuer_type");
    openapiFields.add("postal_code");
    openapiFields.add("protect_generated_certificates");
    openapiFields.add("province");
    openapiFields.add("renew_before_expiration_in_days");
    openapiFields.add("require_cn");
    openapiFields.add("server_flag");
    openapiFields.add("street_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PKICertificateIssueDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PKICertificateIssueDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PKICertificateIssueDetails is not found in the empty JSON string", PKICertificateIssueDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PKICertificateIssueDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PKICertificateIssueDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_domains_list") != null && !jsonObj.get("allowed_domains_list").isJsonNull() && !jsonObj.get("allowed_domains_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_domains_list` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_domains_list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_ip_sans") != null && !jsonObj.get("allowed_ip_sans").isJsonNull() && !jsonObj.get("allowed_ip_sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_ip_sans` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_ip_sans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_uri_sans") != null && !jsonObj.get("allowed_uri_sans").isJsonNull() && !jsonObj.get("allowed_uri_sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_uri_sans` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_uri_sans").toString()));
      }
      if ((jsonObj.get("certificate_authority_mode") != null && !jsonObj.get("certificate_authority_mode").isJsonNull()) && !jsonObj.get("certificate_authority_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_authority_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_authority_mode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull() && !jsonObj.get("country").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be an array in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("destination_path") != null && !jsonObj.get("destination_path").isJsonNull()) && !jsonObj.get("destination_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_path").toString()));
      }
      if (jsonObj.get("expiration_events") != null && !jsonObj.get("expiration_events").isJsonNull()) {
        JsonArray jsonArrayexpirationEvents = jsonObj.getAsJsonArray("expiration_events");
        if (jsonArrayexpirationEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("expiration_events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `expiration_events` to be an array in the JSON string but got `%s`", jsonObj.get("expiration_events").toString()));
          }

          // validate the optional field `expiration_events` (array)
          for (int i = 0; i < jsonArrayexpirationEvents.size(); i++) {
            CertificateExpirationEvent.validateJsonElement(jsonArrayexpirationEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("gw_cluster_url") != null && !jsonObj.get("gw_cluster_url").isJsonNull()) && !jsonObj.get("gw_cluster_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gw_cluster_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gw_cluster_url").toString()));
      }
      if ((jsonObj.get("key_type") != null && !jsonObj.get("key_type").isJsonNull()) && !jsonObj.get("key_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_usage_list") != null && !jsonObj.get("key_usage_list").isJsonNull() && !jsonObj.get("key_usage_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_usage_list` to be an array in the JSON string but got `%s`", jsonObj.get("key_usage_list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull() && !jsonObj.get("locality").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be an array in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("organization_list") != null && !jsonObj.get("organization_list").isJsonNull() && !jsonObj.get("organization_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_list` to be an array in the JSON string but got `%s`", jsonObj.get("organization_list").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("organization_unit_list") != null && !jsonObj.get("organization_unit_list").isJsonNull() && !jsonObj.get("organization_unit_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_unit_list` to be an array in the JSON string but got `%s`", jsonObj.get("organization_unit_list").toString()));
      }
      if ((jsonObj.get("pki_issuer_type") != null && !jsonObj.get("pki_issuer_type").isJsonNull()) && !jsonObj.get("pki_issuer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pki_issuer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pki_issuer_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull() && !jsonObj.get("postal_code").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be an array in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull() && !jsonObj.get("province").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `province` to be an array in the JSON string but got `%s`", jsonObj.get("province").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("street_address") != null && !jsonObj.get("street_address").isJsonNull() && !jsonObj.get("street_address").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_address` to be an array in the JSON string but got `%s`", jsonObj.get("street_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PKICertificateIssueDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PKICertificateIssueDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PKICertificateIssueDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PKICertificateIssueDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PKICertificateIssueDetails>() {
           @Override
           public void write(JsonWriter out, PKICertificateIssueDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PKICertificateIssueDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PKICertificateIssueDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PKICertificateIssueDetails
   * @throws IOException if the JSON string is invalid with respect to PKICertificateIssueDetails
   */
  public static PKICertificateIssueDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PKICertificateIssueDetails.class);
  }

  /**
   * Convert an instance of PKICertificateIssueDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

