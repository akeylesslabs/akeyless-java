/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretCreatePostgreSql is a command that creates postgresql dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretCreatePostgreSql {
  public static final String SERIALIZED_NAME_CREATION_STATEMENTS = "creation-statements";
  @SerializedName(SERIALIZED_NAME_CREATION_STATEMENTS)
  @javax.annotation.Nullable
  private String creationStatements;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_POSTGRESQL_DB_NAME = "postgresql-db-name";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_DB_NAME)
  @javax.annotation.Nullable
  private String postgresqlDbName;

  public static final String SERIALIZED_NAME_POSTGRESQL_HOST = "postgresql-host";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_HOST)
  @javax.annotation.Nullable
  private String postgresqlHost = "127.0.0.1";

  public static final String SERIALIZED_NAME_POSTGRESQL_PASSWORD = "postgresql-password";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_PASSWORD)
  @javax.annotation.Nullable
  private String postgresqlPassword;

  public static final String SERIALIZED_NAME_POSTGRESQL_PORT = "postgresql-port";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_PORT)
  @javax.annotation.Nullable
  private String postgresqlPort = "5432";

  public static final String SERIALIZED_NAME_POSTGRESQL_USERNAME = "postgresql-username";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_USERNAME)
  @javax.annotation.Nullable
  private String postgresqlUsername;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY = "producer-encryption-key";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY)
  @javax.annotation.Nullable
  private String producerEncryptionKey;

  public static final String SERIALIZED_NAME_REVOCATION_STATEMENT = "revocation-statement";
  @SerializedName(SERIALIZED_NAME_REVOCATION_STATEMENT)
  @javax.annotation.Nullable
  private String revocationStatement;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_NAME = "secure-access-db-name";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_NAME)
  @javax.annotation.Nullable
  private String secureAccessDbName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA = "secure-access-db-schema";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA)
  @javax.annotation.Nullable
  private String secureAccessDbSchema;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DELAY = "secure-access-delay";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DELAY)
  @javax.annotation.Nullable
  private Long secureAccessDelay;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  @javax.annotation.Nullable
  private Boolean ssl = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretCreatePostgreSql() {
  }

  public DynamicSecretCreatePostgreSql creationStatements(@javax.annotation.Nullable String creationStatements) {
    this.creationStatements = creationStatements;
    return this;
  }

  /**
   * PostgreSQL Creation statements
   * @return creationStatements
   */
  @javax.annotation.Nullable
  public String getCreationStatements() {
    return creationStatements;
  }

  public void setCreationStatements(@javax.annotation.Nullable String creationStatements) {
    this.creationStatements = creationStatements;
  }


  public DynamicSecretCreatePostgreSql deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretCreatePostgreSql description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretCreatePostgreSql json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretCreatePostgreSql name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretCreatePostgreSql passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public DynamicSecretCreatePostgreSql postgresqlDbName(@javax.annotation.Nullable String postgresqlDbName) {
    this.postgresqlDbName = postgresqlDbName;
    return this;
  }

  /**
   * PostgreSQL DB Name
   * @return postgresqlDbName
   */
  @javax.annotation.Nullable
  public String getPostgresqlDbName() {
    return postgresqlDbName;
  }

  public void setPostgresqlDbName(@javax.annotation.Nullable String postgresqlDbName) {
    this.postgresqlDbName = postgresqlDbName;
  }


  public DynamicSecretCreatePostgreSql postgresqlHost(@javax.annotation.Nullable String postgresqlHost) {
    this.postgresqlHost = postgresqlHost;
    return this;
  }

  /**
   * PostgreSQL Host
   * @return postgresqlHost
   */
  @javax.annotation.Nullable
  public String getPostgresqlHost() {
    return postgresqlHost;
  }

  public void setPostgresqlHost(@javax.annotation.Nullable String postgresqlHost) {
    this.postgresqlHost = postgresqlHost;
  }


  public DynamicSecretCreatePostgreSql postgresqlPassword(@javax.annotation.Nullable String postgresqlPassword) {
    this.postgresqlPassword = postgresqlPassword;
    return this;
  }

  /**
   * PostgreSQL Password
   * @return postgresqlPassword
   */
  @javax.annotation.Nullable
  public String getPostgresqlPassword() {
    return postgresqlPassword;
  }

  public void setPostgresqlPassword(@javax.annotation.Nullable String postgresqlPassword) {
    this.postgresqlPassword = postgresqlPassword;
  }


  public DynamicSecretCreatePostgreSql postgresqlPort(@javax.annotation.Nullable String postgresqlPort) {
    this.postgresqlPort = postgresqlPort;
    return this;
  }

  /**
   * PostgreSQL Port
   * @return postgresqlPort
   */
  @javax.annotation.Nullable
  public String getPostgresqlPort() {
    return postgresqlPort;
  }

  public void setPostgresqlPort(@javax.annotation.Nullable String postgresqlPort) {
    this.postgresqlPort = postgresqlPort;
  }


  public DynamicSecretCreatePostgreSql postgresqlUsername(@javax.annotation.Nullable String postgresqlUsername) {
    this.postgresqlUsername = postgresqlUsername;
    return this;
  }

  /**
   * PostgreSQL Username
   * @return postgresqlUsername
   */
  @javax.annotation.Nullable
  public String getPostgresqlUsername() {
    return postgresqlUsername;
  }

  public void setPostgresqlUsername(@javax.annotation.Nullable String postgresqlUsername) {
    this.postgresqlUsername = postgresqlUsername;
  }


  public DynamicSecretCreatePostgreSql producerEncryptionKey(@javax.annotation.Nullable String producerEncryptionKey) {
    this.producerEncryptionKey = producerEncryptionKey;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKey
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKey() {
    return producerEncryptionKey;
  }

  public void setProducerEncryptionKey(@javax.annotation.Nullable String producerEncryptionKey) {
    this.producerEncryptionKey = producerEncryptionKey;
  }


  public DynamicSecretCreatePostgreSql revocationStatement(@javax.annotation.Nullable String revocationStatement) {
    this.revocationStatement = revocationStatement;
    return this;
  }

  /**
   * PostgreSQL Revocation statements
   * @return revocationStatement
   */
  @javax.annotation.Nullable
  public String getRevocationStatement() {
    return revocationStatement;
  }

  public void setRevocationStatement(@javax.annotation.Nullable String revocationStatement) {
    this.revocationStatement = revocationStatement;
  }


  public DynamicSecretCreatePostgreSql secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public DynamicSecretCreatePostgreSql secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public DynamicSecretCreatePostgreSql secureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
    return this;
  }

  /**
   * The DB name (relevant only for DB Dynamic-Secret)
   * @return secureAccessDbName
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbName() {
    return secureAccessDbName;
  }

  public void setSecureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
  }


  public DynamicSecretCreatePostgreSql secureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
    return this;
  }

  /**
   * The DB schema
   * @return secureAccessDbSchema
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbSchema() {
    return secureAccessDbSchema;
  }

  public void setSecureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
  }


  public DynamicSecretCreatePostgreSql secureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
    return this;
  }

  /**
   * The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
   * @return secureAccessDelay
   */
  @javax.annotation.Nullable
  public Long getSecureAccessDelay() {
    return secureAccessDelay;
  }

  public void setSecureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
  }


  public DynamicSecretCreatePostgreSql secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public DynamicSecretCreatePostgreSql secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public DynamicSecretCreatePostgreSql addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public DynamicSecretCreatePostgreSql secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public DynamicSecretCreatePostgreSql ssl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Enable/Disable SSL [true/false]
   * @return ssl
   */
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
  }


  public DynamicSecretCreatePostgreSql tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretCreatePostgreSql addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretCreatePostgreSql targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretCreatePostgreSql token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretCreatePostgreSql uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretCreatePostgreSql userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretCreatePostgreSql dynamicSecretCreatePostgreSql = (DynamicSecretCreatePostgreSql) o;
    return Objects.equals(this.creationStatements, dynamicSecretCreatePostgreSql.creationStatements) &&
        Objects.equals(this.deleteProtection, dynamicSecretCreatePostgreSql.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretCreatePostgreSql.description) &&
        Objects.equals(this.json, dynamicSecretCreatePostgreSql.json) &&
        Objects.equals(this.name, dynamicSecretCreatePostgreSql.name) &&
        Objects.equals(this.passwordLength, dynamicSecretCreatePostgreSql.passwordLength) &&
        Objects.equals(this.postgresqlDbName, dynamicSecretCreatePostgreSql.postgresqlDbName) &&
        Objects.equals(this.postgresqlHost, dynamicSecretCreatePostgreSql.postgresqlHost) &&
        Objects.equals(this.postgresqlPassword, dynamicSecretCreatePostgreSql.postgresqlPassword) &&
        Objects.equals(this.postgresqlPort, dynamicSecretCreatePostgreSql.postgresqlPort) &&
        Objects.equals(this.postgresqlUsername, dynamicSecretCreatePostgreSql.postgresqlUsername) &&
        Objects.equals(this.producerEncryptionKey, dynamicSecretCreatePostgreSql.producerEncryptionKey) &&
        Objects.equals(this.revocationStatement, dynamicSecretCreatePostgreSql.revocationStatement) &&
        Objects.equals(this.secureAccessBastionIssuer, dynamicSecretCreatePostgreSql.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, dynamicSecretCreatePostgreSql.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessDbName, dynamicSecretCreatePostgreSql.secureAccessDbName) &&
        Objects.equals(this.secureAccessDbSchema, dynamicSecretCreatePostgreSql.secureAccessDbSchema) &&
        Objects.equals(this.secureAccessDelay, dynamicSecretCreatePostgreSql.secureAccessDelay) &&
        Objects.equals(this.secureAccessEnable, dynamicSecretCreatePostgreSql.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, dynamicSecretCreatePostgreSql.secureAccessHost) &&
        Objects.equals(this.secureAccessWeb, dynamicSecretCreatePostgreSql.secureAccessWeb) &&
        Objects.equals(this.ssl, dynamicSecretCreatePostgreSql.ssl) &&
        Objects.equals(this.tags, dynamicSecretCreatePostgreSql.tags) &&
        Objects.equals(this.targetName, dynamicSecretCreatePostgreSql.targetName) &&
        Objects.equals(this.token, dynamicSecretCreatePostgreSql.token) &&
        Objects.equals(this.uidToken, dynamicSecretCreatePostgreSql.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretCreatePostgreSql.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationStatements, deleteProtection, description, json, name, passwordLength, postgresqlDbName, postgresqlHost, postgresqlPassword, postgresqlPort, postgresqlUsername, producerEncryptionKey, revocationStatement, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessDbName, secureAccessDbSchema, secureAccessDelay, secureAccessEnable, secureAccessHost, secureAccessWeb, ssl, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretCreatePostgreSql {\n");
    sb.append("    creationStatements: ").append(toIndentedString(creationStatements)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    postgresqlDbName: ").append(toIndentedString(postgresqlDbName)).append("\n");
    sb.append("    postgresqlHost: ").append(toIndentedString(postgresqlHost)).append("\n");
    sb.append("    postgresqlPassword: ").append(toIndentedString(postgresqlPassword)).append("\n");
    sb.append("    postgresqlPort: ").append(toIndentedString(postgresqlPort)).append("\n");
    sb.append("    postgresqlUsername: ").append(toIndentedString(postgresqlUsername)).append("\n");
    sb.append("    producerEncryptionKey: ").append(toIndentedString(producerEncryptionKey)).append("\n");
    sb.append("    revocationStatement: ").append(toIndentedString(revocationStatement)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessDbName: ").append(toIndentedString(secureAccessDbName)).append("\n");
    sb.append("    secureAccessDbSchema: ").append(toIndentedString(secureAccessDbSchema)).append("\n");
    sb.append("    secureAccessDelay: ").append(toIndentedString(secureAccessDelay)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation-statements");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("password-length");
    openapiFields.add("postgresql-db-name");
    openapiFields.add("postgresql-host");
    openapiFields.add("postgresql-password");
    openapiFields.add("postgresql-port");
    openapiFields.add("postgresql-username");
    openapiFields.add("producer-encryption-key");
    openapiFields.add("revocation-statement");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-db-name");
    openapiFields.add("secure-access-db-schema");
    openapiFields.add("secure-access-delay");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-web");
    openapiFields.add("ssl");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretCreatePostgreSql
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretCreatePostgreSql.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretCreatePostgreSql is not found in the empty JSON string", DynamicSecretCreatePostgreSql.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretCreatePostgreSql.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretCreatePostgreSql` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretCreatePostgreSql.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creation-statements") != null && !jsonObj.get("creation-statements").isJsonNull()) && !jsonObj.get("creation-statements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation-statements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation-statements").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("postgresql-db-name") != null && !jsonObj.get("postgresql-db-name").isJsonNull()) && !jsonObj.get("postgresql-db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postgresql-db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postgresql-db-name").toString()));
      }
      if ((jsonObj.get("postgresql-host") != null && !jsonObj.get("postgresql-host").isJsonNull()) && !jsonObj.get("postgresql-host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postgresql-host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postgresql-host").toString()));
      }
      if ((jsonObj.get("postgresql-password") != null && !jsonObj.get("postgresql-password").isJsonNull()) && !jsonObj.get("postgresql-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postgresql-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postgresql-password").toString()));
      }
      if ((jsonObj.get("postgresql-port") != null && !jsonObj.get("postgresql-port").isJsonNull()) && !jsonObj.get("postgresql-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postgresql-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postgresql-port").toString()));
      }
      if ((jsonObj.get("postgresql-username") != null && !jsonObj.get("postgresql-username").isJsonNull()) && !jsonObj.get("postgresql-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postgresql-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postgresql-username").toString()));
      }
      if ((jsonObj.get("producer-encryption-key") != null && !jsonObj.get("producer-encryption-key").isJsonNull()) && !jsonObj.get("producer-encryption-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key").toString()));
      }
      if ((jsonObj.get("revocation-statement") != null && !jsonObj.get("revocation-statement").isJsonNull()) && !jsonObj.get("revocation-statement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocation-statement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocation-statement").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-db-name") != null && !jsonObj.get("secure-access-db-name").isJsonNull()) && !jsonObj.get("secure-access-db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-name").toString()));
      }
      if ((jsonObj.get("secure-access-db-schema") != null && !jsonObj.get("secure-access-db-schema").isJsonNull()) && !jsonObj.get("secure-access-db-schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-schema").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretCreatePostgreSql.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretCreatePostgreSql' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretCreatePostgreSql> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretCreatePostgreSql.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretCreatePostgreSql>() {
           @Override
           public void write(JsonWriter out, DynamicSecretCreatePostgreSql value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretCreatePostgreSql read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretCreatePostgreSql given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretCreatePostgreSql
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretCreatePostgreSql
   */
  public static DynamicSecretCreatePostgreSql fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretCreatePostgreSql.class);
  }

  /**
   * Convert an instance of DynamicSecretCreatePostgreSql to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

