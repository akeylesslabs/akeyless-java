/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * GithubTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GithubTargetDetails {
  public static final String SERIALIZED_NAME_GITHUB_APP_ID = "github_app_id";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_ID)
  private Long githubAppId;

  public static final String SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY = "github_app_private_key";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY)
  private String githubAppPrivateKey;

  public static final String SERIALIZED_NAME_GITHUB_BASE_URL = "github_base_url";
  @SerializedName(SERIALIZED_NAME_GITHUB_BASE_URL)
  private String githubBaseUrl;

  public GithubTargetDetails() { 
  }

  public GithubTargetDetails githubAppId(Long githubAppId) {
    
    this.githubAppId = githubAppId;
    return this;
  }

   /**
   * Get githubAppId
   * @return githubAppId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getGithubAppId() {
    return githubAppId;
  }


  public void setGithubAppId(Long githubAppId) {
    this.githubAppId = githubAppId;
  }


  public GithubTargetDetails githubAppPrivateKey(String githubAppPrivateKey) {
    
    this.githubAppPrivateKey = githubAppPrivateKey;
    return this;
  }

   /**
   * Get githubAppPrivateKey
   * @return githubAppPrivateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGithubAppPrivateKey() {
    return githubAppPrivateKey;
  }


  public void setGithubAppPrivateKey(String githubAppPrivateKey) {
    this.githubAppPrivateKey = githubAppPrivateKey;
  }


  public GithubTargetDetails githubBaseUrl(String githubBaseUrl) {
    
    this.githubBaseUrl = githubBaseUrl;
    return this;
  }

   /**
   * Get githubBaseUrl
   * @return githubBaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGithubBaseUrl() {
    return githubBaseUrl;
  }


  public void setGithubBaseUrl(String githubBaseUrl) {
    this.githubBaseUrl = githubBaseUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GithubTargetDetails githubTargetDetails = (GithubTargetDetails) o;
    return Objects.equals(this.githubAppId, githubTargetDetails.githubAppId) &&
        Objects.equals(this.githubAppPrivateKey, githubTargetDetails.githubAppPrivateKey) &&
        Objects.equals(this.githubBaseUrl, githubTargetDetails.githubBaseUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(githubAppId, githubAppPrivateKey, githubBaseUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GithubTargetDetails {\n");
    sb.append("    githubAppId: ").append(toIndentedString(githubAppId)).append("\n");
    sb.append("    githubAppPrivateKey: ").append(toIndentedString(githubAppPrivateKey)).append("\n");
    sb.append("    githubBaseUrl: ").append(toIndentedString(githubBaseUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

