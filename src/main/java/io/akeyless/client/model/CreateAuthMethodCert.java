/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * createAuthMethodCert is a command that creates a new auth method that will be able to authenticate using a client certificate. [Deprecated: Use auth-method-create-cert command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateAuthMethodCert {
  public static final String SERIALIZED_NAME_ACCESS_EXPIRES = "access-expires";
  @SerializedName(SERIALIZED_NAME_ACCESS_EXPIRES)
  @javax.annotation.Nullable
  private Long accessExpires = 0l;

  public static final String SERIALIZED_NAME_ALLOWED_CORS = "allowed-cors";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CORS)
  @javax.annotation.Nullable
  private String allowedCors;

  public static final String SERIALIZED_NAME_AUDIT_LOGS_CLAIMS = "audit-logs-claims";
  @SerializedName(SERIALIZED_NAME_AUDIT_LOGS_CLAIMS)
  @javax.annotation.Nullable
  private List<String> auditLogsClaims = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_COMMON_NAMES = "bound-common-names";
  @SerializedName(SERIALIZED_NAME_BOUND_COMMON_NAMES)
  @javax.annotation.Nullable
  private List<String> boundCommonNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_DNS_SANS = "bound-dns-sans";
  @SerializedName(SERIALIZED_NAME_BOUND_DNS_SANS)
  @javax.annotation.Nullable
  private List<String> boundDnsSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_EMAIL_SANS = "bound-email-sans";
  @SerializedName(SERIALIZED_NAME_BOUND_EMAIL_SANS)
  @javax.annotation.Nullable
  private List<String> boundEmailSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_EXTENSIONS = "bound-extensions";
  @SerializedName(SERIALIZED_NAME_BOUND_EXTENSIONS)
  @javax.annotation.Nullable
  private List<String> boundExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_IPS = "bound-ips";
  @SerializedName(SERIALIZED_NAME_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> boundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_ORGANIZATIONAL_UNITS = "bound-organizational-units";
  @SerializedName(SERIALIZED_NAME_BOUND_ORGANIZATIONAL_UNITS)
  @javax.annotation.Nullable
  private List<String> boundOrganizationalUnits = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_URI_SANS = "bound-uri-sans";
  @SerializedName(SERIALIZED_NAME_BOUND_URI_SANS)
  @javax.annotation.Nullable
  private List<String> boundUriSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_DATA = "certificate-data";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_DATA)
  @javax.annotation.Nullable
  private String certificateData;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXPIRATION_EVENT_IN = "expiration-event-in";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> expirationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_SUB_CLAIMS = "force-sub-claims";
  @SerializedName(SERIALIZED_NAME_FORCE_SUB_CLAIMS)
  @javax.annotation.Nullable
  private Boolean forceSubClaims;

  public static final String SERIALIZED_NAME_GW_BOUND_IPS = "gw-bound-ips";
  @SerializedName(SERIALIZED_NAME_GW_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> gwBoundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_JWT_TTL = "jwt-ttl";
  @SerializedName(SERIALIZED_NAME_JWT_TTL)
  @javax.annotation.Nullable
  private Long jwtTtl = 0l;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product-type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  @javax.annotation.Nullable
  private List<String> productType = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVOKED_CERT_IDS = "revoked-cert-ids";
  @SerializedName(SERIALIZED_NAME_REVOKED_CERT_IDS)
  @javax.annotation.Nullable
  private List<String> revokedCertIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique-identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nonnull
  private String uniqueIdentifier;

  public CreateAuthMethodCert() {
  }

  public CreateAuthMethodCert accessExpires(@javax.annotation.Nullable Long accessExpires) {
    this.accessExpires = accessExpires;
    return this;
  }

  /**
   * Access expiration date in Unix timestamp (select 0 for access without expiry date)
   * @return accessExpires
   */
  @javax.annotation.Nullable
  public Long getAccessExpires() {
    return accessExpires;
  }

  public void setAccessExpires(@javax.annotation.Nullable Long accessExpires) {
    this.accessExpires = accessExpires;
  }


  public CreateAuthMethodCert allowedCors(@javax.annotation.Nullable String allowedCors) {
    this.allowedCors = allowedCors;
    return this;
  }

  /**
   * Comma separated list of allowed CORS domains to be validated as part of the authentication flow.
   * @return allowedCors
   */
  @javax.annotation.Nullable
  public String getAllowedCors() {
    return allowedCors;
  }

  public void setAllowedCors(@javax.annotation.Nullable String allowedCors) {
    this.allowedCors = allowedCors;
  }


  public CreateAuthMethodCert auditLogsClaims(@javax.annotation.Nullable List<String> auditLogsClaims) {
    this.auditLogsClaims = auditLogsClaims;
    return this;
  }

  public CreateAuthMethodCert addAuditLogsClaimsItem(String auditLogsClaimsItem) {
    if (this.auditLogsClaims == null) {
      this.auditLogsClaims = new ArrayList<>();
    }
    this.auditLogsClaims.add(auditLogsClaimsItem);
    return this;
  }

  /**
   * Subclaims to include in audit logs, e.g \&quot;--audit-logs-claims email --audit-logs-claims username\&quot;
   * @return auditLogsClaims
   */
  @javax.annotation.Nullable
  public List<String> getAuditLogsClaims() {
    return auditLogsClaims;
  }

  public void setAuditLogsClaims(@javax.annotation.Nullable List<String> auditLogsClaims) {
    this.auditLogsClaims = auditLogsClaims;
  }


  public CreateAuthMethodCert boundCommonNames(@javax.annotation.Nullable List<String> boundCommonNames) {
    this.boundCommonNames = boundCommonNames;
    return this;
  }

  public CreateAuthMethodCert addBoundCommonNamesItem(String boundCommonNamesItem) {
    if (this.boundCommonNames == null) {
      this.boundCommonNames = new ArrayList<>();
    }
    this.boundCommonNames.add(boundCommonNamesItem);
    return this;
  }

  /**
   * A list of names. At least one must exist in the Common Name. Supports globbing.
   * @return boundCommonNames
   */
  @javax.annotation.Nullable
  public List<String> getBoundCommonNames() {
    return boundCommonNames;
  }

  public void setBoundCommonNames(@javax.annotation.Nullable List<String> boundCommonNames) {
    this.boundCommonNames = boundCommonNames;
  }


  public CreateAuthMethodCert boundDnsSans(@javax.annotation.Nullable List<String> boundDnsSans) {
    this.boundDnsSans = boundDnsSans;
    return this;
  }

  public CreateAuthMethodCert addBoundDnsSansItem(String boundDnsSansItem) {
    if (this.boundDnsSans == null) {
      this.boundDnsSans = new ArrayList<>();
    }
    this.boundDnsSans.add(boundDnsSansItem);
    return this;
  }

  /**
   * A list of DNS names. At least one must exist in the SANs. Supports globbing.
   * @return boundDnsSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundDnsSans() {
    return boundDnsSans;
  }

  public void setBoundDnsSans(@javax.annotation.Nullable List<String> boundDnsSans) {
    this.boundDnsSans = boundDnsSans;
  }


  public CreateAuthMethodCert boundEmailSans(@javax.annotation.Nullable List<String> boundEmailSans) {
    this.boundEmailSans = boundEmailSans;
    return this;
  }

  public CreateAuthMethodCert addBoundEmailSansItem(String boundEmailSansItem) {
    if (this.boundEmailSans == null) {
      this.boundEmailSans = new ArrayList<>();
    }
    this.boundEmailSans.add(boundEmailSansItem);
    return this;
  }

  /**
   * A list of Email Addresses. At least one must exist in the SANs. Supports globbing.
   * @return boundEmailSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundEmailSans() {
    return boundEmailSans;
  }

  public void setBoundEmailSans(@javax.annotation.Nullable List<String> boundEmailSans) {
    this.boundEmailSans = boundEmailSans;
  }


  public CreateAuthMethodCert boundExtensions(@javax.annotation.Nullable List<String> boundExtensions) {
    this.boundExtensions = boundExtensions;
    return this;
  }

  public CreateAuthMethodCert addBoundExtensionsItem(String boundExtensionsItem) {
    if (this.boundExtensions == null) {
      this.boundExtensions = new ArrayList<>();
    }
    this.boundExtensions.add(boundExtensionsItem);
    return this;
  }

  /**
   * A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \&quot;value\&quot;.
   * @return boundExtensions
   */
  @javax.annotation.Nullable
  public List<String> getBoundExtensions() {
    return boundExtensions;
  }

  public void setBoundExtensions(@javax.annotation.Nullable List<String> boundExtensions) {
    this.boundExtensions = boundExtensions;
  }


  public CreateAuthMethodCert boundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
    return this;
  }

  public CreateAuthMethodCert addBoundIpsItem(String boundIpsItem) {
    if (this.boundIps == null) {
      this.boundIps = new ArrayList<>();
    }
    this.boundIps.add(boundIpsItem);
    return this;
  }

  /**
   * A CIDR whitelist with the IPs that the access is restricted to
   * @return boundIps
   */
  @javax.annotation.Nullable
  public List<String> getBoundIps() {
    return boundIps;
  }

  public void setBoundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
  }


  public CreateAuthMethodCert boundOrganizationalUnits(@javax.annotation.Nullable List<String> boundOrganizationalUnits) {
    this.boundOrganizationalUnits = boundOrganizationalUnits;
    return this;
  }

  public CreateAuthMethodCert addBoundOrganizationalUnitsItem(String boundOrganizationalUnitsItem) {
    if (this.boundOrganizationalUnits == null) {
      this.boundOrganizationalUnits = new ArrayList<>();
    }
    this.boundOrganizationalUnits.add(boundOrganizationalUnitsItem);
    return this;
  }

  /**
   * A list of Organizational Units names. At least one must exist in the OU field.
   * @return boundOrganizationalUnits
   */
  @javax.annotation.Nullable
  public List<String> getBoundOrganizationalUnits() {
    return boundOrganizationalUnits;
  }

  public void setBoundOrganizationalUnits(@javax.annotation.Nullable List<String> boundOrganizationalUnits) {
    this.boundOrganizationalUnits = boundOrganizationalUnits;
  }


  public CreateAuthMethodCert boundUriSans(@javax.annotation.Nullable List<String> boundUriSans) {
    this.boundUriSans = boundUriSans;
    return this;
  }

  public CreateAuthMethodCert addBoundUriSansItem(String boundUriSansItem) {
    if (this.boundUriSans == null) {
      this.boundUriSans = new ArrayList<>();
    }
    this.boundUriSans.add(boundUriSansItem);
    return this;
  }

  /**
   * A list of URIs. At least one must exist in the SANs. Supports globbing.
   * @return boundUriSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundUriSans() {
    return boundUriSans;
  }

  public void setBoundUriSans(@javax.annotation.Nullable List<String> boundUriSans) {
    this.boundUriSans = boundUriSans;
  }


  public CreateAuthMethodCert certificateData(@javax.annotation.Nullable String certificateData) {
    this.certificateData = certificateData;
    return this;
  }

  /**
   * The certificate data in base64, if no file was provided
   * @return certificateData
   */
  @javax.annotation.Nullable
  public String getCertificateData() {
    return certificateData;
  }

  public void setCertificateData(@javax.annotation.Nullable String certificateData) {
    this.certificateData = certificateData;
  }


  public CreateAuthMethodCert deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public CreateAuthMethodCert description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Auth Method description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateAuthMethodCert expirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
    return this;
  }

  public CreateAuthMethodCert addExpirationEventInItem(String expirationEventInItem) {
    if (this.expirationEventIn == null) {
      this.expirationEventIn = new ArrayList<>();
    }
    this.expirationEventIn.add(expirationEventInItem);
    return this;
  }

  /**
   * How many days before the expiration of the auth method would you like to be notified.
   * @return expirationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getExpirationEventIn() {
    return expirationEventIn;
  }

  public void setExpirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
  }


  public CreateAuthMethodCert forceSubClaims(@javax.annotation.Nullable Boolean forceSubClaims) {
    this.forceSubClaims = forceSubClaims;
    return this;
  }

  /**
   * if true: enforce role-association must include sub claims
   * @return forceSubClaims
   */
  @javax.annotation.Nullable
  public Boolean getForceSubClaims() {
    return forceSubClaims;
  }

  public void setForceSubClaims(@javax.annotation.Nullable Boolean forceSubClaims) {
    this.forceSubClaims = forceSubClaims;
  }


  public CreateAuthMethodCert gwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
    return this;
  }

  public CreateAuthMethodCert addGwBoundIpsItem(String gwBoundIpsItem) {
    if (this.gwBoundIps == null) {
      this.gwBoundIps = new ArrayList<>();
    }
    this.gwBoundIps.add(gwBoundIpsItem);
    return this;
  }

  /**
   * A CIDR whitelist with the GW IPs that the access is restricted to
   * @return gwBoundIps
   */
  @javax.annotation.Nullable
  public List<String> getGwBoundIps() {
    return gwBoundIps;
  }

  public void setGwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
  }


  public CreateAuthMethodCert json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateAuthMethodCert jwtTtl(@javax.annotation.Nullable Long jwtTtl) {
    this.jwtTtl = jwtTtl;
    return this;
  }

  /**
   * Jwt TTL
   * @return jwtTtl
   */
  @javax.annotation.Nullable
  public Long getJwtTtl() {
    return jwtTtl;
  }

  public void setJwtTtl(@javax.annotation.Nullable Long jwtTtl) {
    this.jwtTtl = jwtTtl;
  }


  public CreateAuthMethodCert name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Auth Method name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateAuthMethodCert productType(@javax.annotation.Nullable List<String> productType) {
    this.productType = productType;
    return this;
  }

  public CreateAuthMethodCert addProductTypeItem(String productTypeItem) {
    if (this.productType == null) {
      this.productType = new ArrayList<>();
    }
    this.productType.add(productTypeItem);
    return this;
  }

  /**
   * Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]
   * @return productType
   */
  @javax.annotation.Nullable
  public List<String> getProductType() {
    return productType;
  }

  public void setProductType(@javax.annotation.Nullable List<String> productType) {
    this.productType = productType;
  }


  public CreateAuthMethodCert revokedCertIds(@javax.annotation.Nullable List<String> revokedCertIds) {
    this.revokedCertIds = revokedCertIds;
    return this;
  }

  public CreateAuthMethodCert addRevokedCertIdsItem(String revokedCertIdsItem) {
    if (this.revokedCertIds == null) {
      this.revokedCertIds = new ArrayList<>();
    }
    this.revokedCertIds.add(revokedCertIdsItem);
    return this;
  }

  /**
   * A list of revoked cert ids
   * @return revokedCertIds
   */
  @javax.annotation.Nullable
  public List<String> getRevokedCertIds() {
    return revokedCertIds;
  }

  public void setRevokedCertIds(@javax.annotation.Nullable List<String> revokedCertIds) {
    this.revokedCertIds = revokedCertIds;
  }


  public CreateAuthMethodCert token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateAuthMethodCert uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public CreateAuthMethodCert uniqueIdentifier(@javax.annotation.Nonnull String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier (ID) value should be configured, such as common_name or organizational_unit Whenever a user logs in with a token, these authentication types issue a \&quot;sub claim\&quot; that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.
   * @return uniqueIdentifier
   */
  @javax.annotation.Nonnull
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nonnull String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAuthMethodCert createAuthMethodCert = (CreateAuthMethodCert) o;
    return Objects.equals(this.accessExpires, createAuthMethodCert.accessExpires) &&
        Objects.equals(this.allowedCors, createAuthMethodCert.allowedCors) &&
        Objects.equals(this.auditLogsClaims, createAuthMethodCert.auditLogsClaims) &&
        Objects.equals(this.boundCommonNames, createAuthMethodCert.boundCommonNames) &&
        Objects.equals(this.boundDnsSans, createAuthMethodCert.boundDnsSans) &&
        Objects.equals(this.boundEmailSans, createAuthMethodCert.boundEmailSans) &&
        Objects.equals(this.boundExtensions, createAuthMethodCert.boundExtensions) &&
        Objects.equals(this.boundIps, createAuthMethodCert.boundIps) &&
        Objects.equals(this.boundOrganizationalUnits, createAuthMethodCert.boundOrganizationalUnits) &&
        Objects.equals(this.boundUriSans, createAuthMethodCert.boundUriSans) &&
        Objects.equals(this.certificateData, createAuthMethodCert.certificateData) &&
        Objects.equals(this.deleteProtection, createAuthMethodCert.deleteProtection) &&
        Objects.equals(this.description, createAuthMethodCert.description) &&
        Objects.equals(this.expirationEventIn, createAuthMethodCert.expirationEventIn) &&
        Objects.equals(this.forceSubClaims, createAuthMethodCert.forceSubClaims) &&
        Objects.equals(this.gwBoundIps, createAuthMethodCert.gwBoundIps) &&
        Objects.equals(this.json, createAuthMethodCert.json) &&
        Objects.equals(this.jwtTtl, createAuthMethodCert.jwtTtl) &&
        Objects.equals(this.name, createAuthMethodCert.name) &&
        Objects.equals(this.productType, createAuthMethodCert.productType) &&
        Objects.equals(this.revokedCertIds, createAuthMethodCert.revokedCertIds) &&
        Objects.equals(this.token, createAuthMethodCert.token) &&
        Objects.equals(this.uidToken, createAuthMethodCert.uidToken) &&
        Objects.equals(this.uniqueIdentifier, createAuthMethodCert.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessExpires, allowedCors, auditLogsClaims, boundCommonNames, boundDnsSans, boundEmailSans, boundExtensions, boundIps, boundOrganizationalUnits, boundUriSans, certificateData, deleteProtection, description, expirationEventIn, forceSubClaims, gwBoundIps, json, jwtTtl, name, productType, revokedCertIds, token, uidToken, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAuthMethodCert {\n");
    sb.append("    accessExpires: ").append(toIndentedString(accessExpires)).append("\n");
    sb.append("    allowedCors: ").append(toIndentedString(allowedCors)).append("\n");
    sb.append("    auditLogsClaims: ").append(toIndentedString(auditLogsClaims)).append("\n");
    sb.append("    boundCommonNames: ").append(toIndentedString(boundCommonNames)).append("\n");
    sb.append("    boundDnsSans: ").append(toIndentedString(boundDnsSans)).append("\n");
    sb.append("    boundEmailSans: ").append(toIndentedString(boundEmailSans)).append("\n");
    sb.append("    boundExtensions: ").append(toIndentedString(boundExtensions)).append("\n");
    sb.append("    boundIps: ").append(toIndentedString(boundIps)).append("\n");
    sb.append("    boundOrganizationalUnits: ").append(toIndentedString(boundOrganizationalUnits)).append("\n");
    sb.append("    boundUriSans: ").append(toIndentedString(boundUriSans)).append("\n");
    sb.append("    certificateData: ").append(toIndentedString(certificateData)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationEventIn: ").append(toIndentedString(expirationEventIn)).append("\n");
    sb.append("    forceSubClaims: ").append(toIndentedString(forceSubClaims)).append("\n");
    sb.append("    gwBoundIps: ").append(toIndentedString(gwBoundIps)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    jwtTtl: ").append(toIndentedString(jwtTtl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    revokedCertIds: ").append(toIndentedString(revokedCertIds)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access-expires");
    openapiFields.add("allowed-cors");
    openapiFields.add("audit-logs-claims");
    openapiFields.add("bound-common-names");
    openapiFields.add("bound-dns-sans");
    openapiFields.add("bound-email-sans");
    openapiFields.add("bound-extensions");
    openapiFields.add("bound-ips");
    openapiFields.add("bound-organizational-units");
    openapiFields.add("bound-uri-sans");
    openapiFields.add("certificate-data");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("expiration-event-in");
    openapiFields.add("force-sub-claims");
    openapiFields.add("gw-bound-ips");
    openapiFields.add("json");
    openapiFields.add("jwt-ttl");
    openapiFields.add("name");
    openapiFields.add("product-type");
    openapiFields.add("revoked-cert-ids");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("unique-identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("unique-identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAuthMethodCert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAuthMethodCert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAuthMethodCert is not found in the empty JSON string", CreateAuthMethodCert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAuthMethodCert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAuthMethodCert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAuthMethodCert.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowed-cors") != null && !jsonObj.get("allowed-cors").isJsonNull()) && !jsonObj.get("allowed-cors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-cors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed-cors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audit-logs-claims") != null && !jsonObj.get("audit-logs-claims").isJsonNull() && !jsonObj.get("audit-logs-claims").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audit-logs-claims` to be an array in the JSON string but got `%s`", jsonObj.get("audit-logs-claims").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-common-names") != null && !jsonObj.get("bound-common-names").isJsonNull() && !jsonObj.get("bound-common-names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-common-names` to be an array in the JSON string but got `%s`", jsonObj.get("bound-common-names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-dns-sans") != null && !jsonObj.get("bound-dns-sans").isJsonNull() && !jsonObj.get("bound-dns-sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-dns-sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound-dns-sans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-email-sans") != null && !jsonObj.get("bound-email-sans").isJsonNull() && !jsonObj.get("bound-email-sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-email-sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound-email-sans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-extensions") != null && !jsonObj.get("bound-extensions").isJsonNull() && !jsonObj.get("bound-extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-extensions` to be an array in the JSON string but got `%s`", jsonObj.get("bound-extensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-ips") != null && !jsonObj.get("bound-ips").isJsonNull() && !jsonObj.get("bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("bound-ips").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-organizational-units") != null && !jsonObj.get("bound-organizational-units").isJsonNull() && !jsonObj.get("bound-organizational-units").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-organizational-units` to be an array in the JSON string but got `%s`", jsonObj.get("bound-organizational-units").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-uri-sans") != null && !jsonObj.get("bound-uri-sans").isJsonNull() && !jsonObj.get("bound-uri-sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-uri-sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound-uri-sans").toString()));
      }
      if ((jsonObj.get("certificate-data") != null && !jsonObj.get("certificate-data").isJsonNull()) && !jsonObj.get("certificate-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-data").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expiration-event-in") != null && !jsonObj.get("expiration-event-in").isJsonNull() && !jsonObj.get("expiration-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("expiration-event-in").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gw-bound-ips") != null && !jsonObj.get("gw-bound-ips").isJsonNull() && !jsonObj.get("gw-bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gw-bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("gw-bound-ips").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product-type") != null && !jsonObj.get("product-type").isJsonNull() && !jsonObj.get("product-type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product-type` to be an array in the JSON string but got `%s`", jsonObj.get("product-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revoked-cert-ids") != null && !jsonObj.get("revoked-cert-ids").isJsonNull() && !jsonObj.get("revoked-cert-ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revoked-cert-ids` to be an array in the JSON string but got `%s`", jsonObj.get("revoked-cert-ids").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if (!jsonObj.get("unique-identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique-identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique-identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAuthMethodCert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAuthMethodCert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAuthMethodCert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAuthMethodCert.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAuthMethodCert>() {
           @Override
           public void write(JsonWriter out, CreateAuthMethodCert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAuthMethodCert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAuthMethodCert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAuthMethodCert
   * @throws IOException if the JSON string is invalid with respect to CreateAuthMethodCert
   */
  public static CreateAuthMethodCert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAuthMethodCert.class);
  }

  /**
   * Convert an instance of CreateAuthMethodCert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

