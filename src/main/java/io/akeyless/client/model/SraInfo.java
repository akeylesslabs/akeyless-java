/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SraInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SraInfo {
  public static final String SERIALIZED_NAME_SLA = "sla";
  @SerializedName(SERIALIZED_NAME_SLA)
  @javax.annotation.Nullable
  private String sla;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  @javax.annotation.Nullable
  private String tier;

  public static final String SERIALIZED_NAME_USER_TYPE = "user_type";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  @javax.annotation.Nullable
  private String userType;

  public SraInfo() {
  }

  public SraInfo sla(@javax.annotation.Nullable String sla) {
    this.sla = sla;
    return this;
  }

  /**
   * Get sla
   * @return sla
   */
  @javax.annotation.Nullable
  public String getSla() {
    return sla;
  }

  public void setSla(@javax.annotation.Nullable String sla) {
    this.sla = sla;
  }


  public SraInfo tier(@javax.annotation.Nullable String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Tier represents a level of extensibility the account will have, defined by various limits for different resources of Akeyless e.g - A StarterTier may have a limit of 3 Client resources and 50 Secret resources
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(@javax.annotation.Nullable String tier) {
    this.tier = tier;
  }


  public SraInfo userType(@javax.annotation.Nullable String userType) {
    this.userType = userType;
    return this;
  }

  /**
   * Get userType
   * @return userType
   */
  @javax.annotation.Nullable
  public String getUserType() {
    return userType;
  }

  public void setUserType(@javax.annotation.Nullable String userType) {
    this.userType = userType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SraInfo sraInfo = (SraInfo) o;
    return Objects.equals(this.sla, sraInfo.sla) &&
        Objects.equals(this.tier, sraInfo.tier) &&
        Objects.equals(this.userType, sraInfo.userType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sla, tier, userType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SraInfo {\n");
    sb.append("    sla: ").append(toIndentedString(sla)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sla");
    openapiFields.add("tier");
    openapiFields.add("user_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SraInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SraInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SraInfo is not found in the empty JSON string", SraInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SraInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SraInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sla") != null && !jsonObj.get("sla").isJsonNull()) && !jsonObj.get("sla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sla").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      if ((jsonObj.get("user_type") != null && !jsonObj.get("user_type").isJsonNull()) && !jsonObj.get("user_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SraInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SraInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SraInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SraInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SraInfo>() {
           @Override
           public void write(JsonWriter out, SraInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SraInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SraInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SraInfo
   * @throws IOException if the JSON string is invalid with respect to SraInfo
   */
  public static SraInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SraInfo.class);
  }

  /**
   * Convert an instance of SraInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

