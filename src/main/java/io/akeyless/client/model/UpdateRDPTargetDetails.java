/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UpdateRDPTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateRDPTargetDetails {
  public static final String SERIALIZED_NAME_ADMIN_NAME = "admin-name";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  @javax.annotation.Nullable
  private String adminName;

  public static final String SERIALIZED_NAME_ADMIN_PWD = "admin-pwd";
  @SerializedName(SERIALIZED_NAME_ADMIN_PWD)
  @javax.annotation.Nullable
  private String adminPwd;

  public static final String SERIALIZED_NAME_HOST_NAME = "host-name";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  @javax.annotation.Nullable
  private String hostName;

  public static final String SERIALIZED_NAME_HOST_PORT = "host-port";
  @SerializedName(SERIALIZED_NAME_HOST_PORT)
  @javax.annotation.Nullable
  private String hostPort = "22";

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_VERSION = "new-version";
  @SerializedName(SERIALIZED_NAME_NEW_VERSION)
  @javax.annotation.Nullable
  private Boolean newVersion;

  public static final String SERIALIZED_NAME_PROTECTION_KEY = "protection_key";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY)
  @javax.annotation.Nullable
  private String protectionKey;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public UpdateRDPTargetDetails() {
  }

  public UpdateRDPTargetDetails adminName(@javax.annotation.Nullable String adminName) {
    this.adminName = adminName;
    return this;
  }

  /**
   * The admin name
   * @return adminName
   */
  @javax.annotation.Nullable
  public String getAdminName() {
    return adminName;
  }

  public void setAdminName(@javax.annotation.Nullable String adminName) {
    this.adminName = adminName;
  }


  public UpdateRDPTargetDetails adminPwd(@javax.annotation.Nullable String adminPwd) {
    this.adminPwd = adminPwd;
    return this;
  }

  /**
   * The admin password
   * @return adminPwd
   */
  @javax.annotation.Nullable
  public String getAdminPwd() {
    return adminPwd;
  }

  public void setAdminPwd(@javax.annotation.Nullable String adminPwd) {
    this.adminPwd = adminPwd;
  }


  public UpdateRDPTargetDetails hostName(@javax.annotation.Nullable String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * The rdp host name
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(@javax.annotation.Nullable String hostName) {
    this.hostName = hostName;
  }


  public UpdateRDPTargetDetails hostPort(@javax.annotation.Nullable String hostPort) {
    this.hostPort = hostPort;
    return this;
  }

  /**
   * The rdp port
   * @return hostPort
   */
  @javax.annotation.Nullable
  public String getHostPort() {
    return hostPort;
  }

  public void setHostPort(@javax.annotation.Nullable String hostPort) {
    this.hostPort = hostPort;
  }


  public UpdateRDPTargetDetails json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateRDPTargetDetails keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateRDPTargetDetails name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateRDPTargetDetails newVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
    return this;
  }

  /**
   * Deprecated
   * @return newVersion
   */
  @javax.annotation.Nullable
  public Boolean getNewVersion() {
    return newVersion;
  }

  public void setNewVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
  }


  public UpdateRDPTargetDetails protectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return protectionKey
   */
  @javax.annotation.Nullable
  public String getProtectionKey() {
    return protectionKey;
  }

  public void setProtectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
  }


  public UpdateRDPTargetDetails token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateRDPTargetDetails uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRDPTargetDetails updateRDPTargetDetails = (UpdateRDPTargetDetails) o;
    return Objects.equals(this.adminName, updateRDPTargetDetails.adminName) &&
        Objects.equals(this.adminPwd, updateRDPTargetDetails.adminPwd) &&
        Objects.equals(this.hostName, updateRDPTargetDetails.hostName) &&
        Objects.equals(this.hostPort, updateRDPTargetDetails.hostPort) &&
        Objects.equals(this.json, updateRDPTargetDetails.json) &&
        Objects.equals(this.keepPrevVersion, updateRDPTargetDetails.keepPrevVersion) &&
        Objects.equals(this.name, updateRDPTargetDetails.name) &&
        Objects.equals(this.newVersion, updateRDPTargetDetails.newVersion) &&
        Objects.equals(this.protectionKey, updateRDPTargetDetails.protectionKey) &&
        Objects.equals(this.token, updateRDPTargetDetails.token) &&
        Objects.equals(this.uidToken, updateRDPTargetDetails.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminName, adminPwd, hostName, hostPort, json, keepPrevVersion, name, newVersion, protectionKey, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRDPTargetDetails {\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    adminPwd: ").append(toIndentedString(adminPwd)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    hostPort: ").append(toIndentedString(hostPort)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newVersion: ").append(toIndentedString(newVersion)).append("\n");
    sb.append("    protectionKey: ").append(toIndentedString(protectionKey)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin-name");
    openapiFields.add("admin-pwd");
    openapiFields.add("host-name");
    openapiFields.add("host-port");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("name");
    openapiFields.add("new-version");
    openapiFields.add("protection_key");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRDPTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRDPTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRDPTargetDetails is not found in the empty JSON string", UpdateRDPTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRDPTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRDPTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRDPTargetDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admin-name") != null && !jsonObj.get("admin-name").isJsonNull()) && !jsonObj.get("admin-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-name").toString()));
      }
      if ((jsonObj.get("admin-pwd") != null && !jsonObj.get("admin-pwd").isJsonNull()) && !jsonObj.get("admin-pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-pwd").toString()));
      }
      if ((jsonObj.get("host-name") != null && !jsonObj.get("host-name").isJsonNull()) && !jsonObj.get("host-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-name").toString()));
      }
      if ((jsonObj.get("host-port") != null && !jsonObj.get("host-port").isJsonNull()) && !jsonObj.get("host-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-port").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protection_key") != null && !jsonObj.get("protection_key").isJsonNull()) && !jsonObj.get("protection_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection_key").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRDPTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRDPTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRDPTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRDPTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRDPTargetDetails>() {
           @Override
           public void write(JsonWriter out, UpdateRDPTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRDPTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRDPTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRDPTargetDetails
   * @throws IOException if the JSON string is invalid with respect to UpdateRDPTargetDetails
   */
  public static UpdateRDPTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRDPTargetDetails.class);
  }

  /**
   * Convert an instance of UpdateRDPTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

