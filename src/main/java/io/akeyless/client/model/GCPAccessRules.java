/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * GCPAccessRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GCPAccessRules {
  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  @javax.annotation.Nullable
  private String audience = "akeyless.io";

  public static final String SERIALIZED_NAME_BOUND_LABELS = "bound_labels";
  @SerializedName(SERIALIZED_NAME_BOUND_LABELS)
  @javax.annotation.Nullable
  private Map<String, String> boundLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_BOUND_PROJECTS = "bound_projects";
  @SerializedName(SERIALIZED_NAME_BOUND_PROJECTS)
  @javax.annotation.Nullable
  private List<String> boundProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_REGIONS = "bound_regions";
  @SerializedName(SERIALIZED_NAME_BOUND_REGIONS)
  @javax.annotation.Nullable
  private List<String> boundRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_SERVICE_ACCOUNTS = "bound_service_accounts";
  @SerializedName(SERIALIZED_NAME_BOUND_SERVICE_ACCOUNTS)
  @javax.annotation.Nullable
  private List<String> boundServiceAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_ZONES = "bound_zones";
  @SerializedName(SERIALIZED_NAME_BOUND_ZONES)
  @javax.annotation.Nullable
  private List<String> boundZones = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "service_account";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  @javax.annotation.Nullable
  private String serviceAccount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String uniqueIdentifier;

  public GCPAccessRules() {
  }

  public GCPAccessRules audience(@javax.annotation.Nullable String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * The audience in the JWT
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(@javax.annotation.Nullable String audience) {
    this.audience = audience;
  }


  public GCPAccessRules boundLabels(@javax.annotation.Nullable Map<String, String> boundLabels) {
    this.boundLabels = boundLabels;
    return this;
  }

  public GCPAccessRules putBoundLabelsItem(String key, String boundLabelsItem) {
    if (this.boundLabels == null) {
      this.boundLabels = new HashMap<>();
    }
    this.boundLabels.put(key, boundLabelsItem);
    return this;
  }

  /**
   * A map of GCP labels formatted as \&quot;key:value\&quot; strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL&#39;d ....
   * @return boundLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getBoundLabels() {
    return boundLabels;
  }

  public void setBoundLabels(@javax.annotation.Nullable Map<String, String> boundLabels) {
    this.boundLabels = boundLabels;
  }


  public GCPAccessRules boundProjects(@javax.annotation.Nullable List<String> boundProjects) {
    this.boundProjects = boundProjects;
    return this;
  }

  public GCPAccessRules addBoundProjectsItem(String boundProjectsItem) {
    if (this.boundProjects == null) {
      this.boundProjects = new ArrayList<>();
    }
    this.boundProjects.add(boundProjectsItem);
    return this;
  }

  /**
   * Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate.
   * @return boundProjects
   */
  @javax.annotation.Nullable
  public List<String> getBoundProjects() {
    return boundProjects;
  }

  public void setBoundProjects(@javax.annotation.Nullable List<String> boundProjects) {
    this.boundProjects = boundProjects;
  }


  public GCPAccessRules boundRegions(@javax.annotation.Nullable List<String> boundRegions) {
    this.boundRegions = boundRegions;
    return this;
  }

  public GCPAccessRules addBoundRegionsItem(String boundRegionsItem) {
    if (this.boundRegions == null) {
      this.boundRegions = new ArrayList<>();
    }
    this.boundRegions.add(boundRegionsItem);
    return this;
  }

  /**
   * List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.
   * @return boundRegions
   */
  @javax.annotation.Nullable
  public List<String> getBoundRegions() {
    return boundRegions;
  }

  public void setBoundRegions(@javax.annotation.Nullable List<String> boundRegions) {
    this.boundRegions = boundRegions;
  }


  public GCPAccessRules boundServiceAccounts(@javax.annotation.Nullable List<String> boundServiceAccounts) {
    this.boundServiceAccounts = boundServiceAccounts;
    return this;
  }

  public GCPAccessRules addBoundServiceAccountsItem(String boundServiceAccountsItem) {
    if (this.boundServiceAccounts == null) {
      this.boundServiceAccounts = new ArrayList<>();
    }
    this.boundServiceAccounts.add(boundServiceAccountsItem);
    return this;
  }

  /**
   * List of service accounts the service account must be part of in order to be authenticated
   * @return boundServiceAccounts
   */
  @javax.annotation.Nullable
  public List<String> getBoundServiceAccounts() {
    return boundServiceAccounts;
  }

  public void setBoundServiceAccounts(@javax.annotation.Nullable List<String> boundServiceAccounts) {
    this.boundServiceAccounts = boundServiceAccounts;
  }


  public GCPAccessRules boundZones(@javax.annotation.Nullable List<String> boundZones) {
    this.boundZones = boundZones;
    return this;
  }

  public GCPAccessRules addBoundZonesItem(String boundZonesItem) {
    if (this.boundZones == null) {
      this.boundZones = new ArrayList<>();
    }
    this.boundZones.add(boundZonesItem);
    return this;
  }

  /**
   * &#x3D;&#x3D;&#x3D; Machine authentication section &#x3D;&#x3D;&#x3D; List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.
   * @return boundZones
   */
  @javax.annotation.Nullable
  public List<String> getBoundZones() {
    return boundZones;
  }

  public void setBoundZones(@javax.annotation.Nullable List<String> boundZones) {
    this.boundZones = boundZones;
  }


  public GCPAccessRules serviceAccount(@javax.annotation.Nullable String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(@javax.annotation.Nullable String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public GCPAccessRules type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public GCPAccessRules uniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier to distinguish different users
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GCPAccessRules gcPAccessRules = (GCPAccessRules) o;
    return Objects.equals(this.audience, gcPAccessRules.audience) &&
        Objects.equals(this.boundLabels, gcPAccessRules.boundLabels) &&
        Objects.equals(this.boundProjects, gcPAccessRules.boundProjects) &&
        Objects.equals(this.boundRegions, gcPAccessRules.boundRegions) &&
        Objects.equals(this.boundServiceAccounts, gcPAccessRules.boundServiceAccounts) &&
        Objects.equals(this.boundZones, gcPAccessRules.boundZones) &&
        Objects.equals(this.serviceAccount, gcPAccessRules.serviceAccount) &&
        Objects.equals(this.type, gcPAccessRules.type) &&
        Objects.equals(this.uniqueIdentifier, gcPAccessRules.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audience, boundLabels, boundProjects, boundRegions, boundServiceAccounts, boundZones, serviceAccount, type, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GCPAccessRules {\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    boundLabels: ").append(toIndentedString(boundLabels)).append("\n");
    sb.append("    boundProjects: ").append(toIndentedString(boundProjects)).append("\n");
    sb.append("    boundRegions: ").append(toIndentedString(boundRegions)).append("\n");
    sb.append("    boundServiceAccounts: ").append(toIndentedString(boundServiceAccounts)).append("\n");
    sb.append("    boundZones: ").append(toIndentedString(boundZones)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audience");
    openapiFields.add("bound_labels");
    openapiFields.add("bound_projects");
    openapiFields.add("bound_regions");
    openapiFields.add("bound_service_accounts");
    openapiFields.add("bound_zones");
    openapiFields.add("service_account");
    openapiFields.add("type");
    openapiFields.add("unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GCPAccessRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GCPAccessRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GCPAccessRules is not found in the empty JSON string", GCPAccessRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GCPAccessRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GCPAccessRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_projects") != null && !jsonObj.get("bound_projects").isJsonNull() && !jsonObj.get("bound_projects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_projects` to be an array in the JSON string but got `%s`", jsonObj.get("bound_projects").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_regions") != null && !jsonObj.get("bound_regions").isJsonNull() && !jsonObj.get("bound_regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_regions` to be an array in the JSON string but got `%s`", jsonObj.get("bound_regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_service_accounts") != null && !jsonObj.get("bound_service_accounts").isJsonNull() && !jsonObj.get("bound_service_accounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_service_accounts` to be an array in the JSON string but got `%s`", jsonObj.get("bound_service_accounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_zones") != null && !jsonObj.get("bound_zones").isJsonNull() && !jsonObj.get("bound_zones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_zones` to be an array in the JSON string but got `%s`", jsonObj.get("bound_zones").toString()));
      }
      if ((jsonObj.get("service_account") != null && !jsonObj.get("service_account").isJsonNull()) && !jsonObj.get("service_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_account").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GCPAccessRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GCPAccessRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GCPAccessRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GCPAccessRules.class));

       return (TypeAdapter<T>) new TypeAdapter<GCPAccessRules>() {
           @Override
           public void write(JsonWriter out, GCPAccessRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GCPAccessRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GCPAccessRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GCPAccessRules
   * @throws IOException if the JSON string is invalid with respect to GCPAccessRules
   */
  public static GCPAccessRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GCPAccessRules.class);
  }

  /**
   * Convert an instance of GCPAccessRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

