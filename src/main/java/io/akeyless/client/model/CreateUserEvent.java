/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CreateUserEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateUserEvent {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  @javax.annotation.Nullable
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "event-source";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  @javax.annotation.Nullable
  private String eventSource;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event-type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nonnull
  private String eventType;

  public static final String SERIALIZED_NAME_ITEM_NAME = "item-name";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  @javax.annotation.Nonnull
  private String itemName;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item-type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  @javax.annotation.Nonnull
  private String itemType;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_REQUEST_ACCESS_TTL = "request-access-ttl";
  @SerializedName(SERIALIZED_NAME_REQUEST_ACCESS_TTL)
  @javax.annotation.Nullable
  private Long requestAccessTtl;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public CreateUserEvent() {
  }

  public CreateUserEvent capabilities(@javax.annotation.Nullable List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public CreateUserEvent addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * List of the required capabilities options: [read, update, delete,sra_transparently_connect]. Relevant only for request-access event types
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(@javax.annotation.Nullable List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public CreateUserEvent comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public CreateUserEvent description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateUserEvent eventSource(@javax.annotation.Nullable String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Get eventSource
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(@javax.annotation.Nullable String eventSource) {
    this.eventSource = eventSource;
  }


  public CreateUserEvent eventType(@javax.annotation.Nonnull String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(@javax.annotation.Nonnull String eventType) {
    this.eventType = eventType;
  }


  public CreateUserEvent itemName(@javax.annotation.Nonnull String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * EventItemName Event item name
   * @return itemName
   */
  @javax.annotation.Nonnull
  public String getItemName() {
    return itemName;
  }

  public void setItemName(@javax.annotation.Nonnull String itemName) {
    this.itemName = itemName;
  }


  public CreateUserEvent itemType(@javax.annotation.Nonnull String itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * EventItemType Event item type
   * @return itemType
   */
  @javax.annotation.Nonnull
  public String getItemType() {
    return itemType;
  }

  public void setItemType(@javax.annotation.Nonnull String itemType) {
    this.itemType = itemType;
  }


  public CreateUserEvent json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateUserEvent requestAccessTtl(@javax.annotation.Nullable Long requestAccessTtl) {
    this.requestAccessTtl = requestAccessTtl;
    return this;
  }

  /**
   * For how long to grant the requested access, in minutes
   * @return requestAccessTtl
   */
  @javax.annotation.Nullable
  public Long getRequestAccessTtl() {
    return requestAccessTtl;
  }

  public void setRequestAccessTtl(@javax.annotation.Nullable Long requestAccessTtl) {
    this.requestAccessTtl = requestAccessTtl;
  }


  public CreateUserEvent token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateUserEvent uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserEvent createUserEvent = (CreateUserEvent) o;
    return Objects.equals(this.capabilities, createUserEvent.capabilities) &&
        Objects.equals(this.comment, createUserEvent.comment) &&
        Objects.equals(this.description, createUserEvent.description) &&
        Objects.equals(this.eventSource, createUserEvent.eventSource) &&
        Objects.equals(this.eventType, createUserEvent.eventType) &&
        Objects.equals(this.itemName, createUserEvent.itemName) &&
        Objects.equals(this.itemType, createUserEvent.itemType) &&
        Objects.equals(this.json, createUserEvent.json) &&
        Objects.equals(this.requestAccessTtl, createUserEvent.requestAccessTtl) &&
        Objects.equals(this.token, createUserEvent.token) &&
        Objects.equals(this.uidToken, createUserEvent.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, comment, description, eventSource, eventType, itemName, itemType, json, requestAccessTtl, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserEvent {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    requestAccessTtl: ").append(toIndentedString(requestAccessTtl)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("comment");
    openapiFields.add("description");
    openapiFields.add("event-source");
    openapiFields.add("event-type");
    openapiFields.add("item-name");
    openapiFields.add("item-type");
    openapiFields.add("json");
    openapiFields.add("request-access-ttl");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event-type");
    openapiRequiredFields.add("item-name");
    openapiRequiredFields.add("item-type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUserEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUserEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUserEvent is not found in the empty JSON string", CreateUserEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUserEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUserEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUserEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("event-source") != null && !jsonObj.get("event-source").isJsonNull()) && !jsonObj.get("event-source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event-source").toString()));
      }
      if (!jsonObj.get("event-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event-type").toString()));
      }
      if (!jsonObj.get("item-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item-name").toString()));
      }
      if (!jsonObj.get("item-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item-type").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUserEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUserEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUserEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUserEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUserEvent>() {
           @Override
           public void write(JsonWriter out, CreateUserEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUserEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUserEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUserEvent
   * @throws IOException if the JSON string is invalid with respect to CreateUserEvent
   */
  public static CreateUserEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUserEvent.class);
  }

  /**
   * Convert an instance of CreateUserEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

