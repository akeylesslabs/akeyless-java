/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateLdapAuth is a command that updates ldap auth config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateLdapAuthConfig {
  public static final String SERIALIZED_NAME_ACCESS_ID = "access-id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  @javax.annotation.Nullable
  private String accessId;

  public static final String SERIALIZED_NAME_BIND_DN = "bind-dn";
  @SerializedName(SERIALIZED_NAME_BIND_DN)
  @javax.annotation.Nullable
  private String bindDn;

  public static final String SERIALIZED_NAME_BIND_DN_PASSWORD = "bind-dn-password";
  @SerializedName(SERIALIZED_NAME_BIND_DN_PASSWORD)
  @javax.annotation.Nullable
  private String bindDnPassword;

  public static final String SERIALIZED_NAME_GROUP_ATTR = "group-attr";
  @SerializedName(SERIALIZED_NAME_GROUP_ATTR)
  @javax.annotation.Nullable
  private String groupAttr;

  public static final String SERIALIZED_NAME_GROUP_DN = "group-dn";
  @SerializedName(SERIALIZED_NAME_GROUP_DN)
  @javax.annotation.Nullable
  private String groupDn;

  public static final String SERIALIZED_NAME_GROUP_FILTER = "group-filter";
  @SerializedName(SERIALIZED_NAME_GROUP_FILTER)
  @javax.annotation.Nullable
  private String groupFilter;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_LDAP_CA_CERT = "ldap-ca-cert";
  @SerializedName(SERIALIZED_NAME_LDAP_CA_CERT)
  @javax.annotation.Nullable
  private String ldapCaCert;

  public static final String SERIALIZED_NAME_LDAP_ENABLE = "ldap-enable";
  @SerializedName(SERIALIZED_NAME_LDAP_ENABLE)
  @javax.annotation.Nullable
  private String ldapEnable;

  public static final String SERIALIZED_NAME_LDAP_URL = "ldap-url";
  @SerializedName(SERIALIZED_NAME_LDAP_URL)
  @javax.annotation.Nullable
  private String ldapUrl;

  public static final String SERIALIZED_NAME_SIGNING_KEY_DATA = "signing-key-data";
  @SerializedName(SERIALIZED_NAME_SIGNING_KEY_DATA)
  @javax.annotation.Nullable
  private String signingKeyData;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "user-attribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  @javax.annotation.Nullable
  private String userAttribute;

  public static final String SERIALIZED_NAME_USER_DN = "user-dn";
  @SerializedName(SERIALIZED_NAME_USER_DN)
  @javax.annotation.Nullable
  private String userDn;

  public GatewayUpdateLdapAuthConfig() {
  }

  public GatewayUpdateLdapAuthConfig accessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * The access ID of the Ldap auth method
   * @return accessId
   */
  @javax.annotation.Nullable
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
  }


  public GatewayUpdateLdapAuthConfig bindDn(@javax.annotation.Nullable String bindDn) {
    this.bindDn = bindDn;
    return this;
  }

  /**
   * Bind DN
   * @return bindDn
   */
  @javax.annotation.Nullable
  public String getBindDn() {
    return bindDn;
  }

  public void setBindDn(@javax.annotation.Nullable String bindDn) {
    this.bindDn = bindDn;
  }


  public GatewayUpdateLdapAuthConfig bindDnPassword(@javax.annotation.Nullable String bindDnPassword) {
    this.bindDnPassword = bindDnPassword;
    return this;
  }

  /**
   * Bind DN Password
   * @return bindDnPassword
   */
  @javax.annotation.Nullable
  public String getBindDnPassword() {
    return bindDnPassword;
  }

  public void setBindDnPassword(@javax.annotation.Nullable String bindDnPassword) {
    this.bindDnPassword = bindDnPassword;
  }


  public GatewayUpdateLdapAuthConfig groupAttr(@javax.annotation.Nullable String groupAttr) {
    this.groupAttr = groupAttr;
    return this;
  }

  /**
   * Group Attr
   * @return groupAttr
   */
  @javax.annotation.Nullable
  public String getGroupAttr() {
    return groupAttr;
  }

  public void setGroupAttr(@javax.annotation.Nullable String groupAttr) {
    this.groupAttr = groupAttr;
  }


  public GatewayUpdateLdapAuthConfig groupDn(@javax.annotation.Nullable String groupDn) {
    this.groupDn = groupDn;
    return this;
  }

  /**
   * Group Dn
   * @return groupDn
   */
  @javax.annotation.Nullable
  public String getGroupDn() {
    return groupDn;
  }

  public void setGroupDn(@javax.annotation.Nullable String groupDn) {
    this.groupDn = groupDn;
  }


  public GatewayUpdateLdapAuthConfig groupFilter(@javax.annotation.Nullable String groupFilter) {
    this.groupFilter = groupFilter;
    return this;
  }

  /**
   * Group Filter
   * @return groupFilter
   */
  @javax.annotation.Nullable
  public String getGroupFilter() {
    return groupFilter;
  }

  public void setGroupFilter(@javax.annotation.Nullable String groupFilter) {
    this.groupFilter = groupFilter;
  }


  public GatewayUpdateLdapAuthConfig json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateLdapAuthConfig ldapCaCert(@javax.annotation.Nullable String ldapCaCert) {
    this.ldapCaCert = ldapCaCert;
    return this;
  }

  /**
   * LDAP CA Certificate (base64 encoded)
   * @return ldapCaCert
   */
  @javax.annotation.Nullable
  public String getLdapCaCert() {
    return ldapCaCert;
  }

  public void setLdapCaCert(@javax.annotation.Nullable String ldapCaCert) {
    this.ldapCaCert = ldapCaCert;
  }


  public GatewayUpdateLdapAuthConfig ldapEnable(@javax.annotation.Nullable String ldapEnable) {
    this.ldapEnable = ldapEnable;
    return this;
  }

  /**
   * Enable Ldap [true/false]
   * @return ldapEnable
   */
  @javax.annotation.Nullable
  public String getLdapEnable() {
    return ldapEnable;
  }

  public void setLdapEnable(@javax.annotation.Nullable String ldapEnable) {
    this.ldapEnable = ldapEnable;
  }


  public GatewayUpdateLdapAuthConfig ldapUrl(@javax.annotation.Nullable String ldapUrl) {
    this.ldapUrl = ldapUrl;
    return this;
  }

  /**
   * LDAP Server URL, e.g. ldap://planetexpress.com:389
   * @return ldapUrl
   */
  @javax.annotation.Nullable
  public String getLdapUrl() {
    return ldapUrl;
  }

  public void setLdapUrl(@javax.annotation.Nullable String ldapUrl) {
    this.ldapUrl = ldapUrl;
  }


  public GatewayUpdateLdapAuthConfig signingKeyData(@javax.annotation.Nullable String signingKeyData) {
    this.signingKeyData = signingKeyData;
    return this;
  }

  /**
   * The private key (base64 encoded), associated with the public key defined in the Ldap auth
   * @return signingKeyData
   */
  @javax.annotation.Nullable
  public String getSigningKeyData() {
    return signingKeyData;
  }

  public void setSigningKeyData(@javax.annotation.Nullable String signingKeyData) {
    this.signingKeyData = signingKeyData;
  }


  public GatewayUpdateLdapAuthConfig token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateLdapAuthConfig uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayUpdateLdapAuthConfig userAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * User Attribute
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
  }


  public GatewayUpdateLdapAuthConfig userDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
    return this;
  }

  /**
   * User DN
   * @return userDn
   */
  @javax.annotation.Nullable
  public String getUserDn() {
    return userDn;
  }

  public void setUserDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateLdapAuthConfig gatewayUpdateLdapAuthConfig = (GatewayUpdateLdapAuthConfig) o;
    return Objects.equals(this.accessId, gatewayUpdateLdapAuthConfig.accessId) &&
        Objects.equals(this.bindDn, gatewayUpdateLdapAuthConfig.bindDn) &&
        Objects.equals(this.bindDnPassword, gatewayUpdateLdapAuthConfig.bindDnPassword) &&
        Objects.equals(this.groupAttr, gatewayUpdateLdapAuthConfig.groupAttr) &&
        Objects.equals(this.groupDn, gatewayUpdateLdapAuthConfig.groupDn) &&
        Objects.equals(this.groupFilter, gatewayUpdateLdapAuthConfig.groupFilter) &&
        Objects.equals(this.json, gatewayUpdateLdapAuthConfig.json) &&
        Objects.equals(this.ldapCaCert, gatewayUpdateLdapAuthConfig.ldapCaCert) &&
        Objects.equals(this.ldapEnable, gatewayUpdateLdapAuthConfig.ldapEnable) &&
        Objects.equals(this.ldapUrl, gatewayUpdateLdapAuthConfig.ldapUrl) &&
        Objects.equals(this.signingKeyData, gatewayUpdateLdapAuthConfig.signingKeyData) &&
        Objects.equals(this.token, gatewayUpdateLdapAuthConfig.token) &&
        Objects.equals(this.uidToken, gatewayUpdateLdapAuthConfig.uidToken) &&
        Objects.equals(this.userAttribute, gatewayUpdateLdapAuthConfig.userAttribute) &&
        Objects.equals(this.userDn, gatewayUpdateLdapAuthConfig.userDn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, bindDn, bindDnPassword, groupAttr, groupDn, groupFilter, json, ldapCaCert, ldapEnable, ldapUrl, signingKeyData, token, uidToken, userAttribute, userDn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateLdapAuthConfig {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    bindDnPassword: ").append(toIndentedString(bindDnPassword)).append("\n");
    sb.append("    groupAttr: ").append(toIndentedString(groupAttr)).append("\n");
    sb.append("    groupDn: ").append(toIndentedString(groupDn)).append("\n");
    sb.append("    groupFilter: ").append(toIndentedString(groupFilter)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    ldapCaCert: ").append(toIndentedString(ldapCaCert)).append("\n");
    sb.append("    ldapEnable: ").append(toIndentedString(ldapEnable)).append("\n");
    sb.append("    ldapUrl: ").append(toIndentedString(ldapUrl)).append("\n");
    sb.append("    signingKeyData: ").append(toIndentedString(signingKeyData)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("    userDn: ").append(toIndentedString(userDn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access-id");
    openapiFields.add("bind-dn");
    openapiFields.add("bind-dn-password");
    openapiFields.add("group-attr");
    openapiFields.add("group-dn");
    openapiFields.add("group-filter");
    openapiFields.add("json");
    openapiFields.add("ldap-ca-cert");
    openapiFields.add("ldap-enable");
    openapiFields.add("ldap-url");
    openapiFields.add("signing-key-data");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-attribute");
    openapiFields.add("user-dn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateLdapAuthConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateLdapAuthConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateLdapAuthConfig is not found in the empty JSON string", GatewayUpdateLdapAuthConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateLdapAuthConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateLdapAuthConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access-id") != null && !jsonObj.get("access-id").isJsonNull()) && !jsonObj.get("access-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-id").toString()));
      }
      if ((jsonObj.get("bind-dn") != null && !jsonObj.get("bind-dn").isJsonNull()) && !jsonObj.get("bind-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind-dn").toString()));
      }
      if ((jsonObj.get("bind-dn-password") != null && !jsonObj.get("bind-dn-password").isJsonNull()) && !jsonObj.get("bind-dn-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind-dn-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind-dn-password").toString()));
      }
      if ((jsonObj.get("group-attr") != null && !jsonObj.get("group-attr").isJsonNull()) && !jsonObj.get("group-attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-attr").toString()));
      }
      if ((jsonObj.get("group-dn") != null && !jsonObj.get("group-dn").isJsonNull()) && !jsonObj.get("group-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-dn").toString()));
      }
      if ((jsonObj.get("group-filter") != null && !jsonObj.get("group-filter").isJsonNull()) && !jsonObj.get("group-filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-filter").toString()));
      }
      if ((jsonObj.get("ldap-ca-cert") != null && !jsonObj.get("ldap-ca-cert").isJsonNull()) && !jsonObj.get("ldap-ca-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap-ca-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap-ca-cert").toString()));
      }
      if ((jsonObj.get("ldap-enable") != null && !jsonObj.get("ldap-enable").isJsonNull()) && !jsonObj.get("ldap-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap-enable").toString()));
      }
      if ((jsonObj.get("ldap-url") != null && !jsonObj.get("ldap-url").isJsonNull()) && !jsonObj.get("ldap-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap-url").toString()));
      }
      if ((jsonObj.get("signing-key-data") != null && !jsonObj.get("signing-key-data").isJsonNull()) && !jsonObj.get("signing-key-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing-key-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing-key-data").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-attribute") != null && !jsonObj.get("user-attribute").isJsonNull()) && !jsonObj.get("user-attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-attribute").toString()));
      }
      if ((jsonObj.get("user-dn") != null && !jsonObj.get("user-dn").isJsonNull()) && !jsonObj.get("user-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-dn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateLdapAuthConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateLdapAuthConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateLdapAuthConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateLdapAuthConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateLdapAuthConfig>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateLdapAuthConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateLdapAuthConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateLdapAuthConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateLdapAuthConfig
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateLdapAuthConfig
   */
  public static GatewayUpdateLdapAuthConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateLdapAuthConfig.class);
  }

  /**
   * Convert an instance of GatewayUpdateLdapAuthConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

