/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.CertificateAnalyticAggregation;
import io.akeyless.client.model.ClientsUsageReport;
import io.akeyless.client.model.UsageReportSummary;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * AllAnalyticsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AllAnalyticsData {
  public static final String SERIALIZED_NAME_ANALYTICS_DATA = "analytics_data";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_DATA)
  @javax.annotation.Nullable
  private Map<String, List<List<String>>> analyticsData = new HashMap<>();

  public static final String SERIALIZED_NAME_CERTIFICATES_EXPIRY_DATA = "certificates_expiry_data";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES_EXPIRY_DATA)
  @javax.annotation.Nullable
  private CertificateAnalyticAggregation certificatesExpiryData;

  public static final String SERIALIZED_NAME_CLIENTS_USAGE_REPORTS = "clients_usage_reports";
  @SerializedName(SERIALIZED_NAME_CLIENTS_USAGE_REPORTS)
  @javax.annotation.Nullable
  private Map<String, ClientsUsageReport> clientsUsageReports = new HashMap<>();

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  @javax.annotation.Nullable
  private Long dateUpdated;

  public static final String SERIALIZED_NAME_USAGE_REPORTS = "usage_reports";
  @SerializedName(SERIALIZED_NAME_USAGE_REPORTS)
  @javax.annotation.Nullable
  private Map<String, UsageReportSummary> usageReports = new HashMap<>();

  public AllAnalyticsData() {
  }

  public AllAnalyticsData analyticsData(@javax.annotation.Nullable Map<String, List<List<String>>> analyticsData) {
    this.analyticsData = analyticsData;
    return this;
  }

  public AllAnalyticsData putAnalyticsDataItem(String key, List<List<String>> analyticsDataItem) {
    if (this.analyticsData == null) {
      this.analyticsData = new HashMap<>();
    }
    this.analyticsData.put(key, analyticsDataItem);
    return this;
  }

  /**
   * Get analyticsData
   * @return analyticsData
   */
  @javax.annotation.Nullable
  public Map<String, List<List<String>>> getAnalyticsData() {
    return analyticsData;
  }

  public void setAnalyticsData(@javax.annotation.Nullable Map<String, List<List<String>>> analyticsData) {
    this.analyticsData = analyticsData;
  }


  public AllAnalyticsData certificatesExpiryData(@javax.annotation.Nullable CertificateAnalyticAggregation certificatesExpiryData) {
    this.certificatesExpiryData = certificatesExpiryData;
    return this;
  }

  /**
   * Get certificatesExpiryData
   * @return certificatesExpiryData
   */
  @javax.annotation.Nullable
  public CertificateAnalyticAggregation getCertificatesExpiryData() {
    return certificatesExpiryData;
  }

  public void setCertificatesExpiryData(@javax.annotation.Nullable CertificateAnalyticAggregation certificatesExpiryData) {
    this.certificatesExpiryData = certificatesExpiryData;
  }


  public AllAnalyticsData clientsUsageReports(@javax.annotation.Nullable Map<String, ClientsUsageReport> clientsUsageReports) {
    this.clientsUsageReports = clientsUsageReports;
    return this;
  }

  public AllAnalyticsData putClientsUsageReportsItem(String key, ClientsUsageReport clientsUsageReportsItem) {
    if (this.clientsUsageReports == null) {
      this.clientsUsageReports = new HashMap<>();
    }
    this.clientsUsageReports.put(key, clientsUsageReportsItem);
    return this;
  }

  /**
   * Get clientsUsageReports
   * @return clientsUsageReports
   */
  @javax.annotation.Nullable
  public Map<String, ClientsUsageReport> getClientsUsageReports() {
    return clientsUsageReports;
  }

  public void setClientsUsageReports(@javax.annotation.Nullable Map<String, ClientsUsageReport> clientsUsageReports) {
    this.clientsUsageReports = clientsUsageReports;
  }


  public AllAnalyticsData dateUpdated(@javax.annotation.Nullable Long dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public Long getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(@javax.annotation.Nullable Long dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public AllAnalyticsData usageReports(@javax.annotation.Nullable Map<String, UsageReportSummary> usageReports) {
    this.usageReports = usageReports;
    return this;
  }

  public AllAnalyticsData putUsageReportsItem(String key, UsageReportSummary usageReportsItem) {
    if (this.usageReports == null) {
      this.usageReports = new HashMap<>();
    }
    this.usageReports.put(key, usageReportsItem);
    return this;
  }

  /**
   * Get usageReports
   * @return usageReports
   */
  @javax.annotation.Nullable
  public Map<String, UsageReportSummary> getUsageReports() {
    return usageReports;
  }

  public void setUsageReports(@javax.annotation.Nullable Map<String, UsageReportSummary> usageReports) {
    this.usageReports = usageReports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllAnalyticsData allAnalyticsData = (AllAnalyticsData) o;
    return Objects.equals(this.analyticsData, allAnalyticsData.analyticsData) &&
        Objects.equals(this.certificatesExpiryData, allAnalyticsData.certificatesExpiryData) &&
        Objects.equals(this.clientsUsageReports, allAnalyticsData.clientsUsageReports) &&
        Objects.equals(this.dateUpdated, allAnalyticsData.dateUpdated) &&
        Objects.equals(this.usageReports, allAnalyticsData.usageReports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsData, certificatesExpiryData, clientsUsageReports, dateUpdated, usageReports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllAnalyticsData {\n");
    sb.append("    analyticsData: ").append(toIndentedString(analyticsData)).append("\n");
    sb.append("    certificatesExpiryData: ").append(toIndentedString(certificatesExpiryData)).append("\n");
    sb.append("    clientsUsageReports: ").append(toIndentedString(clientsUsageReports)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    usageReports: ").append(toIndentedString(usageReports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics_data");
    openapiFields.add("certificates_expiry_data");
    openapiFields.add("clients_usage_reports");
    openapiFields.add("date_updated");
    openapiFields.add("usage_reports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllAnalyticsData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllAnalyticsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllAnalyticsData is not found in the empty JSON string", AllAnalyticsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllAnalyticsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllAnalyticsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificates_expiry_data`
      if (jsonObj.get("certificates_expiry_data") != null && !jsonObj.get("certificates_expiry_data").isJsonNull()) {
        CertificateAnalyticAggregation.validateJsonElement(jsonObj.get("certificates_expiry_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllAnalyticsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllAnalyticsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllAnalyticsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllAnalyticsData.class));

       return (TypeAdapter<T>) new TypeAdapter<AllAnalyticsData>() {
           @Override
           public void write(JsonWriter out, AllAnalyticsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllAnalyticsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllAnalyticsData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllAnalyticsData
   * @throws IOException if the JSON string is invalid with respect to AllAnalyticsData
   */
  public static AllAnalyticsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllAnalyticsData.class);
  }

  /**
   * Convert an instance of AllAnalyticsData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

