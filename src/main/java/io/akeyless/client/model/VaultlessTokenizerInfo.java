/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.EmailTokenizerInfo;
import io.akeyless.client.model.RegexpTokenizerInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * VaultlessTokenizerInfo
 */

public class VaultlessTokenizerInfo {
  public static final String SERIALIZED_NAME_EMAIL_TOKENIZER_INFO = "email_tokenizer_info";
  @SerializedName(SERIALIZED_NAME_EMAIL_TOKENIZER_INFO)
  private EmailTokenizerInfo emailTokenizerInfo;

  public static final String SERIALIZED_NAME_KEY_NAME = "key_name";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_REGEXP_TOKENIZER_INFO = "regexp_tokenizer_info";
  @SerializedName(SERIALIZED_NAME_REGEXP_TOKENIZER_INFO)
  private RegexpTokenizerInfo regexpTokenizerInfo;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "template_type";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private String templateType;

  public static final String SERIALIZED_NAME_TWEAK = "tweak";
  @SerializedName(SERIALIZED_NAME_TWEAK)
  private String tweak;

  public static final String SERIALIZED_NAME_TWEAK_TYPE = "tweak_type";
  @SerializedName(SERIALIZED_NAME_TWEAK_TYPE)
  private String tweakType;


  public VaultlessTokenizerInfo emailTokenizerInfo(EmailTokenizerInfo emailTokenizerInfo) {
    
    this.emailTokenizerInfo = emailTokenizerInfo;
    return this;
  }

   /**
   * Get emailTokenizerInfo
   * @return emailTokenizerInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmailTokenizerInfo getEmailTokenizerInfo() {
    return emailTokenizerInfo;
  }


  public void setEmailTokenizerInfo(EmailTokenizerInfo emailTokenizerInfo) {
    this.emailTokenizerInfo = emailTokenizerInfo;
  }


  public VaultlessTokenizerInfo keyName(String keyName) {
    
    this.keyName = keyName;
    return this;
  }

   /**
   * Get keyName
   * @return keyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKeyName() {
    return keyName;
  }


  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public VaultlessTokenizerInfo regexpTokenizerInfo(RegexpTokenizerInfo regexpTokenizerInfo) {
    
    this.regexpTokenizerInfo = regexpTokenizerInfo;
    return this;
  }

   /**
   * Get regexpTokenizerInfo
   * @return regexpTokenizerInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RegexpTokenizerInfo getRegexpTokenizerInfo() {
    return regexpTokenizerInfo;
  }


  public void setRegexpTokenizerInfo(RegexpTokenizerInfo regexpTokenizerInfo) {
    this.regexpTokenizerInfo = regexpTokenizerInfo;
  }


  public VaultlessTokenizerInfo templateType(String templateType) {
    
    this.templateType = templateType;
    return this;
  }

   /**
   * Get templateType
   * @return templateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplateType() {
    return templateType;
  }


  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }


  public VaultlessTokenizerInfo tweak(String tweak) {
    
    this.tweak = tweak;
    return this;
  }

   /**
   * Tweak used in the case of internal tweak type
   * @return tweak
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tweak used in the case of internal tweak type")

  public String getTweak() {
    return tweak;
  }


  public void setTweak(String tweak) {
    this.tweak = tweak;
  }


  public VaultlessTokenizerInfo tweakType(String tweakType) {
    
    this.tweakType = tweakType;
    return this;
  }

   /**
   * Get tweakType
   * @return tweakType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTweakType() {
    return tweakType;
  }


  public void setTweakType(String tweakType) {
    this.tweakType = tweakType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VaultlessTokenizerInfo vaultlessTokenizerInfo = (VaultlessTokenizerInfo) o;
    return Objects.equals(this.emailTokenizerInfo, vaultlessTokenizerInfo.emailTokenizerInfo) &&
        Objects.equals(this.keyName, vaultlessTokenizerInfo.keyName) &&
        Objects.equals(this.regexpTokenizerInfo, vaultlessTokenizerInfo.regexpTokenizerInfo) &&
        Objects.equals(this.templateType, vaultlessTokenizerInfo.templateType) &&
        Objects.equals(this.tweak, vaultlessTokenizerInfo.tweak) &&
        Objects.equals(this.tweakType, vaultlessTokenizerInfo.tweakType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailTokenizerInfo, keyName, regexpTokenizerInfo, templateType, tweak, tweakType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VaultlessTokenizerInfo {\n");
    sb.append("    emailTokenizerInfo: ").append(toIndentedString(emailTokenizerInfo)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    regexpTokenizerInfo: ").append(toIndentedString(regexpTokenizerInfo)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    tweak: ").append(toIndentedString(tweak)).append("\n");
    sb.append("    tweakType: ").append(toIndentedString(tweakType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

