/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.EmailTokenizerInfo;
import io.akeyless.client.model.RegexpTokenizerInfo;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * VaultlessTokenizerInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class VaultlessTokenizerInfo {
  public static final String SERIALIZED_NAME_EMAIL_TOKENIZER_INFO = "email_tokenizer_info";
  @SerializedName(SERIALIZED_NAME_EMAIL_TOKENIZER_INFO)
  @javax.annotation.Nullable
  private EmailTokenizerInfo emailTokenizerInfo;

  public static final String SERIALIZED_NAME_KEY_NAME = "key_name";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  @javax.annotation.Nullable
  private String keyName;

  public static final String SERIALIZED_NAME_REGEXP_TOKENIZER_INFO = "regexp_tokenizer_info";
  @SerializedName(SERIALIZED_NAME_REGEXP_TOKENIZER_INFO)
  @javax.annotation.Nullable
  private RegexpTokenizerInfo regexpTokenizerInfo;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "template_type";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  @javax.annotation.Nullable
  private String templateType;

  public static final String SERIALIZED_NAME_TWEAK = "tweak";
  @SerializedName(SERIALIZED_NAME_TWEAK)
  @javax.annotation.Nullable
  private String tweak;

  public static final String SERIALIZED_NAME_TWEAK_TYPE = "tweak_type";
  @SerializedName(SERIALIZED_NAME_TWEAK_TYPE)
  @javax.annotation.Nullable
  private String tweakType;

  public VaultlessTokenizerInfo() {
  }

  public VaultlessTokenizerInfo emailTokenizerInfo(@javax.annotation.Nullable EmailTokenizerInfo emailTokenizerInfo) {
    this.emailTokenizerInfo = emailTokenizerInfo;
    return this;
  }

  /**
   * Get emailTokenizerInfo
   * @return emailTokenizerInfo
   */
  @javax.annotation.Nullable
  public EmailTokenizerInfo getEmailTokenizerInfo() {
    return emailTokenizerInfo;
  }

  public void setEmailTokenizerInfo(@javax.annotation.Nullable EmailTokenizerInfo emailTokenizerInfo) {
    this.emailTokenizerInfo = emailTokenizerInfo;
  }


  public VaultlessTokenizerInfo keyName(@javax.annotation.Nullable String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Get keyName
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(@javax.annotation.Nullable String keyName) {
    this.keyName = keyName;
  }


  public VaultlessTokenizerInfo regexpTokenizerInfo(@javax.annotation.Nullable RegexpTokenizerInfo regexpTokenizerInfo) {
    this.regexpTokenizerInfo = regexpTokenizerInfo;
    return this;
  }

  /**
   * Get regexpTokenizerInfo
   * @return regexpTokenizerInfo
   */
  @javax.annotation.Nullable
  public RegexpTokenizerInfo getRegexpTokenizerInfo() {
    return regexpTokenizerInfo;
  }

  public void setRegexpTokenizerInfo(@javax.annotation.Nullable RegexpTokenizerInfo regexpTokenizerInfo) {
    this.regexpTokenizerInfo = regexpTokenizerInfo;
  }


  public VaultlessTokenizerInfo templateType(@javax.annotation.Nullable String templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Get templateType
   * @return templateType
   */
  @javax.annotation.Nullable
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(@javax.annotation.Nullable String templateType) {
    this.templateType = templateType;
  }


  public VaultlessTokenizerInfo tweak(@javax.annotation.Nullable String tweak) {
    this.tweak = tweak;
    return this;
  }

  /**
   * Tweak used in the case of internal tweak type
   * @return tweak
   */
  @javax.annotation.Nullable
  public String getTweak() {
    return tweak;
  }

  public void setTweak(@javax.annotation.Nullable String tweak) {
    this.tweak = tweak;
  }


  public VaultlessTokenizerInfo tweakType(@javax.annotation.Nullable String tweakType) {
    this.tweakType = tweakType;
    return this;
  }

  /**
   * Get tweakType
   * @return tweakType
   */
  @javax.annotation.Nullable
  public String getTweakType() {
    return tweakType;
  }

  public void setTweakType(@javax.annotation.Nullable String tweakType) {
    this.tweakType = tweakType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VaultlessTokenizerInfo vaultlessTokenizerInfo = (VaultlessTokenizerInfo) o;
    return Objects.equals(this.emailTokenizerInfo, vaultlessTokenizerInfo.emailTokenizerInfo) &&
        Objects.equals(this.keyName, vaultlessTokenizerInfo.keyName) &&
        Objects.equals(this.regexpTokenizerInfo, vaultlessTokenizerInfo.regexpTokenizerInfo) &&
        Objects.equals(this.templateType, vaultlessTokenizerInfo.templateType) &&
        Objects.equals(this.tweak, vaultlessTokenizerInfo.tweak) &&
        Objects.equals(this.tweakType, vaultlessTokenizerInfo.tweakType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailTokenizerInfo, keyName, regexpTokenizerInfo, templateType, tweak, tweakType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VaultlessTokenizerInfo {\n");
    sb.append("    emailTokenizerInfo: ").append(toIndentedString(emailTokenizerInfo)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    regexpTokenizerInfo: ").append(toIndentedString(regexpTokenizerInfo)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    tweak: ").append(toIndentedString(tweak)).append("\n");
    sb.append("    tweakType: ").append(toIndentedString(tweakType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email_tokenizer_info");
    openapiFields.add("key_name");
    openapiFields.add("regexp_tokenizer_info");
    openapiFields.add("template_type");
    openapiFields.add("tweak");
    openapiFields.add("tweak_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VaultlessTokenizerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VaultlessTokenizerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VaultlessTokenizerInfo is not found in the empty JSON string", VaultlessTokenizerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VaultlessTokenizerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VaultlessTokenizerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `email_tokenizer_info`
      if (jsonObj.get("email_tokenizer_info") != null && !jsonObj.get("email_tokenizer_info").isJsonNull()) {
        EmailTokenizerInfo.validateJsonElement(jsonObj.get("email_tokenizer_info"));
      }
      if ((jsonObj.get("key_name") != null && !jsonObj.get("key_name").isJsonNull()) && !jsonObj.get("key_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_name").toString()));
      }
      // validate the optional field `regexp_tokenizer_info`
      if (jsonObj.get("regexp_tokenizer_info") != null && !jsonObj.get("regexp_tokenizer_info").isJsonNull()) {
        RegexpTokenizerInfo.validateJsonElement(jsonObj.get("regexp_tokenizer_info"));
      }
      if ((jsonObj.get("template_type") != null && !jsonObj.get("template_type").isJsonNull()) && !jsonObj.get("template_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_type").toString()));
      }
      if ((jsonObj.get("tweak") != null && !jsonObj.get("tweak").isJsonNull()) && !jsonObj.get("tweak").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tweak` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tweak").toString()));
      }
      if ((jsonObj.get("tweak_type") != null && !jsonObj.get("tweak_type").isJsonNull()) && !jsonObj.get("tweak_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tweak_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tweak_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VaultlessTokenizerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VaultlessTokenizerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VaultlessTokenizerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VaultlessTokenizerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VaultlessTokenizerInfo>() {
           @Override
           public void write(JsonWriter out, VaultlessTokenizerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VaultlessTokenizerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VaultlessTokenizerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VaultlessTokenizerInfo
   * @throws IOException if the JSON string is invalid with respect to VaultlessTokenizerInfo
   */
  public static VaultlessTokenizerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VaultlessTokenizerInfo.class);
  }

  /**
   * Convert an instance of VaultlessTokenizerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

