/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UpdateCertificateValue
 */

public class UpdateCertificateValue {
  public static final String SERIALIZED_NAME_CERTIFICATE_DATA = "certificate-data";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_DATA)
  private String certificateData;

  public static final String SERIALIZED_NAME_EXPIRATION_EVENT_IN = "expiration-event-in";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENT_IN)
  private List<String> expirationEventIn = null;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_KEY_DATA = "key-data";
  @SerializedName(SERIALIZED_NAME_KEY_DATA)
  private String keyData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;


  public UpdateCertificateValue certificateData(String certificateData) {
    
    this.certificateData = certificateData;
    return this;
  }

   /**
   * Content of the certificate PEM in a Base64 format.
   * @return certificateData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content of the certificate PEM in a Base64 format.")

  public String getCertificateData() {
    return certificateData;
  }


  public void setCertificateData(String certificateData) {
    this.certificateData = certificateData;
  }


  public UpdateCertificateValue expirationEventIn(List<String> expirationEventIn) {
    
    this.expirationEventIn = expirationEventIn;
    return this;
  }

  public UpdateCertificateValue addExpirationEventInItem(String expirationEventInItem) {
    if (this.expirationEventIn == null) {
      this.expirationEventIn = new ArrayList<String>();
    }
    this.expirationEventIn.add(expirationEventInItem);
    return this;
  }

   /**
   * How many days before the expiration of the certificate would you like to be notified.
   * @return expirationEventIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How many days before the expiration of the certificate would you like to be notified.")

  public List<String> getExpirationEventIn() {
    return expirationEventIn;
  }


  public void setExpirationEventIn(List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
  }


  public UpdateCertificateValue json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public UpdateCertificateValue key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The name of a key to use to encrypt the certificate&#39;s key (if empty, the account default protectionKey key will be used)
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of a key to use to encrypt the certificate's key (if empty, the account default protectionKey key will be used)")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public UpdateCertificateValue keyData(String keyData) {
    
    this.keyData = keyData;
    return this;
  }

   /**
   * Content of the certificate&#39;s private key PEM in a Base64 format.
   * @return keyData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content of the certificate's private key PEM in a Base64 format.")

  public String getKeyData() {
    return keyData;
  }


  public void setKeyData(String keyData) {
    this.keyData = keyData;
  }


  public UpdateCertificateValue name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Certificate name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Certificate name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UpdateCertificateValue token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public UpdateCertificateValue uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCertificateValue updateCertificateValue = (UpdateCertificateValue) o;
    return Objects.equals(this.certificateData, updateCertificateValue.certificateData) &&
        Objects.equals(this.expirationEventIn, updateCertificateValue.expirationEventIn) &&
        Objects.equals(this.json, updateCertificateValue.json) &&
        Objects.equals(this.key, updateCertificateValue.key) &&
        Objects.equals(this.keyData, updateCertificateValue.keyData) &&
        Objects.equals(this.name, updateCertificateValue.name) &&
        Objects.equals(this.token, updateCertificateValue.token) &&
        Objects.equals(this.uidToken, updateCertificateValue.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateData, expirationEventIn, json, key, keyData, name, token, uidToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCertificateValue {\n");
    sb.append("    certificateData: ").append(toIndentedString(certificateData)).append("\n");
    sb.append("    expirationEventIn: ").append(toIndentedString(expirationEventIn)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    keyData: ").append(toIndentedString(keyData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

