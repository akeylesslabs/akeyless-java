/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * gatewayCreateProducerGithub is a command that creates github producer
 */
@ApiModel(description = "gatewayCreateProducerGithub is a command that creates github producer")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayCreateProducerGithub {
  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  private String deleteProtection;

  public static final String SERIALIZED_NAME_GITHUB_APP_ID = "github-app-id";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_ID)
  private Long githubAppId;

  public static final String SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY = "github-app-private-key";
  @SerializedName(SERIALIZED_NAME_GITHUB_APP_PRIVATE_KEY)
  private String githubAppPrivateKey;

  public static final String SERIALIZED_NAME_GITHUB_BASE_URL = "github-base-url";
  @SerializedName(SERIALIZED_NAME_GITHUB_BASE_URL)
  private String githubBaseUrl = "https://api.github.com/";

  public static final String SERIALIZED_NAME_INSTALLATION_ID = "installation-id";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ID)
  private Long installationId;

  public static final String SERIALIZED_NAME_INSTALLATION_REPOSITORY = "installation-repository";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_REPOSITORY)
  private String installationRepository;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOKEN_PERMISSIONS = "token-permissions";
  @SerializedName(SERIALIZED_NAME_TOKEN_PERMISSIONS)
  private List<String> tokenPermissions = null;

  public static final String SERIALIZED_NAME_TOKEN_REPOSITORIES = "token-repositories";
  @SerializedName(SERIALIZED_NAME_TOKEN_REPOSITORIES)
  private List<String> tokenRepositories = null;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public GatewayCreateProducerGithub() { 
  }

  public GatewayCreateProducerGithub deleteProtection(String deleteProtection) {
    
    this.deleteProtection = deleteProtection;
    return this;
  }

   /**
   * Protection from accidental deletion of this item [true/false]
   * @return deleteProtection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Protection from accidental deletion of this item [true/false]")

  public String getDeleteProtection() {
    return deleteProtection;
  }


  public void setDeleteProtection(String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GatewayCreateProducerGithub githubAppId(Long githubAppId) {
    
    this.githubAppId = githubAppId;
    return this;
  }

   /**
   * Github app id
   * @return githubAppId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Github app id")

  public Long getGithubAppId() {
    return githubAppId;
  }


  public void setGithubAppId(Long githubAppId) {
    this.githubAppId = githubAppId;
  }


  public GatewayCreateProducerGithub githubAppPrivateKey(String githubAppPrivateKey) {
    
    this.githubAppPrivateKey = githubAppPrivateKey;
    return this;
  }

   /**
   * App private key
   * @return githubAppPrivateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "App private key")

  public String getGithubAppPrivateKey() {
    return githubAppPrivateKey;
  }


  public void setGithubAppPrivateKey(String githubAppPrivateKey) {
    this.githubAppPrivateKey = githubAppPrivateKey;
  }


  public GatewayCreateProducerGithub githubBaseUrl(String githubBaseUrl) {
    
    this.githubBaseUrl = githubBaseUrl;
    return this;
  }

   /**
   * Base URL
   * @return githubBaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base URL")

  public String getGithubBaseUrl() {
    return githubBaseUrl;
  }


  public void setGithubBaseUrl(String githubBaseUrl) {
    this.githubBaseUrl = githubBaseUrl;
  }


  public GatewayCreateProducerGithub installationId(Long installationId) {
    
    this.installationId = installationId;
    return this;
  }

   /**
   * Github app installation id
   * @return installationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Github app installation id")

  public Long getInstallationId() {
    return installationId;
  }


  public void setInstallationId(Long installationId) {
    this.installationId = installationId;
  }


  public GatewayCreateProducerGithub installationRepository(String installationRepository) {
    
    this.installationRepository = installationRepository;
    return this;
  }

   /**
   * Repository that the app installation has access to
   * @return installationRepository
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Repository that the app installation has access to")

  public String getInstallationRepository() {
    return installationRepository;
  }


  public void setInstallationRepository(String installationRepository) {
    this.installationRepository = installationRepository;
  }


  public GatewayCreateProducerGithub json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public GatewayCreateProducerGithub name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Producer name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Producer name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayCreateProducerGithub targetName(String targetName) {
    
    this.targetName = targetName;
    return this;
  }

   /**
   * Target name
   * @return targetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Target name")

  public String getTargetName() {
    return targetName;
  }


  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }


  public GatewayCreateProducerGithub token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayCreateProducerGithub tokenPermissions(List<String> tokenPermissions) {
    
    this.tokenPermissions = tokenPermissions;
    return this;
  }

  public GatewayCreateProducerGithub addTokenPermissionsItem(String tokenPermissionsItem) {
    if (this.tokenPermissions == null) {
      this.tokenPermissions = new ArrayList<String>();
    }
    this.tokenPermissions.add(tokenPermissionsItem);
    return this;
  }

   /**
   * Optional - installation token&#39;s allowed permissions
   * @return tokenPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional - installation token's allowed permissions")

  public List<String> getTokenPermissions() {
    return tokenPermissions;
  }


  public void setTokenPermissions(List<String> tokenPermissions) {
    this.tokenPermissions = tokenPermissions;
  }


  public GatewayCreateProducerGithub tokenRepositories(List<String> tokenRepositories) {
    
    this.tokenRepositories = tokenRepositories;
    return this;
  }

  public GatewayCreateProducerGithub addTokenRepositoriesItem(String tokenRepositoriesItem) {
    if (this.tokenRepositories == null) {
      this.tokenRepositories = new ArrayList<String>();
    }
    this.tokenRepositories.add(tokenRepositoriesItem);
    return this;
  }

   /**
   * Optional - installation token&#39;s allowed repositories
   * @return tokenRepositories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional - installation token's allowed repositories")

  public List<String> getTokenRepositories() {
    return tokenRepositories;
  }


  public void setTokenRepositories(List<String> tokenRepositories) {
    this.tokenRepositories = tokenRepositories;
  }


  public GatewayCreateProducerGithub uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerGithub gatewayCreateProducerGithub = (GatewayCreateProducerGithub) o;
    return Objects.equals(this.deleteProtection, gatewayCreateProducerGithub.deleteProtection) &&
        Objects.equals(this.githubAppId, gatewayCreateProducerGithub.githubAppId) &&
        Objects.equals(this.githubAppPrivateKey, gatewayCreateProducerGithub.githubAppPrivateKey) &&
        Objects.equals(this.githubBaseUrl, gatewayCreateProducerGithub.githubBaseUrl) &&
        Objects.equals(this.installationId, gatewayCreateProducerGithub.installationId) &&
        Objects.equals(this.installationRepository, gatewayCreateProducerGithub.installationRepository) &&
        Objects.equals(this.json, gatewayCreateProducerGithub.json) &&
        Objects.equals(this.name, gatewayCreateProducerGithub.name) &&
        Objects.equals(this.targetName, gatewayCreateProducerGithub.targetName) &&
        Objects.equals(this.token, gatewayCreateProducerGithub.token) &&
        Objects.equals(this.tokenPermissions, gatewayCreateProducerGithub.tokenPermissions) &&
        Objects.equals(this.tokenRepositories, gatewayCreateProducerGithub.tokenRepositories) &&
        Objects.equals(this.uidToken, gatewayCreateProducerGithub.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteProtection, githubAppId, githubAppPrivateKey, githubBaseUrl, installationId, installationRepository, json, name, targetName, token, tokenPermissions, tokenRepositories, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerGithub {\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    githubAppId: ").append(toIndentedString(githubAppId)).append("\n");
    sb.append("    githubAppPrivateKey: ").append(toIndentedString(githubAppPrivateKey)).append("\n");
    sb.append("    githubBaseUrl: ").append(toIndentedString(githubBaseUrl)).append("\n");
    sb.append("    installationId: ").append(toIndentedString(installationId)).append("\n");
    sb.append("    installationRepository: ").append(toIndentedString(installationRepository)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenPermissions: ").append(toIndentedString(tokenPermissions)).append("\n");
    sb.append("    tokenRepositories: ").append(toIndentedString(tokenRepositories)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

