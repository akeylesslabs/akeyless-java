/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UIDTokenDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UIDTokenDetails {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  @javax.annotation.Nullable
  private Map<String, UIDTokenDetails> children = new HashMap<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DENY_INHERITANCE = "deny_inheritance";
  @SerializedName(SERIALIZED_NAME_DENY_INHERITANCE)
  @javax.annotation.Nullable
  private Boolean denyInheritance;

  public static final String SERIALIZED_NAME_DENY_ROTATE = "deny_rotate";
  @SerializedName(SERIALIZED_NAME_DENY_ROTATE)
  @javax.annotation.Nullable
  private Boolean denyRotate;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  @javax.annotation.Nullable
  private Integer depth;

  public static final String SERIALIZED_NAME_EXPIRED_DATE = "expired_date";
  @SerializedName(SERIALIZED_NAME_EXPIRED_DATE)
  @javax.annotation.Nullable
  private String expiredDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LAST_ROTATE = "last_rotate";
  @SerializedName(SERIALIZED_NAME_LAST_ROTATE)
  @javax.annotation.Nullable
  private String lastRotate;

  public static final String SERIALIZED_NAME_REVOKED = "revoked";
  @SerializedName(SERIALIZED_NAME_REVOKED)
  @javax.annotation.Nullable
  private Boolean revoked;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Integer ttl;

  public UIDTokenDetails() {
  }

  public UIDTokenDetails children(@javax.annotation.Nullable Map<String, UIDTokenDetails> children) {
    this.children = children;
    return this;
  }

  public UIDTokenDetails putChildrenItem(String key, UIDTokenDetails childrenItem) {
    if (this.children == null) {
      this.children = new HashMap<>();
    }
    this.children.put(key, childrenItem);
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public Map<String, UIDTokenDetails> getChildren() {
    return children;
  }

  public void setChildren(@javax.annotation.Nullable Map<String, UIDTokenDetails> children) {
    this.children = children;
  }


  public UIDTokenDetails comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public UIDTokenDetails denyInheritance(@javax.annotation.Nullable Boolean denyInheritance) {
    this.denyInheritance = denyInheritance;
    return this;
  }

  /**
   * Get denyInheritance
   * @return denyInheritance
   */
  @javax.annotation.Nullable
  public Boolean getDenyInheritance() {
    return denyInheritance;
  }

  public void setDenyInheritance(@javax.annotation.Nullable Boolean denyInheritance) {
    this.denyInheritance = denyInheritance;
  }


  public UIDTokenDetails denyRotate(@javax.annotation.Nullable Boolean denyRotate) {
    this.denyRotate = denyRotate;
    return this;
  }

  /**
   * Get denyRotate
   * @return denyRotate
   */
  @javax.annotation.Nullable
  public Boolean getDenyRotate() {
    return denyRotate;
  }

  public void setDenyRotate(@javax.annotation.Nullable Boolean denyRotate) {
    this.denyRotate = denyRotate;
  }


  public UIDTokenDetails depth(@javax.annotation.Nullable Integer depth) {
    this.depth = depth;
    return this;
  }

  /**
   * Get depth
   * @return depth
   */
  @javax.annotation.Nullable
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(@javax.annotation.Nullable Integer depth) {
    this.depth = depth;
  }


  public UIDTokenDetails expiredDate(@javax.annotation.Nullable String expiredDate) {
    this.expiredDate = expiredDate;
    return this;
  }

  /**
   * Get expiredDate
   * @return expiredDate
   */
  @javax.annotation.Nullable
  public String getExpiredDate() {
    return expiredDate;
  }

  public void setExpiredDate(@javax.annotation.Nullable String expiredDate) {
    this.expiredDate = expiredDate;
  }


  public UIDTokenDetails id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public UIDTokenDetails lastRotate(@javax.annotation.Nullable String lastRotate) {
    this.lastRotate = lastRotate;
    return this;
  }

  /**
   * Get lastRotate
   * @return lastRotate
   */
  @javax.annotation.Nullable
  public String getLastRotate() {
    return lastRotate;
  }

  public void setLastRotate(@javax.annotation.Nullable String lastRotate) {
    this.lastRotate = lastRotate;
  }


  public UIDTokenDetails revoked(@javax.annotation.Nullable Boolean revoked) {
    this.revoked = revoked;
    return this;
  }

  /**
   * Get revoked
   * @return revoked
   */
  @javax.annotation.Nullable
  public Boolean getRevoked() {
    return revoked;
  }

  public void setRevoked(@javax.annotation.Nullable Boolean revoked) {
    this.revoked = revoked;
  }


  public UIDTokenDetails ttl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UIDTokenDetails uiDTokenDetails = (UIDTokenDetails) o;
    return Objects.equals(this.children, uiDTokenDetails.children) &&
        Objects.equals(this.comment, uiDTokenDetails.comment) &&
        Objects.equals(this.denyInheritance, uiDTokenDetails.denyInheritance) &&
        Objects.equals(this.denyRotate, uiDTokenDetails.denyRotate) &&
        Objects.equals(this.depth, uiDTokenDetails.depth) &&
        Objects.equals(this.expiredDate, uiDTokenDetails.expiredDate) &&
        Objects.equals(this.id, uiDTokenDetails.id) &&
        Objects.equals(this.lastRotate, uiDTokenDetails.lastRotate) &&
        Objects.equals(this.revoked, uiDTokenDetails.revoked) &&
        Objects.equals(this.ttl, uiDTokenDetails.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, comment, denyInheritance, denyRotate, depth, expiredDate, id, lastRotate, revoked, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UIDTokenDetails {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    denyInheritance: ").append(toIndentedString(denyInheritance)).append("\n");
    sb.append("    denyRotate: ").append(toIndentedString(denyRotate)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    expiredDate: ").append(toIndentedString(expiredDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastRotate: ").append(toIndentedString(lastRotate)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("comment");
    openapiFields.add("deny_inheritance");
    openapiFields.add("deny_rotate");
    openapiFields.add("depth");
    openapiFields.add("expired_date");
    openapiFields.add("id");
    openapiFields.add("last_rotate");
    openapiFields.add("revoked");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UIDTokenDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UIDTokenDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UIDTokenDetails is not found in the empty JSON string", UIDTokenDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UIDTokenDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UIDTokenDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("expired_date") != null && !jsonObj.get("expired_date").isJsonNull()) && !jsonObj.get("expired_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expired_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expired_date").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_rotate") != null && !jsonObj.get("last_rotate").isJsonNull()) && !jsonObj.get("last_rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_rotate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UIDTokenDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UIDTokenDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UIDTokenDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UIDTokenDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UIDTokenDetails>() {
           @Override
           public void write(JsonWriter out, UIDTokenDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UIDTokenDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UIDTokenDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UIDTokenDetails
   * @throws IOException if the JSON string is invalid with respect to UIDTokenDetails
   */
  public static UIDTokenDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UIDTokenDetails.class);
  }

  /**
   * Convert an instance of UIDTokenDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

