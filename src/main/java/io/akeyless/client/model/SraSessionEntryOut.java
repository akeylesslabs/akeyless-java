/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.GatewayNameInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SraSessionEntryOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SraSessionEntryOut {
  public static final String SERIALIZED_NAME_ACCESS_ID = "access_id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  @javax.annotation.Nullable
  private String accessId;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "client_type";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  @javax.annotation.Nullable
  private String clientType;

  public static final String SERIALIZED_NAME_CLUSTER_UNIQUE_ID = "cluster_unique_id";
  @SerializedName(SERIALIZED_NAME_CLUSTER_UNIQUE_ID)
  @javax.annotation.Nullable
  private Long clusterUniqueId;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connection_type";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  @javax.annotation.Nullable
  private String connectionType;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR_MSG = "error_msg";
  @SerializedName(SERIALIZED_NAME_ERROR_MSG)
  @javax.annotation.Nullable
  private String errorMsg;

  public static final String SERIALIZED_NAME_GATEWAY_INFO = "gateway_info";
  @SerializedName(SERIALIZED_NAME_GATEWAY_INFO)
  @javax.annotation.Nullable
  private GatewayNameInfo gatewayInfo;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instance_id";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  @javax.annotation.Nullable
  private String instanceId;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secret_name";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  @javax.annotation.Nullable
  private String secretName;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  @javax.annotation.Nullable
  private String sessionId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_TARGET_HOST = "target_host";
  @SerializedName(SERIALIZED_NAME_TARGET_HOST)
  @javax.annotation.Nullable
  private String targetHost;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private String ttl;

  public static final String SERIALIZED_NAME_USER_IDENTIFIER = "user_identifier";
  @SerializedName(SERIALIZED_NAME_USER_IDENTIFIER)
  @javax.annotation.Nullable
  private String userIdentifier;

  public SraSessionEntryOut() {
  }

  public SraSessionEntryOut accessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * Get accessId
   * @return accessId
   */
  @javax.annotation.Nullable
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
  }


  public SraSessionEntryOut clientType(@javax.annotation.Nullable String clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * Get clientType
   * @return clientType
   */
  @javax.annotation.Nullable
  public String getClientType() {
    return clientType;
  }

  public void setClientType(@javax.annotation.Nullable String clientType) {
    this.clientType = clientType;
  }


  public SraSessionEntryOut clusterUniqueId(@javax.annotation.Nullable Long clusterUniqueId) {
    this.clusterUniqueId = clusterUniqueId;
    return this;
  }

  /**
   * Get clusterUniqueId
   * @return clusterUniqueId
   */
  @javax.annotation.Nullable
  public Long getClusterUniqueId() {
    return clusterUniqueId;
  }

  public void setClusterUniqueId(@javax.annotation.Nullable Long clusterUniqueId) {
    this.clusterUniqueId = clusterUniqueId;
  }


  public SraSessionEntryOut connectionType(@javax.annotation.Nullable String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(@javax.annotation.Nullable String connectionType) {
    this.connectionType = connectionType;
  }


  public SraSessionEntryOut endTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nullable OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public SraSessionEntryOut errorMsg(@javax.annotation.Nullable String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  /**
   * Get errorMsg
   * @return errorMsg
   */
  @javax.annotation.Nullable
  public String getErrorMsg() {
    return errorMsg;
  }

  public void setErrorMsg(@javax.annotation.Nullable String errorMsg) {
    this.errorMsg = errorMsg;
  }


  public SraSessionEntryOut gatewayInfo(@javax.annotation.Nullable GatewayNameInfo gatewayInfo) {
    this.gatewayInfo = gatewayInfo;
    return this;
  }

  /**
   * Get gatewayInfo
   * @return gatewayInfo
   */
  @javax.annotation.Nullable
  public GatewayNameInfo getGatewayInfo() {
    return gatewayInfo;
  }

  public void setGatewayInfo(@javax.annotation.Nullable GatewayNameInfo gatewayInfo) {
    this.gatewayInfo = gatewayInfo;
  }


  public SraSessionEntryOut instanceId(@javax.annotation.Nullable String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(@javax.annotation.Nullable String instanceId) {
    this.instanceId = instanceId;
  }


  public SraSessionEntryOut secretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
    return this;
  }

  /**
   * Get secretName
   * @return secretName
   */
  @javax.annotation.Nullable
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
  }


  public SraSessionEntryOut sessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(@javax.annotation.Nullable String sessionId) {
    this.sessionId = sessionId;
  }


  public SraSessionEntryOut startTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public SraSessionEntryOut status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public SraSessionEntryOut targetHost(@javax.annotation.Nullable String targetHost) {
    this.targetHost = targetHost;
    return this;
  }

  /**
   * Get targetHost
   * @return targetHost
   */
  @javax.annotation.Nullable
  public String getTargetHost() {
    return targetHost;
  }

  public void setTargetHost(@javax.annotation.Nullable String targetHost) {
    this.targetHost = targetHost;
  }


  public SraSessionEntryOut ttl(@javax.annotation.Nullable String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable String ttl) {
    this.ttl = ttl;
  }


  public SraSessionEntryOut userIdentifier(@javax.annotation.Nullable String userIdentifier) {
    this.userIdentifier = userIdentifier;
    return this;
  }

  /**
   * Get userIdentifier
   * @return userIdentifier
   */
  @javax.annotation.Nullable
  public String getUserIdentifier() {
    return userIdentifier;
  }

  public void setUserIdentifier(@javax.annotation.Nullable String userIdentifier) {
    this.userIdentifier = userIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SraSessionEntryOut sraSessionEntryOut = (SraSessionEntryOut) o;
    return Objects.equals(this.accessId, sraSessionEntryOut.accessId) &&
        Objects.equals(this.clientType, sraSessionEntryOut.clientType) &&
        Objects.equals(this.clusterUniqueId, sraSessionEntryOut.clusterUniqueId) &&
        Objects.equals(this.connectionType, sraSessionEntryOut.connectionType) &&
        Objects.equals(this.endTime, sraSessionEntryOut.endTime) &&
        Objects.equals(this.errorMsg, sraSessionEntryOut.errorMsg) &&
        Objects.equals(this.gatewayInfo, sraSessionEntryOut.gatewayInfo) &&
        Objects.equals(this.instanceId, sraSessionEntryOut.instanceId) &&
        Objects.equals(this.secretName, sraSessionEntryOut.secretName) &&
        Objects.equals(this.sessionId, sraSessionEntryOut.sessionId) &&
        Objects.equals(this.startTime, sraSessionEntryOut.startTime) &&
        Objects.equals(this.status, sraSessionEntryOut.status) &&
        Objects.equals(this.targetHost, sraSessionEntryOut.targetHost) &&
        Objects.equals(this.ttl, sraSessionEntryOut.ttl) &&
        Objects.equals(this.userIdentifier, sraSessionEntryOut.userIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, clientType, clusterUniqueId, connectionType, endTime, errorMsg, gatewayInfo, instanceId, secretName, sessionId, startTime, status, targetHost, ttl, userIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SraSessionEntryOut {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clusterUniqueId: ").append(toIndentedString(clusterUniqueId)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errorMsg: ").append(toIndentedString(errorMsg)).append("\n");
    sb.append("    gatewayInfo: ").append(toIndentedString(gatewayInfo)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetHost: ").append(toIndentedString(targetHost)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    userIdentifier: ").append(toIndentedString(userIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_id");
    openapiFields.add("client_type");
    openapiFields.add("cluster_unique_id");
    openapiFields.add("connection_type");
    openapiFields.add("end_time");
    openapiFields.add("error_msg");
    openapiFields.add("gateway_info");
    openapiFields.add("instance_id");
    openapiFields.add("secret_name");
    openapiFields.add("session_id");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("target_host");
    openapiFields.add("ttl");
    openapiFields.add("user_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SraSessionEntryOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SraSessionEntryOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SraSessionEntryOut is not found in the empty JSON string", SraSessionEntryOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SraSessionEntryOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SraSessionEntryOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_id") != null && !jsonObj.get("access_id").isJsonNull()) && !jsonObj.get("access_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_id").toString()));
      }
      if ((jsonObj.get("client_type") != null && !jsonObj.get("client_type").isJsonNull()) && !jsonObj.get("client_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_type").toString()));
      }
      if ((jsonObj.get("connection_type") != null && !jsonObj.get("connection_type").isJsonNull()) && !jsonObj.get("connection_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_type").toString()));
      }
      if ((jsonObj.get("error_msg") != null && !jsonObj.get("error_msg").isJsonNull()) && !jsonObj.get("error_msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_msg").toString()));
      }
      // validate the optional field `gateway_info`
      if (jsonObj.get("gateway_info") != null && !jsonObj.get("gateway_info").isJsonNull()) {
        GatewayNameInfo.validateJsonElement(jsonObj.get("gateway_info"));
      }
      if ((jsonObj.get("instance_id") != null && !jsonObj.get("instance_id").isJsonNull()) && !jsonObj.get("instance_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance_id").toString()));
      }
      if ((jsonObj.get("secret_name") != null && !jsonObj.get("secret_name").isJsonNull()) && !jsonObj.get("secret_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_name").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("target_host") != null && !jsonObj.get("target_host").isJsonNull()) && !jsonObj.get("target_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_host").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("user_identifier") != null && !jsonObj.get("user_identifier").isJsonNull()) && !jsonObj.get("user_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SraSessionEntryOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SraSessionEntryOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SraSessionEntryOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SraSessionEntryOut.class));

       return (TypeAdapter<T>) new TypeAdapter<SraSessionEntryOut>() {
           @Override
           public void write(JsonWriter out, SraSessionEntryOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SraSessionEntryOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SraSessionEntryOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SraSessionEntryOut
   * @throws IOException if the JSON string is invalid with respect to SraSessionEntryOut
   */
  public static SraSessionEntryOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SraSessionEntryOut.class);
  }

  /**
   * Convert an instance of SraSessionEntryOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

