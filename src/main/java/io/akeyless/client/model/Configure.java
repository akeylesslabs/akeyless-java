/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * Configure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Configure {
  public static final String SERIALIZED_NAME_ACCESS_ID = "access-id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  @javax.annotation.Nullable
  private String accessId;

  public static final String SERIALIZED_NAME_ACCESS_KEY = "access-key";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  @javax.annotation.Nullable
  private String accessKey;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access-type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nullable
  private String accessType = "access_key";

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account-id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_ADMIN_EMAIL = "admin-email";
  @SerializedName(SERIALIZED_NAME_ADMIN_EMAIL)
  @javax.annotation.Nullable
  private String adminEmail;

  public static final String SERIALIZED_NAME_ADMIN_PASSWORD = "admin-password";
  @SerializedName(SERIALIZED_NAME_ADMIN_PASSWORD)
  @javax.annotation.Nullable
  private String adminPassword;

  public static final String SERIALIZED_NAME_AZURE_AD_OBJECT_ID = "azure-ad-object-id";
  @SerializedName(SERIALIZED_NAME_AZURE_AD_OBJECT_ID)
  @javax.annotation.Nullable
  private String azureAdObjectId;

  public static final String SERIALIZED_NAME_CERT_DATA = "cert-data";
  @SerializedName(SERIALIZED_NAME_CERT_DATA)
  @javax.annotation.Nullable
  private String certData;

  public static final String SERIALIZED_NAME_CERT_ISSUER_NAME = "cert-issuer-name";
  @SerializedName(SERIALIZED_NAME_CERT_ISSUER_NAME)
  @javax.annotation.Nullable
  private String certIssuerName;

  public static final String SERIALIZED_NAME_CERT_USERNAME = "cert-username";
  @SerializedName(SERIALIZED_NAME_CERT_USERNAME)
  @javax.annotation.Nullable
  private String certUsername;

  public static final String SERIALIZED_NAME_DEFAULT_LOCATION_PREFIX = "default-location-prefix";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOCATION_PREFIX)
  @javax.annotation.Nullable
  private String defaultLocationPrefix;

  public static final String SERIALIZED_NAME_DISABLE_PAFXFAST = "disable-pafxfast";
  @SerializedName(SERIALIZED_NAME_DISABLE_PAFXFAST)
  @javax.annotation.Nullable
  private String disablePafxfast;

  public static final String SERIALIZED_NAME_GATEWAY_SPN = "gateway-spn";
  @SerializedName(SERIALIZED_NAME_GATEWAY_SPN)
  @javax.annotation.Nullable
  private String gatewaySpn;

  public static final String SERIALIZED_NAME_GCP_AUDIENCE = "gcp-audience";
  @SerializedName(SERIALIZED_NAME_GCP_AUDIENCE)
  @javax.annotation.Nullable
  private String gcpAudience = "akeyless.io";

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_K8S_AUTH_CONFIG_NAME = "k8s-auth-config-name";
  @SerializedName(SERIALIZED_NAME_K8S_AUTH_CONFIG_NAME)
  @javax.annotation.Nullable
  private String k8sAuthConfigName;

  public static final String SERIALIZED_NAME_KERBEROS_TOKEN = "kerberos-token";
  @SerializedName(SERIALIZED_NAME_KERBEROS_TOKEN)
  @javax.annotation.Nullable
  private String kerberosToken;

  public static final String SERIALIZED_NAME_KERBEROS_USERNAME = "kerberos-username";
  @SerializedName(SERIALIZED_NAME_KERBEROS_USERNAME)
  @javax.annotation.Nullable
  private String kerberosUsername;

  public static final String SERIALIZED_NAME_KEY_DATA = "key-data";
  @SerializedName(SERIALIZED_NAME_KEY_DATA)
  @javax.annotation.Nullable
  private String keyData;

  public static final String SERIALIZED_NAME_KEYTAB_DATA = "keytab-data";
  @SerializedName(SERIALIZED_NAME_KEYTAB_DATA)
  @javax.annotation.Nullable
  private String keytabData;

  public static final String SERIALIZED_NAME_KRB5_CONF_DATA = "krb5-conf-data";
  @SerializedName(SERIALIZED_NAME_KRB5_CONF_DATA)
  @javax.annotation.Nullable
  private String krb5ConfData;

  public static final String SERIALIZED_NAME_LEGACY_SIGNING_ALG_NAME = "legacy-signing-alg-name";
  @SerializedName(SERIALIZED_NAME_LEGACY_SIGNING_ALG_NAME)
  @javax.annotation.Nullable
  private Boolean legacySigningAlgName;

  public static final String SERIALIZED_NAME_OCI_AUTH_TYPE = "oci-auth-type";
  @SerializedName(SERIALIZED_NAME_OCI_AUTH_TYPE)
  @javax.annotation.Nullable
  private String ociAuthType = "apikey";

  public static final String SERIALIZED_NAME_OCI_GROUP_OCID = "oci-group-ocid";
  @SerializedName(SERIALIZED_NAME_OCI_GROUP_OCID)
  @javax.annotation.Nullable
  private List<String> ociGroupOcid = new ArrayList<>();

  public Configure() {
  }

  public Configure accessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * Access ID
   * @return accessId
   */
  @javax.annotation.Nullable
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
  }


  public Configure accessKey(@javax.annotation.Nullable String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Access Key
   * @return accessKey
   */
  @javax.annotation.Nullable
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(@javax.annotation.Nullable String accessKey) {
    this.accessKey = accessKey;
  }


  public Configure accessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Access Type (access_key/password/azure_ad/saml/oidc/aws_iam/gcp/k8s/cert)
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
  }


  public Configure accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account id (relevant only for access-type&#x3D;password where the email address is associated with more than one account)
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public Configure adminEmail(@javax.annotation.Nullable String adminEmail) {
    this.adminEmail = adminEmail;
    return this;
  }

  /**
   * Email (relevant only for access-type&#x3D;password)
   * @return adminEmail
   */
  @javax.annotation.Nullable
  public String getAdminEmail() {
    return adminEmail;
  }

  public void setAdminEmail(@javax.annotation.Nullable String adminEmail) {
    this.adminEmail = adminEmail;
  }


  public Configure adminPassword(@javax.annotation.Nullable String adminPassword) {
    this.adminPassword = adminPassword;
    return this;
  }

  /**
   * Password (relevant only for access-type&#x3D;password)
   * @return adminPassword
   */
  @javax.annotation.Nullable
  public String getAdminPassword() {
    return adminPassword;
  }

  public void setAdminPassword(@javax.annotation.Nullable String adminPassword) {
    this.adminPassword = adminPassword;
  }


  public Configure azureAdObjectId(@javax.annotation.Nullable String azureAdObjectId) {
    this.azureAdObjectId = azureAdObjectId;
    return this;
  }

  /**
   * Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)
   * @return azureAdObjectId
   */
  @javax.annotation.Nullable
  public String getAzureAdObjectId() {
    return azureAdObjectId;
  }

  public void setAzureAdObjectId(@javax.annotation.Nullable String azureAdObjectId) {
    this.azureAdObjectId = azureAdObjectId;
  }


  public Configure certData(@javax.annotation.Nullable String certData) {
    this.certData = certData;
    return this;
  }

  /**
   * Certificate data encoded in base64. Used if file was not provided. (relevant only for access-type&#x3D;cert in Curl Context)
   * @return certData
   */
  @javax.annotation.Nullable
  public String getCertData() {
    return certData;
  }

  public void setCertData(@javax.annotation.Nullable String certData) {
    this.certData = certData;
  }


  public Configure certIssuerName(@javax.annotation.Nullable String certIssuerName) {
    this.certIssuerName = certIssuerName;
    return this;
  }

  /**
   * Certificate Issuer Name
   * @return certIssuerName
   */
  @javax.annotation.Nullable
  public String getCertIssuerName() {
    return certIssuerName;
  }

  public void setCertIssuerName(@javax.annotation.Nullable String certIssuerName) {
    this.certIssuerName = certIssuerName;
  }


  public Configure certUsername(@javax.annotation.Nullable String certUsername) {
    this.certUsername = certUsername;
    return this;
  }

  /**
   * The username to sign in the SSH certificate (use a comma-separated list for more than one username)
   * @return certUsername
   */
  @javax.annotation.Nullable
  public String getCertUsername() {
    return certUsername;
  }

  public void setCertUsername(@javax.annotation.Nullable String certUsername) {
    this.certUsername = certUsername;
  }


  public Configure defaultLocationPrefix(@javax.annotation.Nullable String defaultLocationPrefix) {
    this.defaultLocationPrefix = defaultLocationPrefix;
    return this;
  }

  /**
   * Default path prefix for name of items, targets and auth methods
   * @return defaultLocationPrefix
   */
  @javax.annotation.Nullable
  public String getDefaultLocationPrefix() {
    return defaultLocationPrefix;
  }

  public void setDefaultLocationPrefix(@javax.annotation.Nullable String defaultLocationPrefix) {
    this.defaultLocationPrefix = defaultLocationPrefix;
  }


  public Configure disablePafxfast(@javax.annotation.Nullable String disablePafxfast) {
    this.disablePafxfast = disablePafxfast;
    return this;
  }

  /**
   * Disable the FAST negotiation in the Kerberos authentication method
   * @return disablePafxfast
   */
  @javax.annotation.Nullable
  public String getDisablePafxfast() {
    return disablePafxfast;
  }

  public void setDisablePafxfast(@javax.annotation.Nullable String disablePafxfast) {
    this.disablePafxfast = disablePafxfast;
  }


  public Configure gatewaySpn(@javax.annotation.Nullable String gatewaySpn) {
    this.gatewaySpn = gatewaySpn;
    return this;
  }

  /**
   * The service principal name of the gateway as registered in LDAP (i.e., HTTP/gateway)
   * @return gatewaySpn
   */
  @javax.annotation.Nullable
  public String getGatewaySpn() {
    return gatewaySpn;
  }

  public void setGatewaySpn(@javax.annotation.Nullable String gatewaySpn) {
    this.gatewaySpn = gatewaySpn;
  }


  public Configure gcpAudience(@javax.annotation.Nullable String gcpAudience) {
    this.gcpAudience = gcpAudience;
    return this;
  }

  /**
   * GCP JWT audience
   * @return gcpAudience
   */
  @javax.annotation.Nullable
  public String getGcpAudience() {
    return gcpAudience;
  }

  public void setGcpAudience(@javax.annotation.Nullable String gcpAudience) {
    this.gcpAudience = gcpAudience;
  }


  public Configure json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public Configure k8sAuthConfigName(@javax.annotation.Nullable String k8sAuthConfigName) {
    this.k8sAuthConfigName = k8sAuthConfigName;
    return this;
  }

  /**
   * The K8S Auth config name (relevant only for access-type&#x3D;k8s)
   * @return k8sAuthConfigName
   */
  @javax.annotation.Nullable
  public String getK8sAuthConfigName() {
    return k8sAuthConfigName;
  }

  public void setK8sAuthConfigName(@javax.annotation.Nullable String k8sAuthConfigName) {
    this.k8sAuthConfigName = k8sAuthConfigName;
  }


  public Configure kerberosToken(@javax.annotation.Nullable String kerberosToken) {
    this.kerberosToken = kerberosToken;
    return this;
  }

  /**
   * KerberosToken represents a Kerberos token generated for the gateway SPN (Service Principal Name).
   * @return kerberosToken
   */
  @javax.annotation.Nullable
  public String getKerberosToken() {
    return kerberosToken;
  }

  public void setKerberosToken(@javax.annotation.Nullable String kerberosToken) {
    this.kerberosToken = kerberosToken;
  }


  public Configure kerberosUsername(@javax.annotation.Nullable String kerberosUsername) {
    this.kerberosUsername = kerberosUsername;
    return this;
  }

  /**
   * TThe username for the entry within the keytab to authenticate via Kerberos
   * @return kerberosUsername
   */
  @javax.annotation.Nullable
  public String getKerberosUsername() {
    return kerberosUsername;
  }

  public void setKerberosUsername(@javax.annotation.Nullable String kerberosUsername) {
    this.kerberosUsername = kerberosUsername;
  }


  public Configure keyData(@javax.annotation.Nullable String keyData) {
    this.keyData = keyData;
    return this;
  }

  /**
   * Private key data encoded in base64. Used if file was not provided.(relevant only for access-type&#x3D;cert in Curl Context)
   * @return keyData
   */
  @javax.annotation.Nullable
  public String getKeyData() {
    return keyData;
  }

  public void setKeyData(@javax.annotation.Nullable String keyData) {
    this.keyData = keyData;
  }


  public Configure keytabData(@javax.annotation.Nullable String keytabData) {
    this.keytabData = keytabData;
    return this;
  }

  /**
   * Base64-encoded content of a valid keytab file, containing the service account&#39;s entry.
   * @return keytabData
   */
  @javax.annotation.Nullable
  public String getKeytabData() {
    return keytabData;
  }

  public void setKeytabData(@javax.annotation.Nullable String keytabData) {
    this.keytabData = keytabData;
  }


  public Configure krb5ConfData(@javax.annotation.Nullable String krb5ConfData) {
    this.krb5ConfData = krb5ConfData;
    return this;
  }

  /**
   * Base64-encoded content of a valid krb5.conf file, specifying the settings and parameters required for Kerberos authentication.
   * @return krb5ConfData
   */
  @javax.annotation.Nullable
  public String getKrb5ConfData() {
    return krb5ConfData;
  }

  public void setKrb5ConfData(@javax.annotation.Nullable String krb5ConfData) {
    this.krb5ConfData = krb5ConfData;
  }


  public Configure legacySigningAlgName(@javax.annotation.Nullable Boolean legacySigningAlgName) {
    this.legacySigningAlgName = legacySigningAlgName;
    return this;
  }

  /**
   * Set this option to output legacy (&#39;ssh-rsa-cert-v01@openssh.com&#39;) signing algorithm name in the certificate.
   * @return legacySigningAlgName
   */
  @javax.annotation.Nullable
  public Boolean getLegacySigningAlgName() {
    return legacySigningAlgName;
  }

  public void setLegacySigningAlgName(@javax.annotation.Nullable Boolean legacySigningAlgName) {
    this.legacySigningAlgName = legacySigningAlgName;
  }


  public Configure ociAuthType(@javax.annotation.Nullable String ociAuthType) {
    this.ociAuthType = ociAuthType;
    return this;
  }

  /**
   * The type of the OCI configuration to use [instance/apikey/resource] (relevant only for access-type&#x3D;oci)
   * @return ociAuthType
   */
  @javax.annotation.Nullable
  public String getOciAuthType() {
    return ociAuthType;
  }

  public void setOciAuthType(@javax.annotation.Nullable String ociAuthType) {
    this.ociAuthType = ociAuthType;
  }


  public Configure ociGroupOcid(@javax.annotation.Nullable List<String> ociGroupOcid) {
    this.ociGroupOcid = ociGroupOcid;
    return this;
  }

  public Configure addOciGroupOcidItem(String ociGroupOcidItem) {
    if (this.ociGroupOcid == null) {
      this.ociGroupOcid = new ArrayList<>();
    }
    this.ociGroupOcid.add(ociGroupOcidItem);
    return this;
  }

  /**
   * A list of Oracle Cloud IDs groups (relevant only for access-type&#x3D;oci)
   * @return ociGroupOcid
   */
  @javax.annotation.Nullable
  public List<String> getOciGroupOcid() {
    return ociGroupOcid;
  }

  public void setOciGroupOcid(@javax.annotation.Nullable List<String> ociGroupOcid) {
    this.ociGroupOcid = ociGroupOcid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Configure configure = (Configure) o;
    return Objects.equals(this.accessId, configure.accessId) &&
        Objects.equals(this.accessKey, configure.accessKey) &&
        Objects.equals(this.accessType, configure.accessType) &&
        Objects.equals(this.accountId, configure.accountId) &&
        Objects.equals(this.adminEmail, configure.adminEmail) &&
        Objects.equals(this.adminPassword, configure.adminPassword) &&
        Objects.equals(this.azureAdObjectId, configure.azureAdObjectId) &&
        Objects.equals(this.certData, configure.certData) &&
        Objects.equals(this.certIssuerName, configure.certIssuerName) &&
        Objects.equals(this.certUsername, configure.certUsername) &&
        Objects.equals(this.defaultLocationPrefix, configure.defaultLocationPrefix) &&
        Objects.equals(this.disablePafxfast, configure.disablePafxfast) &&
        Objects.equals(this.gatewaySpn, configure.gatewaySpn) &&
        Objects.equals(this.gcpAudience, configure.gcpAudience) &&
        Objects.equals(this.json, configure.json) &&
        Objects.equals(this.k8sAuthConfigName, configure.k8sAuthConfigName) &&
        Objects.equals(this.kerberosToken, configure.kerberosToken) &&
        Objects.equals(this.kerberosUsername, configure.kerberosUsername) &&
        Objects.equals(this.keyData, configure.keyData) &&
        Objects.equals(this.keytabData, configure.keytabData) &&
        Objects.equals(this.krb5ConfData, configure.krb5ConfData) &&
        Objects.equals(this.legacySigningAlgName, configure.legacySigningAlgName) &&
        Objects.equals(this.ociAuthType, configure.ociAuthType) &&
        Objects.equals(this.ociGroupOcid, configure.ociGroupOcid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, accessKey, accessType, accountId, adminEmail, adminPassword, azureAdObjectId, certData, certIssuerName, certUsername, defaultLocationPrefix, disablePafxfast, gatewaySpn, gcpAudience, json, k8sAuthConfigName, kerberosToken, kerberosUsername, keyData, keytabData, krb5ConfData, legacySigningAlgName, ociAuthType, ociGroupOcid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Configure {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adminEmail: ").append(toIndentedString(adminEmail)).append("\n");
    sb.append("    adminPassword: ").append(toIndentedString(adminPassword)).append("\n");
    sb.append("    azureAdObjectId: ").append(toIndentedString(azureAdObjectId)).append("\n");
    sb.append("    certData: ").append(toIndentedString(certData)).append("\n");
    sb.append("    certIssuerName: ").append(toIndentedString(certIssuerName)).append("\n");
    sb.append("    certUsername: ").append(toIndentedString(certUsername)).append("\n");
    sb.append("    defaultLocationPrefix: ").append(toIndentedString(defaultLocationPrefix)).append("\n");
    sb.append("    disablePafxfast: ").append(toIndentedString(disablePafxfast)).append("\n");
    sb.append("    gatewaySpn: ").append(toIndentedString(gatewaySpn)).append("\n");
    sb.append("    gcpAudience: ").append(toIndentedString(gcpAudience)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    k8sAuthConfigName: ").append(toIndentedString(k8sAuthConfigName)).append("\n");
    sb.append("    kerberosToken: ").append(toIndentedString(kerberosToken)).append("\n");
    sb.append("    kerberosUsername: ").append(toIndentedString(kerberosUsername)).append("\n");
    sb.append("    keyData: ").append(toIndentedString(keyData)).append("\n");
    sb.append("    keytabData: ").append(toIndentedString(keytabData)).append("\n");
    sb.append("    krb5ConfData: ").append(toIndentedString(krb5ConfData)).append("\n");
    sb.append("    legacySigningAlgName: ").append(toIndentedString(legacySigningAlgName)).append("\n");
    sb.append("    ociAuthType: ").append(toIndentedString(ociAuthType)).append("\n");
    sb.append("    ociGroupOcid: ").append(toIndentedString(ociGroupOcid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access-id");
    openapiFields.add("access-key");
    openapiFields.add("access-type");
    openapiFields.add("account-id");
    openapiFields.add("admin-email");
    openapiFields.add("admin-password");
    openapiFields.add("azure-ad-object-id");
    openapiFields.add("cert-data");
    openapiFields.add("cert-issuer-name");
    openapiFields.add("cert-username");
    openapiFields.add("default-location-prefix");
    openapiFields.add("disable-pafxfast");
    openapiFields.add("gateway-spn");
    openapiFields.add("gcp-audience");
    openapiFields.add("json");
    openapiFields.add("k8s-auth-config-name");
    openapiFields.add("kerberos-token");
    openapiFields.add("kerberos-username");
    openapiFields.add("key-data");
    openapiFields.add("keytab-data");
    openapiFields.add("krb5-conf-data");
    openapiFields.add("legacy-signing-alg-name");
    openapiFields.add("oci-auth-type");
    openapiFields.add("oci-group-ocid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Configure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Configure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Configure is not found in the empty JSON string", Configure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Configure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Configure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access-id") != null && !jsonObj.get("access-id").isJsonNull()) && !jsonObj.get("access-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-id").toString()));
      }
      if ((jsonObj.get("access-key") != null && !jsonObj.get("access-key").isJsonNull()) && !jsonObj.get("access-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-key").toString()));
      }
      if ((jsonObj.get("access-type") != null && !jsonObj.get("access-type").isJsonNull()) && !jsonObj.get("access-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-type").toString()));
      }
      if ((jsonObj.get("account-id") != null && !jsonObj.get("account-id").isJsonNull()) && !jsonObj.get("account-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-id").toString()));
      }
      if ((jsonObj.get("admin-email") != null && !jsonObj.get("admin-email").isJsonNull()) && !jsonObj.get("admin-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-email").toString()));
      }
      if ((jsonObj.get("admin-password") != null && !jsonObj.get("admin-password").isJsonNull()) && !jsonObj.get("admin-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-password").toString()));
      }
      if ((jsonObj.get("azure-ad-object-id") != null && !jsonObj.get("azure-ad-object-id").isJsonNull()) && !jsonObj.get("azure-ad-object-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-ad-object-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-ad-object-id").toString()));
      }
      if ((jsonObj.get("cert-data") != null && !jsonObj.get("cert-data").isJsonNull()) && !jsonObj.get("cert-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-data").toString()));
      }
      if ((jsonObj.get("cert-issuer-name") != null && !jsonObj.get("cert-issuer-name").isJsonNull()) && !jsonObj.get("cert-issuer-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-issuer-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-issuer-name").toString()));
      }
      if ((jsonObj.get("cert-username") != null && !jsonObj.get("cert-username").isJsonNull()) && !jsonObj.get("cert-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-username").toString()));
      }
      if ((jsonObj.get("default-location-prefix") != null && !jsonObj.get("default-location-prefix").isJsonNull()) && !jsonObj.get("default-location-prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-location-prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default-location-prefix").toString()));
      }
      if ((jsonObj.get("disable-pafxfast") != null && !jsonObj.get("disable-pafxfast").isJsonNull()) && !jsonObj.get("disable-pafxfast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disable-pafxfast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disable-pafxfast").toString()));
      }
      if ((jsonObj.get("gateway-spn") != null && !jsonObj.get("gateway-spn").isJsonNull()) && !jsonObj.get("gateway-spn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway-spn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway-spn").toString()));
      }
      if ((jsonObj.get("gcp-audience") != null && !jsonObj.get("gcp-audience").isJsonNull()) && !jsonObj.get("gcp-audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-audience").toString()));
      }
      if ((jsonObj.get("k8s-auth-config-name") != null && !jsonObj.get("k8s-auth-config-name").isJsonNull()) && !jsonObj.get("k8s-auth-config-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-auth-config-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-auth-config-name").toString()));
      }
      if ((jsonObj.get("kerberos-token") != null && !jsonObj.get("kerberos-token").isJsonNull()) && !jsonObj.get("kerberos-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kerberos-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kerberos-token").toString()));
      }
      if ((jsonObj.get("kerberos-username") != null && !jsonObj.get("kerberos-username").isJsonNull()) && !jsonObj.get("kerberos-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kerberos-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kerberos-username").toString()));
      }
      if ((jsonObj.get("key-data") != null && !jsonObj.get("key-data").isJsonNull()) && !jsonObj.get("key-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-data").toString()));
      }
      if ((jsonObj.get("keytab-data") != null && !jsonObj.get("keytab-data").isJsonNull()) && !jsonObj.get("keytab-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keytab-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keytab-data").toString()));
      }
      if ((jsonObj.get("krb5-conf-data") != null && !jsonObj.get("krb5-conf-data").isJsonNull()) && !jsonObj.get("krb5-conf-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krb5-conf-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krb5-conf-data").toString()));
      }
      if ((jsonObj.get("oci-auth-type") != null && !jsonObj.get("oci-auth-type").isJsonNull()) && !jsonObj.get("oci-auth-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oci-auth-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oci-auth-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("oci-group-ocid") != null && !jsonObj.get("oci-group-ocid").isJsonNull() && !jsonObj.get("oci-group-ocid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `oci-group-ocid` to be an array in the JSON string but got `%s`", jsonObj.get("oci-group-ocid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Configure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Configure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Configure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Configure.class));

       return (TypeAdapter<T>) new TypeAdapter<Configure>() {
           @Override
           public void write(JsonWriter out, Configure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Configure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Configure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Configure
   * @throws IOException if the JSON string is invalid with respect to Configure
   */
  public static Configure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Configure.class);
  }

  /**
   * Convert an instance of Configure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

