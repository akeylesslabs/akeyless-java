/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.ItemSraStatus;
import io.akeyless.client.model.TargetNameWithHosts;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SecureRemoteAccess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SecureRemoteAccess {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public static final String SERIALIZED_NAME_ALLOW_PORT_FORWARDING = "allow_port_forwarding";
  @SerializedName(SERIALIZED_NAME_ALLOW_PORT_FORWARDING)
  @javax.annotation.Nullable
  private Boolean allowPortForwarding;

  public static final String SERIALIZED_NAME_ALLOW_PROVIDING_EXTERNAL_USERNAME = "allow_providing_external_username";
  @SerializedName(SERIALIZED_NAME_ALLOW_PROVIDING_EXTERNAL_USERNAME)
  @javax.annotation.Nullable
  private Boolean allowProvidingExternalUsername;

  public static final String SERIALIZED_NAME_BASTION_API = "bastion_api";
  @SerializedName(SERIALIZED_NAME_BASTION_API)
  @javax.annotation.Nullable
  private String bastionApi;

  public static final String SERIALIZED_NAME_BASTION_ISSUER = "bastion_issuer";
  @SerializedName(SERIALIZED_NAME_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String bastionIssuer;

  public static final String SERIALIZED_NAME_BASTION_ISSUER_ID = "bastion_issuer_id";
  @SerializedName(SERIALIZED_NAME_BASTION_ISSUER_ID)
  @javax.annotation.Nullable
  private Long bastionIssuerId;

  public static final String SERIALIZED_NAME_BASTION_SSH = "bastion_ssh";
  @SerializedName(SERIALIZED_NAME_BASTION_SSH)
  @javax.annotation.Nullable
  private String bastionSsh;

  public static final String SERIALIZED_NAME_BLOCK_CONCURRENT_CONNECTIONS = "block_concurrent_connections";
  @SerializedName(SERIALIZED_NAME_BLOCK_CONCURRENT_CONNECTIONS)
  @javax.annotation.Nullable
  private Boolean blockConcurrentConnections;

  public static final String SERIALIZED_NAME_BLOCK_CONCURRENT_CONNECTIONS_LEVEL = "block_concurrent_connections_level";
  @SerializedName(SERIALIZED_NAME_BLOCK_CONCURRENT_CONNECTIONS_LEVEL)
  @javax.annotation.Nullable
  private String blockConcurrentConnectionsLevel;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  @javax.annotation.Nullable
  private String category;

  public static final String SERIALIZED_NAME_CONNECTION_DELAY_SECONDS = "connection_delay_seconds";
  @SerializedName(SERIALIZED_NAME_CONNECTION_DELAY_SECONDS)
  @javax.annotation.Nullable
  private Long connectionDelaySeconds;

  public static final String SERIALIZED_NAME_DASHBOARD_URL = "dashboard_url";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_URL)
  @javax.annotation.Nullable
  private String dashboardUrl;

  public static final String SERIALIZED_NAME_DB_NAME = "db_name";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  @javax.annotation.Nullable
  private String dbName;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nullable
  private String domain;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  @javax.annotation.Nullable
  private Boolean enable;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nullable
  private String endpoint;

  public static final String SERIALIZED_NAME_ENFORCE_HOSTS_RESTRICTION = "enforce_hosts_restriction";
  @SerializedName(SERIALIZED_NAME_ENFORCE_HOSTS_RESTRICTION)
  @javax.annotation.Nullable
  private Boolean enforceHostsRestriction;

  public static final String SERIALIZED_NAME_GW_CLUSTER_ID = "gw_cluster_id";
  @SerializedName(SERIALIZED_NAME_GW_CLUSTER_ID)
  @javax.annotation.Nullable
  private Long gwClusterId;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private List<String> host = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_PROVIDER_TYPE = "host_provider_type";
  @SerializedName(SERIALIZED_NAME_HOST_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String hostProviderType;

  public static final String SERIALIZED_NAME_IS_CLI = "is_cli";
  @SerializedName(SERIALIZED_NAME_IS_CLI)
  @javax.annotation.Nullable
  private Boolean isCli;

  public static final String SERIALIZED_NAME_IS_DESKTOP_APP = "is_desktop_app";
  @SerializedName(SERIALIZED_NAME_IS_DESKTOP_APP)
  @javax.annotation.Nullable
  private Boolean isDesktopApp;

  public static final String SERIALIZED_NAME_IS_WEB = "is_web";
  @SerializedName(SERIALIZED_NAME_IS_WEB)
  @javax.annotation.Nullable
  private Boolean isWeb;

  public static final String SERIALIZED_NAME_ISOLATED = "isolated";
  @SerializedName(SERIALIZED_NAME_ISOLATED)
  @javax.annotation.Nullable
  private Boolean isolated;

  public static final String SERIALIZED_NAME_NATIVE = "native";
  @SerializedName(SERIALIZED_NAME_NATIVE)
  @javax.annotation.Nullable
  private Boolean _native;

  public static final String SERIALIZED_NAME_RD_GATEWAY_SERVER = "rd_gateway_server";
  @SerializedName(SERIALIZED_NAME_RD_GATEWAY_SERVER)
  @javax.annotation.Nullable
  private String rdGatewayServer;

  public static final String SERIALIZED_NAME_RDP_USER = "rdp_user";
  @SerializedName(SERIALIZED_NAME_RDP_USER)
  @javax.annotation.Nullable
  private String rdpUser;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public static final String SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT = "rotate_after_disconnect";
  @SerializedName(SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT)
  @javax.annotation.Nullable
  private Boolean rotateAfterDisconnect;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  @javax.annotation.Nullable
  private String schema;

  public static final String SERIALIZED_NAME_SSH_PASSWORD = "ssh_password";
  @SerializedName(SERIALIZED_NAME_SSH_PASSWORD)
  @javax.annotation.Nullable
  private Boolean sshPassword;

  public static final String SERIALIZED_NAME_SSH_PRIVATE_KEY = "ssh_private_key";
  @SerializedName(SERIALIZED_NAME_SSH_PRIVATE_KEY)
  @javax.annotation.Nullable
  private Boolean sshPrivateKey;

  public static final String SERIALIZED_NAME_SSH_USER = "ssh_user";
  @SerializedName(SERIALIZED_NAME_SSH_USER)
  @javax.annotation.Nullable
  private String sshUser;

  public static final String SERIALIZED_NAME_STATUS_INFO = "status_info";
  @SerializedName(SERIALIZED_NAME_STATUS_INFO)
  @javax.annotation.Nullable
  private ItemSraStatus statusInfo;

  public static final String SERIALIZED_NAME_TARGET_HOSTS = "target_hosts";
  @SerializedName(SERIALIZED_NAME_TARGET_HOSTS)
  @javax.annotation.Nullable
  private List<TargetNameWithHosts> targetHosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  @javax.annotation.Nullable
  private List<String> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_USE_INTERNAL_BASTION = "use_internal_bastion";
  @SerializedName(SERIALIZED_NAME_USE_INTERNAL_BASTION)
  @javax.annotation.Nullable
  private Boolean useInternalBastion;

  public static final String SERIALIZED_NAME_WEB_PROXY = "web_proxy";
  @SerializedName(SERIALIZED_NAME_WEB_PROXY)
  @javax.annotation.Nullable
  private Boolean webProxy;

  public SecureRemoteAccess() {
  }

  public SecureRemoteAccess accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }


  public SecureRemoteAccess allowPortForwarding(@javax.annotation.Nullable Boolean allowPortForwarding) {
    this.allowPortForwarding = allowPortForwarding;
    return this;
  }

  /**
   * Get allowPortForwarding
   * @return allowPortForwarding
   */
  @javax.annotation.Nullable
  public Boolean getAllowPortForwarding() {
    return allowPortForwarding;
  }

  public void setAllowPortForwarding(@javax.annotation.Nullable Boolean allowPortForwarding) {
    this.allowPortForwarding = allowPortForwarding;
  }


  public SecureRemoteAccess allowProvidingExternalUsername(@javax.annotation.Nullable Boolean allowProvidingExternalUsername) {
    this.allowProvidingExternalUsername = allowProvidingExternalUsername;
    return this;
  }

  /**
   * Get allowProvidingExternalUsername
   * @return allowProvidingExternalUsername
   */
  @javax.annotation.Nullable
  public Boolean getAllowProvidingExternalUsername() {
    return allowProvidingExternalUsername;
  }

  public void setAllowProvidingExternalUsername(@javax.annotation.Nullable Boolean allowProvidingExternalUsername) {
    this.allowProvidingExternalUsername = allowProvidingExternalUsername;
  }


  public SecureRemoteAccess bastionApi(@javax.annotation.Nullable String bastionApi) {
    this.bastionApi = bastionApi;
    return this;
  }

  /**
   * Get bastionApi
   * @return bastionApi
   */
  @javax.annotation.Nullable
  public String getBastionApi() {
    return bastionApi;
  }

  public void setBastionApi(@javax.annotation.Nullable String bastionApi) {
    this.bastionApi = bastionApi;
  }


  public SecureRemoteAccess bastionIssuer(@javax.annotation.Nullable String bastionIssuer) {
    this.bastionIssuer = bastionIssuer;
    return this;
  }

  /**
   * Get bastionIssuer
   * @return bastionIssuer
   */
  @javax.annotation.Nullable
  public String getBastionIssuer() {
    return bastionIssuer;
  }

  public void setBastionIssuer(@javax.annotation.Nullable String bastionIssuer) {
    this.bastionIssuer = bastionIssuer;
  }


  public SecureRemoteAccess bastionIssuerId(@javax.annotation.Nullable Long bastionIssuerId) {
    this.bastionIssuerId = bastionIssuerId;
    return this;
  }

  /**
   * Get bastionIssuerId
   * @return bastionIssuerId
   */
  @javax.annotation.Nullable
  public Long getBastionIssuerId() {
    return bastionIssuerId;
  }

  public void setBastionIssuerId(@javax.annotation.Nullable Long bastionIssuerId) {
    this.bastionIssuerId = bastionIssuerId;
  }


  public SecureRemoteAccess bastionSsh(@javax.annotation.Nullable String bastionSsh) {
    this.bastionSsh = bastionSsh;
    return this;
  }

  /**
   * Get bastionSsh
   * @return bastionSsh
   */
  @javax.annotation.Nullable
  public String getBastionSsh() {
    return bastionSsh;
  }

  public void setBastionSsh(@javax.annotation.Nullable String bastionSsh) {
    this.bastionSsh = bastionSsh;
  }


  public SecureRemoteAccess blockConcurrentConnections(@javax.annotation.Nullable Boolean blockConcurrentConnections) {
    this.blockConcurrentConnections = blockConcurrentConnections;
    return this;
  }

  /**
   * Get blockConcurrentConnections
   * @return blockConcurrentConnections
   */
  @javax.annotation.Nullable
  public Boolean getBlockConcurrentConnections() {
    return blockConcurrentConnections;
  }

  public void setBlockConcurrentConnections(@javax.annotation.Nullable Boolean blockConcurrentConnections) {
    this.blockConcurrentConnections = blockConcurrentConnections;
  }


  public SecureRemoteAccess blockConcurrentConnectionsLevel(@javax.annotation.Nullable String blockConcurrentConnectionsLevel) {
    this.blockConcurrentConnectionsLevel = blockConcurrentConnectionsLevel;
    return this;
  }

  /**
   * Get blockConcurrentConnectionsLevel
   * @return blockConcurrentConnectionsLevel
   */
  @javax.annotation.Nullable
  public String getBlockConcurrentConnectionsLevel() {
    return blockConcurrentConnectionsLevel;
  }

  public void setBlockConcurrentConnectionsLevel(@javax.annotation.Nullable String blockConcurrentConnectionsLevel) {
    this.blockConcurrentConnectionsLevel = blockConcurrentConnectionsLevel;
  }


  public SecureRemoteAccess category(@javax.annotation.Nullable String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(@javax.annotation.Nullable String category) {
    this.category = category;
  }


  public SecureRemoteAccess connectionDelaySeconds(@javax.annotation.Nullable Long connectionDelaySeconds) {
    this.connectionDelaySeconds = connectionDelaySeconds;
    return this;
  }

  /**
   * Get connectionDelaySeconds
   * @return connectionDelaySeconds
   */
  @javax.annotation.Nullable
  public Long getConnectionDelaySeconds() {
    return connectionDelaySeconds;
  }

  public void setConnectionDelaySeconds(@javax.annotation.Nullable Long connectionDelaySeconds) {
    this.connectionDelaySeconds = connectionDelaySeconds;
  }


  public SecureRemoteAccess dashboardUrl(@javax.annotation.Nullable String dashboardUrl) {
    this.dashboardUrl = dashboardUrl;
    return this;
  }

  /**
   * Get dashboardUrl
   * @return dashboardUrl
   */
  @javax.annotation.Nullable
  public String getDashboardUrl() {
    return dashboardUrl;
  }

  public void setDashboardUrl(@javax.annotation.Nullable String dashboardUrl) {
    this.dashboardUrl = dashboardUrl;
  }


  public SecureRemoteAccess dbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
    return this;
  }

  /**
   * Get dbName
   * @return dbName
   */
  @javax.annotation.Nullable
  public String getDbName() {
    return dbName;
  }

  public void setDbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
  }


  public SecureRemoteAccess domain(@javax.annotation.Nullable String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nullable String domain) {
    this.domain = domain;
  }


  public SecureRemoteAccess enable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Get enable
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(@javax.annotation.Nullable Boolean enable) {
    this.enable = enable;
  }


  public SecureRemoteAccess endpoint(@javax.annotation.Nullable String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nullable String endpoint) {
    this.endpoint = endpoint;
  }


  public SecureRemoteAccess enforceHostsRestriction(@javax.annotation.Nullable Boolean enforceHostsRestriction) {
    this.enforceHostsRestriction = enforceHostsRestriction;
    return this;
  }

  /**
   * Get enforceHostsRestriction
   * @return enforceHostsRestriction
   */
  @javax.annotation.Nullable
  public Boolean getEnforceHostsRestriction() {
    return enforceHostsRestriction;
  }

  public void setEnforceHostsRestriction(@javax.annotation.Nullable Boolean enforceHostsRestriction) {
    this.enforceHostsRestriction = enforceHostsRestriction;
  }


  public SecureRemoteAccess gwClusterId(@javax.annotation.Nullable Long gwClusterId) {
    this.gwClusterId = gwClusterId;
    return this;
  }

  /**
   * Get gwClusterId
   * @return gwClusterId
   */
  @javax.annotation.Nullable
  public Long getGwClusterId() {
    return gwClusterId;
  }

  public void setGwClusterId(@javax.annotation.Nullable Long gwClusterId) {
    this.gwClusterId = gwClusterId;
  }


  public SecureRemoteAccess host(@javax.annotation.Nullable List<String> host) {
    this.host = host;
    return this;
  }

  public SecureRemoteAccess addHostItem(String hostItem) {
    if (this.host == null) {
      this.host = new ArrayList<>();
    }
    this.host.add(hostItem);
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public List<String> getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nullable List<String> host) {
    this.host = host;
  }


  public SecureRemoteAccess hostProviderType(@javax.annotation.Nullable String hostProviderType) {
    this.hostProviderType = hostProviderType;
    return this;
  }

  /**
   * Get hostProviderType
   * @return hostProviderType
   */
  @javax.annotation.Nullable
  public String getHostProviderType() {
    return hostProviderType;
  }

  public void setHostProviderType(@javax.annotation.Nullable String hostProviderType) {
    this.hostProviderType = hostProviderType;
  }


  public SecureRemoteAccess isCli(@javax.annotation.Nullable Boolean isCli) {
    this.isCli = isCli;
    return this;
  }

  /**
   * Get isCli
   * @return isCli
   */
  @javax.annotation.Nullable
  public Boolean getIsCli() {
    return isCli;
  }

  public void setIsCli(@javax.annotation.Nullable Boolean isCli) {
    this.isCli = isCli;
  }


  public SecureRemoteAccess isDesktopApp(@javax.annotation.Nullable Boolean isDesktopApp) {
    this.isDesktopApp = isDesktopApp;
    return this;
  }

  /**
   * Get isDesktopApp
   * @return isDesktopApp
   */
  @javax.annotation.Nullable
  public Boolean getIsDesktopApp() {
    return isDesktopApp;
  }

  public void setIsDesktopApp(@javax.annotation.Nullable Boolean isDesktopApp) {
    this.isDesktopApp = isDesktopApp;
  }


  public SecureRemoteAccess isWeb(@javax.annotation.Nullable Boolean isWeb) {
    this.isWeb = isWeb;
    return this;
  }

  /**
   * Get isWeb
   * @return isWeb
   */
  @javax.annotation.Nullable
  public Boolean getIsWeb() {
    return isWeb;
  }

  public void setIsWeb(@javax.annotation.Nullable Boolean isWeb) {
    this.isWeb = isWeb;
  }


  public SecureRemoteAccess isolated(@javax.annotation.Nullable Boolean isolated) {
    this.isolated = isolated;
    return this;
  }

  /**
   * Get isolated
   * @return isolated
   */
  @javax.annotation.Nullable
  public Boolean getIsolated() {
    return isolated;
  }

  public void setIsolated(@javax.annotation.Nullable Boolean isolated) {
    this.isolated = isolated;
  }


  public SecureRemoteAccess _native(@javax.annotation.Nullable Boolean _native) {
    this._native = _native;
    return this;
  }

  /**
   * Get _native
   * @return _native
   */
  @javax.annotation.Nullable
  public Boolean getNative() {
    return _native;
  }

  public void setNative(@javax.annotation.Nullable Boolean _native) {
    this._native = _native;
  }


  public SecureRemoteAccess rdGatewayServer(@javax.annotation.Nullable String rdGatewayServer) {
    this.rdGatewayServer = rdGatewayServer;
    return this;
  }

  /**
   * Get rdGatewayServer
   * @return rdGatewayServer
   */
  @javax.annotation.Nullable
  public String getRdGatewayServer() {
    return rdGatewayServer;
  }

  public void setRdGatewayServer(@javax.annotation.Nullable String rdGatewayServer) {
    this.rdGatewayServer = rdGatewayServer;
  }


  public SecureRemoteAccess rdpUser(@javax.annotation.Nullable String rdpUser) {
    this.rdpUser = rdpUser;
    return this;
  }

  /**
   * Get rdpUser
   * @return rdpUser
   */
  @javax.annotation.Nullable
  public String getRdpUser() {
    return rdpUser;
  }

  public void setRdpUser(@javax.annotation.Nullable String rdpUser) {
    this.rdpUser = rdpUser;
  }


  public SecureRemoteAccess region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }


  public SecureRemoteAccess rotateAfterDisconnect(@javax.annotation.Nullable Boolean rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
    return this;
  }

  /**
   * Get rotateAfterDisconnect
   * @return rotateAfterDisconnect
   */
  @javax.annotation.Nullable
  public Boolean getRotateAfterDisconnect() {
    return rotateAfterDisconnect;
  }

  public void setRotateAfterDisconnect(@javax.annotation.Nullable Boolean rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
  }


  public SecureRemoteAccess schema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
  }


  public SecureRemoteAccess sshPassword(@javax.annotation.Nullable Boolean sshPassword) {
    this.sshPassword = sshPassword;
    return this;
  }

  /**
   * Get sshPassword
   * @return sshPassword
   */
  @javax.annotation.Nullable
  public Boolean getSshPassword() {
    return sshPassword;
  }

  public void setSshPassword(@javax.annotation.Nullable Boolean sshPassword) {
    this.sshPassword = sshPassword;
  }


  public SecureRemoteAccess sshPrivateKey(@javax.annotation.Nullable Boolean sshPrivateKey) {
    this.sshPrivateKey = sshPrivateKey;
    return this;
  }

  /**
   * Get sshPrivateKey
   * @return sshPrivateKey
   */
  @javax.annotation.Nullable
  public Boolean getSshPrivateKey() {
    return sshPrivateKey;
  }

  public void setSshPrivateKey(@javax.annotation.Nullable Boolean sshPrivateKey) {
    this.sshPrivateKey = sshPrivateKey;
  }


  public SecureRemoteAccess sshUser(@javax.annotation.Nullable String sshUser) {
    this.sshUser = sshUser;
    return this;
  }

  /**
   * Get sshUser
   * @return sshUser
   */
  @javax.annotation.Nullable
  public String getSshUser() {
    return sshUser;
  }

  public void setSshUser(@javax.annotation.Nullable String sshUser) {
    this.sshUser = sshUser;
  }


  public SecureRemoteAccess statusInfo(@javax.annotation.Nullable ItemSraStatus statusInfo) {
    this.statusInfo = statusInfo;
    return this;
  }

  /**
   * Get statusInfo
   * @return statusInfo
   */
  @javax.annotation.Nullable
  public ItemSraStatus getStatusInfo() {
    return statusInfo;
  }

  public void setStatusInfo(@javax.annotation.Nullable ItemSraStatus statusInfo) {
    this.statusInfo = statusInfo;
  }


  public SecureRemoteAccess targetHosts(@javax.annotation.Nullable List<TargetNameWithHosts> targetHosts) {
    this.targetHosts = targetHosts;
    return this;
  }

  public SecureRemoteAccess addTargetHostsItem(TargetNameWithHosts targetHostsItem) {
    if (this.targetHosts == null) {
      this.targetHosts = new ArrayList<>();
    }
    this.targetHosts.add(targetHostsItem);
    return this;
  }

  /**
   * Get targetHosts
   * @return targetHosts
   */
  @javax.annotation.Nullable
  public List<TargetNameWithHosts> getTargetHosts() {
    return targetHosts;
  }

  public void setTargetHosts(@javax.annotation.Nullable List<TargetNameWithHosts> targetHosts) {
    this.targetHosts = targetHosts;
  }


  public SecureRemoteAccess targets(@javax.annotation.Nullable List<String> targets) {
    this.targets = targets;
    return this;
  }

  public SecureRemoteAccess addTargetsItem(String targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List<String> getTargets() {
    return targets;
  }

  public void setTargets(@javax.annotation.Nullable List<String> targets) {
    this.targets = targets;
  }


  public SecureRemoteAccess url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public SecureRemoteAccess useInternalBastion(@javax.annotation.Nullable Boolean useInternalBastion) {
    this.useInternalBastion = useInternalBastion;
    return this;
  }

  /**
   * Get useInternalBastion
   * @return useInternalBastion
   */
  @javax.annotation.Nullable
  public Boolean getUseInternalBastion() {
    return useInternalBastion;
  }

  public void setUseInternalBastion(@javax.annotation.Nullable Boolean useInternalBastion) {
    this.useInternalBastion = useInternalBastion;
  }


  public SecureRemoteAccess webProxy(@javax.annotation.Nullable Boolean webProxy) {
    this.webProxy = webProxy;
    return this;
  }

  /**
   * Get webProxy
   * @return webProxy
   */
  @javax.annotation.Nullable
  public Boolean getWebProxy() {
    return webProxy;
  }

  public void setWebProxy(@javax.annotation.Nullable Boolean webProxy) {
    this.webProxy = webProxy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecureRemoteAccess secureRemoteAccess = (SecureRemoteAccess) o;
    return Objects.equals(this.accountId, secureRemoteAccess.accountId) &&
        Objects.equals(this.allowPortForwarding, secureRemoteAccess.allowPortForwarding) &&
        Objects.equals(this.allowProvidingExternalUsername, secureRemoteAccess.allowProvidingExternalUsername) &&
        Objects.equals(this.bastionApi, secureRemoteAccess.bastionApi) &&
        Objects.equals(this.bastionIssuer, secureRemoteAccess.bastionIssuer) &&
        Objects.equals(this.bastionIssuerId, secureRemoteAccess.bastionIssuerId) &&
        Objects.equals(this.bastionSsh, secureRemoteAccess.bastionSsh) &&
        Objects.equals(this.blockConcurrentConnections, secureRemoteAccess.blockConcurrentConnections) &&
        Objects.equals(this.blockConcurrentConnectionsLevel, secureRemoteAccess.blockConcurrentConnectionsLevel) &&
        Objects.equals(this.category, secureRemoteAccess.category) &&
        Objects.equals(this.connectionDelaySeconds, secureRemoteAccess.connectionDelaySeconds) &&
        Objects.equals(this.dashboardUrl, secureRemoteAccess.dashboardUrl) &&
        Objects.equals(this.dbName, secureRemoteAccess.dbName) &&
        Objects.equals(this.domain, secureRemoteAccess.domain) &&
        Objects.equals(this.enable, secureRemoteAccess.enable) &&
        Objects.equals(this.endpoint, secureRemoteAccess.endpoint) &&
        Objects.equals(this.enforceHostsRestriction, secureRemoteAccess.enforceHostsRestriction) &&
        Objects.equals(this.gwClusterId, secureRemoteAccess.gwClusterId) &&
        Objects.equals(this.host, secureRemoteAccess.host) &&
        Objects.equals(this.hostProviderType, secureRemoteAccess.hostProviderType) &&
        Objects.equals(this.isCli, secureRemoteAccess.isCli) &&
        Objects.equals(this.isDesktopApp, secureRemoteAccess.isDesktopApp) &&
        Objects.equals(this.isWeb, secureRemoteAccess.isWeb) &&
        Objects.equals(this.isolated, secureRemoteAccess.isolated) &&
        Objects.equals(this._native, secureRemoteAccess._native) &&
        Objects.equals(this.rdGatewayServer, secureRemoteAccess.rdGatewayServer) &&
        Objects.equals(this.rdpUser, secureRemoteAccess.rdpUser) &&
        Objects.equals(this.region, secureRemoteAccess.region) &&
        Objects.equals(this.rotateAfterDisconnect, secureRemoteAccess.rotateAfterDisconnect) &&
        Objects.equals(this.schema, secureRemoteAccess.schema) &&
        Objects.equals(this.sshPassword, secureRemoteAccess.sshPassword) &&
        Objects.equals(this.sshPrivateKey, secureRemoteAccess.sshPrivateKey) &&
        Objects.equals(this.sshUser, secureRemoteAccess.sshUser) &&
        Objects.equals(this.statusInfo, secureRemoteAccess.statusInfo) &&
        Objects.equals(this.targetHosts, secureRemoteAccess.targetHosts) &&
        Objects.equals(this.targets, secureRemoteAccess.targets) &&
        Objects.equals(this.url, secureRemoteAccess.url) &&
        Objects.equals(this.useInternalBastion, secureRemoteAccess.useInternalBastion) &&
        Objects.equals(this.webProxy, secureRemoteAccess.webProxy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, allowPortForwarding, allowProvidingExternalUsername, bastionApi, bastionIssuer, bastionIssuerId, bastionSsh, blockConcurrentConnections, blockConcurrentConnectionsLevel, category, connectionDelaySeconds, dashboardUrl, dbName, domain, enable, endpoint, enforceHostsRestriction, gwClusterId, host, hostProviderType, isCli, isDesktopApp, isWeb, isolated, _native, rdGatewayServer, rdpUser, region, rotateAfterDisconnect, schema, sshPassword, sshPrivateKey, sshUser, statusInfo, targetHosts, targets, url, useInternalBastion, webProxy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecureRemoteAccess {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    allowPortForwarding: ").append(toIndentedString(allowPortForwarding)).append("\n");
    sb.append("    allowProvidingExternalUsername: ").append(toIndentedString(allowProvidingExternalUsername)).append("\n");
    sb.append("    bastionApi: ").append(toIndentedString(bastionApi)).append("\n");
    sb.append("    bastionIssuer: ").append(toIndentedString(bastionIssuer)).append("\n");
    sb.append("    bastionIssuerId: ").append(toIndentedString(bastionIssuerId)).append("\n");
    sb.append("    bastionSsh: ").append(toIndentedString(bastionSsh)).append("\n");
    sb.append("    blockConcurrentConnections: ").append(toIndentedString(blockConcurrentConnections)).append("\n");
    sb.append("    blockConcurrentConnectionsLevel: ").append(toIndentedString(blockConcurrentConnectionsLevel)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    connectionDelaySeconds: ").append(toIndentedString(connectionDelaySeconds)).append("\n");
    sb.append("    dashboardUrl: ").append(toIndentedString(dashboardUrl)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    enforceHostsRestriction: ").append(toIndentedString(enforceHostsRestriction)).append("\n");
    sb.append("    gwClusterId: ").append(toIndentedString(gwClusterId)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    hostProviderType: ").append(toIndentedString(hostProviderType)).append("\n");
    sb.append("    isCli: ").append(toIndentedString(isCli)).append("\n");
    sb.append("    isDesktopApp: ").append(toIndentedString(isDesktopApp)).append("\n");
    sb.append("    isWeb: ").append(toIndentedString(isWeb)).append("\n");
    sb.append("    isolated: ").append(toIndentedString(isolated)).append("\n");
    sb.append("    _native: ").append(toIndentedString(_native)).append("\n");
    sb.append("    rdGatewayServer: ").append(toIndentedString(rdGatewayServer)).append("\n");
    sb.append("    rdpUser: ").append(toIndentedString(rdpUser)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    rotateAfterDisconnect: ").append(toIndentedString(rotateAfterDisconnect)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sshPassword: ").append(toIndentedString(sshPassword)).append("\n");
    sb.append("    sshPrivateKey: ").append(toIndentedString(sshPrivateKey)).append("\n");
    sb.append("    sshUser: ").append(toIndentedString(sshUser)).append("\n");
    sb.append("    statusInfo: ").append(toIndentedString(statusInfo)).append("\n");
    sb.append("    targetHosts: ").append(toIndentedString(targetHosts)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useInternalBastion: ").append(toIndentedString(useInternalBastion)).append("\n");
    sb.append("    webProxy: ").append(toIndentedString(webProxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("allow_port_forwarding");
    openapiFields.add("allow_providing_external_username");
    openapiFields.add("bastion_api");
    openapiFields.add("bastion_issuer");
    openapiFields.add("bastion_issuer_id");
    openapiFields.add("bastion_ssh");
    openapiFields.add("block_concurrent_connections");
    openapiFields.add("block_concurrent_connections_level");
    openapiFields.add("category");
    openapiFields.add("connection_delay_seconds");
    openapiFields.add("dashboard_url");
    openapiFields.add("db_name");
    openapiFields.add("domain");
    openapiFields.add("enable");
    openapiFields.add("endpoint");
    openapiFields.add("enforce_hosts_restriction");
    openapiFields.add("gw_cluster_id");
    openapiFields.add("host");
    openapiFields.add("host_provider_type");
    openapiFields.add("is_cli");
    openapiFields.add("is_desktop_app");
    openapiFields.add("is_web");
    openapiFields.add("isolated");
    openapiFields.add("native");
    openapiFields.add("rd_gateway_server");
    openapiFields.add("rdp_user");
    openapiFields.add("region");
    openapiFields.add("rotate_after_disconnect");
    openapiFields.add("schema");
    openapiFields.add("ssh_password");
    openapiFields.add("ssh_private_key");
    openapiFields.add("ssh_user");
    openapiFields.add("status_info");
    openapiFields.add("target_hosts");
    openapiFields.add("targets");
    openapiFields.add("url");
    openapiFields.add("use_internal_bastion");
    openapiFields.add("web_proxy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecureRemoteAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecureRemoteAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecureRemoteAccess is not found in the empty JSON string", SecureRemoteAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecureRemoteAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecureRemoteAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("bastion_api") != null && !jsonObj.get("bastion_api").isJsonNull()) && !jsonObj.get("bastion_api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion_api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion_api").toString()));
      }
      if ((jsonObj.get("bastion_issuer") != null && !jsonObj.get("bastion_issuer").isJsonNull()) && !jsonObj.get("bastion_issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion_issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion_issuer").toString()));
      }
      if ((jsonObj.get("bastion_ssh") != null && !jsonObj.get("bastion_ssh").isJsonNull()) && !jsonObj.get("bastion_ssh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bastion_ssh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bastion_ssh").toString()));
      }
      if ((jsonObj.get("block_concurrent_connections_level") != null && !jsonObj.get("block_concurrent_connections_level").isJsonNull()) && !jsonObj.get("block_concurrent_connections_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_concurrent_connections_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_concurrent_connections_level").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("dashboard_url") != null && !jsonObj.get("dashboard_url").isJsonNull()) && !jsonObj.get("dashboard_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard_url").toString()));
      }
      if ((jsonObj.get("db_name") != null && !jsonObj.get("db_name").isJsonNull()) && !jsonObj.get("db_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_name").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull() && !jsonObj.get("host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be an array in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("host_provider_type") != null && !jsonObj.get("host_provider_type").isJsonNull()) && !jsonObj.get("host_provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_provider_type").toString()));
      }
      if ((jsonObj.get("rd_gateway_server") != null && !jsonObj.get("rd_gateway_server").isJsonNull()) && !jsonObj.get("rd_gateway_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rd_gateway_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rd_gateway_server").toString()));
      }
      if ((jsonObj.get("rdp_user") != null && !jsonObj.get("rdp_user").isJsonNull()) && !jsonObj.get("rdp_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp_user").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("ssh_user") != null && !jsonObj.get("ssh_user").isJsonNull()) && !jsonObj.get("ssh_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_user").toString()));
      }
      // validate the optional field `status_info`
      if (jsonObj.get("status_info") != null && !jsonObj.get("status_info").isJsonNull()) {
        ItemSraStatus.validateJsonElement(jsonObj.get("status_info"));
      }
      if (jsonObj.get("target_hosts") != null && !jsonObj.get("target_hosts").isJsonNull()) {
        JsonArray jsonArraytargetHosts = jsonObj.getAsJsonArray("target_hosts");
        if (jsonArraytargetHosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target_hosts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target_hosts` to be an array in the JSON string but got `%s`", jsonObj.get("target_hosts").toString()));
          }

          // validate the optional field `target_hosts` (array)
          for (int i = 0; i < jsonArraytargetHosts.size(); i++) {
            TargetNameWithHosts.validateJsonElement(jsonArraytargetHosts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull() && !jsonObj.get("targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecureRemoteAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecureRemoteAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecureRemoteAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecureRemoteAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<SecureRemoteAccess>() {
           @Override
           public void write(JsonWriter out, SecureRemoteAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecureRemoteAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecureRemoteAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecureRemoteAccess
   * @throws IOException if the JSON string is invalid with respect to SecureRemoteAccess
   */
  public static SecureRemoteAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecureRemoteAccess.class);
  }

  /**
   * Convert an instance of SecureRemoteAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

