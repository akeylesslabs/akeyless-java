/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * createPingTarget is a command that creates a new target. [Deprecated: Use target-create-ping command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreatePingTarget {
  public static final String SERIALIZED_NAME_ADMINISTRATIVE_PORT = "administrative-port";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_PORT)
  @javax.annotation.Nullable
  private String administrativePort = "9999";

  public static final String SERIALIZED_NAME_AUTHORIZATION_PORT = "authorization-port";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_PORT)
  @javax.annotation.Nullable
  private String authorizationPort = "9031";

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_PING_URL = "ping-url";
  @SerializedName(SERIALIZED_NAME_PING_URL)
  @javax.annotation.Nullable
  private String pingUrl;

  public static final String SERIALIZED_NAME_PRIVILEGED_USER = "privileged-user";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED_USER)
  @javax.annotation.Nullable
  private String privilegedUser;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public CreatePingTarget() {
  }

  public CreatePingTarget administrativePort(@javax.annotation.Nullable String administrativePort) {
    this.administrativePort = administrativePort;
    return this;
  }

  /**
   * Ping Federate administrative port
   * @return administrativePort
   */
  @javax.annotation.Nullable
  public String getAdministrativePort() {
    return administrativePort;
  }

  public void setAdministrativePort(@javax.annotation.Nullable String administrativePort) {
    this.administrativePort = administrativePort;
  }


  public CreatePingTarget authorizationPort(@javax.annotation.Nullable String authorizationPort) {
    this.authorizationPort = authorizationPort;
    return this;
  }

  /**
   * Ping Federate authorization port
   * @return authorizationPort
   */
  @javax.annotation.Nullable
  public String getAuthorizationPort() {
    return authorizationPort;
  }

  public void setAuthorizationPort(@javax.annotation.Nullable String authorizationPort) {
    this.authorizationPort = authorizationPort;
  }


  public CreatePingTarget comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public CreatePingTarget description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreatePingTarget json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreatePingTarget key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public CreatePingTarget maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public CreatePingTarget name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreatePingTarget password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Ping Federate privileged user password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public CreatePingTarget pingUrl(@javax.annotation.Nullable String pingUrl) {
    this.pingUrl = pingUrl;
    return this;
  }

  /**
   * Ping URL
   * @return pingUrl
   */
  @javax.annotation.Nullable
  public String getPingUrl() {
    return pingUrl;
  }

  public void setPingUrl(@javax.annotation.Nullable String pingUrl) {
    this.pingUrl = pingUrl;
  }


  public CreatePingTarget privilegedUser(@javax.annotation.Nullable String privilegedUser) {
    this.privilegedUser = privilegedUser;
    return this;
  }

  /**
   * Ping Federate privileged user
   * @return privilegedUser
   */
  @javax.annotation.Nullable
  public String getPrivilegedUser() {
    return privilegedUser;
  }

  public void setPrivilegedUser(@javax.annotation.Nullable String privilegedUser) {
    this.privilegedUser = privilegedUser;
  }


  public CreatePingTarget token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreatePingTarget uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePingTarget createPingTarget = (CreatePingTarget) o;
    return Objects.equals(this.administrativePort, createPingTarget.administrativePort) &&
        Objects.equals(this.authorizationPort, createPingTarget.authorizationPort) &&
        Objects.equals(this.comment, createPingTarget.comment) &&
        Objects.equals(this.description, createPingTarget.description) &&
        Objects.equals(this.json, createPingTarget.json) &&
        Objects.equals(this.key, createPingTarget.key) &&
        Objects.equals(this.maxVersions, createPingTarget.maxVersions) &&
        Objects.equals(this.name, createPingTarget.name) &&
        Objects.equals(this.password, createPingTarget.password) &&
        Objects.equals(this.pingUrl, createPingTarget.pingUrl) &&
        Objects.equals(this.privilegedUser, createPingTarget.privilegedUser) &&
        Objects.equals(this.token, createPingTarget.token) &&
        Objects.equals(this.uidToken, createPingTarget.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administrativePort, authorizationPort, comment, description, json, key, maxVersions, name, password, pingUrl, privilegedUser, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePingTarget {\n");
    sb.append("    administrativePort: ").append(toIndentedString(administrativePort)).append("\n");
    sb.append("    authorizationPort: ").append(toIndentedString(authorizationPort)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pingUrl: ").append(toIndentedString(pingUrl)).append("\n");
    sb.append("    privilegedUser: ").append(toIndentedString(privilegedUser)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administrative-port");
    openapiFields.add("authorization-port");
    openapiFields.add("comment");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("ping-url");
    openapiFields.add("privileged-user");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePingTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePingTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePingTarget is not found in the empty JSON string", CreatePingTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePingTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePingTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePingTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administrative-port") != null && !jsonObj.get("administrative-port").isJsonNull()) && !jsonObj.get("administrative-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrative-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrative-port").toString()));
      }
      if ((jsonObj.get("authorization-port") != null && !jsonObj.get("authorization-port").isJsonNull()) && !jsonObj.get("authorization-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization-port").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("ping-url") != null && !jsonObj.get("ping-url").isJsonNull()) && !jsonObj.get("ping-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-url").toString()));
      }
      if ((jsonObj.get("privileged-user") != null && !jsonObj.get("privileged-user").isJsonNull()) && !jsonObj.get("privileged-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privileged-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privileged-user").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePingTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePingTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePingTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePingTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePingTarget>() {
           @Override
           public void write(JsonWriter out, CreatePingTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePingTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePingTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePingTarget
   * @throws IOException if the JSON string is invalid with respect to CreatePingTarget
   */
  public static CreatePingTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePingTarget.class);
  }

  /**
   * Convert an instance of CreatePingTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

