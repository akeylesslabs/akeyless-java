/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ChefTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ChefTargetDetails {
  public static final String SERIALIZED_NAME_CHEF_SERVER_HOST_NAME = "chef_server_host_name";
  @SerializedName(SERIALIZED_NAME_CHEF_SERVER_HOST_NAME)
  @javax.annotation.Nullable
  private String chefServerHostName;

  public static final String SERIALIZED_NAME_CHEF_SERVER_KEY = "chef_server_key";
  @SerializedName(SERIALIZED_NAME_CHEF_SERVER_KEY)
  @javax.annotation.Nullable
  private String chefServerKey;

  public static final String SERIALIZED_NAME_CHEF_SERVER_PORT = "chef_server_port";
  @SerializedName(SERIALIZED_NAME_CHEF_SERVER_PORT)
  @javax.annotation.Nullable
  private String chefServerPort;

  public static final String SERIALIZED_NAME_CHEF_SERVER_URL = "chef_server_url";
  @SerializedName(SERIALIZED_NAME_CHEF_SERVER_URL)
  @javax.annotation.Nullable
  private String chefServerUrl;

  public static final String SERIALIZED_NAME_CHEF_SERVER_USERNAME = "chef_server_username";
  @SerializedName(SERIALIZED_NAME_CHEF_SERVER_USERNAME)
  @javax.annotation.Nullable
  private String chefServerUsername;

  public static final String SERIALIZED_NAME_CHEF_SKIP_SSL = "chef_skip_ssl";
  @SerializedName(SERIALIZED_NAME_CHEF_SKIP_SSL)
  @javax.annotation.Nullable
  private Boolean chefSkipSsl;

  public ChefTargetDetails() {
  }

  public ChefTargetDetails chefServerHostName(@javax.annotation.Nullable String chefServerHostName) {
    this.chefServerHostName = chefServerHostName;
    return this;
  }

  /**
   * Get chefServerHostName
   * @return chefServerHostName
   */
  @javax.annotation.Nullable
  public String getChefServerHostName() {
    return chefServerHostName;
  }

  public void setChefServerHostName(@javax.annotation.Nullable String chefServerHostName) {
    this.chefServerHostName = chefServerHostName;
  }


  public ChefTargetDetails chefServerKey(@javax.annotation.Nullable String chefServerKey) {
    this.chefServerKey = chefServerKey;
    return this;
  }

  /**
   * Get chefServerKey
   * @return chefServerKey
   */
  @javax.annotation.Nullable
  public String getChefServerKey() {
    return chefServerKey;
  }

  public void setChefServerKey(@javax.annotation.Nullable String chefServerKey) {
    this.chefServerKey = chefServerKey;
  }


  public ChefTargetDetails chefServerPort(@javax.annotation.Nullable String chefServerPort) {
    this.chefServerPort = chefServerPort;
    return this;
  }

  /**
   * Get chefServerPort
   * @return chefServerPort
   */
  @javax.annotation.Nullable
  public String getChefServerPort() {
    return chefServerPort;
  }

  public void setChefServerPort(@javax.annotation.Nullable String chefServerPort) {
    this.chefServerPort = chefServerPort;
  }


  public ChefTargetDetails chefServerUrl(@javax.annotation.Nullable String chefServerUrl) {
    this.chefServerUrl = chefServerUrl;
    return this;
  }

  /**
   * Get chefServerUrl
   * @return chefServerUrl
   */
  @javax.annotation.Nullable
  public String getChefServerUrl() {
    return chefServerUrl;
  }

  public void setChefServerUrl(@javax.annotation.Nullable String chefServerUrl) {
    this.chefServerUrl = chefServerUrl;
  }


  public ChefTargetDetails chefServerUsername(@javax.annotation.Nullable String chefServerUsername) {
    this.chefServerUsername = chefServerUsername;
    return this;
  }

  /**
   * Get chefServerUsername
   * @return chefServerUsername
   */
  @javax.annotation.Nullable
  public String getChefServerUsername() {
    return chefServerUsername;
  }

  public void setChefServerUsername(@javax.annotation.Nullable String chefServerUsername) {
    this.chefServerUsername = chefServerUsername;
  }


  public ChefTargetDetails chefSkipSsl(@javax.annotation.Nullable Boolean chefSkipSsl) {
    this.chefSkipSsl = chefSkipSsl;
    return this;
  }

  /**
   * Get chefSkipSsl
   * @return chefSkipSsl
   */
  @javax.annotation.Nullable
  public Boolean getChefSkipSsl() {
    return chefSkipSsl;
  }

  public void setChefSkipSsl(@javax.annotation.Nullable Boolean chefSkipSsl) {
    this.chefSkipSsl = chefSkipSsl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChefTargetDetails chefTargetDetails = (ChefTargetDetails) o;
    return Objects.equals(this.chefServerHostName, chefTargetDetails.chefServerHostName) &&
        Objects.equals(this.chefServerKey, chefTargetDetails.chefServerKey) &&
        Objects.equals(this.chefServerPort, chefTargetDetails.chefServerPort) &&
        Objects.equals(this.chefServerUrl, chefTargetDetails.chefServerUrl) &&
        Objects.equals(this.chefServerUsername, chefTargetDetails.chefServerUsername) &&
        Objects.equals(this.chefSkipSsl, chefTargetDetails.chefSkipSsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chefServerHostName, chefServerKey, chefServerPort, chefServerUrl, chefServerUsername, chefSkipSsl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChefTargetDetails {\n");
    sb.append("    chefServerHostName: ").append(toIndentedString(chefServerHostName)).append("\n");
    sb.append("    chefServerKey: ").append(toIndentedString(chefServerKey)).append("\n");
    sb.append("    chefServerPort: ").append(toIndentedString(chefServerPort)).append("\n");
    sb.append("    chefServerUrl: ").append(toIndentedString(chefServerUrl)).append("\n");
    sb.append("    chefServerUsername: ").append(toIndentedString(chefServerUsername)).append("\n");
    sb.append("    chefSkipSsl: ").append(toIndentedString(chefSkipSsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chef_server_host_name");
    openapiFields.add("chef_server_key");
    openapiFields.add("chef_server_port");
    openapiFields.add("chef_server_url");
    openapiFields.add("chef_server_username");
    openapiFields.add("chef_skip_ssl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChefTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChefTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChefTargetDetails is not found in the empty JSON string", ChefTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChefTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChefTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chef_server_host_name") != null && !jsonObj.get("chef_server_host_name").isJsonNull()) && !jsonObj.get("chef_server_host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chef_server_host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chef_server_host_name").toString()));
      }
      if ((jsonObj.get("chef_server_key") != null && !jsonObj.get("chef_server_key").isJsonNull()) && !jsonObj.get("chef_server_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chef_server_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chef_server_key").toString()));
      }
      if ((jsonObj.get("chef_server_port") != null && !jsonObj.get("chef_server_port").isJsonNull()) && !jsonObj.get("chef_server_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chef_server_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chef_server_port").toString()));
      }
      if ((jsonObj.get("chef_server_url") != null && !jsonObj.get("chef_server_url").isJsonNull()) && !jsonObj.get("chef_server_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chef_server_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chef_server_url").toString()));
      }
      if ((jsonObj.get("chef_server_username") != null && !jsonObj.get("chef_server_username").isJsonNull()) && !jsonObj.get("chef_server_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chef_server_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chef_server_username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChefTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChefTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChefTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChefTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChefTargetDetails>() {
           @Override
           public void write(JsonWriter out, ChefTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChefTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChefTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChefTargetDetails
   * @throws IOException if the JSON string is invalid with respect to ChefTargetDetails
   */
  public static ChefTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChefTargetDetails.class);
  }

  /**
   * Convert an instance of ChefTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

