/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CacheConfigPart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CacheConfigPart {
  public static final String SERIALIZED_NAME_CACHE_ENABLE = "cache_enable";
  @SerializedName(SERIALIZED_NAME_CACHE_ENABLE)
  @javax.annotation.Nullable
  private Boolean cacheEnable;

  public static final String SERIALIZED_NAME_CACHE_ENCRYPTION_KEY = "cache_encryption_key";
  @SerializedName(SERIALIZED_NAME_CACHE_ENCRYPTION_KEY)
  @javax.annotation.Nullable
  private String cacheEncryptionKey;

  public static final String SERIALIZED_NAME_CACHE_TTL = "cache_ttl";
  @SerializedName(SERIALIZED_NAME_CACHE_TTL)
  @javax.annotation.Nullable
  private String cacheTtl;

  public static final String SERIALIZED_NAME_NEW_PROACTIVE_CACHE_ENABLE = "new_proactive_cache_enable";
  @SerializedName(SERIALIZED_NAME_NEW_PROACTIVE_CACHE_ENABLE)
  @javax.annotation.Nullable
  private Boolean newProactiveCacheEnable;

  public static final String SERIALIZED_NAME_PROACTIVE_CACHE_DUMP_INTERVAL = "proactive_cache_dump_interval";
  @SerializedName(SERIALIZED_NAME_PROACTIVE_CACHE_DUMP_INTERVAL)
  @javax.annotation.Nullable
  private String proactiveCacheDumpInterval;

  public static final String SERIALIZED_NAME_PROACTIVE_CACHE_ENABLE = "proactive_cache_enable";
  @SerializedName(SERIALIZED_NAME_PROACTIVE_CACHE_ENABLE)
  @javax.annotation.Nullable
  private Boolean proactiveCacheEnable;

  public static final String SERIALIZED_NAME_PROACTIVE_CACHE_MINIMUM_FETCHING_TIME = "proactive_cache_minimum_fetching_time";
  @SerializedName(SERIALIZED_NAME_PROACTIVE_CACHE_MINIMUM_FETCHING_TIME)
  @javax.annotation.Nullable
  private String proactiveCacheMinimumFetchingTime;

  public CacheConfigPart() {
  }

  public CacheConfigPart cacheEnable(@javax.annotation.Nullable Boolean cacheEnable) {
    this.cacheEnable = cacheEnable;
    return this;
  }

  /**
   * Get cacheEnable
   * @return cacheEnable
   */
  @javax.annotation.Nullable
  public Boolean getCacheEnable() {
    return cacheEnable;
  }

  public void setCacheEnable(@javax.annotation.Nullable Boolean cacheEnable) {
    this.cacheEnable = cacheEnable;
  }


  public CacheConfigPart cacheEncryptionKey(@javax.annotation.Nullable String cacheEncryptionKey) {
    this.cacheEncryptionKey = cacheEncryptionKey;
    return this;
  }

  /**
   * Get cacheEncryptionKey
   * @return cacheEncryptionKey
   */
  @javax.annotation.Nullable
  public String getCacheEncryptionKey() {
    return cacheEncryptionKey;
  }

  public void setCacheEncryptionKey(@javax.annotation.Nullable String cacheEncryptionKey) {
    this.cacheEncryptionKey = cacheEncryptionKey;
  }


  public CacheConfigPart cacheTtl(@javax.annotation.Nullable String cacheTtl) {
    this.cacheTtl = cacheTtl;
    return this;
  }

  /**
   * Get cacheTtl
   * @return cacheTtl
   */
  @javax.annotation.Nullable
  public String getCacheTtl() {
    return cacheTtl;
  }

  public void setCacheTtl(@javax.annotation.Nullable String cacheTtl) {
    this.cacheTtl = cacheTtl;
  }


  public CacheConfigPart newProactiveCacheEnable(@javax.annotation.Nullable Boolean newProactiveCacheEnable) {
    this.newProactiveCacheEnable = newProactiveCacheEnable;
    return this;
  }

  /**
   * Get newProactiveCacheEnable
   * @return newProactiveCacheEnable
   */
  @javax.annotation.Nullable
  public Boolean getNewProactiveCacheEnable() {
    return newProactiveCacheEnable;
  }

  public void setNewProactiveCacheEnable(@javax.annotation.Nullable Boolean newProactiveCacheEnable) {
    this.newProactiveCacheEnable = newProactiveCacheEnable;
  }


  public CacheConfigPart proactiveCacheDumpInterval(@javax.annotation.Nullable String proactiveCacheDumpInterval) {
    this.proactiveCacheDumpInterval = proactiveCacheDumpInterval;
    return this;
  }

  /**
   * Get proactiveCacheDumpInterval
   * @return proactiveCacheDumpInterval
   */
  @javax.annotation.Nullable
  public String getProactiveCacheDumpInterval() {
    return proactiveCacheDumpInterval;
  }

  public void setProactiveCacheDumpInterval(@javax.annotation.Nullable String proactiveCacheDumpInterval) {
    this.proactiveCacheDumpInterval = proactiveCacheDumpInterval;
  }


  public CacheConfigPart proactiveCacheEnable(@javax.annotation.Nullable Boolean proactiveCacheEnable) {
    this.proactiveCacheEnable = proactiveCacheEnable;
    return this;
  }

  /**
   * Get proactiveCacheEnable
   * @return proactiveCacheEnable
   */
  @javax.annotation.Nullable
  public Boolean getProactiveCacheEnable() {
    return proactiveCacheEnable;
  }

  public void setProactiveCacheEnable(@javax.annotation.Nullable Boolean proactiveCacheEnable) {
    this.proactiveCacheEnable = proactiveCacheEnable;
  }


  public CacheConfigPart proactiveCacheMinimumFetchingTime(@javax.annotation.Nullable String proactiveCacheMinimumFetchingTime) {
    this.proactiveCacheMinimumFetchingTime = proactiveCacheMinimumFetchingTime;
    return this;
  }

  /**
   * Get proactiveCacheMinimumFetchingTime
   * @return proactiveCacheMinimumFetchingTime
   */
  @javax.annotation.Nullable
  public String getProactiveCacheMinimumFetchingTime() {
    return proactiveCacheMinimumFetchingTime;
  }

  public void setProactiveCacheMinimumFetchingTime(@javax.annotation.Nullable String proactiveCacheMinimumFetchingTime) {
    this.proactiveCacheMinimumFetchingTime = proactiveCacheMinimumFetchingTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheConfigPart cacheConfigPart = (CacheConfigPart) o;
    return Objects.equals(this.cacheEnable, cacheConfigPart.cacheEnable) &&
        Objects.equals(this.cacheEncryptionKey, cacheConfigPart.cacheEncryptionKey) &&
        Objects.equals(this.cacheTtl, cacheConfigPart.cacheTtl) &&
        Objects.equals(this.newProactiveCacheEnable, cacheConfigPart.newProactiveCacheEnable) &&
        Objects.equals(this.proactiveCacheDumpInterval, cacheConfigPart.proactiveCacheDumpInterval) &&
        Objects.equals(this.proactiveCacheEnable, cacheConfigPart.proactiveCacheEnable) &&
        Objects.equals(this.proactiveCacheMinimumFetchingTime, cacheConfigPart.proactiveCacheMinimumFetchingTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheEnable, cacheEncryptionKey, cacheTtl, newProactiveCacheEnable, proactiveCacheDumpInterval, proactiveCacheEnable, proactiveCacheMinimumFetchingTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheConfigPart {\n");
    sb.append("    cacheEnable: ").append(toIndentedString(cacheEnable)).append("\n");
    sb.append("    cacheEncryptionKey: ").append(toIndentedString(cacheEncryptionKey)).append("\n");
    sb.append("    cacheTtl: ").append(toIndentedString(cacheTtl)).append("\n");
    sb.append("    newProactiveCacheEnable: ").append(toIndentedString(newProactiveCacheEnable)).append("\n");
    sb.append("    proactiveCacheDumpInterval: ").append(toIndentedString(proactiveCacheDumpInterval)).append("\n");
    sb.append("    proactiveCacheEnable: ").append(toIndentedString(proactiveCacheEnable)).append("\n");
    sb.append("    proactiveCacheMinimumFetchingTime: ").append(toIndentedString(proactiveCacheMinimumFetchingTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_enable");
    openapiFields.add("cache_encryption_key");
    openapiFields.add("cache_ttl");
    openapiFields.add("new_proactive_cache_enable");
    openapiFields.add("proactive_cache_dump_interval");
    openapiFields.add("proactive_cache_enable");
    openapiFields.add("proactive_cache_minimum_fetching_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CacheConfigPart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheConfigPart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheConfigPart is not found in the empty JSON string", CacheConfigPart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheConfigPart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheConfigPart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cache_encryption_key") != null && !jsonObj.get("cache_encryption_key").isJsonNull()) && !jsonObj.get("cache_encryption_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache_encryption_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cache_encryption_key").toString()));
      }
      if ((jsonObj.get("cache_ttl") != null && !jsonObj.get("cache_ttl").isJsonNull()) && !jsonObj.get("cache_ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache_ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cache_ttl").toString()));
      }
      if ((jsonObj.get("proactive_cache_dump_interval") != null && !jsonObj.get("proactive_cache_dump_interval").isJsonNull()) && !jsonObj.get("proactive_cache_dump_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proactive_cache_dump_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proactive_cache_dump_interval").toString()));
      }
      if ((jsonObj.get("proactive_cache_minimum_fetching_time") != null && !jsonObj.get("proactive_cache_minimum_fetching_time").isJsonNull()) && !jsonObj.get("proactive_cache_minimum_fetching_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proactive_cache_minimum_fetching_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proactive_cache_minimum_fetching_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheConfigPart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheConfigPart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheConfigPart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheConfigPart.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheConfigPart>() {
           @Override
           public void write(JsonWriter out, CacheConfigPart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheConfigPart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CacheConfigPart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CacheConfigPart
   * @throws IOException if the JSON string is invalid with respect to CacheConfigPart
   */
  public static CacheConfigPart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheConfigPart.class);
  }

  /**
   * Convert an instance of CacheConfigPart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

