/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretCreateGoogleWorkspace is a command that creates Google Workspace dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretCreateGoogleWorkspace {
  public static final String SERIALIZED_NAME_ACCESS_MODE = "access-mode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  @javax.annotation.Nonnull
  private String accessMode;

  public static final String SERIALIZED_NAME_ADMIN_EMAIL = "admin-email";
  @SerializedName(SERIALIZED_NAME_ADMIN_EMAIL)
  @javax.annotation.Nonnull
  private String adminEmail;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME = "fixed-user-claim-keyname";
  @SerializedName(SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME)
  @javax.annotation.Nullable
  private String fixedUserClaimKeyname = "ext_email";

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  @javax.annotation.Nullable
  private String gcpKey;

  public static final String SERIALIZED_NAME_GROUP_EMAIL = "group-email";
  @SerializedName(SERIALIZED_NAME_GROUP_EMAIL)
  @javax.annotation.Nullable
  private String groupEmail;

  public static final String SERIALIZED_NAME_GROUP_ROLE = "group-role";
  @SerializedName(SERIALIZED_NAME_GROUP_ROLE)
  @javax.annotation.Nullable
  private String groupRole;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_ROLE_NAME = "role-name";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  @javax.annotation.Nullable
  private String roleName;

  public static final String SERIALIZED_NAME_ROLE_SCOPE = "role-scope";
  @SerializedName(SERIALIZED_NAME_ROLE_SCOPE)
  @javax.annotation.Nullable
  private String roleScope;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_URL = "secure-access-url";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_URL)
  @javax.annotation.Nullable
  private String secureAccessUrl;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = true;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING = "secure-access-web-browsing";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING)
  @javax.annotation.Nullable
  private Boolean secureAccessWebBrowsing = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY = "secure-access-web-proxy";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY)
  @javax.annotation.Nullable
  private Boolean secureAccessWebProxy = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretCreateGoogleWorkspace() {
  }

  public DynamicSecretCreateGoogleWorkspace accessMode(@javax.annotation.Nonnull String accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nonnull
  public String getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(@javax.annotation.Nonnull String accessMode) {
    this.accessMode = accessMode;
  }


  public DynamicSecretCreateGoogleWorkspace adminEmail(@javax.annotation.Nonnull String adminEmail) {
    this.adminEmail = adminEmail;
    return this;
  }

  /**
   * Admin user email
   * @return adminEmail
   */
  @javax.annotation.Nonnull
  public String getAdminEmail() {
    return adminEmail;
  }

  public void setAdminEmail(@javax.annotation.Nonnull String adminEmail) {
    this.adminEmail = adminEmail;
  }


  public DynamicSecretCreateGoogleWorkspace deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretCreateGoogleWorkspace description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretCreateGoogleWorkspace fixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
    return this;
  }

  /**
   * For externally provided users, denotes the key-name of IdP claim to extract the username from
   * @return fixedUserClaimKeyname
   */
  @javax.annotation.Nullable
  public String getFixedUserClaimKeyname() {
    return fixedUserClaimKeyname;
  }

  public void setFixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
  }


  public DynamicSecretCreateGoogleWorkspace gcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
    return this;
  }

  /**
   * Base64-encoded service account private key text
   * @return gcpKey
   */
  @javax.annotation.Nullable
  public String getGcpKey() {
    return gcpKey;
  }

  public void setGcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public DynamicSecretCreateGoogleWorkspace groupEmail(@javax.annotation.Nullable String groupEmail) {
    this.groupEmail = groupEmail;
    return this;
  }

  /**
   * A group email, relevant only for group access-mode
   * @return groupEmail
   */
  @javax.annotation.Nullable
  public String getGroupEmail() {
    return groupEmail;
  }

  public void setGroupEmail(@javax.annotation.Nullable String groupEmail) {
    this.groupEmail = groupEmail;
  }


  public DynamicSecretCreateGoogleWorkspace groupRole(@javax.annotation.Nullable String groupRole) {
    this.groupRole = groupRole;
    return this;
  }

  /**
   * Get groupRole
   * @return groupRole
   */
  @javax.annotation.Nullable
  public String getGroupRole() {
    return groupRole;
  }

  public void setGroupRole(@javax.annotation.Nullable String groupRole) {
    this.groupRole = groupRole;
  }


  public DynamicSecretCreateGoogleWorkspace json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretCreateGoogleWorkspace name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretCreateGoogleWorkspace producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretCreateGoogleWorkspace roleName(@javax.annotation.Nullable String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * Name of the admin role to assign to the user, relevant only for role access-mode
   * @return roleName
   */
  @javax.annotation.Nullable
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(@javax.annotation.Nullable String roleName) {
    this.roleName = roleName;
  }


  public DynamicSecretCreateGoogleWorkspace roleScope(@javax.annotation.Nullable String roleScope) {
    this.roleScope = roleScope;
    return this;
  }

  /**
   * Get roleScope
   * @return roleScope
   */
  @javax.annotation.Nullable
  public String getRoleScope() {
    return roleScope;
  }

  public void setRoleScope(@javax.annotation.Nullable String roleScope) {
    this.roleScope = roleScope;
  }


  public DynamicSecretCreateGoogleWorkspace secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public DynamicSecretCreateGoogleWorkspace secureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
    return this;
  }

  /**
   * Destination URL to inject secrets
   * @return secureAccessUrl
   */
  @javax.annotation.Nullable
  public String getSecureAccessUrl() {
    return secureAccessUrl;
  }

  public void setSecureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
  }


  public DynamicSecretCreateGoogleWorkspace secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public DynamicSecretCreateGoogleWorkspace secureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
    return this;
  }

  /**
   * Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebBrowsing
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebBrowsing() {
    return secureAccessWebBrowsing;
  }

  public void setSecureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
  }


  public DynamicSecretCreateGoogleWorkspace secureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
    return this;
  }

  /**
   * Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebProxy
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebProxy() {
    return secureAccessWebProxy;
  }

  public void setSecureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
  }


  public DynamicSecretCreateGoogleWorkspace tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretCreateGoogleWorkspace addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretCreateGoogleWorkspace targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Name of existing target to use in dynamic secret creation
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretCreateGoogleWorkspace token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretCreateGoogleWorkspace uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretCreateGoogleWorkspace userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretCreateGoogleWorkspace dynamicSecretCreateGoogleWorkspace = (DynamicSecretCreateGoogleWorkspace) o;
    return Objects.equals(this.accessMode, dynamicSecretCreateGoogleWorkspace.accessMode) &&
        Objects.equals(this.adminEmail, dynamicSecretCreateGoogleWorkspace.adminEmail) &&
        Objects.equals(this.deleteProtection, dynamicSecretCreateGoogleWorkspace.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretCreateGoogleWorkspace.description) &&
        Objects.equals(this.fixedUserClaimKeyname, dynamicSecretCreateGoogleWorkspace.fixedUserClaimKeyname) &&
        Objects.equals(this.gcpKey, dynamicSecretCreateGoogleWorkspace.gcpKey) &&
        Objects.equals(this.groupEmail, dynamicSecretCreateGoogleWorkspace.groupEmail) &&
        Objects.equals(this.groupRole, dynamicSecretCreateGoogleWorkspace.groupRole) &&
        Objects.equals(this.json, dynamicSecretCreateGoogleWorkspace.json) &&
        Objects.equals(this.name, dynamicSecretCreateGoogleWorkspace.name) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretCreateGoogleWorkspace.producerEncryptionKeyName) &&
        Objects.equals(this.roleName, dynamicSecretCreateGoogleWorkspace.roleName) &&
        Objects.equals(this.roleScope, dynamicSecretCreateGoogleWorkspace.roleScope) &&
        Objects.equals(this.secureAccessEnable, dynamicSecretCreateGoogleWorkspace.secureAccessEnable) &&
        Objects.equals(this.secureAccessUrl, dynamicSecretCreateGoogleWorkspace.secureAccessUrl) &&
        Objects.equals(this.secureAccessWeb, dynamicSecretCreateGoogleWorkspace.secureAccessWeb) &&
        Objects.equals(this.secureAccessWebBrowsing, dynamicSecretCreateGoogleWorkspace.secureAccessWebBrowsing) &&
        Objects.equals(this.secureAccessWebProxy, dynamicSecretCreateGoogleWorkspace.secureAccessWebProxy) &&
        Objects.equals(this.tags, dynamicSecretCreateGoogleWorkspace.tags) &&
        Objects.equals(this.targetName, dynamicSecretCreateGoogleWorkspace.targetName) &&
        Objects.equals(this.token, dynamicSecretCreateGoogleWorkspace.token) &&
        Objects.equals(this.uidToken, dynamicSecretCreateGoogleWorkspace.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretCreateGoogleWorkspace.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMode, adminEmail, deleteProtection, description, fixedUserClaimKeyname, gcpKey, groupEmail, groupRole, json, name, producerEncryptionKeyName, roleName, roleScope, secureAccessEnable, secureAccessUrl, secureAccessWeb, secureAccessWebBrowsing, secureAccessWebProxy, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretCreateGoogleWorkspace {\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    adminEmail: ").append(toIndentedString(adminEmail)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixedUserClaimKeyname: ").append(toIndentedString(fixedUserClaimKeyname)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    groupEmail: ").append(toIndentedString(groupEmail)).append("\n");
    sb.append("    groupRole: ").append(toIndentedString(groupRole)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    roleScope: ").append(toIndentedString(roleScope)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessUrl: ").append(toIndentedString(secureAccessUrl)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    secureAccessWebBrowsing: ").append(toIndentedString(secureAccessWebBrowsing)).append("\n");
    sb.append("    secureAccessWebProxy: ").append(toIndentedString(secureAccessWebProxy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access-mode");
    openapiFields.add("admin-email");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("fixed-user-claim-keyname");
    openapiFields.add("gcp-key");
    openapiFields.add("group-email");
    openapiFields.add("group-role");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("role-name");
    openapiFields.add("role-scope");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-url");
    openapiFields.add("secure-access-web");
    openapiFields.add("secure-access-web-browsing");
    openapiFields.add("secure-access-web-proxy");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access-mode");
    openapiRequiredFields.add("admin-email");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretCreateGoogleWorkspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretCreateGoogleWorkspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretCreateGoogleWorkspace is not found in the empty JSON string", DynamicSecretCreateGoogleWorkspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretCreateGoogleWorkspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretCreateGoogleWorkspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretCreateGoogleWorkspace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access-mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-mode").toString()));
      }
      if (!jsonObj.get("admin-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-email").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fixed-user-claim-keyname") != null && !jsonObj.get("fixed-user-claim-keyname").isJsonNull()) && !jsonObj.get("fixed-user-claim-keyname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed-user-claim-keyname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed-user-claim-keyname").toString()));
      }
      if ((jsonObj.get("gcp-key") != null && !jsonObj.get("gcp-key").isJsonNull()) && !jsonObj.get("gcp-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key").toString()));
      }
      if ((jsonObj.get("group-email") != null && !jsonObj.get("group-email").isJsonNull()) && !jsonObj.get("group-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-email").toString()));
      }
      if ((jsonObj.get("group-role") != null && !jsonObj.get("group-role").isJsonNull()) && !jsonObj.get("group-role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-role").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("role-name") != null && !jsonObj.get("role-name").isJsonNull()) && !jsonObj.get("role-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role-name").toString()));
      }
      if ((jsonObj.get("role-scope") != null && !jsonObj.get("role-scope").isJsonNull()) && !jsonObj.get("role-scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role-scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role-scope").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      if ((jsonObj.get("secure-access-url") != null && !jsonObj.get("secure-access-url").isJsonNull()) && !jsonObj.get("secure-access-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretCreateGoogleWorkspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretCreateGoogleWorkspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretCreateGoogleWorkspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretCreateGoogleWorkspace.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretCreateGoogleWorkspace>() {
           @Override
           public void write(JsonWriter out, DynamicSecretCreateGoogleWorkspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretCreateGoogleWorkspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretCreateGoogleWorkspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretCreateGoogleWorkspace
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretCreateGoogleWorkspace
   */
  public static DynamicSecretCreateGoogleWorkspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretCreateGoogleWorkspace.class);
  }

  /**
   * Convert an instance of DynamicSecretCreateGoogleWorkspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

