/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateAllowedAccess is a command that update allowed access in Gator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateAllowedAccess {
  public static final String SERIALIZED_NAME_SUB_CLAIMS_CASE_INSENSITIVE = "SubClaimsCaseInsensitive";
  @SerializedName(SERIALIZED_NAME_SUB_CLAIMS_CASE_INSENSITIVE)
  @javax.annotation.Nullable
  private Boolean subClaimsCaseInsensitive;

  public static final String SERIALIZED_NAME_ACCESS_ID = "access-id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  @javax.annotation.Nonnull
  private String accessId;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "case-sensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  @javax.annotation.Nullable
  private String caseSensitive = "true";

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  @javax.annotation.Nullable
  private String permissions;

  public static final String SERIALIZED_NAME_SUB_CLAIMS = "sub-claims";
  @SerializedName(SERIALIZED_NAME_SUB_CLAIMS)
  @javax.annotation.Nullable
  private Map<String, String> subClaims = new HashMap<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public GatewayUpdateAllowedAccess() {
  }

  public GatewayUpdateAllowedAccess subClaimsCaseInsensitive(@javax.annotation.Nullable Boolean subClaimsCaseInsensitive) {
    this.subClaimsCaseInsensitive = subClaimsCaseInsensitive;
    return this;
  }

  /**
   * Get subClaimsCaseInsensitive
   * @return subClaimsCaseInsensitive
   */
  @javax.annotation.Nullable
  public Boolean getSubClaimsCaseInsensitive() {
    return subClaimsCaseInsensitive;
  }

  public void setSubClaimsCaseInsensitive(@javax.annotation.Nullable Boolean subClaimsCaseInsensitive) {
    this.subClaimsCaseInsensitive = subClaimsCaseInsensitive;
  }


  public GatewayUpdateAllowedAccess accessId(@javax.annotation.Nonnull String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * Access ID The access id to be attached to this allowed access. Auth method with this access id should already exist.
   * @return accessId
   */
  @javax.annotation.Nonnull
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(@javax.annotation.Nonnull String accessId) {
    this.accessId = accessId;
  }


  public GatewayUpdateAllowedAccess caseSensitive(@javax.annotation.Nullable String caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

  /**
   * Treat sub claims as case-sensitive [true/false]
   * @return caseSensitive
   */
  @javax.annotation.Nullable
  public String getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(@javax.annotation.Nullable String caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public GatewayUpdateAllowedAccess description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Allowed access description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public GatewayUpdateAllowedAccess json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateAllowedAccess name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Allowed access name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayUpdateAllowedAccess newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New allowed access name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public GatewayUpdateAllowedAccess permissions(@javax.annotation.Nullable String permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Permissions  Comma-seperated list of permissions for this allowed access. Available permissions: [defaults,targets,classic_keys,automatic_migration,ldap_auth,dynamic_secret,k8s_auth,log_forwarding,zero_knowledge_encryption,rotated_secret,caching,event_forwarding,admin,kmip,general]
   * @return permissions
   */
  @javax.annotation.Nullable
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(@javax.annotation.Nullable String permissions) {
    this.permissions = permissions;
  }


  public GatewayUpdateAllowedAccess subClaims(@javax.annotation.Nullable Map<String, String> subClaims) {
    this.subClaims = subClaims;
    return this;
  }

  public GatewayUpdateAllowedAccess putSubClaimsItem(String key, String subClaimsItem) {
    if (this.subClaims == null) {
      this.subClaims = new HashMap<>();
    }
    this.subClaims.put(key, subClaimsItem);
    return this;
  }

  /**
   * Sub claims key/val of sub claims, e.g group&#x3D;admins,developers
   * @return subClaims
   */
  @javax.annotation.Nullable
  public Map<String, String> getSubClaims() {
    return subClaims;
  }

  public void setSubClaims(@javax.annotation.Nullable Map<String, String> subClaims) {
    this.subClaims = subClaims;
  }


  public GatewayUpdateAllowedAccess token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateAllowedAccess uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateAllowedAccess gatewayUpdateAllowedAccess = (GatewayUpdateAllowedAccess) o;
    return Objects.equals(this.subClaimsCaseInsensitive, gatewayUpdateAllowedAccess.subClaimsCaseInsensitive) &&
        Objects.equals(this.accessId, gatewayUpdateAllowedAccess.accessId) &&
        Objects.equals(this.caseSensitive, gatewayUpdateAllowedAccess.caseSensitive) &&
        Objects.equals(this.description, gatewayUpdateAllowedAccess.description) &&
        Objects.equals(this.json, gatewayUpdateAllowedAccess.json) &&
        Objects.equals(this.name, gatewayUpdateAllowedAccess.name) &&
        Objects.equals(this.newName, gatewayUpdateAllowedAccess.newName) &&
        Objects.equals(this.permissions, gatewayUpdateAllowedAccess.permissions) &&
        Objects.equals(this.subClaims, gatewayUpdateAllowedAccess.subClaims) &&
        Objects.equals(this.token, gatewayUpdateAllowedAccess.token) &&
        Objects.equals(this.uidToken, gatewayUpdateAllowedAccess.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subClaimsCaseInsensitive, accessId, caseSensitive, description, json, name, newName, permissions, subClaims, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateAllowedAccess {\n");
    sb.append("    subClaimsCaseInsensitive: ").append(toIndentedString(subClaimsCaseInsensitive)).append("\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    subClaims: ").append(toIndentedString(subClaims)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubClaimsCaseInsensitive");
    openapiFields.add("access-id");
    openapiFields.add("case-sensitive");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("permissions");
    openapiFields.add("sub-claims");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access-id");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateAllowedAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateAllowedAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateAllowedAccess is not found in the empty JSON string", GatewayUpdateAllowedAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateAllowedAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateAllowedAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayUpdateAllowedAccess.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-id").toString()));
      }
      if ((jsonObj.get("case-sensitive") != null && !jsonObj.get("case-sensitive").isJsonNull()) && !jsonObj.get("case-sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `case-sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("case-sensitive").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateAllowedAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateAllowedAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateAllowedAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateAllowedAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateAllowedAccess>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateAllowedAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateAllowedAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateAllowedAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateAllowedAccess
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateAllowedAccess
   */
  public static GatewayUpdateAllowedAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateAllowedAccess.class);
  }

  /**
   * Convert an instance of GatewayUpdateAllowedAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

