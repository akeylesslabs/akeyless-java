/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UpdateSecretVal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateSecretVal {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  @javax.annotation.Nullable
  private String accessibility = "regular";

  public static final String SERIALIZED_NAME_CUSTOM_FIELD = "custom-field";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD)
  @javax.annotation.Nullable
  private Map<String, String> customField = new HashMap<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private String format = "text";

  public static final String SERIALIZED_NAME_INJECT_URL = "inject-url";
  @SerializedName(SERIALIZED_NAME_INJECT_URL)
  @javax.annotation.Nullable
  private List<String> injectUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_LAST_VERSION = "last-version";
  @SerializedName(SERIALIZED_NAME_LAST_VERSION)
  @javax.annotation.Nullable
  private Integer lastVersion;

  public static final String SERIALIZED_NAME_MULTILINE = "multiline";
  @SerializedName(SERIALIZED_NAME_MULTILINE)
  @javax.annotation.Nullable
  private Boolean multiline;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_VERSION = "new-version";
  @SerializedName(SERIALIZED_NAME_NEW_VERSION)
  @javax.annotation.Nullable
  private Boolean newVersion;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private String value;

  public UpdateSecretVal() {
  }

  public UpdateSecretVal accessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * for personal password manager
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
  }


  public UpdateSecretVal customField(@javax.annotation.Nullable Map<String, String> customField) {
    this.customField = customField;
    return this;
  }

  public UpdateSecretVal putCustomFieldItem(String key, String customFieldItem) {
    if (this.customField == null) {
      this.customField = new HashMap<>();
    }
    this.customField.put(key, customFieldItem);
    return this;
  }

  /**
   * For Password Management use, additional fields
   * @return customField
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomField() {
    return customField;
  }

  public void setCustomField(@javax.annotation.Nullable Map<String, String> customField) {
    this.customField = customField;
  }


  public UpdateSecretVal format(@javax.annotation.Nullable String format) {
    this.format = format;
    return this;
  }

  /**
   * Secret format [text/json/key-value] (relevant only for type &#39;generic&#39;)
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = format;
  }


  public UpdateSecretVal injectUrl(@javax.annotation.Nullable List<String> injectUrl) {
    this.injectUrl = injectUrl;
    return this;
  }

  public UpdateSecretVal addInjectUrlItem(String injectUrlItem) {
    if (this.injectUrl == null) {
      this.injectUrl = new ArrayList<>();
    }
    this.injectUrl.add(injectUrlItem);
    return this;
  }

  /**
   * For Password Management use, reflect the website context
   * @return injectUrl
   */
  @javax.annotation.Nullable
  public List<String> getInjectUrl() {
    return injectUrl;
  }

  public void setInjectUrl(@javax.annotation.Nullable List<String> injectUrl) {
    this.injectUrl = injectUrl;
  }


  public UpdateSecretVal json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateSecretVal keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateSecretVal key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public UpdateSecretVal lastVersion(@javax.annotation.Nullable Integer lastVersion) {
    this.lastVersion = lastVersion;
    return this;
  }

  /**
   * The last version number before the update
   * @return lastVersion
   */
  @javax.annotation.Nullable
  public Integer getLastVersion() {
    return lastVersion;
  }

  public void setLastVersion(@javax.annotation.Nullable Integer lastVersion) {
    this.lastVersion = lastVersion;
  }


  public UpdateSecretVal multiline(@javax.annotation.Nullable Boolean multiline) {
    this.multiline = multiline;
    return this;
  }

  /**
   * The provided value is a multiline value (separated by &#39;\\n&#39;)
   * @return multiline
   */
  @javax.annotation.Nullable
  public Boolean getMultiline() {
    return multiline;
  }

  public void setMultiline(@javax.annotation.Nullable Boolean multiline) {
    this.multiline = multiline;
  }


  public UpdateSecretVal name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateSecretVal newVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
    return this;
  }

  /**
   * Deprecated
   * @return newVersion
   */
  @javax.annotation.Nullable
  public Boolean getNewVersion() {
    return newVersion;
  }

  public void setNewVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
  }


  public UpdateSecretVal password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * For Password Management use, additional fields
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public UpdateSecretVal token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateSecretVal uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public UpdateSecretVal username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * For Password Management use
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public UpdateSecretVal value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * The secret value (relevant only for type &#39;generic&#39;)
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSecretVal updateSecretVal = (UpdateSecretVal) o;
    return Objects.equals(this.accessibility, updateSecretVal.accessibility) &&
        Objects.equals(this.customField, updateSecretVal.customField) &&
        Objects.equals(this.format, updateSecretVal.format) &&
        Objects.equals(this.injectUrl, updateSecretVal.injectUrl) &&
        Objects.equals(this.json, updateSecretVal.json) &&
        Objects.equals(this.keepPrevVersion, updateSecretVal.keepPrevVersion) &&
        Objects.equals(this.key, updateSecretVal.key) &&
        Objects.equals(this.lastVersion, updateSecretVal.lastVersion) &&
        Objects.equals(this.multiline, updateSecretVal.multiline) &&
        Objects.equals(this.name, updateSecretVal.name) &&
        Objects.equals(this.newVersion, updateSecretVal.newVersion) &&
        Objects.equals(this.password, updateSecretVal.password) &&
        Objects.equals(this.token, updateSecretVal.token) &&
        Objects.equals(this.uidToken, updateSecretVal.uidToken) &&
        Objects.equals(this.username, updateSecretVal.username) &&
        Objects.equals(this.value, updateSecretVal.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, customField, format, injectUrl, json, keepPrevVersion, key, lastVersion, multiline, name, newVersion, password, token, uidToken, username, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSecretVal {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    customField: ").append(toIndentedString(customField)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    injectUrl: ").append(toIndentedString(injectUrl)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastVersion: ").append(toIndentedString(lastVersion)).append("\n");
    sb.append("    multiline: ").append(toIndentedString(multiline)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newVersion: ").append(toIndentedString(newVersion)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("custom-field");
    openapiFields.add("format");
    openapiFields.add("inject-url");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("last-version");
    openapiFields.add("multiline");
    openapiFields.add("name");
    openapiFields.add("new-version");
    openapiFields.add("password");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("username");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSecretVal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSecretVal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSecretVal is not found in the empty JSON string", UpdateSecretVal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSecretVal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSecretVal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSecretVal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inject-url") != null && !jsonObj.get("inject-url").isJsonNull() && !jsonObj.get("inject-url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inject-url` to be an array in the JSON string but got `%s`", jsonObj.get("inject-url").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSecretVal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSecretVal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSecretVal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSecretVal.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSecretVal>() {
           @Override
           public void write(JsonWriter out, UpdateSecretVal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSecretVal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSecretVal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSecretVal
   * @throws IOException if the JSON string is invalid with respect to UpdateSecretVal
   */
  public static UpdateSecretVal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSecretVal.class);
  }

  /**
   * Convert an instance of UpdateSecretVal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

