/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SystemAccessCredsSettings describes system access credential settings for account by minutes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SystemAccessCredsSettings {
  public static final String SERIALIZED_NAME_JWT_TTL_DEFAULT = "jwt_ttl_default";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_DEFAULT)
  @javax.annotation.Nullable
  private Long jwtTtlDefault;

  public static final String SERIALIZED_NAME_JWT_TTL_MAXIMUM = "jwt_ttl_maximum";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_MAXIMUM)
  @javax.annotation.Nullable
  private Long jwtTtlMaximum;

  public static final String SERIALIZED_NAME_JWT_TTL_MINIMUM = "jwt_ttl_minimum";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_MINIMUM)
  @javax.annotation.Nullable
  private Long jwtTtlMinimum;

  public SystemAccessCredsSettings() {
  }

  public SystemAccessCredsSettings jwtTtlDefault(@javax.annotation.Nullable Long jwtTtlDefault) {
    this.jwtTtlDefault = jwtTtlDefault;
    return this;
  }

  /**
   * Get jwtTtlDefault
   * @return jwtTtlDefault
   */
  @javax.annotation.Nullable
  public Long getJwtTtlDefault() {
    return jwtTtlDefault;
  }

  public void setJwtTtlDefault(@javax.annotation.Nullable Long jwtTtlDefault) {
    this.jwtTtlDefault = jwtTtlDefault;
  }


  public SystemAccessCredsSettings jwtTtlMaximum(@javax.annotation.Nullable Long jwtTtlMaximum) {
    this.jwtTtlMaximum = jwtTtlMaximum;
    return this;
  }

  /**
   * Get jwtTtlMaximum
   * @return jwtTtlMaximum
   */
  @javax.annotation.Nullable
  public Long getJwtTtlMaximum() {
    return jwtTtlMaximum;
  }

  public void setJwtTtlMaximum(@javax.annotation.Nullable Long jwtTtlMaximum) {
    this.jwtTtlMaximum = jwtTtlMaximum;
  }


  public SystemAccessCredsSettings jwtTtlMinimum(@javax.annotation.Nullable Long jwtTtlMinimum) {
    this.jwtTtlMinimum = jwtTtlMinimum;
    return this;
  }

  /**
   * Get jwtTtlMinimum
   * @return jwtTtlMinimum
   */
  @javax.annotation.Nullable
  public Long getJwtTtlMinimum() {
    return jwtTtlMinimum;
  }

  public void setJwtTtlMinimum(@javax.annotation.Nullable Long jwtTtlMinimum) {
    this.jwtTtlMinimum = jwtTtlMinimum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemAccessCredsSettings systemAccessCredsSettings = (SystemAccessCredsSettings) o;
    return Objects.equals(this.jwtTtlDefault, systemAccessCredsSettings.jwtTtlDefault) &&
        Objects.equals(this.jwtTtlMaximum, systemAccessCredsSettings.jwtTtlMaximum) &&
        Objects.equals(this.jwtTtlMinimum, systemAccessCredsSettings.jwtTtlMinimum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jwtTtlDefault, jwtTtlMaximum, jwtTtlMinimum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemAccessCredsSettings {\n");
    sb.append("    jwtTtlDefault: ").append(toIndentedString(jwtTtlDefault)).append("\n");
    sb.append("    jwtTtlMaximum: ").append(toIndentedString(jwtTtlMaximum)).append("\n");
    sb.append("    jwtTtlMinimum: ").append(toIndentedString(jwtTtlMinimum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jwt_ttl_default");
    openapiFields.add("jwt_ttl_maximum");
    openapiFields.add("jwt_ttl_minimum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemAccessCredsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemAccessCredsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemAccessCredsSettings is not found in the empty JSON string", SystemAccessCredsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemAccessCredsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemAccessCredsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemAccessCredsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemAccessCredsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemAccessCredsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemAccessCredsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemAccessCredsSettings>() {
           @Override
           public void write(JsonWriter out, SystemAccessCredsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemAccessCredsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemAccessCredsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemAccessCredsSettings
   * @throws IOException if the JSON string is invalid with respect to SystemAccessCredsSettings
   */
  public static SystemAccessCredsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemAccessCredsSettings.class);
  }

  /**
   * Convert an instance of SystemAccessCredsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

