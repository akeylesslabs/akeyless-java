/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CreateClassicKey is a command that creates classic key
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateClassicKey {
  public static final String SERIALIZED_NAME_ALG = "alg";
  @SerializedName(SERIALIZED_NAME_ALG)
  @javax.annotation.Nonnull
  private String alg;

  public static final String SERIALIZED_NAME_AUTO_ROTATE = "auto-rotate";
  @SerializedName(SERIALIZED_NAME_AUTO_ROTATE)
  @javax.annotation.Nullable
  private String autoRotate;

  public static final String SERIALIZED_NAME_CERT_FILE_DATA = "cert-file-data";
  @SerializedName(SERIALIZED_NAME_CERT_FILE_DATA)
  @javax.annotation.Nullable
  private String certFileData;

  public static final String SERIALIZED_NAME_CERTIFICATE_COMMON_NAME = "certificate-common-name";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_COMMON_NAME)
  @javax.annotation.Nullable
  private String certificateCommonName;

  public static final String SERIALIZED_NAME_CERTIFICATE_COUNTRY = "certificate-country";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_COUNTRY)
  @javax.annotation.Nullable
  private String certificateCountry;

  public static final String SERIALIZED_NAME_CERTIFICATE_DIGEST_ALGO = "certificate-digest-algo";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_DIGEST_ALGO)
  @javax.annotation.Nullable
  private String certificateDigestAlgo;

  public static final String SERIALIZED_NAME_CERTIFICATE_FORMAT = "certificate-format";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_FORMAT)
  @javax.annotation.Nullable
  private String certificateFormat;

  public static final String SERIALIZED_NAME_CERTIFICATE_LOCALITY = "certificate-locality";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_LOCALITY)
  @javax.annotation.Nullable
  private String certificateLocality;

  public static final String SERIALIZED_NAME_CERTIFICATE_ORGANIZATION = "certificate-organization";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ORGANIZATION)
  @javax.annotation.Nullable
  private String certificateOrganization;

  public static final String SERIALIZED_NAME_CERTIFICATE_PROVINCE = "certificate-province";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PROVINCE)
  @javax.annotation.Nullable
  private String certificateProvince;

  public static final String SERIALIZED_NAME_CERTIFICATE_TTL = "certificate-ttl";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TTL)
  @javax.annotation.Nullable
  private Long certificateTtl;

  public static final String SERIALIZED_NAME_CONF_FILE_DATA = "conf-file-data";
  @SerializedName(SERIALIZED_NAME_CONF_FILE_DATA)
  @javax.annotation.Nullable
  private String confFileData;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXPIRATION_EVENT_IN = "expiration-event-in";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> expirationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATE_SELF_SIGNED_CERTIFICATE = "generate-self-signed-certificate";
  @SerializedName(SERIALIZED_NAME_GENERATE_SELF_SIGNED_CERTIFICATE)
  @javax.annotation.Nullable
  private Boolean generateSelfSignedCertificate;

  public static final String SERIALIZED_NAME_GPG_ALG = "gpg-alg";
  @SerializedName(SERIALIZED_NAME_GPG_ALG)
  @javax.annotation.Nullable
  private String gpgAlg;

  public static final String SERIALIZED_NAME_HASH_ALGORITHM = "hash-algorithm";
  @SerializedName(SERIALIZED_NAME_HASH_ALGORITHM)
  @javax.annotation.Nullable
  private String hashAlgorithm = "SHA256";

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_DATA = "key-data";
  @SerializedName(SERIALIZED_NAME_KEY_DATA)
  @javax.annotation.Nullable
  private String keyData;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private String metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROTECTION_KEY_NAME = "protection-key-name";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY_NAME)
  @javax.annotation.Nullable
  private String protectionKeyName;

  public static final String SERIALIZED_NAME_ROTATION_EVENT_IN = "rotation-event-in";
  @SerializedName(SERIALIZED_NAME_ROTATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> rotationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATION_INTERVAL = "rotation-interval";
  @SerializedName(SERIALIZED_NAME_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private String rotationInterval;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public CreateClassicKey() {
  }

  public CreateClassicKey alg(@javax.annotation.Nonnull String alg) {
    this.alg = alg;
    return this;
  }

  /**
   * Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384, GPG]
   * @return alg
   */
  @javax.annotation.Nonnull
  public String getAlg() {
    return alg;
  }

  public void setAlg(@javax.annotation.Nonnull String alg) {
    this.alg = alg;
  }


  public CreateClassicKey autoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
    return this;
  }

  /**
   * Whether to automatically rotate every rotation_interval days, or disable existing automatic rotation [true/false]
   * @return autoRotate
   */
  @javax.annotation.Nullable
  public String getAutoRotate() {
    return autoRotate;
  }

  public void setAutoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
  }


  public CreateClassicKey certFileData(@javax.annotation.Nullable String certFileData) {
    this.certFileData = certFileData;
    return this;
  }

  /**
   * Certificate in a PEM format.
   * @return certFileData
   */
  @javax.annotation.Nullable
  public String getCertFileData() {
    return certFileData;
  }

  public void setCertFileData(@javax.annotation.Nullable String certFileData) {
    this.certFileData = certFileData;
  }


  public CreateClassicKey certificateCommonName(@javax.annotation.Nullable String certificateCommonName) {
    this.certificateCommonName = certificateCommonName;
    return this;
  }

  /**
   * Common name for the generated certificate. Relevant only for generate-self-signed-certificate.
   * @return certificateCommonName
   */
  @javax.annotation.Nullable
  public String getCertificateCommonName() {
    return certificateCommonName;
  }

  public void setCertificateCommonName(@javax.annotation.Nullable String certificateCommonName) {
    this.certificateCommonName = certificateCommonName;
  }


  public CreateClassicKey certificateCountry(@javax.annotation.Nullable String certificateCountry) {
    this.certificateCountry = certificateCountry;
    return this;
  }

  /**
   * Country name for the generated certificate. Relevant only for generate-self-signed-certificate.
   * @return certificateCountry
   */
  @javax.annotation.Nullable
  public String getCertificateCountry() {
    return certificateCountry;
  }

  public void setCertificateCountry(@javax.annotation.Nullable String certificateCountry) {
    this.certificateCountry = certificateCountry;
  }


  public CreateClassicKey certificateDigestAlgo(@javax.annotation.Nullable String certificateDigestAlgo) {
    this.certificateDigestAlgo = certificateDigestAlgo;
    return this;
  }

  /**
   * Digest algorithm to be used for the certificate key signing.
   * @return certificateDigestAlgo
   */
  @javax.annotation.Nullable
  public String getCertificateDigestAlgo() {
    return certificateDigestAlgo;
  }

  public void setCertificateDigestAlgo(@javax.annotation.Nullable String certificateDigestAlgo) {
    this.certificateDigestAlgo = certificateDigestAlgo;
  }


  public CreateClassicKey certificateFormat(@javax.annotation.Nullable String certificateFormat) {
    this.certificateFormat = certificateFormat;
    return this;
  }

  /**
   * Get certificateFormat
   * @return certificateFormat
   */
  @javax.annotation.Nullable
  public String getCertificateFormat() {
    return certificateFormat;
  }

  public void setCertificateFormat(@javax.annotation.Nullable String certificateFormat) {
    this.certificateFormat = certificateFormat;
  }


  public CreateClassicKey certificateLocality(@javax.annotation.Nullable String certificateLocality) {
    this.certificateLocality = certificateLocality;
    return this;
  }

  /**
   * Locality for the generated certificate. Relevant only for generate-self-signed-certificate.
   * @return certificateLocality
   */
  @javax.annotation.Nullable
  public String getCertificateLocality() {
    return certificateLocality;
  }

  public void setCertificateLocality(@javax.annotation.Nullable String certificateLocality) {
    this.certificateLocality = certificateLocality;
  }


  public CreateClassicKey certificateOrganization(@javax.annotation.Nullable String certificateOrganization) {
    this.certificateOrganization = certificateOrganization;
    return this;
  }

  /**
   * Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.
   * @return certificateOrganization
   */
  @javax.annotation.Nullable
  public String getCertificateOrganization() {
    return certificateOrganization;
  }

  public void setCertificateOrganization(@javax.annotation.Nullable String certificateOrganization) {
    this.certificateOrganization = certificateOrganization;
  }


  public CreateClassicKey certificateProvince(@javax.annotation.Nullable String certificateProvince) {
    this.certificateProvince = certificateProvince;
    return this;
  }

  /**
   * Province name for the generated certificate. Relevant only for generate-self-signed-certificate.
   * @return certificateProvince
   */
  @javax.annotation.Nullable
  public String getCertificateProvince() {
    return certificateProvince;
  }

  public void setCertificateProvince(@javax.annotation.Nullable String certificateProvince) {
    this.certificateProvince = certificateProvince;
  }


  public CreateClassicKey certificateTtl(@javax.annotation.Nullable Long certificateTtl) {
    this.certificateTtl = certificateTtl;
    return this;
  }

  /**
   * TTL in days for the generated certificate. Required only for generate-self-signed-certificate.
   * @return certificateTtl
   */
  @javax.annotation.Nullable
  public Long getCertificateTtl() {
    return certificateTtl;
  }

  public void setCertificateTtl(@javax.annotation.Nullable Long certificateTtl) {
    this.certificateTtl = certificateTtl;
  }


  public CreateClassicKey confFileData(@javax.annotation.Nullable String confFileData) {
    this.confFileData = confFileData;
    return this;
  }

  /**
   * The csr config data in base64 encoding
   * @return confFileData
   */
  @javax.annotation.Nullable
  public String getConfFileData() {
    return confFileData;
  }

  public void setConfFileData(@javax.annotation.Nullable String confFileData) {
    this.confFileData = confFileData;
  }


  public CreateClassicKey deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public CreateClassicKey description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateClassicKey expirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
    return this;
  }

  public CreateClassicKey addExpirationEventInItem(String expirationEventInItem) {
    if (this.expirationEventIn == null) {
      this.expirationEventIn = new ArrayList<>();
    }
    this.expirationEventIn.add(expirationEventInItem);
    return this;
  }

  /**
   * How many days before the expiration of the certificate would you like to be notified.
   * @return expirationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getExpirationEventIn() {
    return expirationEventIn;
  }

  public void setExpirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
  }


  public CreateClassicKey generateSelfSignedCertificate(@javax.annotation.Nullable Boolean generateSelfSignedCertificate) {
    this.generateSelfSignedCertificate = generateSelfSignedCertificate;
    return this;
  }

  /**
   * Whether to generate a self signed certificate with the key. If set, --certificate-ttl must be provided.
   * @return generateSelfSignedCertificate
   */
  @javax.annotation.Nullable
  public Boolean getGenerateSelfSignedCertificate() {
    return generateSelfSignedCertificate;
  }

  public void setGenerateSelfSignedCertificate(@javax.annotation.Nullable Boolean generateSelfSignedCertificate) {
    this.generateSelfSignedCertificate = generateSelfSignedCertificate;
  }


  public CreateClassicKey gpgAlg(@javax.annotation.Nullable String gpgAlg) {
    this.gpgAlg = gpgAlg;
    return this;
  }

  /**
   * gpg alg: Relevant only if GPG key type selected; options: [RSA1024, RSA2048, RSA3072, RSA4096, Ed25519]
   * @return gpgAlg
   */
  @javax.annotation.Nullable
  public String getGpgAlg() {
    return gpgAlg;
  }

  public void setGpgAlg(@javax.annotation.Nullable String gpgAlg) {
    this.gpgAlg = gpgAlg;
  }


  public CreateClassicKey hashAlgorithm(@javax.annotation.Nullable String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
    return this;
  }

  /**
   * Specifies the hash algorithm used for the encryption key&#39;s operations, available options: [SHA256, SHA384, SHA512]
   * @return hashAlgorithm
   */
  @javax.annotation.Nullable
  public String getHashAlgorithm() {
    return hashAlgorithm;
  }

  public void setHashAlgorithm(@javax.annotation.Nullable String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
  }


  public CreateClassicKey json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateClassicKey keyData(@javax.annotation.Nullable String keyData) {
    this.keyData = keyData;
    return this;
  }

  /**
   * Base64-encoded classic key value
   * @return keyData
   */
  @javax.annotation.Nullable
  public String getKeyData() {
    return keyData;
  }

  public void setKeyData(@javax.annotation.Nullable String keyData) {
    this.keyData = keyData;
  }


  public CreateClassicKey metadata(@javax.annotation.Nullable String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Deprecated - use description
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable String metadata) {
    this.metadata = metadata;
  }


  public CreateClassicKey name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * ClassicKey name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateClassicKey protectionKeyName(@javax.annotation.Nullable String protectionKeyName) {
    this.protectionKeyName = protectionKeyName;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return protectionKeyName
   */
  @javax.annotation.Nullable
  public String getProtectionKeyName() {
    return protectionKeyName;
  }

  public void setProtectionKeyName(@javax.annotation.Nullable String protectionKeyName) {
    this.protectionKeyName = protectionKeyName;
  }


  public CreateClassicKey rotationEventIn(@javax.annotation.Nullable List<String> rotationEventIn) {
    this.rotationEventIn = rotationEventIn;
    return this;
  }

  public CreateClassicKey addRotationEventInItem(String rotationEventInItem) {
    if (this.rotationEventIn == null) {
      this.rotationEventIn = new ArrayList<>();
    }
    this.rotationEventIn.add(rotationEventInItem);
    return this;
  }

  /**
   * How many days before the rotation of the item would you like to be notified
   * @return rotationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getRotationEventIn() {
    return rotationEventIn;
  }

  public void setRotationEventIn(@javax.annotation.Nullable List<String> rotationEventIn) {
    this.rotationEventIn = rotationEventIn;
  }


  public CreateClassicKey rotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
    return this;
  }

  /**
   * The number of days to wait between every automatic rotation (1-365)
   * @return rotationInterval
   */
  @javax.annotation.Nullable
  public String getRotationInterval() {
    return rotationInterval;
  }

  public void setRotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
  }


  public CreateClassicKey tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateClassicKey addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public CreateClassicKey token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateClassicKey uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClassicKey createClassicKey = (CreateClassicKey) o;
    return Objects.equals(this.alg, createClassicKey.alg) &&
        Objects.equals(this.autoRotate, createClassicKey.autoRotate) &&
        Objects.equals(this.certFileData, createClassicKey.certFileData) &&
        Objects.equals(this.certificateCommonName, createClassicKey.certificateCommonName) &&
        Objects.equals(this.certificateCountry, createClassicKey.certificateCountry) &&
        Objects.equals(this.certificateDigestAlgo, createClassicKey.certificateDigestAlgo) &&
        Objects.equals(this.certificateFormat, createClassicKey.certificateFormat) &&
        Objects.equals(this.certificateLocality, createClassicKey.certificateLocality) &&
        Objects.equals(this.certificateOrganization, createClassicKey.certificateOrganization) &&
        Objects.equals(this.certificateProvince, createClassicKey.certificateProvince) &&
        Objects.equals(this.certificateTtl, createClassicKey.certificateTtl) &&
        Objects.equals(this.confFileData, createClassicKey.confFileData) &&
        Objects.equals(this.deleteProtection, createClassicKey.deleteProtection) &&
        Objects.equals(this.description, createClassicKey.description) &&
        Objects.equals(this.expirationEventIn, createClassicKey.expirationEventIn) &&
        Objects.equals(this.generateSelfSignedCertificate, createClassicKey.generateSelfSignedCertificate) &&
        Objects.equals(this.gpgAlg, createClassicKey.gpgAlg) &&
        Objects.equals(this.hashAlgorithm, createClassicKey.hashAlgorithm) &&
        Objects.equals(this.json, createClassicKey.json) &&
        Objects.equals(this.keyData, createClassicKey.keyData) &&
        Objects.equals(this.metadata, createClassicKey.metadata) &&
        Objects.equals(this.name, createClassicKey.name) &&
        Objects.equals(this.protectionKeyName, createClassicKey.protectionKeyName) &&
        Objects.equals(this.rotationEventIn, createClassicKey.rotationEventIn) &&
        Objects.equals(this.rotationInterval, createClassicKey.rotationInterval) &&
        Objects.equals(this.tags, createClassicKey.tags) &&
        Objects.equals(this.token, createClassicKey.token) &&
        Objects.equals(this.uidToken, createClassicKey.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alg, autoRotate, certFileData, certificateCommonName, certificateCountry, certificateDigestAlgo, certificateFormat, certificateLocality, certificateOrganization, certificateProvince, certificateTtl, confFileData, deleteProtection, description, expirationEventIn, generateSelfSignedCertificate, gpgAlg, hashAlgorithm, json, keyData, metadata, name, protectionKeyName, rotationEventIn, rotationInterval, tags, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClassicKey {\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    autoRotate: ").append(toIndentedString(autoRotate)).append("\n");
    sb.append("    certFileData: ").append(toIndentedString(certFileData)).append("\n");
    sb.append("    certificateCommonName: ").append(toIndentedString(certificateCommonName)).append("\n");
    sb.append("    certificateCountry: ").append(toIndentedString(certificateCountry)).append("\n");
    sb.append("    certificateDigestAlgo: ").append(toIndentedString(certificateDigestAlgo)).append("\n");
    sb.append("    certificateFormat: ").append(toIndentedString(certificateFormat)).append("\n");
    sb.append("    certificateLocality: ").append(toIndentedString(certificateLocality)).append("\n");
    sb.append("    certificateOrganization: ").append(toIndentedString(certificateOrganization)).append("\n");
    sb.append("    certificateProvince: ").append(toIndentedString(certificateProvince)).append("\n");
    sb.append("    certificateTtl: ").append(toIndentedString(certificateTtl)).append("\n");
    sb.append("    confFileData: ").append(toIndentedString(confFileData)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationEventIn: ").append(toIndentedString(expirationEventIn)).append("\n");
    sb.append("    generateSelfSignedCertificate: ").append(toIndentedString(generateSelfSignedCertificate)).append("\n");
    sb.append("    gpgAlg: ").append(toIndentedString(gpgAlg)).append("\n");
    sb.append("    hashAlgorithm: ").append(toIndentedString(hashAlgorithm)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyData: ").append(toIndentedString(keyData)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionKeyName: ").append(toIndentedString(protectionKeyName)).append("\n");
    sb.append("    rotationEventIn: ").append(toIndentedString(rotationEventIn)).append("\n");
    sb.append("    rotationInterval: ").append(toIndentedString(rotationInterval)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alg");
    openapiFields.add("auto-rotate");
    openapiFields.add("cert-file-data");
    openapiFields.add("certificate-common-name");
    openapiFields.add("certificate-country");
    openapiFields.add("certificate-digest-algo");
    openapiFields.add("certificate-format");
    openapiFields.add("certificate-locality");
    openapiFields.add("certificate-organization");
    openapiFields.add("certificate-province");
    openapiFields.add("certificate-ttl");
    openapiFields.add("conf-file-data");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("expiration-event-in");
    openapiFields.add("generate-self-signed-certificate");
    openapiFields.add("gpg-alg");
    openapiFields.add("hash-algorithm");
    openapiFields.add("json");
    openapiFields.add("key-data");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("protection-key-name");
    openapiFields.add("rotation-event-in");
    openapiFields.add("rotation-interval");
    openapiFields.add("tags");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alg");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClassicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClassicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClassicKey is not found in the empty JSON string", CreateClassicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClassicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClassicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClassicKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alg").toString()));
      }
      if ((jsonObj.get("auto-rotate") != null && !jsonObj.get("auto-rotate").isJsonNull()) && !jsonObj.get("auto-rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto-rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto-rotate").toString()));
      }
      if ((jsonObj.get("cert-file-data") != null && !jsonObj.get("cert-file-data").isJsonNull()) && !jsonObj.get("cert-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-file-data").toString()));
      }
      if ((jsonObj.get("certificate-common-name") != null && !jsonObj.get("certificate-common-name").isJsonNull()) && !jsonObj.get("certificate-common-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-common-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-common-name").toString()));
      }
      if ((jsonObj.get("certificate-country") != null && !jsonObj.get("certificate-country").isJsonNull()) && !jsonObj.get("certificate-country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-country").toString()));
      }
      if ((jsonObj.get("certificate-digest-algo") != null && !jsonObj.get("certificate-digest-algo").isJsonNull()) && !jsonObj.get("certificate-digest-algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-digest-algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-digest-algo").toString()));
      }
      if ((jsonObj.get("certificate-format") != null && !jsonObj.get("certificate-format").isJsonNull()) && !jsonObj.get("certificate-format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-format").toString()));
      }
      if ((jsonObj.get("certificate-locality") != null && !jsonObj.get("certificate-locality").isJsonNull()) && !jsonObj.get("certificate-locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-locality").toString()));
      }
      if ((jsonObj.get("certificate-organization") != null && !jsonObj.get("certificate-organization").isJsonNull()) && !jsonObj.get("certificate-organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-organization").toString()));
      }
      if ((jsonObj.get("certificate-province") != null && !jsonObj.get("certificate-province").isJsonNull()) && !jsonObj.get("certificate-province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-province").toString()));
      }
      if ((jsonObj.get("conf-file-data") != null && !jsonObj.get("conf-file-data").isJsonNull()) && !jsonObj.get("conf-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conf-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conf-file-data").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expiration-event-in") != null && !jsonObj.get("expiration-event-in").isJsonNull() && !jsonObj.get("expiration-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("expiration-event-in").toString()));
      }
      if ((jsonObj.get("gpg-alg") != null && !jsonObj.get("gpg-alg").isJsonNull()) && !jsonObj.get("gpg-alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpg-alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpg-alg").toString()));
      }
      if ((jsonObj.get("hash-algorithm") != null && !jsonObj.get("hash-algorithm").isJsonNull()) && !jsonObj.get("hash-algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash-algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash-algorithm").toString()));
      }
      if ((jsonObj.get("key-data") != null && !jsonObj.get("key-data").isJsonNull()) && !jsonObj.get("key-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-data").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protection-key-name") != null && !jsonObj.get("protection-key-name").isJsonNull()) && !jsonObj.get("protection-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection-key-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotation-event-in") != null && !jsonObj.get("rotation-event-in").isJsonNull() && !jsonObj.get("rotation-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("rotation-event-in").toString()));
      }
      if ((jsonObj.get("rotation-interval") != null && !jsonObj.get("rotation-interval").isJsonNull()) && !jsonObj.get("rotation-interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation-interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation-interval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClassicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClassicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClassicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClassicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClassicKey>() {
           @Override
           public void write(JsonWriter out, CreateClassicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClassicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClassicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClassicKey
   * @throws IOException if the JSON string is invalid with respect to CreateClassicKey
   */
  public static CreateClassicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClassicKey.class);
  }

  /**
   * Convert an instance of CreateClassicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

