/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CreateRole
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateRole {
  public static final String SERIALIZED_NAME_ANALYTICS_ACCESS = "analytics-access";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ACCESS)
  @javax.annotation.Nullable
  private String analyticsAccess;

  public static final String SERIALIZED_NAME_AUDIT_ACCESS = "audit-access";
  @SerializedName(SERIALIZED_NAME_AUDIT_ACCESS)
  @javax.annotation.Nullable
  private String auditAccess;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EVENT_CENTER_ACCESS = "event-center-access";
  @SerializedName(SERIALIZED_NAME_EVENT_CENTER_ACCESS)
  @javax.annotation.Nullable
  private String eventCenterAccess;

  public static final String SERIALIZED_NAME_EVENT_FORWARDERS_ACCESS = "event-forwarders-access";
  @SerializedName(SERIALIZED_NAME_EVENT_FORWARDERS_ACCESS)
  @javax.annotation.Nullable
  private String eventForwardersAccess;

  public static final String SERIALIZED_NAME_GW_ANALYTICS_ACCESS = "gw-analytics-access";
  @SerializedName(SERIALIZED_NAME_GW_ANALYTICS_ACCESS)
  @javax.annotation.Nullable
  private String gwAnalyticsAccess;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_REVERSE_RBAC_ACCESS = "reverse-rbac-access";
  @SerializedName(SERIALIZED_NAME_REVERSE_RBAC_ACCESS)
  @javax.annotation.Nullable
  private String reverseRbacAccess;

  public static final String SERIALIZED_NAME_SRA_REPORTS_ACCESS = "sra-reports-access";
  @SerializedName(SERIALIZED_NAME_SRA_REPORTS_ACCESS)
  @javax.annotation.Nullable
  private String sraReportsAccess;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USAGE_REPORTS_ACCESS = "usage-reports-access";
  @SerializedName(SERIALIZED_NAME_USAGE_REPORTS_ACCESS)
  @javax.annotation.Nullable
  private String usageReportsAccess;

  public CreateRole() {
  }

  public CreateRole analyticsAccess(@javax.annotation.Nullable String analyticsAccess) {
    this.analyticsAccess = analyticsAccess;
    return this;
  }

  /**
   * Allow this role to view analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
   * @return analyticsAccess
   */
  @javax.annotation.Nullable
  public String getAnalyticsAccess() {
    return analyticsAccess;
  }

  public void setAnalyticsAccess(@javax.annotation.Nullable String analyticsAccess) {
    this.analyticsAccess = analyticsAccess;
  }


  public CreateRole auditAccess(@javax.annotation.Nullable String auditAccess) {
    this.auditAccess = auditAccess;
    return this;
  }

  /**
   * Allow this role to view audit logs. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported, allowing associated auth methods to view audit logs produced by the same auth methods.
   * @return auditAccess
   */
  @javax.annotation.Nullable
  public String getAuditAccess() {
    return auditAccess;
  }

  public void setAuditAccess(@javax.annotation.Nullable String auditAccess) {
    this.auditAccess = auditAccess;
  }


  public CreateRole comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public CreateRole deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public CreateRole description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateRole eventCenterAccess(@javax.annotation.Nullable String eventCenterAccess) {
    this.eventCenterAccess = eventCenterAccess;
    return this;
  }

  /**
   * Allow this role to view Event Center. Currently only &#39;none&#39;, &#39;own&#39; and &#39;all&#39; values are supported
   * @return eventCenterAccess
   */
  @javax.annotation.Nullable
  public String getEventCenterAccess() {
    return eventCenterAccess;
  }

  public void setEventCenterAccess(@javax.annotation.Nullable String eventCenterAccess) {
    this.eventCenterAccess = eventCenterAccess;
  }


  public CreateRole eventForwardersAccess(@javax.annotation.Nullable String eventForwardersAccess) {
    this.eventForwardersAccess = eventForwardersAccess;
    return this;
  }

  /**
   * Allow this role to manage Event Forwarders. Currently only &#39;none&#39; and &#39;all&#39; values are supported.
   * @return eventForwardersAccess
   */
  @javax.annotation.Nullable
  public String getEventForwardersAccess() {
    return eventForwardersAccess;
  }

  public void setEventForwardersAccess(@javax.annotation.Nullable String eventForwardersAccess) {
    this.eventForwardersAccess = eventForwardersAccess;
  }


  public CreateRole gwAnalyticsAccess(@javax.annotation.Nullable String gwAnalyticsAccess) {
    this.gwAnalyticsAccess = gwAnalyticsAccess;
    return this;
  }

  /**
   * Allow this role to view gw analytics. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported, allowing associated auth methods to view reports produced by the same auth methods.
   * @return gwAnalyticsAccess
   */
  @javax.annotation.Nullable
  public String getGwAnalyticsAccess() {
    return gwAnalyticsAccess;
  }

  public void setGwAnalyticsAccess(@javax.annotation.Nullable String gwAnalyticsAccess) {
    this.gwAnalyticsAccess = gwAnalyticsAccess;
  }


  public CreateRole json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateRole name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Role name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateRole reverseRbacAccess(@javax.annotation.Nullable String reverseRbacAccess) {
    this.reverseRbacAccess = reverseRbacAccess;
    return this;
  }

  /**
   * Allow this role to view Reverse RBAC. Supported values: &#39;own&#39;, &#39;all&#39;.
   * @return reverseRbacAccess
   */
  @javax.annotation.Nullable
  public String getReverseRbacAccess() {
    return reverseRbacAccess;
  }

  public void setReverseRbacAccess(@javax.annotation.Nullable String reverseRbacAccess) {
    this.reverseRbacAccess = reverseRbacAccess;
  }


  public CreateRole sraReportsAccess(@javax.annotation.Nullable String sraReportsAccess) {
    this.sraReportsAccess = sraReportsAccess;
    return this;
  }

  /**
   * Allow this role to view SRA Clusters. Currently only &#39;none&#39;, &#39;own&#39;, &#39;all&#39; values are supported.
   * @return sraReportsAccess
   */
  @javax.annotation.Nullable
  public String getSraReportsAccess() {
    return sraReportsAccess;
  }

  public void setSraReportsAccess(@javax.annotation.Nullable String sraReportsAccess) {
    this.sraReportsAccess = sraReportsAccess;
  }


  public CreateRole token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateRole uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public CreateRole usageReportsAccess(@javax.annotation.Nullable String usageReportsAccess) {
    this.usageReportsAccess = usageReportsAccess;
    return this;
  }

  /**
   * Allow this role to view Usage Report. Currently only &#39;none&#39; and &#39;all&#39; values are supported.
   * @return usageReportsAccess
   */
  @javax.annotation.Nullable
  public String getUsageReportsAccess() {
    return usageReportsAccess;
  }

  public void setUsageReportsAccess(@javax.annotation.Nullable String usageReportsAccess) {
    this.usageReportsAccess = usageReportsAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRole createRole = (CreateRole) o;
    return Objects.equals(this.analyticsAccess, createRole.analyticsAccess) &&
        Objects.equals(this.auditAccess, createRole.auditAccess) &&
        Objects.equals(this.comment, createRole.comment) &&
        Objects.equals(this.deleteProtection, createRole.deleteProtection) &&
        Objects.equals(this.description, createRole.description) &&
        Objects.equals(this.eventCenterAccess, createRole.eventCenterAccess) &&
        Objects.equals(this.eventForwardersAccess, createRole.eventForwardersAccess) &&
        Objects.equals(this.gwAnalyticsAccess, createRole.gwAnalyticsAccess) &&
        Objects.equals(this.json, createRole.json) &&
        Objects.equals(this.name, createRole.name) &&
        Objects.equals(this.reverseRbacAccess, createRole.reverseRbacAccess) &&
        Objects.equals(this.sraReportsAccess, createRole.sraReportsAccess) &&
        Objects.equals(this.token, createRole.token) &&
        Objects.equals(this.uidToken, createRole.uidToken) &&
        Objects.equals(this.usageReportsAccess, createRole.usageReportsAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsAccess, auditAccess, comment, deleteProtection, description, eventCenterAccess, eventForwardersAccess, gwAnalyticsAccess, json, name, reverseRbacAccess, sraReportsAccess, token, uidToken, usageReportsAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRole {\n");
    sb.append("    analyticsAccess: ").append(toIndentedString(analyticsAccess)).append("\n");
    sb.append("    auditAccess: ").append(toIndentedString(auditAccess)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventCenterAccess: ").append(toIndentedString(eventCenterAccess)).append("\n");
    sb.append("    eventForwardersAccess: ").append(toIndentedString(eventForwardersAccess)).append("\n");
    sb.append("    gwAnalyticsAccess: ").append(toIndentedString(gwAnalyticsAccess)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reverseRbacAccess: ").append(toIndentedString(reverseRbacAccess)).append("\n");
    sb.append("    sraReportsAccess: ").append(toIndentedString(sraReportsAccess)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    usageReportsAccess: ").append(toIndentedString(usageReportsAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics-access");
    openapiFields.add("audit-access");
    openapiFields.add("comment");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("event-center-access");
    openapiFields.add("event-forwarders-access");
    openapiFields.add("gw-analytics-access");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("reverse-rbac-access");
    openapiFields.add("sra-reports-access");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("usage-reports-access");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRole is not found in the empty JSON string", CreateRole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRole.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analytics-access") != null && !jsonObj.get("analytics-access").isJsonNull()) && !jsonObj.get("analytics-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analytics-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analytics-access").toString()));
      }
      if ((jsonObj.get("audit-access") != null && !jsonObj.get("audit-access").isJsonNull()) && !jsonObj.get("audit-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audit-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audit-access").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("event-center-access") != null && !jsonObj.get("event-center-access").isJsonNull()) && !jsonObj.get("event-center-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-center-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event-center-access").toString()));
      }
      if ((jsonObj.get("event-forwarders-access") != null && !jsonObj.get("event-forwarders-access").isJsonNull()) && !jsonObj.get("event-forwarders-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-forwarders-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event-forwarders-access").toString()));
      }
      if ((jsonObj.get("gw-analytics-access") != null && !jsonObj.get("gw-analytics-access").isJsonNull()) && !jsonObj.get("gw-analytics-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gw-analytics-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gw-analytics-access").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("reverse-rbac-access") != null && !jsonObj.get("reverse-rbac-access").isJsonNull()) && !jsonObj.get("reverse-rbac-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reverse-rbac-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reverse-rbac-access").toString()));
      }
      if ((jsonObj.get("sra-reports-access") != null && !jsonObj.get("sra-reports-access").isJsonNull()) && !jsonObj.get("sra-reports-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sra-reports-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sra-reports-access").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("usage-reports-access") != null && !jsonObj.get("usage-reports-access").isJsonNull()) && !jsonObj.get("usage-reports-access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage-reports-access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage-reports-access").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRole.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRole>() {
           @Override
           public void write(JsonWriter out, CreateRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRole
   * @throws IOException if the JSON string is invalid with respect to CreateRole
   */
  public static CreateRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRole.class);
  }

  /**
   * Convert an instance of CreateRole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

