/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * RegexpTokenizerInfo represents a general Regexp tokenization template
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class RegexpTokenizerInfo {
  public static final String SERIALIZED_NAME_ALPHABET = "alphabet";
  @SerializedName(SERIALIZED_NAME_ALPHABET)
  @javax.annotation.Nullable
  private String alphabet;

  public static final String SERIALIZED_NAME_DECODING_TEMPLATE = "decoding_template";
  @SerializedName(SERIALIZED_NAME_DECODING_TEMPLATE)
  @javax.annotation.Nullable
  private String decodingTemplate;

  public static final String SERIALIZED_NAME_ENCODING_TEMPLATE = "encoding_template";
  @SerializedName(SERIALIZED_NAME_ENCODING_TEMPLATE)
  @javax.annotation.Nullable
  private String encodingTemplate;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  @javax.annotation.Nullable
  private String pattern;

  public RegexpTokenizerInfo() {
  }

  public RegexpTokenizerInfo alphabet(@javax.annotation.Nullable String alphabet) {
    this.alphabet = alphabet;
    return this;
  }

  /**
   * The Alphabet used for the tokenization
   * @return alphabet
   */
  @javax.annotation.Nullable
  public String getAlphabet() {
    return alphabet;
  }

  public void setAlphabet(@javax.annotation.Nullable String alphabet) {
    this.alphabet = alphabet;
  }


  public RegexpTokenizerInfo decodingTemplate(@javax.annotation.Nullable String decodingTemplate) {
    this.decodingTemplate = decodingTemplate;
    return this;
  }

  /**
   * Transformation to perform on the decrypted data
   * @return decodingTemplate
   */
  @javax.annotation.Nullable
  public String getDecodingTemplate() {
    return decodingTemplate;
  }

  public void setDecodingTemplate(@javax.annotation.Nullable String decodingTemplate) {
    this.decodingTemplate = decodingTemplate;
  }


  public RegexpTokenizerInfo encodingTemplate(@javax.annotation.Nullable String encodingTemplate) {
    this.encodingTemplate = encodingTemplate;
    return this;
  }

  /**
   * Transformation to perform on the encrypted data, if the required output template doesn&#39;t match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.
   * @return encodingTemplate
   */
  @javax.annotation.Nullable
  public String getEncodingTemplate() {
    return encodingTemplate;
  }

  public void setEncodingTemplate(@javax.annotation.Nullable String encodingTemplate) {
    this.encodingTemplate = encodingTemplate;
  }


  public RegexpTokenizerInfo pattern(@javax.annotation.Nullable String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * Regexp pattern to extract and deposit the text/encdata
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(@javax.annotation.Nullable String pattern) {
    this.pattern = pattern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegexpTokenizerInfo regexpTokenizerInfo = (RegexpTokenizerInfo) o;
    return Objects.equals(this.alphabet, regexpTokenizerInfo.alphabet) &&
        Objects.equals(this.decodingTemplate, regexpTokenizerInfo.decodingTemplate) &&
        Objects.equals(this.encodingTemplate, regexpTokenizerInfo.encodingTemplate) &&
        Objects.equals(this.pattern, regexpTokenizerInfo.pattern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alphabet, decodingTemplate, encodingTemplate, pattern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegexpTokenizerInfo {\n");
    sb.append("    alphabet: ").append(toIndentedString(alphabet)).append("\n");
    sb.append("    decodingTemplate: ").append(toIndentedString(decodingTemplate)).append("\n");
    sb.append("    encodingTemplate: ").append(toIndentedString(encodingTemplate)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alphabet");
    openapiFields.add("decoding_template");
    openapiFields.add("encoding_template");
    openapiFields.add("pattern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegexpTokenizerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegexpTokenizerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegexpTokenizerInfo is not found in the empty JSON string", RegexpTokenizerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegexpTokenizerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegexpTokenizerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alphabet") != null && !jsonObj.get("alphabet").isJsonNull()) && !jsonObj.get("alphabet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alphabet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alphabet").toString()));
      }
      if ((jsonObj.get("decoding_template") != null && !jsonObj.get("decoding_template").isJsonNull()) && !jsonObj.get("decoding_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decoding_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decoding_template").toString()));
      }
      if ((jsonObj.get("encoding_template") != null && !jsonObj.get("encoding_template").isJsonNull()) && !jsonObj.get("encoding_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding_template").toString()));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegexpTokenizerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegexpTokenizerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegexpTokenizerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegexpTokenizerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RegexpTokenizerInfo>() {
           @Override
           public void write(JsonWriter out, RegexpTokenizerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegexpTokenizerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegexpTokenizerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegexpTokenizerInfo
   * @throws IOException if the JSON string is invalid with respect to RegexpTokenizerInfo
   */
  public static RegexpTokenizerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegexpTokenizerInfo.class);
  }

  /**
   * Convert an instance of RegexpTokenizerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

