/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * eventForwarderCreateEmail is a command that creates email event forwarder
 */
@ApiModel(description = "eventForwarderCreateEmail is a command that creates email event forwarder")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventForwarderCreateEmail {
  public static final String SERIALIZED_NAME_AUTH_METHODS_EVENT_SOURCE_LOCATIONS = "auth-methods-event-source-locations";
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS_EVENT_SOURCE_LOCATIONS)
  private List<String> authMethodsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_TO = "email-to";
  @SerializedName(SERIALIZED_NAME_EMAIL_TO)
  private String emailTo;

  public static final String SERIALIZED_NAME_EVENT_TYPES = "event-types";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List<String> eventTypes = null;

  public static final String SERIALIZED_NAME_EVERY = "every";
  @SerializedName(SERIALIZED_NAME_EVERY)
  private String every;

  public static final String SERIALIZED_NAME_GATEWAYS_EVENT_SOURCE_LOCATIONS = "gateways-event-source-locations";
  @SerializedName(SERIALIZED_NAME_GATEWAYS_EVENT_SOURCE_LOCATIONS)
  private List<String> gatewaysEventSourceLocations = new ArrayList<String>();

  public static final String SERIALIZED_NAME_ITEMS_EVENT_SOURCE_LOCATIONS = "items-event-source-locations";
  @SerializedName(SERIALIZED_NAME_ITEMS_EVENT_SOURCE_LOCATIONS)
  private List<String> itemsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERRIDE_URL = "override-url";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_URL)
  private String overrideUrl;

  public static final String SERIALIZED_NAME_RUNNER_TYPE = "runner-type";
  @SerializedName(SERIALIZED_NAME_RUNNER_TYPE)
  private String runnerType;

  public static final String SERIALIZED_NAME_TARGETS_EVENT_SOURCE_LOCATIONS = "targets-event-source-locations";
  @SerializedName(SERIALIZED_NAME_TARGETS_EVENT_SOURCE_LOCATIONS)
  private List<String> targetsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public EventForwarderCreateEmail() { 
  }

  public EventForwarderCreateEmail authMethodsEventSourceLocations(List<String> authMethodsEventSourceLocations) {
    
    this.authMethodsEventSourceLocations = authMethodsEventSourceLocations;
    return this;
  }

  public EventForwarderCreateEmail addAuthMethodsEventSourceLocationsItem(String authMethodsEventSourceLocationsItem) {
    if (this.authMethodsEventSourceLocations == null) {
      this.authMethodsEventSourceLocations = new ArrayList<String>();
    }
    this.authMethodsEventSourceLocations.add(authMethodsEventSourceLocationsItem);
    return this;
  }

   /**
   * Auth Method Event sources
   * @return authMethodsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Auth Method Event sources")

  public List<String> getAuthMethodsEventSourceLocations() {
    return authMethodsEventSourceLocations;
  }


  public void setAuthMethodsEventSourceLocations(List<String> authMethodsEventSourceLocations) {
    this.authMethodsEventSourceLocations = authMethodsEventSourceLocations;
  }


  public EventForwarderCreateEmail description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the object
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the object")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EventForwarderCreateEmail emailTo(String emailTo) {
    
    this.emailTo = emailTo;
    return this;
  }

   /**
   * A comma seperated list of email addresses to send event to
   * @return emailTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma seperated list of email addresses to send event to")

  public String getEmailTo() {
    return emailTo;
  }


  public void setEmailTo(String emailTo) {
    this.emailTo = emailTo;
  }


  public EventForwarderCreateEmail eventTypes(List<String> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public EventForwarderCreateEmail addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<String>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

   /**
   * List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]")

  public List<String> getEventTypes() {
    return eventTypes;
  }


  public void setEventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public EventForwarderCreateEmail every(String every) {
    
    this.every = every;
    return this;
  }

   /**
   * Rate of periodic runner repetition in hours
   * @return every
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate of periodic runner repetition in hours")

  public String getEvery() {
    return every;
  }


  public void setEvery(String every) {
    this.every = every;
  }


  public EventForwarderCreateEmail gatewaysEventSourceLocations(List<String> gatewaysEventSourceLocations) {
    
    this.gatewaysEventSourceLocations = gatewaysEventSourceLocations;
    return this;
  }

  public EventForwarderCreateEmail addGatewaysEventSourceLocationsItem(String gatewaysEventSourceLocationsItem) {
    this.gatewaysEventSourceLocations.add(gatewaysEventSourceLocationsItem);
    return this;
  }

   /**
   * Event sources
   * @return gatewaysEventSourceLocations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Event sources")

  public List<String> getGatewaysEventSourceLocations() {
    return gatewaysEventSourceLocations;
  }


  public void setGatewaysEventSourceLocations(List<String> gatewaysEventSourceLocations) {
    this.gatewaysEventSourceLocations = gatewaysEventSourceLocations;
  }


  public EventForwarderCreateEmail itemsEventSourceLocations(List<String> itemsEventSourceLocations) {
    
    this.itemsEventSourceLocations = itemsEventSourceLocations;
    return this;
  }

  public EventForwarderCreateEmail addItemsEventSourceLocationsItem(String itemsEventSourceLocationsItem) {
    if (this.itemsEventSourceLocations == null) {
      this.itemsEventSourceLocations = new ArrayList<String>();
    }
    this.itemsEventSourceLocations.add(itemsEventSourceLocationsItem);
    return this;
  }

   /**
   * Items Event sources
   * @return itemsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Items Event sources")

  public List<String> getItemsEventSourceLocations() {
    return itemsEventSourceLocations;
  }


  public void setItemsEventSourceLocations(List<String> itemsEventSourceLocations) {
    this.itemsEventSourceLocations = itemsEventSourceLocations;
  }


  public EventForwarderCreateEmail json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public EventForwarderCreateEmail key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public EventForwarderCreateEmail name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * EventForwarder name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "EventForwarder name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EventForwarderCreateEmail overrideUrl(String overrideUrl) {
    
    this.overrideUrl = overrideUrl;
    return this;
  }

   /**
   * Override Akeyless default URL with your Gateway url (port 18888)
   * @return overrideUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Override Akeyless default URL with your Gateway url (port 18888)")

  public String getOverrideUrl() {
    return overrideUrl;
  }


  public void setOverrideUrl(String overrideUrl) {
    this.overrideUrl = overrideUrl;
  }


  public EventForwarderCreateEmail runnerType(String runnerType) {
    
    this.runnerType = runnerType;
    return this;
  }

   /**
   * Get runnerType
   * @return runnerType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRunnerType() {
    return runnerType;
  }


  public void setRunnerType(String runnerType) {
    this.runnerType = runnerType;
  }


  public EventForwarderCreateEmail targetsEventSourceLocations(List<String> targetsEventSourceLocations) {
    
    this.targetsEventSourceLocations = targetsEventSourceLocations;
    return this;
  }

  public EventForwarderCreateEmail addTargetsEventSourceLocationsItem(String targetsEventSourceLocationsItem) {
    if (this.targetsEventSourceLocations == null) {
      this.targetsEventSourceLocations = new ArrayList<String>();
    }
    this.targetsEventSourceLocations.add(targetsEventSourceLocationsItem);
    return this;
  }

   /**
   * Targets Event sources
   * @return targetsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Targets Event sources")

  public List<String> getTargetsEventSourceLocations() {
    return targetsEventSourceLocations;
  }


  public void setTargetsEventSourceLocations(List<String> targetsEventSourceLocations) {
    this.targetsEventSourceLocations = targetsEventSourceLocations;
  }


  public EventForwarderCreateEmail token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public EventForwarderCreateEmail uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventForwarderCreateEmail eventForwarderCreateEmail = (EventForwarderCreateEmail) o;
    return Objects.equals(this.authMethodsEventSourceLocations, eventForwarderCreateEmail.authMethodsEventSourceLocations) &&
        Objects.equals(this.description, eventForwarderCreateEmail.description) &&
        Objects.equals(this.emailTo, eventForwarderCreateEmail.emailTo) &&
        Objects.equals(this.eventTypes, eventForwarderCreateEmail.eventTypes) &&
        Objects.equals(this.every, eventForwarderCreateEmail.every) &&
        Objects.equals(this.gatewaysEventSourceLocations, eventForwarderCreateEmail.gatewaysEventSourceLocations) &&
        Objects.equals(this.itemsEventSourceLocations, eventForwarderCreateEmail.itemsEventSourceLocations) &&
        Objects.equals(this.json, eventForwarderCreateEmail.json) &&
        Objects.equals(this.key, eventForwarderCreateEmail.key) &&
        Objects.equals(this.name, eventForwarderCreateEmail.name) &&
        Objects.equals(this.overrideUrl, eventForwarderCreateEmail.overrideUrl) &&
        Objects.equals(this.runnerType, eventForwarderCreateEmail.runnerType) &&
        Objects.equals(this.targetsEventSourceLocations, eventForwarderCreateEmail.targetsEventSourceLocations) &&
        Objects.equals(this.token, eventForwarderCreateEmail.token) &&
        Objects.equals(this.uidToken, eventForwarderCreateEmail.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMethodsEventSourceLocations, description, emailTo, eventTypes, every, gatewaysEventSourceLocations, itemsEventSourceLocations, json, key, name, overrideUrl, runnerType, targetsEventSourceLocations, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventForwarderCreateEmail {\n");
    sb.append("    authMethodsEventSourceLocations: ").append(toIndentedString(authMethodsEventSourceLocations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailTo: ").append(toIndentedString(emailTo)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    every: ").append(toIndentedString(every)).append("\n");
    sb.append("    gatewaysEventSourceLocations: ").append(toIndentedString(gatewaysEventSourceLocations)).append("\n");
    sb.append("    itemsEventSourceLocations: ").append(toIndentedString(itemsEventSourceLocations)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overrideUrl: ").append(toIndentedString(overrideUrl)).append("\n");
    sb.append("    runnerType: ").append(toIndentedString(runnerType)).append("\n");
    sb.append("    targetsEventSourceLocations: ").append(toIndentedString(targetsEventSourceLocations)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

