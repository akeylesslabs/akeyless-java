/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ConfigHash
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ConfigHash {
  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  @javax.annotation.Nullable
  private String admins;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  @javax.annotation.Nullable
  private String cache;

  public static final String SERIALIZED_NAME_CUSTOMER_FRAGEMENTS = "customer_fragements";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FRAGEMENTS)
  @javax.annotation.Nullable
  private String customerFragements;

  public static final String SERIALIZED_NAME_GENERAL = "general";
  @SerializedName(SERIALIZED_NAME_GENERAL)
  @javax.annotation.Nullable
  private String general;

  public static final String SERIALIZED_NAME_K8S_AUTHS = "k8s_auths";
  @SerializedName(SERIALIZED_NAME_K8S_AUTHS)
  @javax.annotation.Nullable
  private String k8sAuths;

  public static final String SERIALIZED_NAME_KMIP = "kmip";
  @SerializedName(SERIALIZED_NAME_KMIP)
  @javax.annotation.Nullable
  private String kmip;

  public static final String SERIALIZED_NAME_LDAP = "ldap";
  @SerializedName(SERIALIZED_NAME_LDAP)
  @javax.annotation.Nullable
  private String ldap;

  public static final String SERIALIZED_NAME_LEADERSHIP = "leadership";
  @SerializedName(SERIALIZED_NAME_LEADERSHIP)
  @javax.annotation.Nullable
  private String leadership;

  public static final String SERIALIZED_NAME_LOG_FORWARDING = "log_forwarding";
  @SerializedName(SERIALIZED_NAME_LOG_FORWARDING)
  @javax.annotation.Nullable
  private String logForwarding;

  public static final String SERIALIZED_NAME_M_QUEUE = "m_queue";
  @SerializedName(SERIALIZED_NAME_M_QUEUE)
  @javax.annotation.Nullable
  private String mQueue;

  public static final String SERIALIZED_NAME_MIGRATION_STATUS = "migration_status";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATUS)
  @javax.annotation.Nullable
  private String migrationStatus;

  public static final String SERIALIZED_NAME_MIGRATIONS = "migrations";
  @SerializedName(SERIALIZED_NAME_MIGRATIONS)
  @javax.annotation.Nullable
  private String migrations;

  public static final String SERIALIZED_NAME_PRODUCERS = "producers";
  @SerializedName(SERIALIZED_NAME_PRODUCERS)
  @javax.annotation.Nullable
  private Object producers = null;

  public static final String SERIALIZED_NAME_PRODUCERS_STATUS = "producers_status";
  @SerializedName(SERIALIZED_NAME_PRODUCERS_STATUS)
  @javax.annotation.Nullable
  private String producersStatus;

  public static final String SERIALIZED_NAME_ROTATORS = "rotators";
  @SerializedName(SERIALIZED_NAME_ROTATORS)
  @javax.annotation.Nullable
  private Object rotators = null;

  public static final String SERIALIZED_NAME_SAML = "saml";
  @SerializedName(SERIALIZED_NAME_SAML)
  @javax.annotation.Nullable
  private String saml;

  public static final String SERIALIZED_NAME_UNIVERSAL_IDENTITY = "universal_identity";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_IDENTITY)
  @javax.annotation.Nullable
  private String universalIdentity;

  public ConfigHash() {
  }

  public ConfigHash admins(@javax.annotation.Nullable String admins) {
    this.admins = admins;
    return this;
  }

  /**
   * Get admins
   * @return admins
   */
  @javax.annotation.Nullable
  public String getAdmins() {
    return admins;
  }

  public void setAdmins(@javax.annotation.Nullable String admins) {
    this.admins = admins;
  }


  public ConfigHash cache(@javax.annotation.Nullable String cache) {
    this.cache = cache;
    return this;
  }

  /**
   * Get cache
   * @return cache
   */
  @javax.annotation.Nullable
  public String getCache() {
    return cache;
  }

  public void setCache(@javax.annotation.Nullable String cache) {
    this.cache = cache;
  }


  public ConfigHash customerFragements(@javax.annotation.Nullable String customerFragements) {
    this.customerFragements = customerFragements;
    return this;
  }

  /**
   * Get customerFragements
   * @return customerFragements
   */
  @javax.annotation.Nullable
  public String getCustomerFragements() {
    return customerFragements;
  }

  public void setCustomerFragements(@javax.annotation.Nullable String customerFragements) {
    this.customerFragements = customerFragements;
  }


  public ConfigHash general(@javax.annotation.Nullable String general) {
    this.general = general;
    return this;
  }

  /**
   * Get general
   * @return general
   */
  @javax.annotation.Nullable
  public String getGeneral() {
    return general;
  }

  public void setGeneral(@javax.annotation.Nullable String general) {
    this.general = general;
  }


  public ConfigHash k8sAuths(@javax.annotation.Nullable String k8sAuths) {
    this.k8sAuths = k8sAuths;
    return this;
  }

  /**
   * Get k8sAuths
   * @return k8sAuths
   */
  @javax.annotation.Nullable
  public String getK8sAuths() {
    return k8sAuths;
  }

  public void setK8sAuths(@javax.annotation.Nullable String k8sAuths) {
    this.k8sAuths = k8sAuths;
  }


  public ConfigHash kmip(@javax.annotation.Nullable String kmip) {
    this.kmip = kmip;
    return this;
  }

  /**
   * Get kmip
   * @return kmip
   */
  @javax.annotation.Nullable
  public String getKmip() {
    return kmip;
  }

  public void setKmip(@javax.annotation.Nullable String kmip) {
    this.kmip = kmip;
  }


  public ConfigHash ldap(@javax.annotation.Nullable String ldap) {
    this.ldap = ldap;
    return this;
  }

  /**
   * Get ldap
   * @return ldap
   */
  @javax.annotation.Nullable
  public String getLdap() {
    return ldap;
  }

  public void setLdap(@javax.annotation.Nullable String ldap) {
    this.ldap = ldap;
  }


  public ConfigHash leadership(@javax.annotation.Nullable String leadership) {
    this.leadership = leadership;
    return this;
  }

  /**
   * Get leadership
   * @return leadership
   */
  @javax.annotation.Nullable
  public String getLeadership() {
    return leadership;
  }

  public void setLeadership(@javax.annotation.Nullable String leadership) {
    this.leadership = leadership;
  }


  public ConfigHash logForwarding(@javax.annotation.Nullable String logForwarding) {
    this.logForwarding = logForwarding;
    return this;
  }

  /**
   * Get logForwarding
   * @return logForwarding
   */
  @javax.annotation.Nullable
  public String getLogForwarding() {
    return logForwarding;
  }

  public void setLogForwarding(@javax.annotation.Nullable String logForwarding) {
    this.logForwarding = logForwarding;
  }


  public ConfigHash mQueue(@javax.annotation.Nullable String mQueue) {
    this.mQueue = mQueue;
    return this;
  }

  /**
   * Get mQueue
   * @return mQueue
   */
  @javax.annotation.Nullable
  public String getmQueue() {
    return mQueue;
  }

  public void setmQueue(@javax.annotation.Nullable String mQueue) {
    this.mQueue = mQueue;
  }


  public ConfigHash migrationStatus(@javax.annotation.Nullable String migrationStatus) {
    this.migrationStatus = migrationStatus;
    return this;
  }

  /**
   * Get migrationStatus
   * @return migrationStatus
   */
  @javax.annotation.Nullable
  public String getMigrationStatus() {
    return migrationStatus;
  }

  public void setMigrationStatus(@javax.annotation.Nullable String migrationStatus) {
    this.migrationStatus = migrationStatus;
  }


  public ConfigHash migrations(@javax.annotation.Nullable String migrations) {
    this.migrations = migrations;
    return this;
  }

  /**
   * Get migrations
   * @return migrations
   */
  @javax.annotation.Nullable
  public String getMigrations() {
    return migrations;
  }

  public void setMigrations(@javax.annotation.Nullable String migrations) {
    this.migrations = migrations;
  }


  public ConfigHash producers(@javax.annotation.Nullable Object producers) {
    this.producers = producers;
    return this;
  }

  /**
   * Get producers
   * @return producers
   */
  @javax.annotation.Nullable
  public Object getProducers() {
    return producers;
  }

  public void setProducers(@javax.annotation.Nullable Object producers) {
    this.producers = producers;
  }


  public ConfigHash producersStatus(@javax.annotation.Nullable String producersStatus) {
    this.producersStatus = producersStatus;
    return this;
  }

  /**
   * Get producersStatus
   * @return producersStatus
   */
  @javax.annotation.Nullable
  public String getProducersStatus() {
    return producersStatus;
  }

  public void setProducersStatus(@javax.annotation.Nullable String producersStatus) {
    this.producersStatus = producersStatus;
  }


  public ConfigHash rotators(@javax.annotation.Nullable Object rotators) {
    this.rotators = rotators;
    return this;
  }

  /**
   * Get rotators
   * @return rotators
   */
  @javax.annotation.Nullable
  public Object getRotators() {
    return rotators;
  }

  public void setRotators(@javax.annotation.Nullable Object rotators) {
    this.rotators = rotators;
  }


  public ConfigHash saml(@javax.annotation.Nullable String saml) {
    this.saml = saml;
    return this;
  }

  /**
   * Get saml
   * @return saml
   */
  @javax.annotation.Nullable
  public String getSaml() {
    return saml;
  }

  public void setSaml(@javax.annotation.Nullable String saml) {
    this.saml = saml;
  }


  public ConfigHash universalIdentity(@javax.annotation.Nullable String universalIdentity) {
    this.universalIdentity = universalIdentity;
    return this;
  }

  /**
   * Get universalIdentity
   * @return universalIdentity
   */
  @javax.annotation.Nullable
  public String getUniversalIdentity() {
    return universalIdentity;
  }

  public void setUniversalIdentity(@javax.annotation.Nullable String universalIdentity) {
    this.universalIdentity = universalIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigHash configHash = (ConfigHash) o;
    return Objects.equals(this.admins, configHash.admins) &&
        Objects.equals(this.cache, configHash.cache) &&
        Objects.equals(this.customerFragements, configHash.customerFragements) &&
        Objects.equals(this.general, configHash.general) &&
        Objects.equals(this.k8sAuths, configHash.k8sAuths) &&
        Objects.equals(this.kmip, configHash.kmip) &&
        Objects.equals(this.ldap, configHash.ldap) &&
        Objects.equals(this.leadership, configHash.leadership) &&
        Objects.equals(this.logForwarding, configHash.logForwarding) &&
        Objects.equals(this.mQueue, configHash.mQueue) &&
        Objects.equals(this.migrationStatus, configHash.migrationStatus) &&
        Objects.equals(this.migrations, configHash.migrations) &&
        Objects.equals(this.producers, configHash.producers) &&
        Objects.equals(this.producersStatus, configHash.producersStatus) &&
        Objects.equals(this.rotators, configHash.rotators) &&
        Objects.equals(this.saml, configHash.saml) &&
        Objects.equals(this.universalIdentity, configHash.universalIdentity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(admins, cache, customerFragements, general, k8sAuths, kmip, ldap, leadership, logForwarding, mQueue, migrationStatus, migrations, producers, producersStatus, rotators, saml, universalIdentity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigHash {\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    customerFragements: ").append(toIndentedString(customerFragements)).append("\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    k8sAuths: ").append(toIndentedString(k8sAuths)).append("\n");
    sb.append("    kmip: ").append(toIndentedString(kmip)).append("\n");
    sb.append("    ldap: ").append(toIndentedString(ldap)).append("\n");
    sb.append("    leadership: ").append(toIndentedString(leadership)).append("\n");
    sb.append("    logForwarding: ").append(toIndentedString(logForwarding)).append("\n");
    sb.append("    mQueue: ").append(toIndentedString(mQueue)).append("\n");
    sb.append("    migrationStatus: ").append(toIndentedString(migrationStatus)).append("\n");
    sb.append("    migrations: ").append(toIndentedString(migrations)).append("\n");
    sb.append("    producers: ").append(toIndentedString(producers)).append("\n");
    sb.append("    producersStatus: ").append(toIndentedString(producersStatus)).append("\n");
    sb.append("    rotators: ").append(toIndentedString(rotators)).append("\n");
    sb.append("    saml: ").append(toIndentedString(saml)).append("\n");
    sb.append("    universalIdentity: ").append(toIndentedString(universalIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admins");
    openapiFields.add("cache");
    openapiFields.add("customer_fragements");
    openapiFields.add("general");
    openapiFields.add("k8s_auths");
    openapiFields.add("kmip");
    openapiFields.add("ldap");
    openapiFields.add("leadership");
    openapiFields.add("log_forwarding");
    openapiFields.add("m_queue");
    openapiFields.add("migration_status");
    openapiFields.add("migrations");
    openapiFields.add("producers");
    openapiFields.add("producers_status");
    openapiFields.add("rotators");
    openapiFields.add("saml");
    openapiFields.add("universal_identity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigHash
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigHash.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigHash is not found in the empty JSON string", ConfigHash.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigHash.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigHash` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admins") != null && !jsonObj.get("admins").isJsonNull()) && !jsonObj.get("admins").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admins` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admins").toString()));
      }
      if ((jsonObj.get("cache") != null && !jsonObj.get("cache").isJsonNull()) && !jsonObj.get("cache").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cache").toString()));
      }
      if ((jsonObj.get("customer_fragements") != null && !jsonObj.get("customer_fragements").isJsonNull()) && !jsonObj.get("customer_fragements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_fragements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_fragements").toString()));
      }
      if ((jsonObj.get("general") != null && !jsonObj.get("general").isJsonNull()) && !jsonObj.get("general").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general").toString()));
      }
      if ((jsonObj.get("k8s_auths") != null && !jsonObj.get("k8s_auths").isJsonNull()) && !jsonObj.get("k8s_auths").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s_auths` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s_auths").toString()));
      }
      if ((jsonObj.get("kmip") != null && !jsonObj.get("kmip").isJsonNull()) && !jsonObj.get("kmip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmip").toString()));
      }
      if ((jsonObj.get("ldap") != null && !jsonObj.get("ldap").isJsonNull()) && !jsonObj.get("ldap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap").toString()));
      }
      if ((jsonObj.get("leadership") != null && !jsonObj.get("leadership").isJsonNull()) && !jsonObj.get("leadership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leadership").toString()));
      }
      if ((jsonObj.get("log_forwarding") != null && !jsonObj.get("log_forwarding").isJsonNull()) && !jsonObj.get("log_forwarding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_forwarding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_forwarding").toString()));
      }
      if ((jsonObj.get("m_queue") != null && !jsonObj.get("m_queue").isJsonNull()) && !jsonObj.get("m_queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `m_queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("m_queue").toString()));
      }
      if ((jsonObj.get("migration_status") != null && !jsonObj.get("migration_status").isJsonNull()) && !jsonObj.get("migration_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migration_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migration_status").toString()));
      }
      if ((jsonObj.get("migrations") != null && !jsonObj.get("migrations").isJsonNull()) && !jsonObj.get("migrations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrations").toString()));
      }
      if ((jsonObj.get("producers_status") != null && !jsonObj.get("producers_status").isJsonNull()) && !jsonObj.get("producers_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producers_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producers_status").toString()));
      }
      if ((jsonObj.get("saml") != null && !jsonObj.get("saml").isJsonNull()) && !jsonObj.get("saml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saml").toString()));
      }
      if ((jsonObj.get("universal_identity") != null && !jsonObj.get("universal_identity").isJsonNull()) && !jsonObj.get("universal_identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `universal_identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("universal_identity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigHash.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigHash' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigHash> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigHash.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigHash>() {
           @Override
           public void write(JsonWriter out, ConfigHash value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigHash read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigHash given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigHash
   * @throws IOException if the JSON string is invalid with respect to ConfigHash
   */
  public static ConfigHash fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigHash.class);
  }

  /**
   * Convert an instance of ConfigHash to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

