/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SplunkLogForwardingConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SplunkLogForwardingConfig {
  public static final String SERIALIZED_NAME_SPLUNK_ENABLE_BATCH = "splunk_enable_batch";
  @SerializedName(SERIALIZED_NAME_SPLUNK_ENABLE_BATCH)
  @javax.annotation.Nullable
  private String splunkEnableBatch;

  public static final String SERIALIZED_NAME_SPLUNK_ENABLE_TLS = "splunk_enable_tls";
  @SerializedName(SERIALIZED_NAME_SPLUNK_ENABLE_TLS)
  @javax.annotation.Nullable
  private Boolean splunkEnableTls;

  public static final String SERIALIZED_NAME_SPLUNK_INDEX = "splunk_index";
  @SerializedName(SERIALIZED_NAME_SPLUNK_INDEX)
  @javax.annotation.Nullable
  private String splunkIndex;

  public static final String SERIALIZED_NAME_SPLUNK_SOURCE = "splunk_source";
  @SerializedName(SERIALIZED_NAME_SPLUNK_SOURCE)
  @javax.annotation.Nullable
  private String splunkSource;

  public static final String SERIALIZED_NAME_SPLUNK_SOURCETYPE = "splunk_sourcetype";
  @SerializedName(SERIALIZED_NAME_SPLUNK_SOURCETYPE)
  @javax.annotation.Nullable
  private String splunkSourcetype;

  public static final String SERIALIZED_NAME_SPLUNK_TLS_CERTIFICATE = "splunk_tls_certificate";
  @SerializedName(SERIALIZED_NAME_SPLUNK_TLS_CERTIFICATE)
  @javax.annotation.Nullable
  private String splunkTlsCertificate;

  public static final String SERIALIZED_NAME_SPLUNK_TOKEN = "splunk_token";
  @SerializedName(SERIALIZED_NAME_SPLUNK_TOKEN)
  @javax.annotation.Nullable
  private String splunkToken;

  public static final String SERIALIZED_NAME_SPLUNK_URL = "splunk_url";
  @SerializedName(SERIALIZED_NAME_SPLUNK_URL)
  @javax.annotation.Nullable
  private String splunkUrl;

  public SplunkLogForwardingConfig() {
  }

  public SplunkLogForwardingConfig splunkEnableBatch(@javax.annotation.Nullable String splunkEnableBatch) {
    this.splunkEnableBatch = splunkEnableBatch;
    return this;
  }

  /**
   * Get splunkEnableBatch
   * @return splunkEnableBatch
   */
  @javax.annotation.Nullable
  public String getSplunkEnableBatch() {
    return splunkEnableBatch;
  }

  public void setSplunkEnableBatch(@javax.annotation.Nullable String splunkEnableBatch) {
    this.splunkEnableBatch = splunkEnableBatch;
  }


  public SplunkLogForwardingConfig splunkEnableTls(@javax.annotation.Nullable Boolean splunkEnableTls) {
    this.splunkEnableTls = splunkEnableTls;
    return this;
  }

  /**
   * Get splunkEnableTls
   * @return splunkEnableTls
   */
  @javax.annotation.Nullable
  public Boolean getSplunkEnableTls() {
    return splunkEnableTls;
  }

  public void setSplunkEnableTls(@javax.annotation.Nullable Boolean splunkEnableTls) {
    this.splunkEnableTls = splunkEnableTls;
  }


  public SplunkLogForwardingConfig splunkIndex(@javax.annotation.Nullable String splunkIndex) {
    this.splunkIndex = splunkIndex;
    return this;
  }

  /**
   * Get splunkIndex
   * @return splunkIndex
   */
  @javax.annotation.Nullable
  public String getSplunkIndex() {
    return splunkIndex;
  }

  public void setSplunkIndex(@javax.annotation.Nullable String splunkIndex) {
    this.splunkIndex = splunkIndex;
  }


  public SplunkLogForwardingConfig splunkSource(@javax.annotation.Nullable String splunkSource) {
    this.splunkSource = splunkSource;
    return this;
  }

  /**
   * Get splunkSource
   * @return splunkSource
   */
  @javax.annotation.Nullable
  public String getSplunkSource() {
    return splunkSource;
  }

  public void setSplunkSource(@javax.annotation.Nullable String splunkSource) {
    this.splunkSource = splunkSource;
  }


  public SplunkLogForwardingConfig splunkSourcetype(@javax.annotation.Nullable String splunkSourcetype) {
    this.splunkSourcetype = splunkSourcetype;
    return this;
  }

  /**
   * Get splunkSourcetype
   * @return splunkSourcetype
   */
  @javax.annotation.Nullable
  public String getSplunkSourcetype() {
    return splunkSourcetype;
  }

  public void setSplunkSourcetype(@javax.annotation.Nullable String splunkSourcetype) {
    this.splunkSourcetype = splunkSourcetype;
  }


  public SplunkLogForwardingConfig splunkTlsCertificate(@javax.annotation.Nullable String splunkTlsCertificate) {
    this.splunkTlsCertificate = splunkTlsCertificate;
    return this;
  }

  /**
   * Get splunkTlsCertificate
   * @return splunkTlsCertificate
   */
  @javax.annotation.Nullable
  public String getSplunkTlsCertificate() {
    return splunkTlsCertificate;
  }

  public void setSplunkTlsCertificate(@javax.annotation.Nullable String splunkTlsCertificate) {
    this.splunkTlsCertificate = splunkTlsCertificate;
  }


  public SplunkLogForwardingConfig splunkToken(@javax.annotation.Nullable String splunkToken) {
    this.splunkToken = splunkToken;
    return this;
  }

  /**
   * Get splunkToken
   * @return splunkToken
   */
  @javax.annotation.Nullable
  public String getSplunkToken() {
    return splunkToken;
  }

  public void setSplunkToken(@javax.annotation.Nullable String splunkToken) {
    this.splunkToken = splunkToken;
  }


  public SplunkLogForwardingConfig splunkUrl(@javax.annotation.Nullable String splunkUrl) {
    this.splunkUrl = splunkUrl;
    return this;
  }

  /**
   * Get splunkUrl
   * @return splunkUrl
   */
  @javax.annotation.Nullable
  public String getSplunkUrl() {
    return splunkUrl;
  }

  public void setSplunkUrl(@javax.annotation.Nullable String splunkUrl) {
    this.splunkUrl = splunkUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplunkLogForwardingConfig splunkLogForwardingConfig = (SplunkLogForwardingConfig) o;
    return Objects.equals(this.splunkEnableBatch, splunkLogForwardingConfig.splunkEnableBatch) &&
        Objects.equals(this.splunkEnableTls, splunkLogForwardingConfig.splunkEnableTls) &&
        Objects.equals(this.splunkIndex, splunkLogForwardingConfig.splunkIndex) &&
        Objects.equals(this.splunkSource, splunkLogForwardingConfig.splunkSource) &&
        Objects.equals(this.splunkSourcetype, splunkLogForwardingConfig.splunkSourcetype) &&
        Objects.equals(this.splunkTlsCertificate, splunkLogForwardingConfig.splunkTlsCertificate) &&
        Objects.equals(this.splunkToken, splunkLogForwardingConfig.splunkToken) &&
        Objects.equals(this.splunkUrl, splunkLogForwardingConfig.splunkUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(splunkEnableBatch, splunkEnableTls, splunkIndex, splunkSource, splunkSourcetype, splunkTlsCertificate, splunkToken, splunkUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplunkLogForwardingConfig {\n");
    sb.append("    splunkEnableBatch: ").append(toIndentedString(splunkEnableBatch)).append("\n");
    sb.append("    splunkEnableTls: ").append(toIndentedString(splunkEnableTls)).append("\n");
    sb.append("    splunkIndex: ").append(toIndentedString(splunkIndex)).append("\n");
    sb.append("    splunkSource: ").append(toIndentedString(splunkSource)).append("\n");
    sb.append("    splunkSourcetype: ").append(toIndentedString(splunkSourcetype)).append("\n");
    sb.append("    splunkTlsCertificate: ").append(toIndentedString(splunkTlsCertificate)).append("\n");
    sb.append("    splunkToken: ").append(toIndentedString(splunkToken)).append("\n");
    sb.append("    splunkUrl: ").append(toIndentedString(splunkUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("splunk_enable_batch");
    openapiFields.add("splunk_enable_tls");
    openapiFields.add("splunk_index");
    openapiFields.add("splunk_source");
    openapiFields.add("splunk_sourcetype");
    openapiFields.add("splunk_tls_certificate");
    openapiFields.add("splunk_token");
    openapiFields.add("splunk_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SplunkLogForwardingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SplunkLogForwardingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SplunkLogForwardingConfig is not found in the empty JSON string", SplunkLogForwardingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SplunkLogForwardingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SplunkLogForwardingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("splunk_enable_batch") != null && !jsonObj.get("splunk_enable_batch").isJsonNull()) && !jsonObj.get("splunk_enable_batch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_enable_batch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_enable_batch").toString()));
      }
      if ((jsonObj.get("splunk_index") != null && !jsonObj.get("splunk_index").isJsonNull()) && !jsonObj.get("splunk_index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_index").toString()));
      }
      if ((jsonObj.get("splunk_source") != null && !jsonObj.get("splunk_source").isJsonNull()) && !jsonObj.get("splunk_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_source").toString()));
      }
      if ((jsonObj.get("splunk_sourcetype") != null && !jsonObj.get("splunk_sourcetype").isJsonNull()) && !jsonObj.get("splunk_sourcetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_sourcetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_sourcetype").toString()));
      }
      if ((jsonObj.get("splunk_tls_certificate") != null && !jsonObj.get("splunk_tls_certificate").isJsonNull()) && !jsonObj.get("splunk_tls_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_tls_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_tls_certificate").toString()));
      }
      if ((jsonObj.get("splunk_token") != null && !jsonObj.get("splunk_token").isJsonNull()) && !jsonObj.get("splunk_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_token").toString()));
      }
      if ((jsonObj.get("splunk_url") != null && !jsonObj.get("splunk_url").isJsonNull()) && !jsonObj.get("splunk_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splunk_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splunk_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SplunkLogForwardingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SplunkLogForwardingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SplunkLogForwardingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SplunkLogForwardingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SplunkLogForwardingConfig>() {
           @Override
           public void write(JsonWriter out, SplunkLogForwardingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SplunkLogForwardingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SplunkLogForwardingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SplunkLogForwardingConfig
   * @throws IOException if the JSON string is invalid with respect to SplunkLogForwardingConfig
   */
  public static SplunkLogForwardingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SplunkLogForwardingConfig.class);
  }

  /**
   * Convert an instance of SplunkLogForwardingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

