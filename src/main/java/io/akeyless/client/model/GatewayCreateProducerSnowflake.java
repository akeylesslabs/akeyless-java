/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * GatewayCreateProducerSnowflakeCmd is a command that creates a Snowflake producer [Deprecated: Use dynamic-secret-create-snowflake command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayCreateProducerSnowflake {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_ACCOUNT_PASSWORD = "account-password";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PASSWORD)
  @javax.annotation.Nullable
  private String accountPassword;

  public static final String SERIALIZED_NAME_ACCOUNT_USERNAME = "account-username";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_USERNAME)
  @javax.annotation.Nullable
  private String accountUsername;

  public static final String SERIALIZED_NAME_DB_NAME = "db-name";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  @javax.annotation.Nullable
  private String dbName;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "private-key";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String privateKey;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PASSPHRASE = "private-key-passphrase";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PASSPHRASE)
  @javax.annotation.Nullable
  private String privateKeyPassphrase;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private String role;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "24h";

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  @javax.annotation.Nullable
  private String warehouse;

  public GatewayCreateProducerSnowflake() {
  }

  public GatewayCreateProducerSnowflake account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * Account name
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public GatewayCreateProducerSnowflake accountPassword(@javax.annotation.Nullable String accountPassword) {
    this.accountPassword = accountPassword;
    return this;
  }

  /**
   * Database Password
   * @return accountPassword
   */
  @javax.annotation.Nullable
  public String getAccountPassword() {
    return accountPassword;
  }

  public void setAccountPassword(@javax.annotation.Nullable String accountPassword) {
    this.accountPassword = accountPassword;
  }


  public GatewayCreateProducerSnowflake accountUsername(@javax.annotation.Nullable String accountUsername) {
    this.accountUsername = accountUsername;
    return this;
  }

  /**
   * Database Username
   * @return accountUsername
   */
  @javax.annotation.Nullable
  public String getAccountUsername() {
    return accountUsername;
  }

  public void setAccountUsername(@javax.annotation.Nullable String accountUsername) {
    this.accountUsername = accountUsername;
  }


  public GatewayCreateProducerSnowflake dbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
    return this;
  }

  /**
   * Database name
   * @return dbName
   */
  @javax.annotation.Nullable
  public String getDbName() {
    return dbName;
  }

  public void setDbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
  }


  public GatewayCreateProducerSnowflake deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GatewayCreateProducerSnowflake json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayCreateProducerSnowflake name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayCreateProducerSnowflake passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public GatewayCreateProducerSnowflake privateKey(@javax.annotation.Nullable String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * RSA Private key (base64 encoded)
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(@javax.annotation.Nullable String privateKey) {
    this.privateKey = privateKey;
  }


  public GatewayCreateProducerSnowflake privateKeyPassphrase(@javax.annotation.Nullable String privateKeyPassphrase) {
    this.privateKeyPassphrase = privateKeyPassphrase;
    return this;
  }

  /**
   * The Private key passphrase
   * @return privateKeyPassphrase
   */
  @javax.annotation.Nullable
  public String getPrivateKeyPassphrase() {
    return privateKeyPassphrase;
  }

  public void setPrivateKeyPassphrase(@javax.annotation.Nullable String privateKeyPassphrase) {
    this.privateKeyPassphrase = privateKeyPassphrase;
  }


  public GatewayCreateProducerSnowflake role(@javax.annotation.Nullable String role) {
    this.role = role;
    return this;
  }

  /**
   * User role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = role;
  }


  public GatewayCreateProducerSnowflake tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GatewayCreateProducerSnowflake addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public GatewayCreateProducerSnowflake targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public GatewayCreateProducerSnowflake token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayCreateProducerSnowflake uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayCreateProducerSnowflake userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }


  public GatewayCreateProducerSnowflake warehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * Warehouse name
   * @return warehouse
   */
  @javax.annotation.Nullable
  public String getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerSnowflake gatewayCreateProducerSnowflake = (GatewayCreateProducerSnowflake) o;
    return Objects.equals(this.account, gatewayCreateProducerSnowflake.account) &&
        Objects.equals(this.accountPassword, gatewayCreateProducerSnowflake.accountPassword) &&
        Objects.equals(this.accountUsername, gatewayCreateProducerSnowflake.accountUsername) &&
        Objects.equals(this.dbName, gatewayCreateProducerSnowflake.dbName) &&
        Objects.equals(this.deleteProtection, gatewayCreateProducerSnowflake.deleteProtection) &&
        Objects.equals(this.json, gatewayCreateProducerSnowflake.json) &&
        Objects.equals(this.name, gatewayCreateProducerSnowflake.name) &&
        Objects.equals(this.passwordLength, gatewayCreateProducerSnowflake.passwordLength) &&
        Objects.equals(this.privateKey, gatewayCreateProducerSnowflake.privateKey) &&
        Objects.equals(this.privateKeyPassphrase, gatewayCreateProducerSnowflake.privateKeyPassphrase) &&
        Objects.equals(this.role, gatewayCreateProducerSnowflake.role) &&
        Objects.equals(this.tags, gatewayCreateProducerSnowflake.tags) &&
        Objects.equals(this.targetName, gatewayCreateProducerSnowflake.targetName) &&
        Objects.equals(this.token, gatewayCreateProducerSnowflake.token) &&
        Objects.equals(this.uidToken, gatewayCreateProducerSnowflake.uidToken) &&
        Objects.equals(this.userTtl, gatewayCreateProducerSnowflake.userTtl) &&
        Objects.equals(this.warehouse, gatewayCreateProducerSnowflake.warehouse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, accountPassword, accountUsername, dbName, deleteProtection, json, name, passwordLength, privateKey, privateKeyPassphrase, role, tags, targetName, token, uidToken, userTtl, warehouse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerSnowflake {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountPassword: ").append(toIndentedString(accountPassword)).append("\n");
    sb.append("    accountUsername: ").append(toIndentedString(accountUsername)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    privateKeyPassphrase: ").append(toIndentedString(privateKeyPassphrase)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("account-password");
    openapiFields.add("account-username");
    openapiFields.add("db-name");
    openapiFields.add("delete_protection");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("password-length");
    openapiFields.add("private-key");
    openapiFields.add("private-key-passphrase");
    openapiFields.add("role");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");
    openapiFields.add("warehouse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayCreateProducerSnowflake
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayCreateProducerSnowflake.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayCreateProducerSnowflake is not found in the empty JSON string", GatewayCreateProducerSnowflake.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayCreateProducerSnowflake.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayCreateProducerSnowflake` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayCreateProducerSnowflake.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("account-password") != null && !jsonObj.get("account-password").isJsonNull()) && !jsonObj.get("account-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-password").toString()));
      }
      if ((jsonObj.get("account-username") != null && !jsonObj.get("account-username").isJsonNull()) && !jsonObj.get("account-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-username").toString()));
      }
      if ((jsonObj.get("db-name") != null && !jsonObj.get("db-name").isJsonNull()) && !jsonObj.get("db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-name").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("private-key") != null && !jsonObj.get("private-key").isJsonNull()) && !jsonObj.get("private-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private-key").toString()));
      }
      if ((jsonObj.get("private-key-passphrase") != null && !jsonObj.get("private-key-passphrase").isJsonNull()) && !jsonObj.get("private-key-passphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private-key-passphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private-key-passphrase").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
      if ((jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) && !jsonObj.get("warehouse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayCreateProducerSnowflake.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayCreateProducerSnowflake' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayCreateProducerSnowflake> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayCreateProducerSnowflake.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayCreateProducerSnowflake>() {
           @Override
           public void write(JsonWriter out, GatewayCreateProducerSnowflake value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayCreateProducerSnowflake read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayCreateProducerSnowflake given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayCreateProducerSnowflake
   * @throws IOException if the JSON string is invalid with respect to GatewayCreateProducerSnowflake
   */
  public static GatewayCreateProducerSnowflake fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayCreateProducerSnowflake.class);
  }

  /**
   * Convert an instance of GatewayCreateProducerSnowflake to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

