/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretUpdatePing is a command that updates Ping dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretUpdatePing {
  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PING_ADMINISTRATIVE_PORT = "ping-administrative-port";
  @SerializedName(SERIALIZED_NAME_PING_ADMINISTRATIVE_PORT)
  @javax.annotation.Nullable
  private String pingAdministrativePort = "9999";

  public static final String SERIALIZED_NAME_PING_ATM_ID = "ping-atm-id";
  @SerializedName(SERIALIZED_NAME_PING_ATM_ID)
  @javax.annotation.Nullable
  private String pingAtmId;

  public static final String SERIALIZED_NAME_PING_AUTHORIZATION_PORT = "ping-authorization-port";
  @SerializedName(SERIALIZED_NAME_PING_AUTHORIZATION_PORT)
  @javax.annotation.Nullable
  private String pingAuthorizationPort = "9031";

  public static final String SERIALIZED_NAME_PING_CERT_SUBJECT_DN = "ping-cert-subject-dn";
  @SerializedName(SERIALIZED_NAME_PING_CERT_SUBJECT_DN)
  @javax.annotation.Nullable
  private String pingCertSubjectDn;

  public static final String SERIALIZED_NAME_PING_CLIENT_AUTHENTICATION_TYPE = "ping-client-authentication-type";
  @SerializedName(SERIALIZED_NAME_PING_CLIENT_AUTHENTICATION_TYPE)
  @javax.annotation.Nullable
  private String pingClientAuthenticationType = "CLIENT_SECRET";

  public static final String SERIALIZED_NAME_PING_ENFORCE_REPLAY_PREVENTION = "ping-enforce-replay-prevention";
  @SerializedName(SERIALIZED_NAME_PING_ENFORCE_REPLAY_PREVENTION)
  @javax.annotation.Nullable
  private String pingEnforceReplayPrevention = "false";

  public static final String SERIALIZED_NAME_PING_GRANT_TYPES = "ping-grant-types";
  @SerializedName(SERIALIZED_NAME_PING_GRANT_TYPES)
  @javax.annotation.Nullable
  private List<String> pingGrantTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PING_ISSUER_DN = "ping-issuer-dn";
  @SerializedName(SERIALIZED_NAME_PING_ISSUER_DN)
  @javax.annotation.Nullable
  private String pingIssuerDn;

  public static final String SERIALIZED_NAME_PING_JWKS = "ping-jwks";
  @SerializedName(SERIALIZED_NAME_PING_JWKS)
  @javax.annotation.Nullable
  private String pingJwks;

  public static final String SERIALIZED_NAME_PING_JWKS_URL = "ping-jwks-url";
  @SerializedName(SERIALIZED_NAME_PING_JWKS_URL)
  @javax.annotation.Nullable
  private String pingJwksUrl;

  public static final String SERIALIZED_NAME_PING_PASSWORD = "ping-password";
  @SerializedName(SERIALIZED_NAME_PING_PASSWORD)
  @javax.annotation.Nullable
  private String pingPassword;

  public static final String SERIALIZED_NAME_PING_PRIVILEGED_USER = "ping-privileged-user";
  @SerializedName(SERIALIZED_NAME_PING_PRIVILEGED_USER)
  @javax.annotation.Nullable
  private String pingPrivilegedUser;

  public static final String SERIALIZED_NAME_PING_REDIRECT_URIS = "ping-redirect-uris";
  @SerializedName(SERIALIZED_NAME_PING_REDIRECT_URIS)
  @javax.annotation.Nullable
  private List<String> pingRedirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_PING_RESTRICTED_SCOPES = "ping-restricted-scopes";
  @SerializedName(SERIALIZED_NAME_PING_RESTRICTED_SCOPES)
  @javax.annotation.Nullable
  private List<String> pingRestrictedScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PING_SIGNING_ALGO = "ping-signing-algo";
  @SerializedName(SERIALIZED_NAME_PING_SIGNING_ALGO)
  @javax.annotation.Nullable
  private String pingSigningAlgo;

  public static final String SERIALIZED_NAME_PING_URL = "ping-url";
  @SerializedName(SERIALIZED_NAME_PING_URL)
  @javax.annotation.Nullable
  private String pingUrl;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretUpdatePing() {
  }

  public DynamicSecretUpdatePing deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretUpdatePing description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretUpdatePing json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretUpdatePing name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretUpdatePing newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public DynamicSecretUpdatePing pingAdministrativePort(@javax.annotation.Nullable String pingAdministrativePort) {
    this.pingAdministrativePort = pingAdministrativePort;
    return this;
  }

  /**
   * Ping Federate administrative port
   * @return pingAdministrativePort
   */
  @javax.annotation.Nullable
  public String getPingAdministrativePort() {
    return pingAdministrativePort;
  }

  public void setPingAdministrativePort(@javax.annotation.Nullable String pingAdministrativePort) {
    this.pingAdministrativePort = pingAdministrativePort;
  }


  public DynamicSecretUpdatePing pingAtmId(@javax.annotation.Nullable String pingAtmId) {
    this.pingAtmId = pingAtmId;
    return this;
  }

  /**
   * Set a specific Access Token Management (ATM) instance for the created OAuth Client by providing the ATM Id. If no explicit value is given, the default pingfederate server ATM will be set.
   * @return pingAtmId
   */
  @javax.annotation.Nullable
  public String getPingAtmId() {
    return pingAtmId;
  }

  public void setPingAtmId(@javax.annotation.Nullable String pingAtmId) {
    this.pingAtmId = pingAtmId;
  }


  public DynamicSecretUpdatePing pingAuthorizationPort(@javax.annotation.Nullable String pingAuthorizationPort) {
    this.pingAuthorizationPort = pingAuthorizationPort;
    return this;
  }

  /**
   * Ping Federate authorization port
   * @return pingAuthorizationPort
   */
  @javax.annotation.Nullable
  public String getPingAuthorizationPort() {
    return pingAuthorizationPort;
  }

  public void setPingAuthorizationPort(@javax.annotation.Nullable String pingAuthorizationPort) {
    this.pingAuthorizationPort = pingAuthorizationPort;
  }


  public DynamicSecretUpdatePing pingCertSubjectDn(@javax.annotation.Nullable String pingCertSubjectDn) {
    this.pingCertSubjectDn = pingCertSubjectDn;
    return this;
  }

  /**
   * The subject DN of the client certificate. If no explicit value is given, the producer will create CA certificate and matched client certificate and return it as value. Used in conjunction with ping-issuer-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)
   * @return pingCertSubjectDn
   */
  @javax.annotation.Nullable
  public String getPingCertSubjectDn() {
    return pingCertSubjectDn;
  }

  public void setPingCertSubjectDn(@javax.annotation.Nullable String pingCertSubjectDn) {
    this.pingCertSubjectDn = pingCertSubjectDn;
  }


  public DynamicSecretUpdatePing pingClientAuthenticationType(@javax.annotation.Nullable String pingClientAuthenticationType) {
    this.pingClientAuthenticationType = pingClientAuthenticationType;
    return this;
  }

  /**
   * OAuth Client Authentication Type [CLIENT_SECRET, PRIVATE_KEY_JWT, CLIENT_TLS_CERTIFICATE]
   * @return pingClientAuthenticationType
   */
  @javax.annotation.Nullable
  public String getPingClientAuthenticationType() {
    return pingClientAuthenticationType;
  }

  public void setPingClientAuthenticationType(@javax.annotation.Nullable String pingClientAuthenticationType) {
    this.pingClientAuthenticationType = pingClientAuthenticationType;
  }


  public DynamicSecretUpdatePing pingEnforceReplayPrevention(@javax.annotation.Nullable String pingEnforceReplayPrevention) {
    this.pingEnforceReplayPrevention = pingEnforceReplayPrevention;
    return this;
  }

  /**
   * Determines whether PingFederate requires a unique signed JWT from the client for each action (relevant for PRIVATE_KEY_JWT authentication method) [true/false]
   * @return pingEnforceReplayPrevention
   */
  @javax.annotation.Nullable
  public String getPingEnforceReplayPrevention() {
    return pingEnforceReplayPrevention;
  }

  public void setPingEnforceReplayPrevention(@javax.annotation.Nullable String pingEnforceReplayPrevention) {
    this.pingEnforceReplayPrevention = pingEnforceReplayPrevention;
  }


  public DynamicSecretUpdatePing pingGrantTypes(@javax.annotation.Nullable List<String> pingGrantTypes) {
    this.pingGrantTypes = pingGrantTypes;
    return this;
  }

  public DynamicSecretUpdatePing addPingGrantTypesItem(String pingGrantTypesItem) {
    if (this.pingGrantTypes == null) {
      this.pingGrantTypes = new ArrayList<>();
    }
    this.pingGrantTypes.add(pingGrantTypesItem);
    return this;
  }

  /**
   * List of OAuth client grant types [IMPLICIT, AUTHORIZATION_CODE, CLIENT_CREDENTIALS, TOKEN_EXCHANGE, REFRESH_TOKEN, ASSERTION_GRANTS, PASSWORD, RESOURCE_OWNER_CREDENTIALS]. If no explicit value is given, AUTHORIZATION_CODE will be selected as default.
   * @return pingGrantTypes
   */
  @javax.annotation.Nullable
  public List<String> getPingGrantTypes() {
    return pingGrantTypes;
  }

  public void setPingGrantTypes(@javax.annotation.Nullable List<String> pingGrantTypes) {
    this.pingGrantTypes = pingGrantTypes;
  }


  public DynamicSecretUpdatePing pingIssuerDn(@javax.annotation.Nullable String pingIssuerDn) {
    this.pingIssuerDn = pingIssuerDn;
    return this;
  }

  /**
   * Issuer DN of trusted CA certificate that imported into Ping Federate server. You may select \\\&quot;Trust Any\\\&quot; to trust all the existing issuers in Ping Federate server. Used in conjunction with ping-cert-subject-dn (relevant for CLIENT_TLS_CERTIFICATE authentication method)
   * @return pingIssuerDn
   */
  @javax.annotation.Nullable
  public String getPingIssuerDn() {
    return pingIssuerDn;
  }

  public void setPingIssuerDn(@javax.annotation.Nullable String pingIssuerDn) {
    this.pingIssuerDn = pingIssuerDn;
  }


  public DynamicSecretUpdatePing pingJwks(@javax.annotation.Nullable String pingJwks) {
    this.pingJwks = pingJwks;
    return this;
  }

  /**
   * Base64-encoded JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT (Sign Algo: RS256) and return it as value (relevant for PRIVATE_KEY_JWT authentication method)
   * @return pingJwks
   */
  @javax.annotation.Nullable
  public String getPingJwks() {
    return pingJwks;
  }

  public void setPingJwks(@javax.annotation.Nullable String pingJwks) {
    this.pingJwks = pingJwks;
  }


  public DynamicSecretUpdatePing pingJwksUrl(@javax.annotation.Nullable String pingJwksUrl) {
    this.pingJwksUrl = pingJwksUrl;
    return this;
  }

  /**
   * The URL of the JSON Web Key Set (JWKS). If no explicit value is given, the producer will create JWKs and matched signed JWT and return it as value (relevant for PRIVATE_KEY_JWT authentication method)
   * @return pingJwksUrl
   */
  @javax.annotation.Nullable
  public String getPingJwksUrl() {
    return pingJwksUrl;
  }

  public void setPingJwksUrl(@javax.annotation.Nullable String pingJwksUrl) {
    this.pingJwksUrl = pingJwksUrl;
  }


  public DynamicSecretUpdatePing pingPassword(@javax.annotation.Nullable String pingPassword) {
    this.pingPassword = pingPassword;
    return this;
  }

  /**
   * Ping Federate privileged user password
   * @return pingPassword
   */
  @javax.annotation.Nullable
  public String getPingPassword() {
    return pingPassword;
  }

  public void setPingPassword(@javax.annotation.Nullable String pingPassword) {
    this.pingPassword = pingPassword;
  }


  public DynamicSecretUpdatePing pingPrivilegedUser(@javax.annotation.Nullable String pingPrivilegedUser) {
    this.pingPrivilegedUser = pingPrivilegedUser;
    return this;
  }

  /**
   * Ping Federate privileged user
   * @return pingPrivilegedUser
   */
  @javax.annotation.Nullable
  public String getPingPrivilegedUser() {
    return pingPrivilegedUser;
  }

  public void setPingPrivilegedUser(@javax.annotation.Nullable String pingPrivilegedUser) {
    this.pingPrivilegedUser = pingPrivilegedUser;
  }


  public DynamicSecretUpdatePing pingRedirectUris(@javax.annotation.Nullable List<String> pingRedirectUris) {
    this.pingRedirectUris = pingRedirectUris;
    return this;
  }

  public DynamicSecretUpdatePing addPingRedirectUrisItem(String pingRedirectUrisItem) {
    if (this.pingRedirectUris == null) {
      this.pingRedirectUris = new ArrayList<>();
    }
    this.pingRedirectUris.add(pingRedirectUrisItem);
    return this;
  }

  /**
   * List of URIs to which the OAuth authorization server may redirect the resource owner&#39;s user agent after authorization is obtained. At least one redirection URI is required for the AUTHORIZATION_CODE and IMPLICIT grant types.
   * @return pingRedirectUris
   */
  @javax.annotation.Nullable
  public List<String> getPingRedirectUris() {
    return pingRedirectUris;
  }

  public void setPingRedirectUris(@javax.annotation.Nullable List<String> pingRedirectUris) {
    this.pingRedirectUris = pingRedirectUris;
  }


  public DynamicSecretUpdatePing pingRestrictedScopes(@javax.annotation.Nullable List<String> pingRestrictedScopes) {
    this.pingRestrictedScopes = pingRestrictedScopes;
    return this;
  }

  public DynamicSecretUpdatePing addPingRestrictedScopesItem(String pingRestrictedScopesItem) {
    if (this.pingRestrictedScopes == null) {
      this.pingRestrictedScopes = new ArrayList<>();
    }
    this.pingRestrictedScopes.add(pingRestrictedScopesItem);
    return this;
  }

  /**
   * Limit the OAuth client to specific scopes list
   * @return pingRestrictedScopes
   */
  @javax.annotation.Nullable
  public List<String> getPingRestrictedScopes() {
    return pingRestrictedScopes;
  }

  public void setPingRestrictedScopes(@javax.annotation.Nullable List<String> pingRestrictedScopes) {
    this.pingRestrictedScopes = pingRestrictedScopes;
  }


  public DynamicSecretUpdatePing pingSigningAlgo(@javax.annotation.Nullable String pingSigningAlgo) {
    this.pingSigningAlgo = pingSigningAlgo;
    return this;
  }

  /**
   * The signing algorithm that the client must use to sign its request objects [RS256,RS384,RS512,ES256,ES384,ES512,PS256,PS384,PS512] If no explicit value is given, the client can use any of the supported signing algorithms (relevant for PRIVATE_KEY_JWT authentication method)
   * @return pingSigningAlgo
   */
  @javax.annotation.Nullable
  public String getPingSigningAlgo() {
    return pingSigningAlgo;
  }

  public void setPingSigningAlgo(@javax.annotation.Nullable String pingSigningAlgo) {
    this.pingSigningAlgo = pingSigningAlgo;
  }


  public DynamicSecretUpdatePing pingUrl(@javax.annotation.Nullable String pingUrl) {
    this.pingUrl = pingUrl;
    return this;
  }

  /**
   * Ping URL
   * @return pingUrl
   */
  @javax.annotation.Nullable
  public String getPingUrl() {
    return pingUrl;
  }

  public void setPingUrl(@javax.annotation.Nullable String pingUrl) {
    this.pingUrl = pingUrl;
  }


  public DynamicSecretUpdatePing producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretUpdatePing tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretUpdatePing addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretUpdatePing targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretUpdatePing token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretUpdatePing uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretUpdatePing userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * The time from dynamic secret creation to expiration.
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretUpdatePing dynamicSecretUpdatePing = (DynamicSecretUpdatePing) o;
    return Objects.equals(this.deleteProtection, dynamicSecretUpdatePing.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretUpdatePing.description) &&
        Objects.equals(this.json, dynamicSecretUpdatePing.json) &&
        Objects.equals(this.name, dynamicSecretUpdatePing.name) &&
        Objects.equals(this.newName, dynamicSecretUpdatePing.newName) &&
        Objects.equals(this.pingAdministrativePort, dynamicSecretUpdatePing.pingAdministrativePort) &&
        Objects.equals(this.pingAtmId, dynamicSecretUpdatePing.pingAtmId) &&
        Objects.equals(this.pingAuthorizationPort, dynamicSecretUpdatePing.pingAuthorizationPort) &&
        Objects.equals(this.pingCertSubjectDn, dynamicSecretUpdatePing.pingCertSubjectDn) &&
        Objects.equals(this.pingClientAuthenticationType, dynamicSecretUpdatePing.pingClientAuthenticationType) &&
        Objects.equals(this.pingEnforceReplayPrevention, dynamicSecretUpdatePing.pingEnforceReplayPrevention) &&
        Objects.equals(this.pingGrantTypes, dynamicSecretUpdatePing.pingGrantTypes) &&
        Objects.equals(this.pingIssuerDn, dynamicSecretUpdatePing.pingIssuerDn) &&
        Objects.equals(this.pingJwks, dynamicSecretUpdatePing.pingJwks) &&
        Objects.equals(this.pingJwksUrl, dynamicSecretUpdatePing.pingJwksUrl) &&
        Objects.equals(this.pingPassword, dynamicSecretUpdatePing.pingPassword) &&
        Objects.equals(this.pingPrivilegedUser, dynamicSecretUpdatePing.pingPrivilegedUser) &&
        Objects.equals(this.pingRedirectUris, dynamicSecretUpdatePing.pingRedirectUris) &&
        Objects.equals(this.pingRestrictedScopes, dynamicSecretUpdatePing.pingRestrictedScopes) &&
        Objects.equals(this.pingSigningAlgo, dynamicSecretUpdatePing.pingSigningAlgo) &&
        Objects.equals(this.pingUrl, dynamicSecretUpdatePing.pingUrl) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretUpdatePing.producerEncryptionKeyName) &&
        Objects.equals(this.tags, dynamicSecretUpdatePing.tags) &&
        Objects.equals(this.targetName, dynamicSecretUpdatePing.targetName) &&
        Objects.equals(this.token, dynamicSecretUpdatePing.token) &&
        Objects.equals(this.uidToken, dynamicSecretUpdatePing.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretUpdatePing.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteProtection, description, json, name, newName, pingAdministrativePort, pingAtmId, pingAuthorizationPort, pingCertSubjectDn, pingClientAuthenticationType, pingEnforceReplayPrevention, pingGrantTypes, pingIssuerDn, pingJwks, pingJwksUrl, pingPassword, pingPrivilegedUser, pingRedirectUris, pingRestrictedScopes, pingSigningAlgo, pingUrl, producerEncryptionKeyName, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretUpdatePing {\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    pingAdministrativePort: ").append(toIndentedString(pingAdministrativePort)).append("\n");
    sb.append("    pingAtmId: ").append(toIndentedString(pingAtmId)).append("\n");
    sb.append("    pingAuthorizationPort: ").append(toIndentedString(pingAuthorizationPort)).append("\n");
    sb.append("    pingCertSubjectDn: ").append(toIndentedString(pingCertSubjectDn)).append("\n");
    sb.append("    pingClientAuthenticationType: ").append(toIndentedString(pingClientAuthenticationType)).append("\n");
    sb.append("    pingEnforceReplayPrevention: ").append(toIndentedString(pingEnforceReplayPrevention)).append("\n");
    sb.append("    pingGrantTypes: ").append(toIndentedString(pingGrantTypes)).append("\n");
    sb.append("    pingIssuerDn: ").append(toIndentedString(pingIssuerDn)).append("\n");
    sb.append("    pingJwks: ").append(toIndentedString(pingJwks)).append("\n");
    sb.append("    pingJwksUrl: ").append(toIndentedString(pingJwksUrl)).append("\n");
    sb.append("    pingPassword: ").append(toIndentedString(pingPassword)).append("\n");
    sb.append("    pingPrivilegedUser: ").append(toIndentedString(pingPrivilegedUser)).append("\n");
    sb.append("    pingRedirectUris: ").append(toIndentedString(pingRedirectUris)).append("\n");
    sb.append("    pingRestrictedScopes: ").append(toIndentedString(pingRestrictedScopes)).append("\n");
    sb.append("    pingSigningAlgo: ").append(toIndentedString(pingSigningAlgo)).append("\n");
    sb.append("    pingUrl: ").append(toIndentedString(pingUrl)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("ping-administrative-port");
    openapiFields.add("ping-atm-id");
    openapiFields.add("ping-authorization-port");
    openapiFields.add("ping-cert-subject-dn");
    openapiFields.add("ping-client-authentication-type");
    openapiFields.add("ping-enforce-replay-prevention");
    openapiFields.add("ping-grant-types");
    openapiFields.add("ping-issuer-dn");
    openapiFields.add("ping-jwks");
    openapiFields.add("ping-jwks-url");
    openapiFields.add("ping-password");
    openapiFields.add("ping-privileged-user");
    openapiFields.add("ping-redirect-uris");
    openapiFields.add("ping-restricted-scopes");
    openapiFields.add("ping-signing-algo");
    openapiFields.add("ping-url");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretUpdatePing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretUpdatePing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretUpdatePing is not found in the empty JSON string", DynamicSecretUpdatePing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretUpdatePing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretUpdatePing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretUpdatePing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("ping-administrative-port") != null && !jsonObj.get("ping-administrative-port").isJsonNull()) && !jsonObj.get("ping-administrative-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-administrative-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-administrative-port").toString()));
      }
      if ((jsonObj.get("ping-atm-id") != null && !jsonObj.get("ping-atm-id").isJsonNull()) && !jsonObj.get("ping-atm-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-atm-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-atm-id").toString()));
      }
      if ((jsonObj.get("ping-authorization-port") != null && !jsonObj.get("ping-authorization-port").isJsonNull()) && !jsonObj.get("ping-authorization-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-authorization-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-authorization-port").toString()));
      }
      if ((jsonObj.get("ping-cert-subject-dn") != null && !jsonObj.get("ping-cert-subject-dn").isJsonNull()) && !jsonObj.get("ping-cert-subject-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-cert-subject-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-cert-subject-dn").toString()));
      }
      if ((jsonObj.get("ping-client-authentication-type") != null && !jsonObj.get("ping-client-authentication-type").isJsonNull()) && !jsonObj.get("ping-client-authentication-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-client-authentication-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-client-authentication-type").toString()));
      }
      if ((jsonObj.get("ping-enforce-replay-prevention") != null && !jsonObj.get("ping-enforce-replay-prevention").isJsonNull()) && !jsonObj.get("ping-enforce-replay-prevention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-enforce-replay-prevention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-enforce-replay-prevention").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ping-grant-types") != null && !jsonObj.get("ping-grant-types").isJsonNull() && !jsonObj.get("ping-grant-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-grant-types` to be an array in the JSON string but got `%s`", jsonObj.get("ping-grant-types").toString()));
      }
      if ((jsonObj.get("ping-issuer-dn") != null && !jsonObj.get("ping-issuer-dn").isJsonNull()) && !jsonObj.get("ping-issuer-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-issuer-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-issuer-dn").toString()));
      }
      if ((jsonObj.get("ping-jwks") != null && !jsonObj.get("ping-jwks").isJsonNull()) && !jsonObj.get("ping-jwks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-jwks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-jwks").toString()));
      }
      if ((jsonObj.get("ping-jwks-url") != null && !jsonObj.get("ping-jwks-url").isJsonNull()) && !jsonObj.get("ping-jwks-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-jwks-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-jwks-url").toString()));
      }
      if ((jsonObj.get("ping-password") != null && !jsonObj.get("ping-password").isJsonNull()) && !jsonObj.get("ping-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-password").toString()));
      }
      if ((jsonObj.get("ping-privileged-user") != null && !jsonObj.get("ping-privileged-user").isJsonNull()) && !jsonObj.get("ping-privileged-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-privileged-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-privileged-user").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ping-redirect-uris") != null && !jsonObj.get("ping-redirect-uris").isJsonNull() && !jsonObj.get("ping-redirect-uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-redirect-uris` to be an array in the JSON string but got `%s`", jsonObj.get("ping-redirect-uris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ping-restricted-scopes") != null && !jsonObj.get("ping-restricted-scopes").isJsonNull() && !jsonObj.get("ping-restricted-scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-restricted-scopes` to be an array in the JSON string but got `%s`", jsonObj.get("ping-restricted-scopes").toString()));
      }
      if ((jsonObj.get("ping-signing-algo") != null && !jsonObj.get("ping-signing-algo").isJsonNull()) && !jsonObj.get("ping-signing-algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-signing-algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-signing-algo").toString()));
      }
      if ((jsonObj.get("ping-url") != null && !jsonObj.get("ping-url").isJsonNull()) && !jsonObj.get("ping-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ping-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ping-url").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretUpdatePing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretUpdatePing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretUpdatePing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretUpdatePing.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretUpdatePing>() {
           @Override
           public void write(JsonWriter out, DynamicSecretUpdatePing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretUpdatePing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretUpdatePing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretUpdatePing
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretUpdatePing
   */
  public static DynamicSecretUpdatePing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretUpdatePing.class);
  }

  /**
   * Convert an instance of DynamicSecretUpdatePing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

