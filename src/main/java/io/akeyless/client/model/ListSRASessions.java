/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * listSRASessions is a command that returns sra sessions of the given user
 */
@ApiModel(description = "listSRASessions is a command that returns sra sessions of the given user")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ListSRASessions {
  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource-type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private List<String> resourceType = null;

  public static final String SERIALIZED_NAME_STATUS_TYPE = "status-type";
  @SerializedName(SERIALIZED_NAME_STATUS_TYPE)
  private List<String> statusType = null;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public ListSRASessions() { 
  }

  public ListSRASessions json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public ListSRASessions resourceType(List<String> resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

  public ListSRASessions addResourceTypeItem(String resourceTypeItem) {
    if (this.resourceType == null) {
      this.resourceType = new ArrayList<String>();
    }
    this.resourceType.add(resourceTypeItem);
    return this;
  }

   /**
   * session resource type. In case it is empty, all resources type will be returned. options: [mysql, k8s, ssh, mongodb, mssql, postgres, aws, eks, gke, rdp]
   * @return resourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "session resource type. In case it is empty, all resources type will be returned. options: [mysql, k8s, ssh, mongodb, mssql, postgres, aws, eks, gke, rdp]")

  public List<String> getResourceType() {
    return resourceType;
  }


  public void setResourceType(List<String> resourceType) {
    this.resourceType = resourceType;
  }


  public ListSRASessions statusType(List<String> statusType) {
    
    this.statusType = statusType;
    return this;
  }

  public ListSRASessions addStatusTypeItem(String statusTypeItem) {
    if (this.statusType == null) {
      this.statusType = new ArrayList<String>();
    }
    this.statusType.add(statusTypeItem);
    return this;
  }

   /**
   * session status type. In case it is empty, only active sessions will be returned. options: [connecting, connected, failed, completed, terminated]
   * @return statusType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "session status type. In case it is empty, only active sessions will be returned. options: [connecting, connected, failed, completed, terminated]")

  public List<String> getStatusType() {
    return statusType;
  }


  public void setStatusType(List<String> statusType) {
    this.statusType = statusType;
  }


  public ListSRASessions token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public ListSRASessions uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSRASessions listSRASessions = (ListSRASessions) o;
    return Objects.equals(this.json, listSRASessions.json) &&
        Objects.equals(this.resourceType, listSRASessions.resourceType) &&
        Objects.equals(this.statusType, listSRASessions.statusType) &&
        Objects.equals(this.token, listSRASessions.token) &&
        Objects.equals(this.uidToken, listSRASessions.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(json, resourceType, statusType, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSRASessions {\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    statusType: ").append(toIndentedString(statusType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

