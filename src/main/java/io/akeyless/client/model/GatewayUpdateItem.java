/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateItem is a command that updates classic key
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateItem {
  public static final String SERIALIZED_NAME_ADD_TAG = "add-tag";
  @SerializedName(SERIALIZED_NAME_ADD_TAG)
  @javax.annotation.Nullable
  private List<String> addTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_ID = "api-id";
  @SerializedName(SERIALIZED_NAME_API_ID)
  @javax.annotation.Nullable
  private String apiId;

  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_APP_ID = "app-id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  @javax.annotation.Nullable
  private String appId;

  public static final String SERIALIZED_NAME_AUTO_ROTATE = "auto-rotate";
  @SerializedName(SERIALIZED_NAME_AUTO_ROTATE)
  @javax.annotation.Nullable
  private String autoRotate;

  public static final String SERIALIZED_NAME_CUSTOM_PAYLOAD = "custom-payload";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYLOAD)
  @javax.annotation.Nullable
  private String customPayload;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description = "default_metadata";

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  @javax.annotation.Nullable
  private String gcpKey;

  public static final String SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_EMAIL = "gcp-service-account-email";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_EMAIL)
  @javax.annotation.Nullable
  private String gcpServiceAccountEmail;

  public static final String SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_KEY_ID = "gcp-service-account-key-id";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_KEY_ID)
  @javax.annotation.Nullable
  private String gcpServiceAccountKeyId;

  public static final String SERIALIZED_NAME_GRACE_ROTATION = "grace-rotation";
  @SerializedName(SERIALIZED_NAME_GRACE_ROTATION)
  @javax.annotation.Nullable
  private String graceRotation;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_METADATA = "new-metadata";
  @SerializedName(SERIALIZED_NAME_NEW_METADATA)
  @javax.annotation.Nullable
  private String newMetadata = "default_metadata";

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_NEW_VERSION = "new-version";
  @SerializedName(SERIALIZED_NAME_NEW_VERSION)
  @javax.annotation.Nullable
  private Boolean newVersion;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_RM_TAG = "rm-tag";
  @SerializedName(SERIALIZED_NAME_RM_TAG)
  @javax.annotation.Nullable
  private List<String> rmTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATED_PASSWORD = "rotated-password";
  @SerializedName(SERIALIZED_NAME_ROTATED_PASSWORD)
  @javax.annotation.Nullable
  private String rotatedPassword;

  public static final String SERIALIZED_NAME_ROTATED_USERNAME = "rotated-username";
  @SerializedName(SERIALIZED_NAME_ROTATED_USERNAME)
  @javax.annotation.Nullable
  private String rotatedUsername;

  public static final String SERIALIZED_NAME_ROTATION_EVENT_IN = "rotation-event-in";
  @SerializedName(SERIALIZED_NAME_ROTATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> rotationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATION_HOUR = "rotation-hour";
  @SerializedName(SERIALIZED_NAME_ROTATION_HOUR)
  @javax.annotation.Nullable
  private Integer rotationHour = 0;

  public static final String SERIALIZED_NAME_ROTATION_INTERVAL = "rotation-interval";
  @SerializedName(SERIALIZED_NAME_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private String rotationInterval;

  public static final String SERIALIZED_NAME_ROTATOR_CREDS_TYPE = "rotator-creds-type";
  @SerializedName(SERIALIZED_NAME_ROTATOR_CREDS_TYPE)
  @javax.annotation.Nullable
  private String rotatorCredsType = "use-self-creds";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public GatewayUpdateItem() {
  }

  public GatewayUpdateItem addTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
    return this;
  }

  public GatewayUpdateItem addAddTagItem(String addTagItem) {
    if (this.addTag == null) {
      this.addTag = new ArrayList<>();
    }
    this.addTag.add(addTagItem);
    return this;
  }

  /**
   * List of the new tags that will be attached to this item
   * @return addTag
   */
  @javax.annotation.Nullable
  public List<String> getAddTag() {
    return addTag;
  }

  public void setAddTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
  }


  public GatewayUpdateItem apiId(@javax.annotation.Nullable String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * API ID to rotate (relevant only for rotator-type&#x3D;api-key)
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(@javax.annotation.Nullable String apiId) {
    this.apiId = apiId;
  }


  public GatewayUpdateItem apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * API key to rotate (relevant only for rotator-type&#x3D;api-key)
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public GatewayUpdateItem appId(@javax.annotation.Nullable String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * ApplicationId (used in azure)
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(@javax.annotation.Nullable String appId) {
    this.appId = appId;
  }


  public GatewayUpdateItem autoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
    return this;
  }

  /**
   * Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]
   * @return autoRotate
   */
  @javax.annotation.Nullable
  public String getAutoRotate() {
    return autoRotate;
  }

  public void setAutoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
  }


  public GatewayUpdateItem customPayload(@javax.annotation.Nullable String customPayload) {
    this.customPayload = customPayload;
    return this;
  }

  /**
   * Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)
   * @return customPayload
   */
  @javax.annotation.Nullable
  public String getCustomPayload() {
    return customPayload;
  }

  public void setCustomPayload(@javax.annotation.Nullable String customPayload) {
    this.customPayload = customPayload;
  }


  public GatewayUpdateItem deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GatewayUpdateItem description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public GatewayUpdateItem gcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
    return this;
  }

  /**
   * Base64-encoded service account private key text
   * @return gcpKey
   */
  @javax.annotation.Nullable
  public String getGcpKey() {
    return gcpKey;
  }

  public void setGcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public GatewayUpdateItem gcpServiceAccountEmail(@javax.annotation.Nullable String gcpServiceAccountEmail) {
    this.gcpServiceAccountEmail = gcpServiceAccountEmail;
    return this;
  }

  /**
   * The email of the gcp service account to rotate
   * @return gcpServiceAccountEmail
   */
  @javax.annotation.Nullable
  public String getGcpServiceAccountEmail() {
    return gcpServiceAccountEmail;
  }

  public void setGcpServiceAccountEmail(@javax.annotation.Nullable String gcpServiceAccountEmail) {
    this.gcpServiceAccountEmail = gcpServiceAccountEmail;
  }


  public GatewayUpdateItem gcpServiceAccountKeyId(@javax.annotation.Nullable String gcpServiceAccountKeyId) {
    this.gcpServiceAccountKeyId = gcpServiceAccountKeyId;
    return this;
  }

  /**
   * The key id of the gcp service account to rotate
   * @return gcpServiceAccountKeyId
   */
  @javax.annotation.Nullable
  public String getGcpServiceAccountKeyId() {
    return gcpServiceAccountKeyId;
  }

  public void setGcpServiceAccountKeyId(@javax.annotation.Nullable String gcpServiceAccountKeyId) {
    this.gcpServiceAccountKeyId = gcpServiceAccountKeyId;
  }


  public GatewayUpdateItem graceRotation(@javax.annotation.Nullable String graceRotation) {
    this.graceRotation = graceRotation;
    return this;
  }

  /**
   * Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
   * @return graceRotation
   */
  @javax.annotation.Nullable
  public String getGraceRotation() {
    return graceRotation;
  }

  public void setGraceRotation(@javax.annotation.Nullable String graceRotation) {
    this.graceRotation = graceRotation;
  }


  public GatewayUpdateItem json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateItem keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. (relevant only for --type&#x3D;rotated-secret). If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public GatewayUpdateItem key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public GatewayUpdateItem name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Item name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayUpdateItem newMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
    return this;
  }

  /**
   * Deprecated - use description
   * @return newMetadata
   */
  @javax.annotation.Nullable
  public String getNewMetadata() {
    return newMetadata;
  }

  public void setNewMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
  }


  public GatewayUpdateItem newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New item name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public GatewayUpdateItem newVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
    return this;
  }

  /**
   * Deprecated
   * @return newVersion
   */
  @javax.annotation.Nullable
  public Boolean getNewVersion() {
    return newVersion;
  }

  public void setNewVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
  }


  public GatewayUpdateItem passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public GatewayUpdateItem rmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
    return this;
  }

  public GatewayUpdateItem addRmTagItem(String rmTagItem) {
    if (this.rmTag == null) {
      this.rmTag = new ArrayList<>();
    }
    this.rmTag.add(rmTagItem);
    return this;
  }

  /**
   * List of the existent tags that will be removed from this item
   * @return rmTag
   */
  @javax.annotation.Nullable
  public List<String> getRmTag() {
    return rmTag;
  }

  public void setRmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
  }


  public GatewayUpdateItem rotatedPassword(@javax.annotation.Nullable String rotatedPassword) {
    this.rotatedPassword = rotatedPassword;
    return this;
  }

  /**
   * rotated-username password (relevant only for rotator-type&#x3D;password)
   * @return rotatedPassword
   */
  @javax.annotation.Nullable
  public String getRotatedPassword() {
    return rotatedPassword;
  }

  public void setRotatedPassword(@javax.annotation.Nullable String rotatedPassword) {
    this.rotatedPassword = rotatedPassword;
  }


  public GatewayUpdateItem rotatedUsername(@javax.annotation.Nullable String rotatedUsername) {
    this.rotatedUsername = rotatedUsername;
    return this;
  }

  /**
   * username to be rotated, if selected \\\&quot;use-self-creds\\\&quot; at rotator-creds-type, this username will try to rotate it&#39;s own password, if \\\&quot;use-target-creds\\\&quot; is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type&#x3D;password)
   * @return rotatedUsername
   */
  @javax.annotation.Nullable
  public String getRotatedUsername() {
    return rotatedUsername;
  }

  public void setRotatedUsername(@javax.annotation.Nullable String rotatedUsername) {
    this.rotatedUsername = rotatedUsername;
  }


  public GatewayUpdateItem rotationEventIn(@javax.annotation.Nullable List<String> rotationEventIn) {
    this.rotationEventIn = rotationEventIn;
    return this;
  }

  public GatewayUpdateItem addRotationEventInItem(String rotationEventInItem) {
    if (this.rotationEventIn == null) {
      this.rotationEventIn = new ArrayList<>();
    }
    this.rotationEventIn.add(rotationEventInItem);
    return this;
  }

  /**
   * How many days before the rotation of the item would you like to be notified
   * @return rotationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getRotationEventIn() {
    return rotationEventIn;
  }

  public void setRotationEventIn(@javax.annotation.Nullable List<String> rotationEventIn) {
    this.rotationEventIn = rotationEventIn;
  }


  public GatewayUpdateItem rotationHour(@javax.annotation.Nullable Integer rotationHour) {
    this.rotationHour = rotationHour;
    return this;
  }

  /**
   * The Rotation Hour
   * @return rotationHour
   */
  @javax.annotation.Nullable
  public Integer getRotationHour() {
    return rotationHour;
  }

  public void setRotationHour(@javax.annotation.Nullable Integer rotationHour) {
    this.rotationHour = rotationHour;
  }


  public GatewayUpdateItem rotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
    return this;
  }

  /**
   * The number of days to wait between every automatic key rotation (1-365)
   * @return rotationInterval
   */
  @javax.annotation.Nullable
  public String getRotationInterval() {
    return rotationInterval;
  }

  public void setRotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
  }


  public GatewayUpdateItem rotatorCredsType(@javax.annotation.Nullable String rotatorCredsType) {
    this.rotatorCredsType = rotatorCredsType;
    return this;
  }

  /**
   * The rotation credentials type
   * @return rotatorCredsType
   */
  @javax.annotation.Nullable
  public String getRotatorCredsType() {
    return rotatorCredsType;
  }

  public void setRotatorCredsType(@javax.annotation.Nullable String rotatorCredsType) {
    this.rotatorCredsType = rotatorCredsType;
  }


  public GatewayUpdateItem token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateItem type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Item type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public GatewayUpdateItem uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateItem gatewayUpdateItem = (GatewayUpdateItem) o;
    return Objects.equals(this.addTag, gatewayUpdateItem.addTag) &&
        Objects.equals(this.apiId, gatewayUpdateItem.apiId) &&
        Objects.equals(this.apiKey, gatewayUpdateItem.apiKey) &&
        Objects.equals(this.appId, gatewayUpdateItem.appId) &&
        Objects.equals(this.autoRotate, gatewayUpdateItem.autoRotate) &&
        Objects.equals(this.customPayload, gatewayUpdateItem.customPayload) &&
        Objects.equals(this.deleteProtection, gatewayUpdateItem.deleteProtection) &&
        Objects.equals(this.description, gatewayUpdateItem.description) &&
        Objects.equals(this.gcpKey, gatewayUpdateItem.gcpKey) &&
        Objects.equals(this.gcpServiceAccountEmail, gatewayUpdateItem.gcpServiceAccountEmail) &&
        Objects.equals(this.gcpServiceAccountKeyId, gatewayUpdateItem.gcpServiceAccountKeyId) &&
        Objects.equals(this.graceRotation, gatewayUpdateItem.graceRotation) &&
        Objects.equals(this.json, gatewayUpdateItem.json) &&
        Objects.equals(this.keepPrevVersion, gatewayUpdateItem.keepPrevVersion) &&
        Objects.equals(this.key, gatewayUpdateItem.key) &&
        Objects.equals(this.name, gatewayUpdateItem.name) &&
        Objects.equals(this.newMetadata, gatewayUpdateItem.newMetadata) &&
        Objects.equals(this.newName, gatewayUpdateItem.newName) &&
        Objects.equals(this.newVersion, gatewayUpdateItem.newVersion) &&
        Objects.equals(this.passwordLength, gatewayUpdateItem.passwordLength) &&
        Objects.equals(this.rmTag, gatewayUpdateItem.rmTag) &&
        Objects.equals(this.rotatedPassword, gatewayUpdateItem.rotatedPassword) &&
        Objects.equals(this.rotatedUsername, gatewayUpdateItem.rotatedUsername) &&
        Objects.equals(this.rotationEventIn, gatewayUpdateItem.rotationEventIn) &&
        Objects.equals(this.rotationHour, gatewayUpdateItem.rotationHour) &&
        Objects.equals(this.rotationInterval, gatewayUpdateItem.rotationInterval) &&
        Objects.equals(this.rotatorCredsType, gatewayUpdateItem.rotatorCredsType) &&
        Objects.equals(this.token, gatewayUpdateItem.token) &&
        Objects.equals(this.type, gatewayUpdateItem.type) &&
        Objects.equals(this.uidToken, gatewayUpdateItem.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addTag, apiId, apiKey, appId, autoRotate, customPayload, deleteProtection, description, gcpKey, gcpServiceAccountEmail, gcpServiceAccountKeyId, graceRotation, json, keepPrevVersion, key, name, newMetadata, newName, newVersion, passwordLength, rmTag, rotatedPassword, rotatedUsername, rotationEventIn, rotationHour, rotationInterval, rotatorCredsType, token, type, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateItem {\n");
    sb.append("    addTag: ").append(toIndentedString(addTag)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    autoRotate: ").append(toIndentedString(autoRotate)).append("\n");
    sb.append("    customPayload: ").append(toIndentedString(customPayload)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    gcpServiceAccountEmail: ").append(toIndentedString(gcpServiceAccountEmail)).append("\n");
    sb.append("    gcpServiceAccountKeyId: ").append(toIndentedString(gcpServiceAccountKeyId)).append("\n");
    sb.append("    graceRotation: ").append(toIndentedString(graceRotation)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newMetadata: ").append(toIndentedString(newMetadata)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    newVersion: ").append(toIndentedString(newVersion)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    rmTag: ").append(toIndentedString(rmTag)).append("\n");
    sb.append("    rotatedPassword: ").append(toIndentedString(rotatedPassword)).append("\n");
    sb.append("    rotatedUsername: ").append(toIndentedString(rotatedUsername)).append("\n");
    sb.append("    rotationEventIn: ").append(toIndentedString(rotationEventIn)).append("\n");
    sb.append("    rotationHour: ").append(toIndentedString(rotationHour)).append("\n");
    sb.append("    rotationInterval: ").append(toIndentedString(rotationInterval)).append("\n");
    sb.append("    rotatorCredsType: ").append(toIndentedString(rotatorCredsType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add-tag");
    openapiFields.add("api-id");
    openapiFields.add("api-key");
    openapiFields.add("app-id");
    openapiFields.add("auto-rotate");
    openapiFields.add("custom-payload");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("gcp-key");
    openapiFields.add("gcp-service-account-email");
    openapiFields.add("gcp-service-account-key-id");
    openapiFields.add("grace-rotation");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("new-metadata");
    openapiFields.add("new-name");
    openapiFields.add("new-version");
    openapiFields.add("password-length");
    openapiFields.add("rm-tag");
    openapiFields.add("rotated-password");
    openapiFields.add("rotated-username");
    openapiFields.add("rotation-event-in");
    openapiFields.add("rotation-hour");
    openapiFields.add("rotation-interval");
    openapiFields.add("rotator-creds-type");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateItem is not found in the empty JSON string", GatewayUpdateItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayUpdateItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("add-tag") != null && !jsonObj.get("add-tag").isJsonNull() && !jsonObj.get("add-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add-tag` to be an array in the JSON string but got `%s`", jsonObj.get("add-tag").toString()));
      }
      if ((jsonObj.get("api-id") != null && !jsonObj.get("api-id").isJsonNull()) && !jsonObj.get("api-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-id").toString()));
      }
      if ((jsonObj.get("api-key") != null && !jsonObj.get("api-key").isJsonNull()) && !jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if ((jsonObj.get("app-id") != null && !jsonObj.get("app-id").isJsonNull()) && !jsonObj.get("app-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app-id").toString()));
      }
      if ((jsonObj.get("auto-rotate") != null && !jsonObj.get("auto-rotate").isJsonNull()) && !jsonObj.get("auto-rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto-rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto-rotate").toString()));
      }
      if ((jsonObj.get("custom-payload") != null && !jsonObj.get("custom-payload").isJsonNull()) && !jsonObj.get("custom-payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-payload").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gcp-key") != null && !jsonObj.get("gcp-key").isJsonNull()) && !jsonObj.get("gcp-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key").toString()));
      }
      if ((jsonObj.get("gcp-service-account-email") != null && !jsonObj.get("gcp-service-account-email").isJsonNull()) && !jsonObj.get("gcp-service-account-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-service-account-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-service-account-email").toString()));
      }
      if ((jsonObj.get("gcp-service-account-key-id") != null && !jsonObj.get("gcp-service-account-key-id").isJsonNull()) && !jsonObj.get("gcp-service-account-key-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-service-account-key-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-service-account-key-id").toString()));
      }
      if ((jsonObj.get("grace-rotation") != null && !jsonObj.get("grace-rotation").isJsonNull()) && !jsonObj.get("grace-rotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grace-rotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grace-rotation").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-metadata") != null && !jsonObj.get("new-metadata").isJsonNull()) && !jsonObj.get("new-metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-metadata").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rm-tag") != null && !jsonObj.get("rm-tag").isJsonNull() && !jsonObj.get("rm-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rm-tag` to be an array in the JSON string but got `%s`", jsonObj.get("rm-tag").toString()));
      }
      if ((jsonObj.get("rotated-password") != null && !jsonObj.get("rotated-password").isJsonNull()) && !jsonObj.get("rotated-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotated-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotated-password").toString()));
      }
      if ((jsonObj.get("rotated-username") != null && !jsonObj.get("rotated-username").isJsonNull()) && !jsonObj.get("rotated-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotated-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotated-username").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotation-event-in") != null && !jsonObj.get("rotation-event-in").isJsonNull() && !jsonObj.get("rotation-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("rotation-event-in").toString()));
      }
      if ((jsonObj.get("rotation-interval") != null && !jsonObj.get("rotation-interval").isJsonNull()) && !jsonObj.get("rotation-interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation-interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation-interval").toString()));
      }
      if ((jsonObj.get("rotator-creds-type") != null && !jsonObj.get("rotator-creds-type").isJsonNull()) && !jsonObj.get("rotator-creds-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotator-creds-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotator-creds-type").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateItem.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateItem>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateItem
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateItem
   */
  public static GatewayUpdateItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateItem.class);
  }

  /**
   * Convert an instance of GatewayUpdateItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

