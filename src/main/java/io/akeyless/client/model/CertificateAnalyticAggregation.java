/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CertificateAnalyticAggregation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CertificateAnalyticAggregation {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CA_COUNTS = "ca_counts";
  @SerializedName(SERIALIZED_NAME_CA_COUNTS)
  private Map<String, Integer> caCounts = null;

  public static final String SERIALIZED_NAME_RISK_COUNTS = "risk_counts";
  @SerializedName(SERIALIZED_NAME_RISK_COUNTS)
  private Map<String, Integer> riskCounts = null;

  public CertificateAnalyticAggregation() { 
  }

  public CertificateAnalyticAggregation accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CertificateAnalyticAggregation caCounts(Map<String, Integer> caCounts) {
    
    this.caCounts = caCounts;
    return this;
  }

  public CertificateAnalyticAggregation putCaCountsItem(String key, Integer caCountsItem) {
    if (this.caCounts == null) {
      this.caCounts = new HashMap<String, Integer>();
    }
    this.caCounts.put(key, caCountsItem);
    return this;
  }

   /**
   * Get caCounts
   * @return caCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Integer> getCaCounts() {
    return caCounts;
  }


  public void setCaCounts(Map<String, Integer> caCounts) {
    this.caCounts = caCounts;
  }


  public CertificateAnalyticAggregation riskCounts(Map<String, Integer> riskCounts) {
    
    this.riskCounts = riskCounts;
    return this;
  }

  public CertificateAnalyticAggregation putRiskCountsItem(String key, Integer riskCountsItem) {
    if (this.riskCounts == null) {
      this.riskCounts = new HashMap<String, Integer>();
    }
    this.riskCounts.put(key, riskCountsItem);
    return this;
  }

   /**
   * Get riskCounts
   * @return riskCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Integer> getRiskCounts() {
    return riskCounts;
  }


  public void setRiskCounts(Map<String, Integer> riskCounts) {
    this.riskCounts = riskCounts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAnalyticAggregation certificateAnalyticAggregation = (CertificateAnalyticAggregation) o;
    return Objects.equals(this.accountId, certificateAnalyticAggregation.accountId) &&
        Objects.equals(this.caCounts, certificateAnalyticAggregation.caCounts) &&
        Objects.equals(this.riskCounts, certificateAnalyticAggregation.riskCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, caCounts, riskCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAnalyticAggregation {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    caCounts: ").append(toIndentedString(caCounts)).append("\n");
    sb.append("    riskCounts: ").append(toIndentedString(riskCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

