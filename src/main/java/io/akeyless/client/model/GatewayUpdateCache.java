/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayUpdateCache is a command that updates cache settings
 */
@ApiModel(description = "gatewayUpdateCache is a command that updates cache settings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayUpdateCache {
  public static final String SERIALIZED_NAME_BACKUP_INTERVAL = "backup-interval";
  @SerializedName(SERIALIZED_NAME_BACKUP_INTERVAL)
  private String backupInterval = "1";

  public static final String SERIALIZED_NAME_ENABLE_CACHE = "enable-cache";
  @SerializedName(SERIALIZED_NAME_ENABLE_CACHE)
  private String enableCache;

  public static final String SERIALIZED_NAME_ENABLE_PROACTIVE = "enable-proactive";
  @SerializedName(SERIALIZED_NAME_ENABLE_PROACTIVE)
  private String enableProactive;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_MINIMUM_FETCH_INTERVAL = "minimum-fetch-interval";
  @SerializedName(SERIALIZED_NAME_MINIMUM_FETCH_INTERVAL)
  private String minimumFetchInterval = "5";

  public static final String SERIALIZED_NAME_STALE_TIMEOUT = "stale-timeout";
  @SerializedName(SERIALIZED_NAME_STALE_TIMEOUT)
  private String staleTimeout = "60";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public GatewayUpdateCache() { 
  }

  public GatewayUpdateCache backupInterval(String backupInterval) {
    
    this.backupInterval = backupInterval;
    return this;
  }

   /**
   * Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval
   * @return backupInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval")

  public String getBackupInterval() {
    return backupInterval;
  }


  public void setBackupInterval(String backupInterval) {
    this.backupInterval = backupInterval;
  }


  public GatewayUpdateCache enableCache(String enableCache) {
    
    this.enableCache = enableCache;
    return this;
  }

   /**
   * Enable cache [true/false]
   * @return enableCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable cache [true/false]")

  public String getEnableCache() {
    return enableCache;
  }


  public void setEnableCache(String enableCache) {
    this.enableCache = enableCache;
  }


  public GatewayUpdateCache enableProactive(String enableProactive) {
    
    this.enableProactive = enableProactive;
    return this;
  }

   /**
   * Enable proactive caching [true/false]
   * @return enableProactive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable proactive caching [true/false]")

  public String getEnableProactive() {
    return enableProactive;
  }


  public void setEnableProactive(String enableProactive) {
    this.enableProactive = enableProactive;
  }


  public GatewayUpdateCache json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public GatewayUpdateCache minimumFetchInterval(String minimumFetchInterval) {
    
    this.minimumFetchInterval = minimumFetchInterval;
    return this;
  }

   /**
   * When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor&#39;s access policy. Define minimum fetching interval to avoid over fetching in a given time frame
   * @return minimumFetchInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor's access policy. Define minimum fetching interval to avoid over fetching in a given time frame")

  public String getMinimumFetchInterval() {
    return minimumFetchInterval;
  }


  public void setMinimumFetchInterval(String minimumFetchInterval) {
    this.minimumFetchInterval = minimumFetchInterval;
  }


  public GatewayUpdateCache staleTimeout(String staleTimeout) {
    
    this.staleTimeout = staleTimeout;
    return this;
  }

   /**
   * Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache
   * @return staleTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache")

  public String getStaleTimeout() {
    return staleTimeout;
  }


  public void setStaleTimeout(String staleTimeout) {
    this.staleTimeout = staleTimeout;
  }


  public GatewayUpdateCache token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayUpdateCache uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateCache gatewayUpdateCache = (GatewayUpdateCache) o;
    return Objects.equals(this.backupInterval, gatewayUpdateCache.backupInterval) &&
        Objects.equals(this.enableCache, gatewayUpdateCache.enableCache) &&
        Objects.equals(this.enableProactive, gatewayUpdateCache.enableProactive) &&
        Objects.equals(this.json, gatewayUpdateCache.json) &&
        Objects.equals(this.minimumFetchInterval, gatewayUpdateCache.minimumFetchInterval) &&
        Objects.equals(this.staleTimeout, gatewayUpdateCache.staleTimeout) &&
        Objects.equals(this.token, gatewayUpdateCache.token) &&
        Objects.equals(this.uidToken, gatewayUpdateCache.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupInterval, enableCache, enableProactive, json, minimumFetchInterval, staleTimeout, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateCache {\n");
    sb.append("    backupInterval: ").append(toIndentedString(backupInterval)).append("\n");
    sb.append("    enableCache: ").append(toIndentedString(enableCache)).append("\n");
    sb.append("    enableProactive: ").append(toIndentedString(enableProactive)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    minimumFetchInterval: ").append(toIndentedString(minimumFetchInterval)).append("\n");
    sb.append("    staleTimeout: ").append(toIndentedString(staleTimeout)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

