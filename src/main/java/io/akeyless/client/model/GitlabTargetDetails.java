/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * GitlabTargetDetails
 */
@ApiModel(description = "GitlabTargetDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GitlabTargetDetails {
  public static final String SERIALIZED_NAME_GITLAB_ACCESS_TOKEN = "gitlab_access_token";
  @SerializedName(SERIALIZED_NAME_GITLAB_ACCESS_TOKEN)
  private String gitlabAccessToken;

  public static final String SERIALIZED_NAME_GITLAB_CERTIFICATE = "gitlab_certificate";
  @SerializedName(SERIALIZED_NAME_GITLAB_CERTIFICATE)
  private String gitlabCertificate;

  public static final String SERIALIZED_NAME_GITLAB_URL = "gitlab_url";
  @SerializedName(SERIALIZED_NAME_GITLAB_URL)
  private String gitlabUrl;

  public GitlabTargetDetails() { 
  }

  public GitlabTargetDetails gitlabAccessToken(String gitlabAccessToken) {
    
    this.gitlabAccessToken = gitlabAccessToken;
    return this;
  }

   /**
   * Get gitlabAccessToken
   * @return gitlabAccessToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGitlabAccessToken() {
    return gitlabAccessToken;
  }


  public void setGitlabAccessToken(String gitlabAccessToken) {
    this.gitlabAccessToken = gitlabAccessToken;
  }


  public GitlabTargetDetails gitlabCertificate(String gitlabCertificate) {
    
    this.gitlabCertificate = gitlabCertificate;
    return this;
  }

   /**
   * Get gitlabCertificate
   * @return gitlabCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGitlabCertificate() {
    return gitlabCertificate;
  }


  public void setGitlabCertificate(String gitlabCertificate) {
    this.gitlabCertificate = gitlabCertificate;
  }


  public GitlabTargetDetails gitlabUrl(String gitlabUrl) {
    
    this.gitlabUrl = gitlabUrl;
    return this;
  }

   /**
   * Get gitlabUrl
   * @return gitlabUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGitlabUrl() {
    return gitlabUrl;
  }


  public void setGitlabUrl(String gitlabUrl) {
    this.gitlabUrl = gitlabUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitlabTargetDetails gitlabTargetDetails = (GitlabTargetDetails) o;
    return Objects.equals(this.gitlabAccessToken, gitlabTargetDetails.gitlabAccessToken) &&
        Objects.equals(this.gitlabCertificate, gitlabTargetDetails.gitlabCertificate) &&
        Objects.equals(this.gitlabUrl, gitlabTargetDetails.gitlabUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gitlabAccessToken, gitlabCertificate, gitlabUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitlabTargetDetails {\n");
    sb.append("    gitlabAccessToken: ").append(toIndentedString(gitlabAccessToken)).append("\n");
    sb.append("    gitlabCertificate: ").append(toIndentedString(gitlabCertificate)).append("\n");
    sb.append("    gitlabUrl: ").append(toIndentedString(gitlabUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

