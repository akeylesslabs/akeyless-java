/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * updateLinkedTarget is a command that updates an existing target. [Deprecated: Use target-update-linked command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateLinkedTarget {
  public static final String SERIALIZED_NAME_ADD_HOSTS = "add-hosts";
  @SerializedName(SERIALIZED_NAME_ADD_HOSTS)
  @javax.annotation.Nullable
  private String addHosts;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_HOSTS = "hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  @javax.annotation.Nullable
  private String hosts;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PARENT_TARGET_NAME = "parent-target-name";
  @SerializedName(SERIALIZED_NAME_PARENT_TARGET_NAME)
  @javax.annotation.Nullable
  private String parentTargetName;

  public static final String SERIALIZED_NAME_RM_HOSTS = "rm-hosts";
  @SerializedName(SERIALIZED_NAME_RM_HOSTS)
  @javax.annotation.Nullable
  private String rmHosts;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public UpdateLinkedTarget() {
  }

  public UpdateLinkedTarget addHosts(@javax.annotation.Nullable String addHosts) {
    this.addHosts = addHosts;
    return this;
  }

  /**
   * A comma seperated list of new server hosts and server descriptions joined by semicolon &#39;;&#39; that will be added to the Linked Target hosts.
   * @return addHosts
   */
  @javax.annotation.Nullable
  public String getAddHosts() {
    return addHosts;
  }

  public void setAddHosts(@javax.annotation.Nullable String addHosts) {
    this.addHosts = addHosts;
  }


  public UpdateLinkedTarget description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateLinkedTarget hosts(@javax.annotation.Nullable String hosts) {
    this.hosts = hosts;
    return this;
  }

  /**
   * A comma seperated list of server hosts and server descriptions joined by semicolon &#39;;&#39; (i.e. &#39;server-dev.com;My Dev server,server-prod.com;My Prod server description&#39;)
   * @return hosts
   */
  @javax.annotation.Nullable
  public String getHosts() {
    return hosts;
  }

  public void setHosts(@javax.annotation.Nullable String hosts) {
    this.hosts = hosts;
  }


  public UpdateLinkedTarget json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateLinkedTarget keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateLinkedTarget name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Linked Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateLinkedTarget newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New Linked Target name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public UpdateLinkedTarget parentTargetName(@javax.annotation.Nullable String parentTargetName) {
    this.parentTargetName = parentTargetName;
    return this;
  }

  /**
   * The parent Target name
   * @return parentTargetName
   */
  @javax.annotation.Nullable
  public String getParentTargetName() {
    return parentTargetName;
  }

  public void setParentTargetName(@javax.annotation.Nullable String parentTargetName) {
    this.parentTargetName = parentTargetName;
  }


  public UpdateLinkedTarget rmHosts(@javax.annotation.Nullable String rmHosts) {
    this.rmHosts = rmHosts;
    return this;
  }

  /**
   * Comma separated list of existing hosts that will be removed from Linked Target hosts.
   * @return rmHosts
   */
  @javax.annotation.Nullable
  public String getRmHosts() {
    return rmHosts;
  }

  public void setRmHosts(@javax.annotation.Nullable String rmHosts) {
    this.rmHosts = rmHosts;
  }


  public UpdateLinkedTarget token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateLinkedTarget type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Specifies the hosts type, relevant only when working without parent target
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public UpdateLinkedTarget uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLinkedTarget updateLinkedTarget = (UpdateLinkedTarget) o;
    return Objects.equals(this.addHosts, updateLinkedTarget.addHosts) &&
        Objects.equals(this.description, updateLinkedTarget.description) &&
        Objects.equals(this.hosts, updateLinkedTarget.hosts) &&
        Objects.equals(this.json, updateLinkedTarget.json) &&
        Objects.equals(this.keepPrevVersion, updateLinkedTarget.keepPrevVersion) &&
        Objects.equals(this.name, updateLinkedTarget.name) &&
        Objects.equals(this.newName, updateLinkedTarget.newName) &&
        Objects.equals(this.parentTargetName, updateLinkedTarget.parentTargetName) &&
        Objects.equals(this.rmHosts, updateLinkedTarget.rmHosts) &&
        Objects.equals(this.token, updateLinkedTarget.token) &&
        Objects.equals(this.type, updateLinkedTarget.type) &&
        Objects.equals(this.uidToken, updateLinkedTarget.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addHosts, description, hosts, json, keepPrevVersion, name, newName, parentTargetName, rmHosts, token, type, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLinkedTarget {\n");
    sb.append("    addHosts: ").append(toIndentedString(addHosts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    parentTargetName: ").append(toIndentedString(parentTargetName)).append("\n");
    sb.append("    rmHosts: ").append(toIndentedString(rmHosts)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add-hosts");
    openapiFields.add("description");
    openapiFields.add("hosts");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("parent-target-name");
    openapiFields.add("rm-hosts");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLinkedTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLinkedTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLinkedTarget is not found in the empty JSON string", UpdateLinkedTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLinkedTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLinkedTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLinkedTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("add-hosts") != null && !jsonObj.get("add-hosts").isJsonNull()) && !jsonObj.get("add-hosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `add-hosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("add-hosts").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hosts") != null && !jsonObj.get("hosts").isJsonNull()) && !jsonObj.get("hosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosts").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("parent-target-name") != null && !jsonObj.get("parent-target-name").isJsonNull()) && !jsonObj.get("parent-target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent-target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent-target-name").toString()));
      }
      if ((jsonObj.get("rm-hosts") != null && !jsonObj.get("rm-hosts").isJsonNull()) && !jsonObj.get("rm-hosts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rm-hosts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rm-hosts").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLinkedTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLinkedTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLinkedTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLinkedTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLinkedTarget>() {
           @Override
           public void write(JsonWriter out, UpdateLinkedTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLinkedTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLinkedTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLinkedTarget
   * @throws IOException if the JSON string is invalid with respect to UpdateLinkedTarget
   */
  public static UpdateLinkedTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLinkedTarget.class);
  }

  /**
   * Convert an instance of UpdateLinkedTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

