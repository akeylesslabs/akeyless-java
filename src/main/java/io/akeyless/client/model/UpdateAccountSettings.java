/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UpdateAccountSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateAccountSettings {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_ALLOWED_EMAIL_DOMAINS = "allowed-email-domains";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EMAIL_DOMAINS)
  @javax.annotation.Nullable
  private List<String> allowedEmailDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_IPS = "bound-ips";
  @SerializedName(SERIALIZED_NAME_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> boundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nullable
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company-name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_DEFAULT_CERTIFICATE_EXPIRATION_NOTIFICATION_DAYS = "default-certificate-expiration-notification-days";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CERTIFICATE_EXPIRATION_NOTIFICATION_DAYS)
  @javax.annotation.Nullable
  private List<String> defaultCertificateExpirationNotificationDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_KEY_NAME = "default-key-name";
  @SerializedName(SERIALIZED_NAME_DEFAULT_KEY_NAME)
  @javax.annotation.Nullable
  private String defaultKeyName;

  public static final String SERIALIZED_NAME_DEFAULT_SHARE_LINK_TTL_MINUTES = "default-share-link-ttl-minutes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SHARE_LINK_TTL_MINUTES)
  @javax.annotation.Nullable
  private String defaultShareLinkTtlMinutes;

  public static final String SERIALIZED_NAME_DEFAULT_VERSIONING = "default-versioning";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSIONING)
  @javax.annotation.Nullable
  private String defaultVersioning;

  public static final String SERIALIZED_NAME_DP_ENABLE_CLASSIC_KEY_PROTECTION = "dp-enable-classic-key-protection";
  @SerializedName(SERIALIZED_NAME_DP_ENABLE_CLASSIC_KEY_PROTECTION)
  @javax.annotation.Nullable
  private String dpEnableClassicKeyProtection;

  public static final String SERIALIZED_NAME_DYNAMIC_SECRET_MAX_TTL = "dynamic-secret-max-ttl";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SECRET_MAX_TTL)
  @javax.annotation.Nullable
  private Long dynamicSecretMaxTtl;

  public static final String SERIALIZED_NAME_DYNAMIC_SECRET_MAX_TTL_ENABLE = "dynamic-secret-max-ttl-enable";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SECRET_MAX_TTL_ENABLE)
  @javax.annotation.Nullable
  private String dynamicSecretMaxTtlEnable;

  public static final String SERIALIZED_NAME_ENABLE_AI_INSIGHTS = "enable-ai-insights";
  @SerializedName(SERIALIZED_NAME_ENABLE_AI_INSIGHTS)
  @javax.annotation.Nullable
  private String enableAiInsights;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_CERTIFICATE_EXPIRATION_EVENT = "enable-default-certificate-expiration-event";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_CERTIFICATE_EXPIRATION_EVENT)
  @javax.annotation.Nullable
  private String enableDefaultCertificateExpirationEvent;

  public static final String SERIALIZED_NAME_ENABLE_ITEM_SHARING = "enable-item-sharing";
  @SerializedName(SERIALIZED_NAME_ENABLE_ITEM_SHARING)
  @javax.annotation.Nullable
  private String enableItemSharing;

  public static final String SERIALIZED_NAME_ENABLE_PASSWORD_EXPIRATION = "enable-password-expiration";
  @SerializedName(SERIALIZED_NAME_ENABLE_PASSWORD_EXPIRATION)
  @javax.annotation.Nullable
  private String enablePasswordExpiration;

  public static final String SERIALIZED_NAME_FORCE_NEW_VERSIONS = "force-new-versions";
  @SerializedName(SERIALIZED_NAME_FORCE_NEW_VERSIONS)
  @javax.annotation.Nullable
  private String forceNewVersions;

  public static final String SERIALIZED_NAME_GW_BOUND_IPS = "gw-bound-ips";
  @SerializedName(SERIALIZED_NAME_GW_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> gwBoundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE_PERSONAL_FOLDER = "hide-personal-folder";
  @SerializedName(SERIALIZED_NAME_HIDE_PERSONAL_FOLDER)
  @javax.annotation.Nullable
  private String hidePersonalFolder;

  public static final String SERIALIZED_NAME_HIDE_STATIC_PASSWORD = "hide-static-password";
  @SerializedName(SERIALIZED_NAME_HIDE_STATIC_PASSWORD)
  @javax.annotation.Nullable
  private String hideStaticPassword;

  public static final String SERIALIZED_NAME_INVALID_CHARACTERS = "invalid-characters";
  @SerializedName(SERIALIZED_NAME_INVALID_CHARACTERS)
  @javax.annotation.Nullable
  private String invalidCharacters = "notReceivedInvalidCharacter";

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item-type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  @javax.annotation.Nullable
  private String itemType;

  public static final String SERIALIZED_NAME_ITEMS_DELETION_PROTECTION = "items-deletion-protection";
  @SerializedName(SERIALIZED_NAME_ITEMS_DELETION_PROTECTION)
  @javax.annotation.Nullable
  private String itemsDeletionProtection;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_JWT_TTL_DEFAULT = "jwt-ttl-default";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_DEFAULT)
  @javax.annotation.Nullable
  private Long jwtTtlDefault;

  public static final String SERIALIZED_NAME_JWT_TTL_MAX = "jwt-ttl-max";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_MAX)
  @javax.annotation.Nullable
  private Long jwtTtlMax;

  public static final String SERIALIZED_NAME_JWT_TTL_MIN = "jwt-ttl-min";
  @SerializedName(SERIALIZED_NAME_JWT_TTL_MIN)
  @javax.annotation.Nullable
  private Long jwtTtlMin;

  public static final String SERIALIZED_NAME_LOCK_BOUND_IPS = "lock-bound-ips";
  @SerializedName(SERIALIZED_NAME_LOCK_BOUND_IPS)
  @javax.annotation.Nullable
  private String lockBoundIps;

  public static final String SERIALIZED_NAME_LOCK_DEFAULT_KEY = "lock-default-key";
  @SerializedName(SERIALIZED_NAME_LOCK_DEFAULT_KEY)
  @javax.annotation.Nullable
  private String lockDefaultKey;

  public static final String SERIALIZED_NAME_LOCK_GW_BOUND_IPS = "lock-gw-bound-ips";
  @SerializedName(SERIALIZED_NAME_LOCK_GW_BOUND_IPS)
  @javax.annotation.Nullable
  private String lockGwBoundIps;

  public static final String SERIALIZED_NAME_MAX_ROTATION_INTERVAL = "max-rotation-interval";
  @SerializedName(SERIALIZED_NAME_MAX_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private Integer maxRotationInterval;

  public static final String SERIALIZED_NAME_MAX_ROTATION_INTERVAL_ENABLE = "max-rotation-interval-enable";
  @SerializedName(SERIALIZED_NAME_MAX_ROTATION_INTERVAL_ENABLE)
  @javax.annotation.Nullable
  private String maxRotationIntervalEnable;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRATION_DAYS = "password-expiration-days";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRATION_DAYS)
  @javax.annotation.Nullable
  private String passwordExpirationDays;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRATION_NOTIFICATION_DAYS = "password-expiration-notification-days";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRATION_NOTIFICATION_DAYS)
  @javax.annotation.Nullable
  private String passwordExpirationNotificationDays;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private Long passwordLength;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal-code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  @javax.annotation.Nullable
  private String postalCode;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USAGE_EVENT_ENABLE = "usage-event-enable";
  @SerializedName(SERIALIZED_NAME_USAGE_EVENT_ENABLE)
  @javax.annotation.Nullable
  private String usageEventEnable;

  public static final String SERIALIZED_NAME_USAGE_EVENT_INTERVAL = "usage-event-interval";
  @SerializedName(SERIALIZED_NAME_USAGE_EVENT_INTERVAL)
  @javax.annotation.Nullable
  private Long usageEventInterval;

  public static final String SERIALIZED_NAME_USAGE_EVENT_OBJECT_TYPE = "usage-event-object-type";
  @SerializedName(SERIALIZED_NAME_USAGE_EVENT_OBJECT_TYPE)
  @javax.annotation.Nullable
  private String usageEventObjectType;

  public static final String SERIALIZED_NAME_USE_CAPITAL_LETTERS = "use-capital-letters";
  @SerializedName(SERIALIZED_NAME_USE_CAPITAL_LETTERS)
  @javax.annotation.Nullable
  private String useCapitalLetters;

  public static final String SERIALIZED_NAME_USE_LOWER_LETTERS = "use-lower-letters";
  @SerializedName(SERIALIZED_NAME_USE_LOWER_LETTERS)
  @javax.annotation.Nullable
  private String useLowerLetters;

  public static final String SERIALIZED_NAME_USE_NUMBERS = "use-numbers";
  @SerializedName(SERIALIZED_NAME_USE_NUMBERS)
  @javax.annotation.Nullable
  private String useNumbers;

  public static final String SERIALIZED_NAME_USE_SPECIAL_CHARACTERS = "use-special-characters";
  @SerializedName(SERIALIZED_NAME_USE_SPECIAL_CHARACTERS)
  @javax.annotation.Nullable
  private String useSpecialCharacters;

  public UpdateAccountSettings() {
  }

  public UpdateAccountSettings address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * Address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public UpdateAccountSettings allowedEmailDomains(@javax.annotation.Nullable List<String> allowedEmailDomains) {
    this.allowedEmailDomains = allowedEmailDomains;
    return this;
  }

  public UpdateAccountSettings addAllowedEmailDomainsItem(String allowedEmailDomainsItem) {
    if (this.allowedEmailDomains == null) {
      this.allowedEmailDomains = new ArrayList<>();
    }
    this.allowedEmailDomains.add(allowedEmailDomainsItem);
    return this;
  }

  /**
   * Limits email sharing to the specified domains. Relevant only when item sharing is enabled. By default, all domains are allowed.
   * @return allowedEmailDomains
   */
  @javax.annotation.Nullable
  public List<String> getAllowedEmailDomains() {
    return allowedEmailDomains;
  }

  public void setAllowedEmailDomains(@javax.annotation.Nullable List<String> allowedEmailDomains) {
    this.allowedEmailDomains = allowedEmailDomains;
  }


  public UpdateAccountSettings boundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
    return this;
  }

  public UpdateAccountSettings addBoundIpsItem(String boundIpsItem) {
    if (this.boundIps == null) {
      this.boundIps = new ArrayList<>();
    }
    this.boundIps.add(boundIpsItem);
    return this;
  }

  /**
   * A default list of comma-separated CIDR block that are allowed to authenticate.
   * @return boundIps
   */
  @javax.annotation.Nullable
  public List<String> getBoundIps() {
    return boundIps;
  }

  public void setBoundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
  }


  public UpdateAccountSettings city(@javax.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  /**
   * City
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nullable String city) {
    this.city = city;
  }


  public UpdateAccountSettings companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public UpdateAccountSettings country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public UpdateAccountSettings defaultCertificateExpirationNotificationDays(@javax.annotation.Nullable List<String> defaultCertificateExpirationNotificationDays) {
    this.defaultCertificateExpirationNotificationDays = defaultCertificateExpirationNotificationDays;
    return this;
  }

  public UpdateAccountSettings addDefaultCertificateExpirationNotificationDaysItem(String defaultCertificateExpirationNotificationDaysItem) {
    if (this.defaultCertificateExpirationNotificationDays == null) {
      this.defaultCertificateExpirationNotificationDays = new ArrayList<>();
    }
    this.defaultCertificateExpirationNotificationDays.add(defaultCertificateExpirationNotificationDaysItem);
    return this;
  }

  /**
   * How many days before the expiration of the certificate would you like to be notified. To specify multiple events, use argument multiple times: --default-certificate-expiration-notification-days 1 --default-certificate-expiration-notification-days 5
   * @return defaultCertificateExpirationNotificationDays
   */
  @javax.annotation.Nullable
  public List<String> getDefaultCertificateExpirationNotificationDays() {
    return defaultCertificateExpirationNotificationDays;
  }

  public void setDefaultCertificateExpirationNotificationDays(@javax.annotation.Nullable List<String> defaultCertificateExpirationNotificationDays) {
    this.defaultCertificateExpirationNotificationDays = defaultCertificateExpirationNotificationDays;
  }


  public UpdateAccountSettings defaultKeyName(@javax.annotation.Nullable String defaultKeyName) {
    this.defaultKeyName = defaultKeyName;
    return this;
  }

  /**
   * Set the account default key based on the DFC key name. Use \&quot;set-original-akeyless-default-key\&quot; to revert to using the original default key of the account.
   * @return defaultKeyName
   */
  @javax.annotation.Nullable
  public String getDefaultKeyName() {
    return defaultKeyName;
  }

  public void setDefaultKeyName(@javax.annotation.Nullable String defaultKeyName) {
    this.defaultKeyName = defaultKeyName;
  }


  public UpdateAccountSettings defaultShareLinkTtlMinutes(@javax.annotation.Nullable String defaultShareLinkTtlMinutes) {
    this.defaultShareLinkTtlMinutes = defaultShareLinkTtlMinutes;
    return this;
  }

  /**
   * Set the default ttl in minutes for sharing item number between 60 and 43200
   * @return defaultShareLinkTtlMinutes
   */
  @javax.annotation.Nullable
  public String getDefaultShareLinkTtlMinutes() {
    return defaultShareLinkTtlMinutes;
  }

  public void setDefaultShareLinkTtlMinutes(@javax.annotation.Nullable String defaultShareLinkTtlMinutes) {
    this.defaultShareLinkTtlMinutes = defaultShareLinkTtlMinutes;
  }


  public UpdateAccountSettings defaultVersioning(@javax.annotation.Nullable String defaultVersioning) {
    this.defaultVersioning = defaultVersioning;
    return this;
  }

  /**
   * If set to true, new versions is enabled by default
   * @return defaultVersioning
   */
  @javax.annotation.Nullable
  public String getDefaultVersioning() {
    return defaultVersioning;
  }

  public void setDefaultVersioning(@javax.annotation.Nullable String defaultVersioning) {
    this.defaultVersioning = defaultVersioning;
  }


  public UpdateAccountSettings dpEnableClassicKeyProtection(@javax.annotation.Nullable String dpEnableClassicKeyProtection) {
    this.dpEnableClassicKeyProtection = dpEnableClassicKeyProtection;
    return this;
  }

  /**
   * Set to update protection with classic keys state [true/false]
   * @return dpEnableClassicKeyProtection
   */
  @javax.annotation.Nullable
  public String getDpEnableClassicKeyProtection() {
    return dpEnableClassicKeyProtection;
  }

  public void setDpEnableClassicKeyProtection(@javax.annotation.Nullable String dpEnableClassicKeyProtection) {
    this.dpEnableClassicKeyProtection = dpEnableClassicKeyProtection;
  }


  public UpdateAccountSettings dynamicSecretMaxTtl(@javax.annotation.Nullable Long dynamicSecretMaxTtl) {
    this.dynamicSecretMaxTtl = dynamicSecretMaxTtl;
    return this;
  }

  /**
   * Set the maximum ttl for dynamic secrets
   * @return dynamicSecretMaxTtl
   */
  @javax.annotation.Nullable
  public Long getDynamicSecretMaxTtl() {
    return dynamicSecretMaxTtl;
  }

  public void setDynamicSecretMaxTtl(@javax.annotation.Nullable Long dynamicSecretMaxTtl) {
    this.dynamicSecretMaxTtl = dynamicSecretMaxTtl;
  }


  public UpdateAccountSettings dynamicSecretMaxTtlEnable(@javax.annotation.Nullable String dynamicSecretMaxTtlEnable) {
    this.dynamicSecretMaxTtlEnable = dynamicSecretMaxTtlEnable;
    return this;
  }

  /**
   * Set a maximum ttl for dynamic secrets [true/false]
   * @return dynamicSecretMaxTtlEnable
   */
  @javax.annotation.Nullable
  public String getDynamicSecretMaxTtlEnable() {
    return dynamicSecretMaxTtlEnable;
  }

  public void setDynamicSecretMaxTtlEnable(@javax.annotation.Nullable String dynamicSecretMaxTtlEnable) {
    this.dynamicSecretMaxTtlEnable = dynamicSecretMaxTtlEnable;
  }


  public UpdateAccountSettings enableAiInsights(@javax.annotation.Nullable String enableAiInsights) {
    this.enableAiInsights = enableAiInsights;
    return this;
  }

  /**
   * Enable AI insights [true/false]
   * @return enableAiInsights
   */
  @javax.annotation.Nullable
  public String getEnableAiInsights() {
    return enableAiInsights;
  }

  public void setEnableAiInsights(@javax.annotation.Nullable String enableAiInsights) {
    this.enableAiInsights = enableAiInsights;
  }


  public UpdateAccountSettings enableDefaultCertificateExpirationEvent(@javax.annotation.Nullable String enableDefaultCertificateExpirationEvent) {
    this.enableDefaultCertificateExpirationEvent = enableDefaultCertificateExpirationEvent;
    return this;
  }

  /**
   * How many days before the expiration of the certificate would you like to be notified. [true/false]
   * @return enableDefaultCertificateExpirationEvent
   */
  @javax.annotation.Nullable
  public String getEnableDefaultCertificateExpirationEvent() {
    return enableDefaultCertificateExpirationEvent;
  }

  public void setEnableDefaultCertificateExpirationEvent(@javax.annotation.Nullable String enableDefaultCertificateExpirationEvent) {
    this.enableDefaultCertificateExpirationEvent = enableDefaultCertificateExpirationEvent;
  }


  public UpdateAccountSettings enableItemSharing(@javax.annotation.Nullable String enableItemSharing) {
    this.enableItemSharing = enableItemSharing;
    return this;
  }

  /**
   * Enable sharing items [true/false]
   * @return enableItemSharing
   */
  @javax.annotation.Nullable
  public String getEnableItemSharing() {
    return enableItemSharing;
  }

  public void setEnableItemSharing(@javax.annotation.Nullable String enableItemSharing) {
    this.enableItemSharing = enableItemSharing;
  }


  public UpdateAccountSettings enablePasswordExpiration(@javax.annotation.Nullable String enablePasswordExpiration) {
    this.enablePasswordExpiration = enablePasswordExpiration;
    return this;
  }

  /**
   * Enable password expiration policy [true/false]
   * @return enablePasswordExpiration
   */
  @javax.annotation.Nullable
  public String getEnablePasswordExpiration() {
    return enablePasswordExpiration;
  }

  public void setEnablePasswordExpiration(@javax.annotation.Nullable String enablePasswordExpiration) {
    this.enablePasswordExpiration = enablePasswordExpiration;
  }


  public UpdateAccountSettings forceNewVersions(@javax.annotation.Nullable String forceNewVersions) {
    this.forceNewVersions = forceNewVersions;
    return this;
  }

  /**
   * If set to true, new version will be created on update
   * @return forceNewVersions
   */
  @javax.annotation.Nullable
  public String getForceNewVersions() {
    return forceNewVersions;
  }

  public void setForceNewVersions(@javax.annotation.Nullable String forceNewVersions) {
    this.forceNewVersions = forceNewVersions;
  }


  public UpdateAccountSettings gwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
    return this;
  }

  public UpdateAccountSettings addGwBoundIpsItem(String gwBoundIpsItem) {
    if (this.gwBoundIps == null) {
      this.gwBoundIps = new ArrayList<>();
    }
    this.gwBoundIps.add(gwBoundIpsItem);
    return this;
  }

  /**
   * A default list of comma-separated CIDR block that acts as a trusted Gateway entity.
   * @return gwBoundIps
   */
  @javax.annotation.Nullable
  public List<String> getGwBoundIps() {
    return gwBoundIps;
  }

  public void setGwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
  }


  public UpdateAccountSettings hidePersonalFolder(@javax.annotation.Nullable String hidePersonalFolder) {
    this.hidePersonalFolder = hidePersonalFolder;
    return this;
  }

  /**
   * Hide personal folder, if set - users will not be able to use personal folder [true/false]
   * @return hidePersonalFolder
   */
  @javax.annotation.Nullable
  public String getHidePersonalFolder() {
    return hidePersonalFolder;
  }

  public void setHidePersonalFolder(@javax.annotation.Nullable String hidePersonalFolder) {
    this.hidePersonalFolder = hidePersonalFolder;
  }


  public UpdateAccountSettings hideStaticPassword(@javax.annotation.Nullable String hideStaticPassword) {
    this.hideStaticPassword = hideStaticPassword;
    return this;
  }

  /**
   * Hide static secret&#39;s password type [true/false]
   * @return hideStaticPassword
   */
  @javax.annotation.Nullable
  public String getHideStaticPassword() {
    return hideStaticPassword;
  }

  public void setHideStaticPassword(@javax.annotation.Nullable String hideStaticPassword) {
    this.hideStaticPassword = hideStaticPassword;
  }


  public UpdateAccountSettings invalidCharacters(@javax.annotation.Nullable String invalidCharacters) {
    this.invalidCharacters = invalidCharacters;
    return this;
  }

  /**
   * Characters that cannot be used for items/targets/roles/auths/event_forwarder names. Empty string will enforce nothing.
   * @return invalidCharacters
   */
  @javax.annotation.Nullable
  public String getInvalidCharacters() {
    return invalidCharacters;
  }

  public void setInvalidCharacters(@javax.annotation.Nullable String invalidCharacters) {
    this.invalidCharacters = invalidCharacters;
  }


  public UpdateAccountSettings itemType(@javax.annotation.Nullable String itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * VersionSettingsObjectType defines object types for account version settings
   * @return itemType
   */
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(@javax.annotation.Nullable String itemType) {
    this.itemType = itemType;
  }


  public UpdateAccountSettings itemsDeletionProtection(@javax.annotation.Nullable String itemsDeletionProtection) {
    this.itemsDeletionProtection = itemsDeletionProtection;
    return this;
  }

  /**
   * Set or unset the default behaviour of items deletion protection [true/false]
   * @return itemsDeletionProtection
   */
  @javax.annotation.Nullable
  public String getItemsDeletionProtection() {
    return itemsDeletionProtection;
  }

  public void setItemsDeletionProtection(@javax.annotation.Nullable String itemsDeletionProtection) {
    this.itemsDeletionProtection = itemsDeletionProtection;
  }


  public UpdateAccountSettings json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateAccountSettings jwtTtlDefault(@javax.annotation.Nullable Long jwtTtlDefault) {
    this.jwtTtlDefault = jwtTtlDefault;
    return this;
  }

  /**
   * Default ttl
   * @return jwtTtlDefault
   */
  @javax.annotation.Nullable
  public Long getJwtTtlDefault() {
    return jwtTtlDefault;
  }

  public void setJwtTtlDefault(@javax.annotation.Nullable Long jwtTtlDefault) {
    this.jwtTtlDefault = jwtTtlDefault;
  }


  public UpdateAccountSettings jwtTtlMax(@javax.annotation.Nullable Long jwtTtlMax) {
    this.jwtTtlMax = jwtTtlMax;
    return this;
  }

  /**
   * Maximum ttl
   * @return jwtTtlMax
   */
  @javax.annotation.Nullable
  public Long getJwtTtlMax() {
    return jwtTtlMax;
  }

  public void setJwtTtlMax(@javax.annotation.Nullable Long jwtTtlMax) {
    this.jwtTtlMax = jwtTtlMax;
  }


  public UpdateAccountSettings jwtTtlMin(@javax.annotation.Nullable Long jwtTtlMin) {
    this.jwtTtlMin = jwtTtlMin;
    return this;
  }

  /**
   * Minimum ttl
   * @return jwtTtlMin
   */
  @javax.annotation.Nullable
  public Long getJwtTtlMin() {
    return jwtTtlMin;
  }

  public void setJwtTtlMin(@javax.annotation.Nullable Long jwtTtlMin) {
    this.jwtTtlMin = jwtTtlMin;
  }


  public UpdateAccountSettings lockBoundIps(@javax.annotation.Nullable String lockBoundIps) {
    this.lockBoundIps = lockBoundIps;
    return this;
  }

  /**
   * Lock bound-ips setting globally in the account.
   * @return lockBoundIps
   */
  @javax.annotation.Nullable
  public String getLockBoundIps() {
    return lockBoundIps;
  }

  public void setLockBoundIps(@javax.annotation.Nullable String lockBoundIps) {
    this.lockBoundIps = lockBoundIps;
  }


  public UpdateAccountSettings lockDefaultKey(@javax.annotation.Nullable String lockDefaultKey) {
    this.lockDefaultKey = lockDefaultKey;
    return this;
  }

  /**
   * Lock the account&#39;s default protection key, if set - users will not be able to use a different protection key, relevant only if default-key-name is configured [true/false]
   * @return lockDefaultKey
   */
  @javax.annotation.Nullable
  public String getLockDefaultKey() {
    return lockDefaultKey;
  }

  public void setLockDefaultKey(@javax.annotation.Nullable String lockDefaultKey) {
    this.lockDefaultKey = lockDefaultKey;
  }


  public UpdateAccountSettings lockGwBoundIps(@javax.annotation.Nullable String lockGwBoundIps) {
    this.lockGwBoundIps = lockGwBoundIps;
    return this;
  }

  /**
   * Lock gw-bound-ips setting in the account.
   * @return lockGwBoundIps
   */
  @javax.annotation.Nullable
  public String getLockGwBoundIps() {
    return lockGwBoundIps;
  }

  public void setLockGwBoundIps(@javax.annotation.Nullable String lockGwBoundIps) {
    this.lockGwBoundIps = lockGwBoundIps;
  }


  public UpdateAccountSettings maxRotationInterval(@javax.annotation.Nullable Integer maxRotationInterval) {
    this.maxRotationInterval = maxRotationInterval;
    return this;
  }

  /**
   * Set the maximum rotation interval for rotated secrets auto rotation settings
   * @return maxRotationInterval
   */
  @javax.annotation.Nullable
  public Integer getMaxRotationInterval() {
    return maxRotationInterval;
  }

  public void setMaxRotationInterval(@javax.annotation.Nullable Integer maxRotationInterval) {
    this.maxRotationInterval = maxRotationInterval;
  }


  public UpdateAccountSettings maxRotationIntervalEnable(@javax.annotation.Nullable String maxRotationIntervalEnable) {
    this.maxRotationIntervalEnable = maxRotationIntervalEnable;
    return this;
  }

  /**
   * Set a maximum rotation interval for rotated secrets auto rotation settings [true/false]
   * @return maxRotationIntervalEnable
   */
  @javax.annotation.Nullable
  public String getMaxRotationIntervalEnable() {
    return maxRotationIntervalEnable;
  }

  public void setMaxRotationIntervalEnable(@javax.annotation.Nullable String maxRotationIntervalEnable) {
    this.maxRotationIntervalEnable = maxRotationIntervalEnable;
  }


  public UpdateAccountSettings maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Max versions
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public UpdateAccountSettings passwordExpirationDays(@javax.annotation.Nullable String passwordExpirationDays) {
    this.passwordExpirationDays = passwordExpirationDays;
    return this;
  }

  /**
   * Specifies the number of days that a password is valid before it must be changed. A default value of 90 days is used.
   * @return passwordExpirationDays
   */
  @javax.annotation.Nullable
  public String getPasswordExpirationDays() {
    return passwordExpirationDays;
  }

  public void setPasswordExpirationDays(@javax.annotation.Nullable String passwordExpirationDays) {
    this.passwordExpirationDays = passwordExpirationDays;
  }


  public UpdateAccountSettings passwordExpirationNotificationDays(@javax.annotation.Nullable String passwordExpirationNotificationDays) {
    this.passwordExpirationNotificationDays = passwordExpirationNotificationDays;
    return this;
  }

  /**
   * Specifies the number of days before a user receives notification that their password will expire. A default value of 14 days is used.
   * @return passwordExpirationNotificationDays
   */
  @javax.annotation.Nullable
  public String getPasswordExpirationNotificationDays() {
    return passwordExpirationNotificationDays;
  }

  public void setPasswordExpirationNotificationDays(@javax.annotation.Nullable String passwordExpirationNotificationDays) {
    this.passwordExpirationNotificationDays = passwordExpirationNotificationDays;
  }


  public UpdateAccountSettings passwordLength(@javax.annotation.Nullable Long passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * Password length between 5 - to 50 characters
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public Long getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable Long passwordLength) {
    this.passwordLength = passwordLength;
  }


  public UpdateAccountSettings phone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable String phone) {
    this.phone = phone;
  }


  public UpdateAccountSettings postalCode(@javax.annotation.Nullable String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(@javax.annotation.Nullable String postalCode) {
    this.postalCode = postalCode;
  }


  public UpdateAccountSettings token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateAccountSettings uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public UpdateAccountSettings usageEventEnable(@javax.annotation.Nullable String usageEventEnable) {
    this.usageEventEnable = usageEventEnable;
    return this;
  }

  /**
   * Enable event for objects that have not been used or changed [true/false]
   * @return usageEventEnable
   */
  @javax.annotation.Nullable
  public String getUsageEventEnable() {
    return usageEventEnable;
  }

  public void setUsageEventEnable(@javax.annotation.Nullable String usageEventEnable) {
    this.usageEventEnable = usageEventEnable;
  }


  public UpdateAccountSettings usageEventInterval(@javax.annotation.Nullable Long usageEventInterval) {
    this.usageEventInterval = usageEventInterval;
    return this;
  }

  /**
   * Interval by days for unused objects. Default and minimum interval is 90 days
   * @return usageEventInterval
   */
  @javax.annotation.Nullable
  public Long getUsageEventInterval() {
    return usageEventInterval;
  }

  public void setUsageEventInterval(@javax.annotation.Nullable Long usageEventInterval) {
    this.usageEventInterval = usageEventInterval;
  }


  public UpdateAccountSettings usageEventObjectType(@javax.annotation.Nullable String usageEventObjectType) {
    this.usageEventObjectType = usageEventObjectType;
    return this;
  }

  /**
   * Usage event is supported for auth method or secrets-and-keys [auth/item]
   * @return usageEventObjectType
   */
  @javax.annotation.Nullable
  public String getUsageEventObjectType() {
    return usageEventObjectType;
  }

  public void setUsageEventObjectType(@javax.annotation.Nullable String usageEventObjectType) {
    this.usageEventObjectType = usageEventObjectType;
  }


  public UpdateAccountSettings useCapitalLetters(@javax.annotation.Nullable String useCapitalLetters) {
    this.useCapitalLetters = useCapitalLetters;
    return this;
  }

  /**
   * Password must contain capital letters [true/false]
   * @return useCapitalLetters
   */
  @javax.annotation.Nullable
  public String getUseCapitalLetters() {
    return useCapitalLetters;
  }

  public void setUseCapitalLetters(@javax.annotation.Nullable String useCapitalLetters) {
    this.useCapitalLetters = useCapitalLetters;
  }


  public UpdateAccountSettings useLowerLetters(@javax.annotation.Nullable String useLowerLetters) {
    this.useLowerLetters = useLowerLetters;
    return this;
  }

  /**
   * Password must contain lower case letters [true/false]
   * @return useLowerLetters
   */
  @javax.annotation.Nullable
  public String getUseLowerLetters() {
    return useLowerLetters;
  }

  public void setUseLowerLetters(@javax.annotation.Nullable String useLowerLetters) {
    this.useLowerLetters = useLowerLetters;
  }


  public UpdateAccountSettings useNumbers(@javax.annotation.Nullable String useNumbers) {
    this.useNumbers = useNumbers;
    return this;
  }

  /**
   * Password must contain numbers [true/false]
   * @return useNumbers
   */
  @javax.annotation.Nullable
  public String getUseNumbers() {
    return useNumbers;
  }

  public void setUseNumbers(@javax.annotation.Nullable String useNumbers) {
    this.useNumbers = useNumbers;
  }


  public UpdateAccountSettings useSpecialCharacters(@javax.annotation.Nullable String useSpecialCharacters) {
    this.useSpecialCharacters = useSpecialCharacters;
    return this;
  }

  /**
   * Password must contain special characters [true/false]
   * @return useSpecialCharacters
   */
  @javax.annotation.Nullable
  public String getUseSpecialCharacters() {
    return useSpecialCharacters;
  }

  public void setUseSpecialCharacters(@javax.annotation.Nullable String useSpecialCharacters) {
    this.useSpecialCharacters = useSpecialCharacters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountSettings updateAccountSettings = (UpdateAccountSettings) o;
    return Objects.equals(this.address, updateAccountSettings.address) &&
        Objects.equals(this.allowedEmailDomains, updateAccountSettings.allowedEmailDomains) &&
        Objects.equals(this.boundIps, updateAccountSettings.boundIps) &&
        Objects.equals(this.city, updateAccountSettings.city) &&
        Objects.equals(this.companyName, updateAccountSettings.companyName) &&
        Objects.equals(this.country, updateAccountSettings.country) &&
        Objects.equals(this.defaultCertificateExpirationNotificationDays, updateAccountSettings.defaultCertificateExpirationNotificationDays) &&
        Objects.equals(this.defaultKeyName, updateAccountSettings.defaultKeyName) &&
        Objects.equals(this.defaultShareLinkTtlMinutes, updateAccountSettings.defaultShareLinkTtlMinutes) &&
        Objects.equals(this.defaultVersioning, updateAccountSettings.defaultVersioning) &&
        Objects.equals(this.dpEnableClassicKeyProtection, updateAccountSettings.dpEnableClassicKeyProtection) &&
        Objects.equals(this.dynamicSecretMaxTtl, updateAccountSettings.dynamicSecretMaxTtl) &&
        Objects.equals(this.dynamicSecretMaxTtlEnable, updateAccountSettings.dynamicSecretMaxTtlEnable) &&
        Objects.equals(this.enableAiInsights, updateAccountSettings.enableAiInsights) &&
        Objects.equals(this.enableDefaultCertificateExpirationEvent, updateAccountSettings.enableDefaultCertificateExpirationEvent) &&
        Objects.equals(this.enableItemSharing, updateAccountSettings.enableItemSharing) &&
        Objects.equals(this.enablePasswordExpiration, updateAccountSettings.enablePasswordExpiration) &&
        Objects.equals(this.forceNewVersions, updateAccountSettings.forceNewVersions) &&
        Objects.equals(this.gwBoundIps, updateAccountSettings.gwBoundIps) &&
        Objects.equals(this.hidePersonalFolder, updateAccountSettings.hidePersonalFolder) &&
        Objects.equals(this.hideStaticPassword, updateAccountSettings.hideStaticPassword) &&
        Objects.equals(this.invalidCharacters, updateAccountSettings.invalidCharacters) &&
        Objects.equals(this.itemType, updateAccountSettings.itemType) &&
        Objects.equals(this.itemsDeletionProtection, updateAccountSettings.itemsDeletionProtection) &&
        Objects.equals(this.json, updateAccountSettings.json) &&
        Objects.equals(this.jwtTtlDefault, updateAccountSettings.jwtTtlDefault) &&
        Objects.equals(this.jwtTtlMax, updateAccountSettings.jwtTtlMax) &&
        Objects.equals(this.jwtTtlMin, updateAccountSettings.jwtTtlMin) &&
        Objects.equals(this.lockBoundIps, updateAccountSettings.lockBoundIps) &&
        Objects.equals(this.lockDefaultKey, updateAccountSettings.lockDefaultKey) &&
        Objects.equals(this.lockGwBoundIps, updateAccountSettings.lockGwBoundIps) &&
        Objects.equals(this.maxRotationInterval, updateAccountSettings.maxRotationInterval) &&
        Objects.equals(this.maxRotationIntervalEnable, updateAccountSettings.maxRotationIntervalEnable) &&
        Objects.equals(this.maxVersions, updateAccountSettings.maxVersions) &&
        Objects.equals(this.passwordExpirationDays, updateAccountSettings.passwordExpirationDays) &&
        Objects.equals(this.passwordExpirationNotificationDays, updateAccountSettings.passwordExpirationNotificationDays) &&
        Objects.equals(this.passwordLength, updateAccountSettings.passwordLength) &&
        Objects.equals(this.phone, updateAccountSettings.phone) &&
        Objects.equals(this.postalCode, updateAccountSettings.postalCode) &&
        Objects.equals(this.token, updateAccountSettings.token) &&
        Objects.equals(this.uidToken, updateAccountSettings.uidToken) &&
        Objects.equals(this.usageEventEnable, updateAccountSettings.usageEventEnable) &&
        Objects.equals(this.usageEventInterval, updateAccountSettings.usageEventInterval) &&
        Objects.equals(this.usageEventObjectType, updateAccountSettings.usageEventObjectType) &&
        Objects.equals(this.useCapitalLetters, updateAccountSettings.useCapitalLetters) &&
        Objects.equals(this.useLowerLetters, updateAccountSettings.useLowerLetters) &&
        Objects.equals(this.useNumbers, updateAccountSettings.useNumbers) &&
        Objects.equals(this.useSpecialCharacters, updateAccountSettings.useSpecialCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, allowedEmailDomains, boundIps, city, companyName, country, defaultCertificateExpirationNotificationDays, defaultKeyName, defaultShareLinkTtlMinutes, defaultVersioning, dpEnableClassicKeyProtection, dynamicSecretMaxTtl, dynamicSecretMaxTtlEnable, enableAiInsights, enableDefaultCertificateExpirationEvent, enableItemSharing, enablePasswordExpiration, forceNewVersions, gwBoundIps, hidePersonalFolder, hideStaticPassword, invalidCharacters, itemType, itemsDeletionProtection, json, jwtTtlDefault, jwtTtlMax, jwtTtlMin, lockBoundIps, lockDefaultKey, lockGwBoundIps, maxRotationInterval, maxRotationIntervalEnable, maxVersions, passwordExpirationDays, passwordExpirationNotificationDays, passwordLength, phone, postalCode, token, uidToken, usageEventEnable, usageEventInterval, usageEventObjectType, useCapitalLetters, useLowerLetters, useNumbers, useSpecialCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountSettings {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    allowedEmailDomains: ").append(toIndentedString(allowedEmailDomains)).append("\n");
    sb.append("    boundIps: ").append(toIndentedString(boundIps)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    defaultCertificateExpirationNotificationDays: ").append(toIndentedString(defaultCertificateExpirationNotificationDays)).append("\n");
    sb.append("    defaultKeyName: ").append(toIndentedString(defaultKeyName)).append("\n");
    sb.append("    defaultShareLinkTtlMinutes: ").append(toIndentedString(defaultShareLinkTtlMinutes)).append("\n");
    sb.append("    defaultVersioning: ").append(toIndentedString(defaultVersioning)).append("\n");
    sb.append("    dpEnableClassicKeyProtection: ").append(toIndentedString(dpEnableClassicKeyProtection)).append("\n");
    sb.append("    dynamicSecretMaxTtl: ").append(toIndentedString(dynamicSecretMaxTtl)).append("\n");
    sb.append("    dynamicSecretMaxTtlEnable: ").append(toIndentedString(dynamicSecretMaxTtlEnable)).append("\n");
    sb.append("    enableAiInsights: ").append(toIndentedString(enableAiInsights)).append("\n");
    sb.append("    enableDefaultCertificateExpirationEvent: ").append(toIndentedString(enableDefaultCertificateExpirationEvent)).append("\n");
    sb.append("    enableItemSharing: ").append(toIndentedString(enableItemSharing)).append("\n");
    sb.append("    enablePasswordExpiration: ").append(toIndentedString(enablePasswordExpiration)).append("\n");
    sb.append("    forceNewVersions: ").append(toIndentedString(forceNewVersions)).append("\n");
    sb.append("    gwBoundIps: ").append(toIndentedString(gwBoundIps)).append("\n");
    sb.append("    hidePersonalFolder: ").append(toIndentedString(hidePersonalFolder)).append("\n");
    sb.append("    hideStaticPassword: ").append(toIndentedString(hideStaticPassword)).append("\n");
    sb.append("    invalidCharacters: ").append(toIndentedString(invalidCharacters)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemsDeletionProtection: ").append(toIndentedString(itemsDeletionProtection)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    jwtTtlDefault: ").append(toIndentedString(jwtTtlDefault)).append("\n");
    sb.append("    jwtTtlMax: ").append(toIndentedString(jwtTtlMax)).append("\n");
    sb.append("    jwtTtlMin: ").append(toIndentedString(jwtTtlMin)).append("\n");
    sb.append("    lockBoundIps: ").append(toIndentedString(lockBoundIps)).append("\n");
    sb.append("    lockDefaultKey: ").append(toIndentedString(lockDefaultKey)).append("\n");
    sb.append("    lockGwBoundIps: ").append(toIndentedString(lockGwBoundIps)).append("\n");
    sb.append("    maxRotationInterval: ").append(toIndentedString(maxRotationInterval)).append("\n");
    sb.append("    maxRotationIntervalEnable: ").append(toIndentedString(maxRotationIntervalEnable)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    passwordExpirationDays: ").append(toIndentedString(passwordExpirationDays)).append("\n");
    sb.append("    passwordExpirationNotificationDays: ").append(toIndentedString(passwordExpirationNotificationDays)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    usageEventEnable: ").append(toIndentedString(usageEventEnable)).append("\n");
    sb.append("    usageEventInterval: ").append(toIndentedString(usageEventInterval)).append("\n");
    sb.append("    usageEventObjectType: ").append(toIndentedString(usageEventObjectType)).append("\n");
    sb.append("    useCapitalLetters: ").append(toIndentedString(useCapitalLetters)).append("\n");
    sb.append("    useLowerLetters: ").append(toIndentedString(useLowerLetters)).append("\n");
    sb.append("    useNumbers: ").append(toIndentedString(useNumbers)).append("\n");
    sb.append("    useSpecialCharacters: ").append(toIndentedString(useSpecialCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("allowed-email-domains");
    openapiFields.add("bound-ips");
    openapiFields.add("city");
    openapiFields.add("company-name");
    openapiFields.add("country");
    openapiFields.add("default-certificate-expiration-notification-days");
    openapiFields.add("default-key-name");
    openapiFields.add("default-share-link-ttl-minutes");
    openapiFields.add("default-versioning");
    openapiFields.add("dp-enable-classic-key-protection");
    openapiFields.add("dynamic-secret-max-ttl");
    openapiFields.add("dynamic-secret-max-ttl-enable");
    openapiFields.add("enable-ai-insights");
    openapiFields.add("enable-default-certificate-expiration-event");
    openapiFields.add("enable-item-sharing");
    openapiFields.add("enable-password-expiration");
    openapiFields.add("force-new-versions");
    openapiFields.add("gw-bound-ips");
    openapiFields.add("hide-personal-folder");
    openapiFields.add("hide-static-password");
    openapiFields.add("invalid-characters");
    openapiFields.add("item-type");
    openapiFields.add("items-deletion-protection");
    openapiFields.add("json");
    openapiFields.add("jwt-ttl-default");
    openapiFields.add("jwt-ttl-max");
    openapiFields.add("jwt-ttl-min");
    openapiFields.add("lock-bound-ips");
    openapiFields.add("lock-default-key");
    openapiFields.add("lock-gw-bound-ips");
    openapiFields.add("max-rotation-interval");
    openapiFields.add("max-rotation-interval-enable");
    openapiFields.add("max-versions");
    openapiFields.add("password-expiration-days");
    openapiFields.add("password-expiration-notification-days");
    openapiFields.add("password-length");
    openapiFields.add("phone");
    openapiFields.add("postal-code");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("usage-event-enable");
    openapiFields.add("usage-event-interval");
    openapiFields.add("usage-event-object-type");
    openapiFields.add("use-capital-letters");
    openapiFields.add("use-lower-letters");
    openapiFields.add("use-numbers");
    openapiFields.add("use-special-characters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAccountSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountSettings is not found in the empty JSON string", UpdateAccountSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed-email-domains") != null && !jsonObj.get("allowed-email-domains").isJsonNull() && !jsonObj.get("allowed-email-domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-email-domains` to be an array in the JSON string but got `%s`", jsonObj.get("allowed-email-domains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-ips") != null && !jsonObj.get("bound-ips").isJsonNull() && !jsonObj.get("bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("bound-ips").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("company-name") != null && !jsonObj.get("company-name").isJsonNull()) && !jsonObj.get("company-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company-name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("default-certificate-expiration-notification-days") != null && !jsonObj.get("default-certificate-expiration-notification-days").isJsonNull() && !jsonObj.get("default-certificate-expiration-notification-days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-certificate-expiration-notification-days` to be an array in the JSON string but got `%s`", jsonObj.get("default-certificate-expiration-notification-days").toString()));
      }
      if ((jsonObj.get("default-key-name") != null && !jsonObj.get("default-key-name").isJsonNull()) && !jsonObj.get("default-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default-key-name").toString()));
      }
      if ((jsonObj.get("default-share-link-ttl-minutes") != null && !jsonObj.get("default-share-link-ttl-minutes").isJsonNull()) && !jsonObj.get("default-share-link-ttl-minutes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-share-link-ttl-minutes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default-share-link-ttl-minutes").toString()));
      }
      if ((jsonObj.get("default-versioning") != null && !jsonObj.get("default-versioning").isJsonNull()) && !jsonObj.get("default-versioning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default-versioning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default-versioning").toString()));
      }
      if ((jsonObj.get("dp-enable-classic-key-protection") != null && !jsonObj.get("dp-enable-classic-key-protection").isJsonNull()) && !jsonObj.get("dp-enable-classic-key-protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dp-enable-classic-key-protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dp-enable-classic-key-protection").toString()));
      }
      if ((jsonObj.get("dynamic-secret-max-ttl-enable") != null && !jsonObj.get("dynamic-secret-max-ttl-enable").isJsonNull()) && !jsonObj.get("dynamic-secret-max-ttl-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dynamic-secret-max-ttl-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dynamic-secret-max-ttl-enable").toString()));
      }
      if ((jsonObj.get("enable-ai-insights") != null && !jsonObj.get("enable-ai-insights").isJsonNull()) && !jsonObj.get("enable-ai-insights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enable-ai-insights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enable-ai-insights").toString()));
      }
      if ((jsonObj.get("enable-default-certificate-expiration-event") != null && !jsonObj.get("enable-default-certificate-expiration-event").isJsonNull()) && !jsonObj.get("enable-default-certificate-expiration-event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enable-default-certificate-expiration-event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enable-default-certificate-expiration-event").toString()));
      }
      if ((jsonObj.get("enable-item-sharing") != null && !jsonObj.get("enable-item-sharing").isJsonNull()) && !jsonObj.get("enable-item-sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enable-item-sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enable-item-sharing").toString()));
      }
      if ((jsonObj.get("enable-password-expiration") != null && !jsonObj.get("enable-password-expiration").isJsonNull()) && !jsonObj.get("enable-password-expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enable-password-expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enable-password-expiration").toString()));
      }
      if ((jsonObj.get("force-new-versions") != null && !jsonObj.get("force-new-versions").isJsonNull()) && !jsonObj.get("force-new-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force-new-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force-new-versions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gw-bound-ips") != null && !jsonObj.get("gw-bound-ips").isJsonNull() && !jsonObj.get("gw-bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gw-bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("gw-bound-ips").toString()));
      }
      if ((jsonObj.get("hide-personal-folder") != null && !jsonObj.get("hide-personal-folder").isJsonNull()) && !jsonObj.get("hide-personal-folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide-personal-folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide-personal-folder").toString()));
      }
      if ((jsonObj.get("hide-static-password") != null && !jsonObj.get("hide-static-password").isJsonNull()) && !jsonObj.get("hide-static-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide-static-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide-static-password").toString()));
      }
      if ((jsonObj.get("invalid-characters") != null && !jsonObj.get("invalid-characters").isJsonNull()) && !jsonObj.get("invalid-characters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalid-characters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalid-characters").toString()));
      }
      if ((jsonObj.get("item-type") != null && !jsonObj.get("item-type").isJsonNull()) && !jsonObj.get("item-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item-type").toString()));
      }
      if ((jsonObj.get("items-deletion-protection") != null && !jsonObj.get("items-deletion-protection").isJsonNull()) && !jsonObj.get("items-deletion-protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `items-deletion-protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("items-deletion-protection").toString()));
      }
      if ((jsonObj.get("lock-bound-ips") != null && !jsonObj.get("lock-bound-ips").isJsonNull()) && !jsonObj.get("lock-bound-ips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock-bound-ips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock-bound-ips").toString()));
      }
      if ((jsonObj.get("lock-default-key") != null && !jsonObj.get("lock-default-key").isJsonNull()) && !jsonObj.get("lock-default-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock-default-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock-default-key").toString()));
      }
      if ((jsonObj.get("lock-gw-bound-ips") != null && !jsonObj.get("lock-gw-bound-ips").isJsonNull()) && !jsonObj.get("lock-gw-bound-ips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock-gw-bound-ips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock-gw-bound-ips").toString()));
      }
      if ((jsonObj.get("max-rotation-interval-enable") != null && !jsonObj.get("max-rotation-interval-enable").isJsonNull()) && !jsonObj.get("max-rotation-interval-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-rotation-interval-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-rotation-interval-enable").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if ((jsonObj.get("password-expiration-days") != null && !jsonObj.get("password-expiration-days").isJsonNull()) && !jsonObj.get("password-expiration-days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-expiration-days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-expiration-days").toString()));
      }
      if ((jsonObj.get("password-expiration-notification-days") != null && !jsonObj.get("password-expiration-notification-days").isJsonNull()) && !jsonObj.get("password-expiration-notification-days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-expiration-notification-days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-expiration-notification-days").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("postal-code") != null && !jsonObj.get("postal-code").isJsonNull()) && !jsonObj.get("postal-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal-code").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("usage-event-enable") != null && !jsonObj.get("usage-event-enable").isJsonNull()) && !jsonObj.get("usage-event-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage-event-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage-event-enable").toString()));
      }
      if ((jsonObj.get("usage-event-object-type") != null && !jsonObj.get("usage-event-object-type").isJsonNull()) && !jsonObj.get("usage-event-object-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage-event-object-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage-event-object-type").toString()));
      }
      if ((jsonObj.get("use-capital-letters") != null && !jsonObj.get("use-capital-letters").isJsonNull()) && !jsonObj.get("use-capital-letters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use-capital-letters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use-capital-letters").toString()));
      }
      if ((jsonObj.get("use-lower-letters") != null && !jsonObj.get("use-lower-letters").isJsonNull()) && !jsonObj.get("use-lower-letters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use-lower-letters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use-lower-letters").toString()));
      }
      if ((jsonObj.get("use-numbers") != null && !jsonObj.get("use-numbers").isJsonNull()) && !jsonObj.get("use-numbers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use-numbers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use-numbers").toString()));
      }
      if ((jsonObj.get("use-special-characters") != null && !jsonObj.get("use-special-characters").isJsonNull()) && !jsonObj.get("use-special-characters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use-special-characters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use-special-characters").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountSettings>() {
           @Override
           public void write(JsonWriter out, UpdateAccountSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAccountSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAccountSettings
   * @throws IOException if the JSON string is invalid with respect to UpdateAccountSettings
   */
  public static UpdateAccountSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountSettings.class);
  }

  /**
   * Convert an instance of UpdateAccountSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

