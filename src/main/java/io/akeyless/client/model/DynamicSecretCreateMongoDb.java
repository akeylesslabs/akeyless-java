/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretCreateMongoDb is a command that creates either mongodb  dynamic secret or mongodb atlas dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretCreateMongoDb {
  public static final String SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE = "custom-username-template";
  @SerializedName(SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE)
  @javax.annotation.Nullable
  private String customUsernameTemplate;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ITEM_CUSTOM_FIELDS = "item-custom-fields";
  @SerializedName(SERIALIZED_NAME_ITEM_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> itemCustomFields = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY = "mongodb-atlas-api-private-key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPrivateKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY = "mongodb-atlas-api-public-key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPublicKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID = "mongodb-atlas-project-id";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID)
  @javax.annotation.Nullable
  private String mongodbAtlasProjectId;

  public static final String SERIALIZED_NAME_MONGODB_CUSTOM_DATA = "mongodb-custom-data";
  @SerializedName(SERIALIZED_NAME_MONGODB_CUSTOM_DATA)
  @javax.annotation.Nullable
  private String mongodbCustomData;

  public static final String SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB = "mongodb-default-auth-db";
  @SerializedName(SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB)
  @javax.annotation.Nullable
  private String mongodbDefaultAuthDb;

  public static final String SERIALIZED_NAME_MONGODB_HOST_PORT = "mongodb-host-port";
  @SerializedName(SERIALIZED_NAME_MONGODB_HOST_PORT)
  @javax.annotation.Nullable
  private String mongodbHostPort;

  public static final String SERIALIZED_NAME_MONGODB_NAME = "mongodb-name";
  @SerializedName(SERIALIZED_NAME_MONGODB_NAME)
  @javax.annotation.Nullable
  private String mongodbName;

  public static final String SERIALIZED_NAME_MONGODB_PASSWORD = "mongodb-password";
  @SerializedName(SERIALIZED_NAME_MONGODB_PASSWORD)
  @javax.annotation.Nullable
  private String mongodbPassword;

  public static final String SERIALIZED_NAME_MONGODB_ROLES = "mongodb-roles";
  @SerializedName(SERIALIZED_NAME_MONGODB_ROLES)
  @javax.annotation.Nullable
  private String mongodbRoles = "[]";

  public static final String SERIALIZED_NAME_MONGODB_SERVER_URI = "mongodb-server-uri";
  @SerializedName(SERIALIZED_NAME_MONGODB_SERVER_URI)
  @javax.annotation.Nullable
  private String mongodbServerUri;

  public static final String SERIALIZED_NAME_MONGODB_URI_OPTIONS = "mongodb-uri-options";
  @SerializedName(SERIALIZED_NAME_MONGODB_URI_OPTIONS)
  @javax.annotation.Nullable
  private String mongodbUriOptions;

  public static final String SERIALIZED_NAME_MONGODB_USERNAME = "mongodb-username";
  @SerializedName(SERIALIZED_NAME_MONGODB_USERNAME)
  @javax.annotation.Nullable
  private String mongodbUsername;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_NAME = "secure-access-db-name";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_NAME)
  @javax.annotation.Nullable
  private String secureAccessDbName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DELAY = "secure-access-delay";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DELAY)
  @javax.annotation.Nullable
  private Long secureAccessDelay;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretCreateMongoDb() {
  }

  public DynamicSecretCreateMongoDb customUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
    return this;
  }

  /**
   * Customize how temporary usernames are generated using go template
   * @return customUsernameTemplate
   */
  @javax.annotation.Nullable
  public String getCustomUsernameTemplate() {
    return customUsernameTemplate;
  }

  public void setCustomUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
  }


  public DynamicSecretCreateMongoDb deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretCreateMongoDb description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretCreateMongoDb itemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
    return this;
  }

  public DynamicSecretCreateMongoDb putItemCustomFieldsItem(String key, String itemCustomFieldsItem) {
    if (this.itemCustomFields == null) {
      this.itemCustomFields = new HashMap<>();
    }
    this.itemCustomFields.put(key, itemCustomFieldsItem);
    return this;
  }

  /**
   * Additional custom fields to associate with the item
   * @return itemCustomFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemCustomFields() {
    return itemCustomFields;
  }

  public void setItemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
  }


  public DynamicSecretCreateMongoDb json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretCreateMongoDb mongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
    return this;
  }

  /**
   * MongoDB Atlas private key
   * @return mongodbAtlasApiPrivateKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPrivateKey() {
    return mongodbAtlasApiPrivateKey;
  }

  public void setMongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
  }


  public DynamicSecretCreateMongoDb mongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
    return this;
  }

  /**
   * MongoDB Atlas public key
   * @return mongodbAtlasApiPublicKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPublicKey() {
    return mongodbAtlasApiPublicKey;
  }

  public void setMongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
  }


  public DynamicSecretCreateMongoDb mongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
    return this;
  }

  /**
   * MongoDB Atlas project ID
   * @return mongodbAtlasProjectId
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasProjectId() {
    return mongodbAtlasProjectId;
  }

  public void setMongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
  }


  public DynamicSecretCreateMongoDb mongodbCustomData(@javax.annotation.Nullable String mongodbCustomData) {
    this.mongodbCustomData = mongodbCustomData;
    return this;
  }

  /**
   * MongoDB custom data
   * @return mongodbCustomData
   */
  @javax.annotation.Nullable
  public String getMongodbCustomData() {
    return mongodbCustomData;
  }

  public void setMongodbCustomData(@javax.annotation.Nullable String mongodbCustomData) {
    this.mongodbCustomData = mongodbCustomData;
  }


  public DynamicSecretCreateMongoDb mongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
    return this;
  }

  /**
   * MongoDB server default authentication database
   * @return mongodbDefaultAuthDb
   */
  @javax.annotation.Nullable
  public String getMongodbDefaultAuthDb() {
    return mongodbDefaultAuthDb;
  }

  public void setMongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
  }


  public DynamicSecretCreateMongoDb mongodbHostPort(@javax.annotation.Nullable String mongodbHostPort) {
    this.mongodbHostPort = mongodbHostPort;
    return this;
  }

  /**
   * MongoDB server host and port
   * @return mongodbHostPort
   */
  @javax.annotation.Nullable
  public String getMongodbHostPort() {
    return mongodbHostPort;
  }

  public void setMongodbHostPort(@javax.annotation.Nullable String mongodbHostPort) {
    this.mongodbHostPort = mongodbHostPort;
  }


  public DynamicSecretCreateMongoDb mongodbName(@javax.annotation.Nullable String mongodbName) {
    this.mongodbName = mongodbName;
    return this;
  }

  /**
   * MongoDB Name
   * @return mongodbName
   */
  @javax.annotation.Nullable
  public String getMongodbName() {
    return mongodbName;
  }

  public void setMongodbName(@javax.annotation.Nullable String mongodbName) {
    this.mongodbName = mongodbName;
  }


  public DynamicSecretCreateMongoDb mongodbPassword(@javax.annotation.Nullable String mongodbPassword) {
    this.mongodbPassword = mongodbPassword;
    return this;
  }

  /**
   * MongoDB server password. You will prompted to provide a password if it will not appear in CLI parameters
   * @return mongodbPassword
   */
  @javax.annotation.Nullable
  public String getMongodbPassword() {
    return mongodbPassword;
  }

  public void setMongodbPassword(@javax.annotation.Nullable String mongodbPassword) {
    this.mongodbPassword = mongodbPassword;
  }


  public DynamicSecretCreateMongoDb mongodbRoles(@javax.annotation.Nullable String mongodbRoles) {
    this.mongodbRoles = mongodbRoles;
    return this;
  }

  /**
   * MongoDB Roles
   * @return mongodbRoles
   */
  @javax.annotation.Nullable
  public String getMongodbRoles() {
    return mongodbRoles;
  }

  public void setMongodbRoles(@javax.annotation.Nullable String mongodbRoles) {
    this.mongodbRoles = mongodbRoles;
  }


  public DynamicSecretCreateMongoDb mongodbServerUri(@javax.annotation.Nullable String mongodbServerUri) {
    this.mongodbServerUri = mongodbServerUri;
    return this;
  }

  /**
   * MongoDB server URI
   * @return mongodbServerUri
   */
  @javax.annotation.Nullable
  public String getMongodbServerUri() {
    return mongodbServerUri;
  }

  public void setMongodbServerUri(@javax.annotation.Nullable String mongodbServerUri) {
    this.mongodbServerUri = mongodbServerUri;
  }


  public DynamicSecretCreateMongoDb mongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
    return this;
  }

  /**
   * MongoDB server URI options
   * @return mongodbUriOptions
   */
  @javax.annotation.Nullable
  public String getMongodbUriOptions() {
    return mongodbUriOptions;
  }

  public void setMongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
  }


  public DynamicSecretCreateMongoDb mongodbUsername(@javax.annotation.Nullable String mongodbUsername) {
    this.mongodbUsername = mongodbUsername;
    return this;
  }

  /**
   * MongoDB server username
   * @return mongodbUsername
   */
  @javax.annotation.Nullable
  public String getMongodbUsername() {
    return mongodbUsername;
  }

  public void setMongodbUsername(@javax.annotation.Nullable String mongodbUsername) {
    this.mongodbUsername = mongodbUsername;
  }


  public DynamicSecretCreateMongoDb name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretCreateMongoDb passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public DynamicSecretCreateMongoDb producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Encrypt producer with following key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretCreateMongoDb secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public DynamicSecretCreateMongoDb secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public DynamicSecretCreateMongoDb secureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
    return this;
  }

  /**
   * The DB name (relevant only for DB Dynamic-Secret)
   * @return secureAccessDbName
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbName() {
    return secureAccessDbName;
  }

  public void setSecureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
  }


  public DynamicSecretCreateMongoDb secureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
    return this;
  }

  /**
   * The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
   * @return secureAccessDelay
   */
  @javax.annotation.Nullable
  public Long getSecureAccessDelay() {
    return secureAccessDelay;
  }

  public void setSecureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
  }


  public DynamicSecretCreateMongoDb secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public DynamicSecretCreateMongoDb secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public DynamicSecretCreateMongoDb addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public DynamicSecretCreateMongoDb secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public DynamicSecretCreateMongoDb tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretCreateMongoDb addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretCreateMongoDb targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretCreateMongoDb token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretCreateMongoDb uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretCreateMongoDb userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretCreateMongoDb dynamicSecretCreateMongoDb = (DynamicSecretCreateMongoDb) o;
    return Objects.equals(this.customUsernameTemplate, dynamicSecretCreateMongoDb.customUsernameTemplate) &&
        Objects.equals(this.deleteProtection, dynamicSecretCreateMongoDb.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretCreateMongoDb.description) &&
        Objects.equals(this.itemCustomFields, dynamicSecretCreateMongoDb.itemCustomFields) &&
        Objects.equals(this.json, dynamicSecretCreateMongoDb.json) &&
        Objects.equals(this.mongodbAtlasApiPrivateKey, dynamicSecretCreateMongoDb.mongodbAtlasApiPrivateKey) &&
        Objects.equals(this.mongodbAtlasApiPublicKey, dynamicSecretCreateMongoDb.mongodbAtlasApiPublicKey) &&
        Objects.equals(this.mongodbAtlasProjectId, dynamicSecretCreateMongoDb.mongodbAtlasProjectId) &&
        Objects.equals(this.mongodbCustomData, dynamicSecretCreateMongoDb.mongodbCustomData) &&
        Objects.equals(this.mongodbDefaultAuthDb, dynamicSecretCreateMongoDb.mongodbDefaultAuthDb) &&
        Objects.equals(this.mongodbHostPort, dynamicSecretCreateMongoDb.mongodbHostPort) &&
        Objects.equals(this.mongodbName, dynamicSecretCreateMongoDb.mongodbName) &&
        Objects.equals(this.mongodbPassword, dynamicSecretCreateMongoDb.mongodbPassword) &&
        Objects.equals(this.mongodbRoles, dynamicSecretCreateMongoDb.mongodbRoles) &&
        Objects.equals(this.mongodbServerUri, dynamicSecretCreateMongoDb.mongodbServerUri) &&
        Objects.equals(this.mongodbUriOptions, dynamicSecretCreateMongoDb.mongodbUriOptions) &&
        Objects.equals(this.mongodbUsername, dynamicSecretCreateMongoDb.mongodbUsername) &&
        Objects.equals(this.name, dynamicSecretCreateMongoDb.name) &&
        Objects.equals(this.passwordLength, dynamicSecretCreateMongoDb.passwordLength) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretCreateMongoDb.producerEncryptionKeyName) &&
        Objects.equals(this.secureAccessBastionIssuer, dynamicSecretCreateMongoDb.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, dynamicSecretCreateMongoDb.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessDbName, dynamicSecretCreateMongoDb.secureAccessDbName) &&
        Objects.equals(this.secureAccessDelay, dynamicSecretCreateMongoDb.secureAccessDelay) &&
        Objects.equals(this.secureAccessEnable, dynamicSecretCreateMongoDb.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, dynamicSecretCreateMongoDb.secureAccessHost) &&
        Objects.equals(this.secureAccessWeb, dynamicSecretCreateMongoDb.secureAccessWeb) &&
        Objects.equals(this.tags, dynamicSecretCreateMongoDb.tags) &&
        Objects.equals(this.targetName, dynamicSecretCreateMongoDb.targetName) &&
        Objects.equals(this.token, dynamicSecretCreateMongoDb.token) &&
        Objects.equals(this.uidToken, dynamicSecretCreateMongoDb.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretCreateMongoDb.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customUsernameTemplate, deleteProtection, description, itemCustomFields, json, mongodbAtlasApiPrivateKey, mongodbAtlasApiPublicKey, mongodbAtlasProjectId, mongodbCustomData, mongodbDefaultAuthDb, mongodbHostPort, mongodbName, mongodbPassword, mongodbRoles, mongodbServerUri, mongodbUriOptions, mongodbUsername, name, passwordLength, producerEncryptionKeyName, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessDbName, secureAccessDelay, secureAccessEnable, secureAccessHost, secureAccessWeb, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretCreateMongoDb {\n");
    sb.append("    customUsernameTemplate: ").append(toIndentedString(customUsernameTemplate)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    itemCustomFields: ").append(toIndentedString(itemCustomFields)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    mongodbAtlasApiPrivateKey: ").append(toIndentedString(mongodbAtlasApiPrivateKey)).append("\n");
    sb.append("    mongodbAtlasApiPublicKey: ").append(toIndentedString(mongodbAtlasApiPublicKey)).append("\n");
    sb.append("    mongodbAtlasProjectId: ").append(toIndentedString(mongodbAtlasProjectId)).append("\n");
    sb.append("    mongodbCustomData: ").append(toIndentedString(mongodbCustomData)).append("\n");
    sb.append("    mongodbDefaultAuthDb: ").append(toIndentedString(mongodbDefaultAuthDb)).append("\n");
    sb.append("    mongodbHostPort: ").append(toIndentedString(mongodbHostPort)).append("\n");
    sb.append("    mongodbName: ").append(toIndentedString(mongodbName)).append("\n");
    sb.append("    mongodbPassword: ").append(toIndentedString(mongodbPassword)).append("\n");
    sb.append("    mongodbRoles: ").append(toIndentedString(mongodbRoles)).append("\n");
    sb.append("    mongodbServerUri: ").append(toIndentedString(mongodbServerUri)).append("\n");
    sb.append("    mongodbUriOptions: ").append(toIndentedString(mongodbUriOptions)).append("\n");
    sb.append("    mongodbUsername: ").append(toIndentedString(mongodbUsername)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessDbName: ").append(toIndentedString(secureAccessDbName)).append("\n");
    sb.append("    secureAccessDelay: ").append(toIndentedString(secureAccessDelay)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom-username-template");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("item-custom-fields");
    openapiFields.add("json");
    openapiFields.add("mongodb-atlas-api-private-key");
    openapiFields.add("mongodb-atlas-api-public-key");
    openapiFields.add("mongodb-atlas-project-id");
    openapiFields.add("mongodb-custom-data");
    openapiFields.add("mongodb-default-auth-db");
    openapiFields.add("mongodb-host-port");
    openapiFields.add("mongodb-name");
    openapiFields.add("mongodb-password");
    openapiFields.add("mongodb-roles");
    openapiFields.add("mongodb-server-uri");
    openapiFields.add("mongodb-uri-options");
    openapiFields.add("mongodb-username");
    openapiFields.add("name");
    openapiFields.add("password-length");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-db-name");
    openapiFields.add("secure-access-delay");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-web");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretCreateMongoDb
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretCreateMongoDb.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretCreateMongoDb is not found in the empty JSON string", DynamicSecretCreateMongoDb.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretCreateMongoDb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretCreateMongoDb` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretCreateMongoDb.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom-username-template") != null && !jsonObj.get("custom-username-template").isJsonNull()) && !jsonObj.get("custom-username-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-username-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-username-template").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-api-private-key") != null && !jsonObj.get("mongodb-atlas-api-private-key").isJsonNull()) && !jsonObj.get("mongodb-atlas-api-private-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-api-private-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-api-private-key").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-api-public-key") != null && !jsonObj.get("mongodb-atlas-api-public-key").isJsonNull()) && !jsonObj.get("mongodb-atlas-api-public-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-api-public-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-api-public-key").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-project-id") != null && !jsonObj.get("mongodb-atlas-project-id").isJsonNull()) && !jsonObj.get("mongodb-atlas-project-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-project-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-project-id").toString()));
      }
      if ((jsonObj.get("mongodb-custom-data") != null && !jsonObj.get("mongodb-custom-data").isJsonNull()) && !jsonObj.get("mongodb-custom-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-custom-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-custom-data").toString()));
      }
      if ((jsonObj.get("mongodb-default-auth-db") != null && !jsonObj.get("mongodb-default-auth-db").isJsonNull()) && !jsonObj.get("mongodb-default-auth-db").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-default-auth-db` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-default-auth-db").toString()));
      }
      if ((jsonObj.get("mongodb-host-port") != null && !jsonObj.get("mongodb-host-port").isJsonNull()) && !jsonObj.get("mongodb-host-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-host-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-host-port").toString()));
      }
      if ((jsonObj.get("mongodb-name") != null && !jsonObj.get("mongodb-name").isJsonNull()) && !jsonObj.get("mongodb-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-name").toString()));
      }
      if ((jsonObj.get("mongodb-password") != null && !jsonObj.get("mongodb-password").isJsonNull()) && !jsonObj.get("mongodb-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-password").toString()));
      }
      if ((jsonObj.get("mongodb-roles") != null && !jsonObj.get("mongodb-roles").isJsonNull()) && !jsonObj.get("mongodb-roles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-roles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-roles").toString()));
      }
      if ((jsonObj.get("mongodb-server-uri") != null && !jsonObj.get("mongodb-server-uri").isJsonNull()) && !jsonObj.get("mongodb-server-uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-server-uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-server-uri").toString()));
      }
      if ((jsonObj.get("mongodb-uri-options") != null && !jsonObj.get("mongodb-uri-options").isJsonNull()) && !jsonObj.get("mongodb-uri-options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-uri-options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-uri-options").toString()));
      }
      if ((jsonObj.get("mongodb-username") != null && !jsonObj.get("mongodb-username").isJsonNull()) && !jsonObj.get("mongodb-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-username").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-db-name") != null && !jsonObj.get("secure-access-db-name").isJsonNull()) && !jsonObj.get("secure-access-db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-name").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretCreateMongoDb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretCreateMongoDb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretCreateMongoDb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretCreateMongoDb.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretCreateMongoDb>() {
           @Override
           public void write(JsonWriter out, DynamicSecretCreateMongoDb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretCreateMongoDb read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretCreateMongoDb given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretCreateMongoDb
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretCreateMongoDb
   */
  public static DynamicSecretCreateMongoDb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretCreateMongoDb.class);
  }

  /**
   * Convert an instance of DynamicSecretCreateMongoDb to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

