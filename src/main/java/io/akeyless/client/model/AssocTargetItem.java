/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * assocTargetItem is a command that creates an association between target and item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AssocTargetItem {
  public static final String SERIALIZED_NAME_CERTIFICATE_PATH = "certificate-path";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PATH)
  @javax.annotation.Nullable
  private String certificatePath;

  public static final String SERIALIZED_NAME_CHAIN_PATH = "chain-path";
  @SerializedName(SERIALIZED_NAME_CHAIN_PATH)
  @javax.annotation.Nullable
  private String chainPath;

  public static final String SERIALIZED_NAME_DISABLE_PREVIOUS_KEY_VERSION = "disable-previous-key-version";
  @SerializedName(SERIALIZED_NAME_DISABLE_PREVIOUS_KEY_VERSION)
  @javax.annotation.Nullable
  private Boolean disablePreviousKeyVersion = false;

  public static final String SERIALIZED_NAME_EXTERNAL_KEY_NAME = "external-key-name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KEY_NAME)
  @javax.annotation.Nullable
  private String externalKeyName;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_OPERATIONS = "key-operations";
  @SerializedName(SERIALIZED_NAME_KEY_OPERATIONS)
  @javax.annotation.Nullable
  private List<String> keyOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEYRING_NAME = "keyring-name";
  @SerializedName(SERIALIZED_NAME_KEYRING_NAME)
  @javax.annotation.Nullable
  private String keyringName;

  public static final String SERIALIZED_NAME_KMS_ALGORITHM = "kms-algorithm";
  @SerializedName(SERIALIZED_NAME_KMS_ALGORITHM)
  @javax.annotation.Nullable
  private String kmsAlgorithm;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location-id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  @javax.annotation.Nullable
  private String locationId;

  public static final String SERIALIZED_NAME_MULTI_REGION = "multi-region";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION)
  @javax.annotation.Nullable
  private String multiRegion = "false";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_POST_PROVISION_COMMAND = "post-provision-command";
  @SerializedName(SERIALIZED_NAME_POST_PROVISION_COMMAND)
  @javax.annotation.Nullable
  private String postProvisionCommand;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PATH = "private-key-path";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PATH)
  @javax.annotation.Nullable
  private String privateKeyPath;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project-id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private String projectId;

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protection-level";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  @javax.annotation.Nullable
  private String protectionLevel = "software";

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  @javax.annotation.Nullable
  private String purpose;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  @javax.annotation.Nullable
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SRA_ASSOCIATION = "sra-association";
  @SerializedName(SERIALIZED_NAME_SRA_ASSOCIATION)
  @javax.annotation.Nullable
  private Boolean sraAssociation = false;

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nonnull
  private String targetName;

  public static final String SERIALIZED_NAME_TENANT_SECRET_TYPE = "tenant-secret-type";
  @SerializedName(SERIALIZED_NAME_TENANT_SECRET_TYPE)
  @javax.annotation.Nullable
  private String tenantSecretType;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_VAULT_NAME = "vault-name";
  @SerializedName(SERIALIZED_NAME_VAULT_NAME)
  @javax.annotation.Nullable
  private String vaultName;

  public AssocTargetItem() {
  }

  public AssocTargetItem certificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  /**
   * A path on the target to store the certificate pem file (relevant only for certificate provisioning)
   * @return certificatePath
   */
  @javax.annotation.Nullable
  public String getCertificatePath() {
    return certificatePath;
  }

  public void setCertificatePath(@javax.annotation.Nullable String certificatePath) {
    this.certificatePath = certificatePath;
  }


  public AssocTargetItem chainPath(@javax.annotation.Nullable String chainPath) {
    this.chainPath = chainPath;
    return this;
  }

  /**
   * A path on the target to store the full chain pem file (relevant only for certificate provisioning)
   * @return chainPath
   */
  @javax.annotation.Nullable
  public String getChainPath() {
    return chainPath;
  }

  public void setChainPath(@javax.annotation.Nullable String chainPath) {
    this.chainPath = chainPath;
  }


  public AssocTargetItem disablePreviousKeyVersion(@javax.annotation.Nullable Boolean disablePreviousKeyVersion) {
    this.disablePreviousKeyVersion = disablePreviousKeyVersion;
    return this;
  }

  /**
   * Automatically disable previous key version (required for azure targets)
   * @return disablePreviousKeyVersion
   */
  @javax.annotation.Nullable
  public Boolean getDisablePreviousKeyVersion() {
    return disablePreviousKeyVersion;
  }

  public void setDisablePreviousKeyVersion(@javax.annotation.Nullable Boolean disablePreviousKeyVersion) {
    this.disablePreviousKeyVersion = disablePreviousKeyVersion;
  }


  public AssocTargetItem externalKeyName(@javax.annotation.Nullable String externalKeyName) {
    this.externalKeyName = externalKeyName;
    return this;
  }

  /**
   * The external key name to associate with the classic key (Relevant only for Classic Key AWS/Azure/GCP targets)
   * @return externalKeyName
   */
  @javax.annotation.Nullable
  public String getExternalKeyName() {
    return externalKeyName;
  }

  public void setExternalKeyName(@javax.annotation.Nullable String externalKeyName) {
    this.externalKeyName = externalKeyName;
  }


  public AssocTargetItem json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public AssocTargetItem keyOperations(@javax.annotation.Nullable List<String> keyOperations) {
    this.keyOperations = keyOperations;
    return this;
  }

  public AssocTargetItem addKeyOperationsItem(String keyOperationsItem) {
    if (this.keyOperations == null) {
      this.keyOperations = new ArrayList<>();
    }
    this.keyOperations.add(keyOperationsItem);
    return this;
  }

  /**
   * A list of allowed operations for the key (required for azure targets)
   * @return keyOperations
   */
  @javax.annotation.Nullable
  public List<String> getKeyOperations() {
    return keyOperations;
  }

  public void setKeyOperations(@javax.annotation.Nullable List<String> keyOperations) {
    this.keyOperations = keyOperations;
  }


  public AssocTargetItem keyringName(@javax.annotation.Nullable String keyringName) {
    this.keyringName = keyringName;
    return this;
  }

  /**
   * Keyring name of the GCP KMS (required for gcp targets)
   * @return keyringName
   */
  @javax.annotation.Nullable
  public String getKeyringName() {
    return keyringName;
  }

  public void setKeyringName(@javax.annotation.Nullable String keyringName) {
    this.keyringName = keyringName;
  }


  public AssocTargetItem kmsAlgorithm(@javax.annotation.Nullable String kmsAlgorithm) {
    this.kmsAlgorithm = kmsAlgorithm;
    return this;
  }

  /**
   * Algorithm of the key in GCP KMS (required for gcp targets)
   * @return kmsAlgorithm
   */
  @javax.annotation.Nullable
  public String getKmsAlgorithm() {
    return kmsAlgorithm;
  }

  public void setKmsAlgorithm(@javax.annotation.Nullable String kmsAlgorithm) {
    this.kmsAlgorithm = kmsAlgorithm;
  }


  public AssocTargetItem locationId(@javax.annotation.Nullable String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Location id of the GCP KMS (required for gcp targets)
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(@javax.annotation.Nullable String locationId) {
    this.locationId = locationId;
  }


  public AssocTargetItem multiRegion(@javax.annotation.Nullable String multiRegion) {
    this.multiRegion = multiRegion;
    return this;
  }

  /**
   * Set to &#39;true&#39; to create a multi-region managed key. (Relevant only for Classic Key AWS targets)
   * @return multiRegion
   */
  @javax.annotation.Nullable
  public String getMultiRegion() {
    return multiRegion;
  }

  public void setMultiRegion(@javax.annotation.Nullable String multiRegion) {
    this.multiRegion = multiRegion;
  }


  public AssocTargetItem name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The item to associate
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AssocTargetItem postProvisionCommand(@javax.annotation.Nullable String postProvisionCommand) {
    this.postProvisionCommand = postProvisionCommand;
    return this;
  }

  /**
   * A custom command to run on the remote target after successful provisioning (relevant only for certificate provisioning)
   * @return postProvisionCommand
   */
  @javax.annotation.Nullable
  public String getPostProvisionCommand() {
    return postProvisionCommand;
  }

  public void setPostProvisionCommand(@javax.annotation.Nullable String postProvisionCommand) {
    this.postProvisionCommand = postProvisionCommand;
  }


  public AssocTargetItem privateKeyPath(@javax.annotation.Nullable String privateKeyPath) {
    this.privateKeyPath = privateKeyPath;
    return this;
  }

  /**
   * A path on the target to store the private key (relevant only for certificate provisioning)
   * @return privateKeyPath
   */
  @javax.annotation.Nullable
  public String getPrivateKeyPath() {
    return privateKeyPath;
  }

  public void setPrivateKeyPath(@javax.annotation.Nullable String privateKeyPath) {
    this.privateKeyPath = privateKeyPath;
  }


  public AssocTargetItem projectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project id of the GCP KMS (required for gcp targets)
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
  }


  public AssocTargetItem protectionLevel(@javax.annotation.Nullable String protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * Protection level of the key [software/hardware] (relevant for gcp targets)
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public String getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(@javax.annotation.Nullable String protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public AssocTargetItem purpose(@javax.annotation.Nullable String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Purpose of the key in GCP KMS (required for gcp targets)
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(@javax.annotation.Nullable String purpose) {
    this.purpose = purpose;
  }


  public AssocTargetItem regions(@javax.annotation.Nullable List<String> regions) {
    this.regions = regions;
    return this;
  }

  public AssocTargetItem addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * The list of regions to create a copy of the key in (relevant for aws targets)
   * @return regions
   */
  @javax.annotation.Nullable
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(@javax.annotation.Nullable List<String> regions) {
    this.regions = regions;
  }


  public AssocTargetItem sraAssociation(@javax.annotation.Nullable Boolean sraAssociation) {
    this.sraAssociation = sraAssociation;
    return this;
  }

  /**
   * Is the target to associate is for sra, relevant only for linked target association for ldap rotated secret
   * @return sraAssociation
   */
  @javax.annotation.Nullable
  public Boolean getSraAssociation() {
    return sraAssociation;
  }

  public void setSraAssociation(@javax.annotation.Nullable Boolean sraAssociation) {
    this.sraAssociation = sraAssociation;
  }


  public AssocTargetItem targetName(@javax.annotation.Nonnull String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * The target to associate
   * @return targetName
   */
  @javax.annotation.Nonnull
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nonnull String targetName) {
    this.targetName = targetName;
  }


  public AssocTargetItem tenantSecretType(@javax.annotation.Nullable String tenantSecretType) {
    this.tenantSecretType = tenantSecretType;
    return this;
  }

  /**
   * The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets)
   * @return tenantSecretType
   */
  @javax.annotation.Nullable
  public String getTenantSecretType() {
    return tenantSecretType;
  }

  public void setTenantSecretType(@javax.annotation.Nullable String tenantSecretType) {
    this.tenantSecretType = tenantSecretType;
  }


  public AssocTargetItem token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public AssocTargetItem uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public AssocTargetItem vaultName(@javax.annotation.Nullable String vaultName) {
    this.vaultName = vaultName;
    return this;
  }

  /**
   * Name of the vault used (required for azure targets)
   * @return vaultName
   */
  @javax.annotation.Nullable
  public String getVaultName() {
    return vaultName;
  }

  public void setVaultName(@javax.annotation.Nullable String vaultName) {
    this.vaultName = vaultName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssocTargetItem assocTargetItem = (AssocTargetItem) o;
    return Objects.equals(this.certificatePath, assocTargetItem.certificatePath) &&
        Objects.equals(this.chainPath, assocTargetItem.chainPath) &&
        Objects.equals(this.disablePreviousKeyVersion, assocTargetItem.disablePreviousKeyVersion) &&
        Objects.equals(this.externalKeyName, assocTargetItem.externalKeyName) &&
        Objects.equals(this.json, assocTargetItem.json) &&
        Objects.equals(this.keyOperations, assocTargetItem.keyOperations) &&
        Objects.equals(this.keyringName, assocTargetItem.keyringName) &&
        Objects.equals(this.kmsAlgorithm, assocTargetItem.kmsAlgorithm) &&
        Objects.equals(this.locationId, assocTargetItem.locationId) &&
        Objects.equals(this.multiRegion, assocTargetItem.multiRegion) &&
        Objects.equals(this.name, assocTargetItem.name) &&
        Objects.equals(this.postProvisionCommand, assocTargetItem.postProvisionCommand) &&
        Objects.equals(this.privateKeyPath, assocTargetItem.privateKeyPath) &&
        Objects.equals(this.projectId, assocTargetItem.projectId) &&
        Objects.equals(this.protectionLevel, assocTargetItem.protectionLevel) &&
        Objects.equals(this.purpose, assocTargetItem.purpose) &&
        Objects.equals(this.regions, assocTargetItem.regions) &&
        Objects.equals(this.sraAssociation, assocTargetItem.sraAssociation) &&
        Objects.equals(this.targetName, assocTargetItem.targetName) &&
        Objects.equals(this.tenantSecretType, assocTargetItem.tenantSecretType) &&
        Objects.equals(this.token, assocTargetItem.token) &&
        Objects.equals(this.uidToken, assocTargetItem.uidToken) &&
        Objects.equals(this.vaultName, assocTargetItem.vaultName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificatePath, chainPath, disablePreviousKeyVersion, externalKeyName, json, keyOperations, keyringName, kmsAlgorithm, locationId, multiRegion, name, postProvisionCommand, privateKeyPath, projectId, protectionLevel, purpose, regions, sraAssociation, targetName, tenantSecretType, token, uidToken, vaultName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssocTargetItem {\n");
    sb.append("    certificatePath: ").append(toIndentedString(certificatePath)).append("\n");
    sb.append("    chainPath: ").append(toIndentedString(chainPath)).append("\n");
    sb.append("    disablePreviousKeyVersion: ").append(toIndentedString(disablePreviousKeyVersion)).append("\n");
    sb.append("    externalKeyName: ").append(toIndentedString(externalKeyName)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyOperations: ").append(toIndentedString(keyOperations)).append("\n");
    sb.append("    keyringName: ").append(toIndentedString(keyringName)).append("\n");
    sb.append("    kmsAlgorithm: ").append(toIndentedString(kmsAlgorithm)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    multiRegion: ").append(toIndentedString(multiRegion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postProvisionCommand: ").append(toIndentedString(postProvisionCommand)).append("\n");
    sb.append("    privateKeyPath: ").append(toIndentedString(privateKeyPath)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    sraAssociation: ").append(toIndentedString(sraAssociation)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    tenantSecretType: ").append(toIndentedString(tenantSecretType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    vaultName: ").append(toIndentedString(vaultName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate-path");
    openapiFields.add("chain-path");
    openapiFields.add("disable-previous-key-version");
    openapiFields.add("external-key-name");
    openapiFields.add("json");
    openapiFields.add("key-operations");
    openapiFields.add("keyring-name");
    openapiFields.add("kms-algorithm");
    openapiFields.add("location-id");
    openapiFields.add("multi-region");
    openapiFields.add("name");
    openapiFields.add("post-provision-command");
    openapiFields.add("private-key-path");
    openapiFields.add("project-id");
    openapiFields.add("protection-level");
    openapiFields.add("purpose");
    openapiFields.add("regions");
    openapiFields.add("sra-association");
    openapiFields.add("target-name");
    openapiFields.add("tenant-secret-type");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("vault-name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("target-name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssocTargetItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssocTargetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssocTargetItem is not found in the empty JSON string", AssocTargetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssocTargetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssocTargetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssocTargetItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate-path") != null && !jsonObj.get("certificate-path").isJsonNull()) && !jsonObj.get("certificate-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-path").toString()));
      }
      if ((jsonObj.get("chain-path") != null && !jsonObj.get("chain-path").isJsonNull()) && !jsonObj.get("chain-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain-path").toString()));
      }
      if ((jsonObj.get("external-key-name") != null && !jsonObj.get("external-key-name").isJsonNull()) && !jsonObj.get("external-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-key-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key-operations") != null && !jsonObj.get("key-operations").isJsonNull() && !jsonObj.get("key-operations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-operations` to be an array in the JSON string but got `%s`", jsonObj.get("key-operations").toString()));
      }
      if ((jsonObj.get("keyring-name") != null && !jsonObj.get("keyring-name").isJsonNull()) && !jsonObj.get("keyring-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyring-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyring-name").toString()));
      }
      if ((jsonObj.get("kms-algorithm") != null && !jsonObj.get("kms-algorithm").isJsonNull()) && !jsonObj.get("kms-algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kms-algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kms-algorithm").toString()));
      }
      if ((jsonObj.get("location-id") != null && !jsonObj.get("location-id").isJsonNull()) && !jsonObj.get("location-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location-id").toString()));
      }
      if ((jsonObj.get("multi-region") != null && !jsonObj.get("multi-region").isJsonNull()) && !jsonObj.get("multi-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multi-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multi-region").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("post-provision-command") != null && !jsonObj.get("post-provision-command").isJsonNull()) && !jsonObj.get("post-provision-command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post-provision-command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post-provision-command").toString()));
      }
      if ((jsonObj.get("private-key-path") != null && !jsonObj.get("private-key-path").isJsonNull()) && !jsonObj.get("private-key-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private-key-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private-key-path").toString()));
      }
      if ((jsonObj.get("project-id") != null && !jsonObj.get("project-id").isJsonNull()) && !jsonObj.get("project-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project-id").toString()));
      }
      if ((jsonObj.get("protection-level") != null && !jsonObj.get("protection-level").isJsonNull()) && !jsonObj.get("protection-level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection-level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection-level").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      if (!jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("tenant-secret-type") != null && !jsonObj.get("tenant-secret-type").isJsonNull()) && !jsonObj.get("tenant-secret-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant-secret-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant-secret-type").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("vault-name") != null && !jsonObj.get("vault-name").isJsonNull()) && !jsonObj.get("vault-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssocTargetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssocTargetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssocTargetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssocTargetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AssocTargetItem>() {
           @Override
           public void write(JsonWriter out, AssocTargetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssocTargetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssocTargetItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssocTargetItem
   * @throws IOException if the JSON string is invalid with respect to AssocTargetItem
   */
  public static AssocTargetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssocTargetItem.class);
  }

  /**
   * Convert an instance of AssocTargetItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

