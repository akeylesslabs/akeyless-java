/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ItemSraStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ItemSraStatus {
  public static final String SERIALIZED_NAME_COUNT_BY_HOST_INFO = "count_by_host_info";
  @SerializedName(SERIALIZED_NAME_COUNT_BY_HOST_INFO)
  @javax.annotation.Nullable
  private Map<String, Long> countByHostInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_COUNT_INFO = "count_info";
  @SerializedName(SERIALIZED_NAME_COUNT_INFO)
  @javax.annotation.Nullable
  private Map<String, Map<String, Long>> countInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_HOSTS_IN_USE = "hosts_in_use";
  @SerializedName(SERIALIZED_NAME_HOSTS_IN_USE)
  @javax.annotation.Nullable
  private List<String> hostsInUse = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_IN_USE = "is_in_use";
  @SerializedName(SERIALIZED_NAME_IS_IN_USE)
  @javax.annotation.Nullable
  private Boolean isInUse;

  public static final String SERIALIZED_NAME_LAST_USED_ITEM = "last_used_item";
  @SerializedName(SERIALIZED_NAME_LAST_USED_ITEM)
  @javax.annotation.Nullable
  private OffsetDateTime lastUsedItem;

  public ItemSraStatus() {
  }

  public ItemSraStatus countByHostInfo(@javax.annotation.Nullable Map<String, Long> countByHostInfo) {
    this.countByHostInfo = countByHostInfo;
    return this;
  }

  public ItemSraStatus putCountByHostInfoItem(String key, Long countByHostInfoItem) {
    if (this.countByHostInfo == null) {
      this.countByHostInfo = new HashMap<>();
    }
    this.countByHostInfo.put(key, countByHostInfoItem);
    return this;
  }

  /**
   * Get countByHostInfo
   * @return countByHostInfo
   */
  @javax.annotation.Nullable
  public Map<String, Long> getCountByHostInfo() {
    return countByHostInfo;
  }

  public void setCountByHostInfo(@javax.annotation.Nullable Map<String, Long> countByHostInfo) {
    this.countByHostInfo = countByHostInfo;
  }


  public ItemSraStatus countInfo(@javax.annotation.Nullable Map<String, Map<String, Long>> countInfo) {
    this.countInfo = countInfo;
    return this;
  }

  public ItemSraStatus putCountInfoItem(String key, Map<String, Long> countInfoItem) {
    if (this.countInfo == null) {
      this.countInfo = new HashMap<>();
    }
    this.countInfo.put(key, countInfoItem);
    return this;
  }

  /**
   * Get countInfo
   * @return countInfo
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Long>> getCountInfo() {
    return countInfo;
  }

  public void setCountInfo(@javax.annotation.Nullable Map<String, Map<String, Long>> countInfo) {
    this.countInfo = countInfo;
  }


  public ItemSraStatus hostsInUse(@javax.annotation.Nullable List<String> hostsInUse) {
    this.hostsInUse = hostsInUse;
    return this;
  }

  public ItemSraStatus addHostsInUseItem(String hostsInUseItem) {
    if (this.hostsInUse == null) {
      this.hostsInUse = new ArrayList<>();
    }
    this.hostsInUse.add(hostsInUseItem);
    return this;
  }

  /**
   * Get hostsInUse
   * @return hostsInUse
   */
  @javax.annotation.Nullable
  public List<String> getHostsInUse() {
    return hostsInUse;
  }

  public void setHostsInUse(@javax.annotation.Nullable List<String> hostsInUse) {
    this.hostsInUse = hostsInUse;
  }


  public ItemSraStatus isInUse(@javax.annotation.Nullable Boolean isInUse) {
    this.isInUse = isInUse;
    return this;
  }

  /**
   * Get isInUse
   * @return isInUse
   */
  @javax.annotation.Nullable
  public Boolean getIsInUse() {
    return isInUse;
  }

  public void setIsInUse(@javax.annotation.Nullable Boolean isInUse) {
    this.isInUse = isInUse;
  }


  public ItemSraStatus lastUsedItem(@javax.annotation.Nullable OffsetDateTime lastUsedItem) {
    this.lastUsedItem = lastUsedItem;
    return this;
  }

  /**
   * Get lastUsedItem
   * @return lastUsedItem
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsedItem() {
    return lastUsedItem;
  }

  public void setLastUsedItem(@javax.annotation.Nullable OffsetDateTime lastUsedItem) {
    this.lastUsedItem = lastUsedItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemSraStatus itemSraStatus = (ItemSraStatus) o;
    return Objects.equals(this.countByHostInfo, itemSraStatus.countByHostInfo) &&
        Objects.equals(this.countInfo, itemSraStatus.countInfo) &&
        Objects.equals(this.hostsInUse, itemSraStatus.hostsInUse) &&
        Objects.equals(this.isInUse, itemSraStatus.isInUse) &&
        Objects.equals(this.lastUsedItem, itemSraStatus.lastUsedItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countByHostInfo, countInfo, hostsInUse, isInUse, lastUsedItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemSraStatus {\n");
    sb.append("    countByHostInfo: ").append(toIndentedString(countByHostInfo)).append("\n");
    sb.append("    countInfo: ").append(toIndentedString(countInfo)).append("\n");
    sb.append("    hostsInUse: ").append(toIndentedString(hostsInUse)).append("\n");
    sb.append("    isInUse: ").append(toIndentedString(isInUse)).append("\n");
    sb.append("    lastUsedItem: ").append(toIndentedString(lastUsedItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count_by_host_info");
    openapiFields.add("count_info");
    openapiFields.add("hosts_in_use");
    openapiFields.add("is_in_use");
    openapiFields.add("last_used_item");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemSraStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemSraStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemSraStatus is not found in the empty JSON string", ItemSraStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemSraStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemSraStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("hosts_in_use") != null && !jsonObj.get("hosts_in_use").isJsonNull() && !jsonObj.get("hosts_in_use").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosts_in_use` to be an array in the JSON string but got `%s`", jsonObj.get("hosts_in_use").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemSraStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemSraStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemSraStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemSraStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemSraStatus>() {
           @Override
           public void write(JsonWriter out, ItemSraStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemSraStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemSraStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemSraStatus
   * @throws IOException if the JSON string is invalid with respect to ItemSraStatus
   */
  public static ItemSraStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemSraStatus.class);
  }

  /**
   * Convert an instance of ItemSraStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

