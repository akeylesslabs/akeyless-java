/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretUpdateRdp is a command that updates rdp dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretUpdateRdp {
  public static final String SERIALIZED_NAME_ALLOW_USER_EXTEND_SESSION = "allow-user-extend-session";
  @SerializedName(SERIALIZED_NAME_ALLOW_USER_EXTEND_SESSION)
  @javax.annotation.Nullable
  private Long allowUserExtendSession;

  public static final String SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE = "custom-username-template";
  @SerializedName(SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE)
  @javax.annotation.Nullable
  private String customUsernameTemplate;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME = "fixed-user-claim-keyname";
  @SerializedName(SERIALIZED_NAME_FIXED_USER_CLAIM_KEYNAME)
  @javax.annotation.Nullable
  private String fixedUserClaimKeyname = "ext_username";

  public static final String SERIALIZED_NAME_FIXED_USER_ONLY = "fixed-user-only";
  @SerializedName(SERIALIZED_NAME_FIXED_USER_ONLY)
  @javax.annotation.Nullable
  private String fixedUserOnly = "false";

  public static final String SERIALIZED_NAME_ITEM_CUSTOM_FIELDS = "item-custom-fields";
  @SerializedName(SERIALIZED_NAME_ITEM_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> itemCustomFields = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_RDP_ADMIN_NAME = "rdp-admin-name";
  @SerializedName(SERIALIZED_NAME_RDP_ADMIN_NAME)
  @javax.annotation.Nullable
  private String rdpAdminName;

  public static final String SERIALIZED_NAME_RDP_ADMIN_PWD = "rdp-admin-pwd";
  @SerializedName(SERIALIZED_NAME_RDP_ADMIN_PWD)
  @javax.annotation.Nullable
  private String rdpAdminPwd;

  public static final String SERIALIZED_NAME_RDP_HOST_NAME = "rdp-host-name";
  @SerializedName(SERIALIZED_NAME_RDP_HOST_NAME)
  @javax.annotation.Nullable
  private String rdpHostName;

  public static final String SERIALIZED_NAME_RDP_HOST_PORT = "rdp-host-port";
  @SerializedName(SERIALIZED_NAME_RDP_HOST_PORT)
  @javax.annotation.Nullable
  private String rdpHostPort = "22";

  public static final String SERIALIZED_NAME_RDP_USER_GROUPS = "rdp-user-groups";
  @SerializedName(SERIALIZED_NAME_RDP_USER_GROUPS)
  @javax.annotation.Nullable
  private String rdpUserGroups;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER = "secure-access-allow-external-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER)
  @javax.annotation.Nullable
  private Boolean secureAccessAllowExternalUser = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DELAY = "secure-access-delay";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DELAY)
  @javax.annotation.Nullable
  private Long secureAccessDelay;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RD_GATEWAY_SERVER = "secure-access-rd-gateway-server";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RD_GATEWAY_SERVER)
  @javax.annotation.Nullable
  private String secureAccessRdGatewayServer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN = "secure-access-rdp-domain";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN)
  @javax.annotation.Nullable
  private String secureAccessRdpDomain;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_USER = "secure-access-rdp-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_USER)
  @javax.annotation.Nullable
  private String secureAccessRdpUser;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public static final String SERIALIZED_NAME_WARN_USER_BEFORE_EXPIRATION = "warn-user-before-expiration";
  @SerializedName(SERIALIZED_NAME_WARN_USER_BEFORE_EXPIRATION)
  @javax.annotation.Nullable
  private Long warnUserBeforeExpiration;

  public DynamicSecretUpdateRdp() {
  }

  public DynamicSecretUpdateRdp allowUserExtendSession(@javax.annotation.Nullable Long allowUserExtendSession) {
    this.allowUserExtendSession = allowUserExtendSession;
    return this;
  }

  /**
   * AllowUserExtendSession
   * @return allowUserExtendSession
   */
  @javax.annotation.Nullable
  public Long getAllowUserExtendSession() {
    return allowUserExtendSession;
  }

  public void setAllowUserExtendSession(@javax.annotation.Nullable Long allowUserExtendSession) {
    this.allowUserExtendSession = allowUserExtendSession;
  }


  public DynamicSecretUpdateRdp customUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
    return this;
  }

  /**
   * Customize how temporary usernames are generated using go template
   * @return customUsernameTemplate
   */
  @javax.annotation.Nullable
  public String getCustomUsernameTemplate() {
    return customUsernameTemplate;
  }

  public void setCustomUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
  }


  public DynamicSecretUpdateRdp deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretUpdateRdp description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretUpdateRdp fixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
    return this;
  }

  /**
   * For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for fixed-user-only&#x3D;true)
   * @return fixedUserClaimKeyname
   */
  @javax.annotation.Nullable
  public String getFixedUserClaimKeyname() {
    return fixedUserClaimKeyname;
  }

  public void setFixedUserClaimKeyname(@javax.annotation.Nullable String fixedUserClaimKeyname) {
    this.fixedUserClaimKeyname = fixedUserClaimKeyname;
  }


  public DynamicSecretUpdateRdp fixedUserOnly(@javax.annotation.Nullable String fixedUserOnly) {
    this.fixedUserOnly = fixedUserOnly;
    return this;
  }

  /**
   * Allow access using externally (IdP) provided username [true/false]
   * @return fixedUserOnly
   */
  @javax.annotation.Nullable
  public String getFixedUserOnly() {
    return fixedUserOnly;
  }

  public void setFixedUserOnly(@javax.annotation.Nullable String fixedUserOnly) {
    this.fixedUserOnly = fixedUserOnly;
  }


  public DynamicSecretUpdateRdp itemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
    return this;
  }

  public DynamicSecretUpdateRdp putItemCustomFieldsItem(String key, String itemCustomFieldsItem) {
    if (this.itemCustomFields == null) {
      this.itemCustomFields = new HashMap<>();
    }
    this.itemCustomFields.put(key, itemCustomFieldsItem);
    return this;
  }

  /**
   * Additional custom fields to associate with the item
   * @return itemCustomFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemCustomFields() {
    return itemCustomFields;
  }

  public void setItemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
  }


  public DynamicSecretUpdateRdp json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretUpdateRdp name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretUpdateRdp newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public DynamicSecretUpdateRdp passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public DynamicSecretUpdateRdp producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretUpdateRdp rdpAdminName(@javax.annotation.Nullable String rdpAdminName) {
    this.rdpAdminName = rdpAdminName;
    return this;
  }

  /**
   * RDP Admin Name
   * @return rdpAdminName
   */
  @javax.annotation.Nullable
  public String getRdpAdminName() {
    return rdpAdminName;
  }

  public void setRdpAdminName(@javax.annotation.Nullable String rdpAdminName) {
    this.rdpAdminName = rdpAdminName;
  }


  public DynamicSecretUpdateRdp rdpAdminPwd(@javax.annotation.Nullable String rdpAdminPwd) {
    this.rdpAdminPwd = rdpAdminPwd;
    return this;
  }

  /**
   * RDP Admin password
   * @return rdpAdminPwd
   */
  @javax.annotation.Nullable
  public String getRdpAdminPwd() {
    return rdpAdminPwd;
  }

  public void setRdpAdminPwd(@javax.annotation.Nullable String rdpAdminPwd) {
    this.rdpAdminPwd = rdpAdminPwd;
  }


  public DynamicSecretUpdateRdp rdpHostName(@javax.annotation.Nullable String rdpHostName) {
    this.rdpHostName = rdpHostName;
    return this;
  }

  /**
   * Hostname
   * @return rdpHostName
   */
  @javax.annotation.Nullable
  public String getRdpHostName() {
    return rdpHostName;
  }

  public void setRdpHostName(@javax.annotation.Nullable String rdpHostName) {
    this.rdpHostName = rdpHostName;
  }


  public DynamicSecretUpdateRdp rdpHostPort(@javax.annotation.Nullable String rdpHostPort) {
    this.rdpHostPort = rdpHostPort;
    return this;
  }

  /**
   * Port
   * @return rdpHostPort
   */
  @javax.annotation.Nullable
  public String getRdpHostPort() {
    return rdpHostPort;
  }

  public void setRdpHostPort(@javax.annotation.Nullable String rdpHostPort) {
    this.rdpHostPort = rdpHostPort;
  }


  public DynamicSecretUpdateRdp rdpUserGroups(@javax.annotation.Nullable String rdpUserGroups) {
    this.rdpUserGroups = rdpUserGroups;
    return this;
  }

  /**
   * Groups
   * @return rdpUserGroups
   */
  @javax.annotation.Nullable
  public String getRdpUserGroups() {
    return rdpUserGroups;
  }

  public void setRdpUserGroups(@javax.annotation.Nullable String rdpUserGroups) {
    this.rdpUserGroups = rdpUserGroups;
  }


  public DynamicSecretUpdateRdp secureAccessAllowExternalUser(@javax.annotation.Nullable Boolean secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
    return this;
  }

  /**
   * Allow providing external user for a domain users
   * @return secureAccessAllowExternalUser
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAllowExternalUser() {
    return secureAccessAllowExternalUser;
  }

  public void setSecureAccessAllowExternalUser(@javax.annotation.Nullable Boolean secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
  }


  public DynamicSecretUpdateRdp secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public DynamicSecretUpdateRdp secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public DynamicSecretUpdateRdp secureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
    return this;
  }

  /**
   * The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
   * @return secureAccessDelay
   */
  @javax.annotation.Nullable
  public Long getSecureAccessDelay() {
    return secureAccessDelay;
  }

  public void setSecureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
  }


  public DynamicSecretUpdateRdp secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public DynamicSecretUpdateRdp secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public DynamicSecretUpdateRdp addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public DynamicSecretUpdateRdp secureAccessRdGatewayServer(@javax.annotation.Nullable String secureAccessRdGatewayServer) {
    this.secureAccessRdGatewayServer = secureAccessRdGatewayServer;
    return this;
  }

  /**
   * RD Gateway server
   * @return secureAccessRdGatewayServer
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdGatewayServer() {
    return secureAccessRdGatewayServer;
  }

  public void setSecureAccessRdGatewayServer(@javax.annotation.Nullable String secureAccessRdGatewayServer) {
    this.secureAccessRdGatewayServer = secureAccessRdGatewayServer;
  }


  public DynamicSecretUpdateRdp secureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
    return this;
  }

  /**
   * Required when the Dynamic Secret is used for a domain user
   * @return secureAccessRdpDomain
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpDomain() {
    return secureAccessRdpDomain;
  }

  public void setSecureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
  }


  public DynamicSecretUpdateRdp secureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
    return this;
  }

  /**
   * Override the RDP Domain username
   * @return secureAccessRdpUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpUser() {
    return secureAccessRdpUser;
  }

  public void setSecureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
  }


  public DynamicSecretUpdateRdp tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretUpdateRdp addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretUpdateRdp targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretUpdateRdp token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretUpdateRdp uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretUpdateRdp userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }


  public DynamicSecretUpdateRdp warnUserBeforeExpiration(@javax.annotation.Nullable Long warnUserBeforeExpiration) {
    this.warnUserBeforeExpiration = warnUserBeforeExpiration;
    return this;
  }

  /**
   * WarnBeforeUserExpiration
   * @return warnUserBeforeExpiration
   */
  @javax.annotation.Nullable
  public Long getWarnUserBeforeExpiration() {
    return warnUserBeforeExpiration;
  }

  public void setWarnUserBeforeExpiration(@javax.annotation.Nullable Long warnUserBeforeExpiration) {
    this.warnUserBeforeExpiration = warnUserBeforeExpiration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretUpdateRdp dynamicSecretUpdateRdp = (DynamicSecretUpdateRdp) o;
    return Objects.equals(this.allowUserExtendSession, dynamicSecretUpdateRdp.allowUserExtendSession) &&
        Objects.equals(this.customUsernameTemplate, dynamicSecretUpdateRdp.customUsernameTemplate) &&
        Objects.equals(this.deleteProtection, dynamicSecretUpdateRdp.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretUpdateRdp.description) &&
        Objects.equals(this.fixedUserClaimKeyname, dynamicSecretUpdateRdp.fixedUserClaimKeyname) &&
        Objects.equals(this.fixedUserOnly, dynamicSecretUpdateRdp.fixedUserOnly) &&
        Objects.equals(this.itemCustomFields, dynamicSecretUpdateRdp.itemCustomFields) &&
        Objects.equals(this.json, dynamicSecretUpdateRdp.json) &&
        Objects.equals(this.name, dynamicSecretUpdateRdp.name) &&
        Objects.equals(this.newName, dynamicSecretUpdateRdp.newName) &&
        Objects.equals(this.passwordLength, dynamicSecretUpdateRdp.passwordLength) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretUpdateRdp.producerEncryptionKeyName) &&
        Objects.equals(this.rdpAdminName, dynamicSecretUpdateRdp.rdpAdminName) &&
        Objects.equals(this.rdpAdminPwd, dynamicSecretUpdateRdp.rdpAdminPwd) &&
        Objects.equals(this.rdpHostName, dynamicSecretUpdateRdp.rdpHostName) &&
        Objects.equals(this.rdpHostPort, dynamicSecretUpdateRdp.rdpHostPort) &&
        Objects.equals(this.rdpUserGroups, dynamicSecretUpdateRdp.rdpUserGroups) &&
        Objects.equals(this.secureAccessAllowExternalUser, dynamicSecretUpdateRdp.secureAccessAllowExternalUser) &&
        Objects.equals(this.secureAccessBastionIssuer, dynamicSecretUpdateRdp.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, dynamicSecretUpdateRdp.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessDelay, dynamicSecretUpdateRdp.secureAccessDelay) &&
        Objects.equals(this.secureAccessEnable, dynamicSecretUpdateRdp.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, dynamicSecretUpdateRdp.secureAccessHost) &&
        Objects.equals(this.secureAccessRdGatewayServer, dynamicSecretUpdateRdp.secureAccessRdGatewayServer) &&
        Objects.equals(this.secureAccessRdpDomain, dynamicSecretUpdateRdp.secureAccessRdpDomain) &&
        Objects.equals(this.secureAccessRdpUser, dynamicSecretUpdateRdp.secureAccessRdpUser) &&
        Objects.equals(this.tags, dynamicSecretUpdateRdp.tags) &&
        Objects.equals(this.targetName, dynamicSecretUpdateRdp.targetName) &&
        Objects.equals(this.token, dynamicSecretUpdateRdp.token) &&
        Objects.equals(this.uidToken, dynamicSecretUpdateRdp.uidToken) &&
        Objects.equals(this.userTtl, dynamicSecretUpdateRdp.userTtl) &&
        Objects.equals(this.warnUserBeforeExpiration, dynamicSecretUpdateRdp.warnUserBeforeExpiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUserExtendSession, customUsernameTemplate, deleteProtection, description, fixedUserClaimKeyname, fixedUserOnly, itemCustomFields, json, name, newName, passwordLength, producerEncryptionKeyName, rdpAdminName, rdpAdminPwd, rdpHostName, rdpHostPort, rdpUserGroups, secureAccessAllowExternalUser, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessDelay, secureAccessEnable, secureAccessHost, secureAccessRdGatewayServer, secureAccessRdpDomain, secureAccessRdpUser, tags, targetName, token, uidToken, userTtl, warnUserBeforeExpiration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretUpdateRdp {\n");
    sb.append("    allowUserExtendSession: ").append(toIndentedString(allowUserExtendSession)).append("\n");
    sb.append("    customUsernameTemplate: ").append(toIndentedString(customUsernameTemplate)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fixedUserClaimKeyname: ").append(toIndentedString(fixedUserClaimKeyname)).append("\n");
    sb.append("    fixedUserOnly: ").append(toIndentedString(fixedUserOnly)).append("\n");
    sb.append("    itemCustomFields: ").append(toIndentedString(itemCustomFields)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    rdpAdminName: ").append(toIndentedString(rdpAdminName)).append("\n");
    sb.append("    rdpAdminPwd: ").append(toIndentedString(rdpAdminPwd)).append("\n");
    sb.append("    rdpHostName: ").append(toIndentedString(rdpHostName)).append("\n");
    sb.append("    rdpHostPort: ").append(toIndentedString(rdpHostPort)).append("\n");
    sb.append("    rdpUserGroups: ").append(toIndentedString(rdpUserGroups)).append("\n");
    sb.append("    secureAccessAllowExternalUser: ").append(toIndentedString(secureAccessAllowExternalUser)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessDelay: ").append(toIndentedString(secureAccessDelay)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessRdGatewayServer: ").append(toIndentedString(secureAccessRdGatewayServer)).append("\n");
    sb.append("    secureAccessRdpDomain: ").append(toIndentedString(secureAccessRdpDomain)).append("\n");
    sb.append("    secureAccessRdpUser: ").append(toIndentedString(secureAccessRdpUser)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("    warnUserBeforeExpiration: ").append(toIndentedString(warnUserBeforeExpiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow-user-extend-session");
    openapiFields.add("custom-username-template");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("fixed-user-claim-keyname");
    openapiFields.add("fixed-user-only");
    openapiFields.add("item-custom-fields");
    openapiFields.add("json");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("password-length");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("rdp-admin-name");
    openapiFields.add("rdp-admin-pwd");
    openapiFields.add("rdp-host-name");
    openapiFields.add("rdp-host-port");
    openapiFields.add("rdp-user-groups");
    openapiFields.add("secure-access-allow-external-user");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-delay");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-rd-gateway-server");
    openapiFields.add("secure-access-rdp-domain");
    openapiFields.add("secure-access-rdp-user");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");
    openapiFields.add("warn-user-before-expiration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretUpdateRdp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretUpdateRdp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretUpdateRdp is not found in the empty JSON string", DynamicSecretUpdateRdp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretUpdateRdp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretUpdateRdp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretUpdateRdp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom-username-template") != null && !jsonObj.get("custom-username-template").isJsonNull()) && !jsonObj.get("custom-username-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-username-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-username-template").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fixed-user-claim-keyname") != null && !jsonObj.get("fixed-user-claim-keyname").isJsonNull()) && !jsonObj.get("fixed-user-claim-keyname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed-user-claim-keyname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed-user-claim-keyname").toString()));
      }
      if ((jsonObj.get("fixed-user-only") != null && !jsonObj.get("fixed-user-only").isJsonNull()) && !jsonObj.get("fixed-user-only").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed-user-only` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed-user-only").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("rdp-admin-name") != null && !jsonObj.get("rdp-admin-name").isJsonNull()) && !jsonObj.get("rdp-admin-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-admin-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-admin-name").toString()));
      }
      if ((jsonObj.get("rdp-admin-pwd") != null && !jsonObj.get("rdp-admin-pwd").isJsonNull()) && !jsonObj.get("rdp-admin-pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-admin-pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-admin-pwd").toString()));
      }
      if ((jsonObj.get("rdp-host-name") != null && !jsonObj.get("rdp-host-name").isJsonNull()) && !jsonObj.get("rdp-host-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-host-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-host-name").toString()));
      }
      if ((jsonObj.get("rdp-host-port") != null && !jsonObj.get("rdp-host-port").isJsonNull()) && !jsonObj.get("rdp-host-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-host-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-host-port").toString()));
      }
      if ((jsonObj.get("rdp-user-groups") != null && !jsonObj.get("rdp-user-groups").isJsonNull()) && !jsonObj.get("rdp-user-groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-user-groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-user-groups").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      if ((jsonObj.get("secure-access-rd-gateway-server") != null && !jsonObj.get("secure-access-rd-gateway-server").isJsonNull()) && !jsonObj.get("secure-access-rd-gateway-server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rd-gateway-server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rd-gateway-server").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-domain") != null && !jsonObj.get("secure-access-rdp-domain").isJsonNull()) && !jsonObj.get("secure-access-rdp-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-domain").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-user") != null && !jsonObj.get("secure-access-rdp-user").isJsonNull()) && !jsonObj.get("secure-access-rdp-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-user").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretUpdateRdp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretUpdateRdp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretUpdateRdp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretUpdateRdp.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretUpdateRdp>() {
           @Override
           public void write(JsonWriter out, DynamicSecretUpdateRdp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretUpdateRdp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretUpdateRdp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretUpdateRdp
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretUpdateRdp
   */
  public static DynamicSecretUpdateRdp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretUpdateRdp.class);
  }

  /**
   * Convert an instance of DynamicSecretUpdateRdp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

