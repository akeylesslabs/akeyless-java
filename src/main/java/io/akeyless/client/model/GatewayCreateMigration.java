/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayCreateMigration is a command that create migration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayCreateMigration {
  public static final String SERIALIZED_NAME_1PASSWORD_EMAIL = "1password-email";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_EMAIL)
  @javax.annotation.Nullable
  private String _1passwordEmail;

  public static final String SERIALIZED_NAME_1PASSWORD_PASSWORD = "1password-password";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_PASSWORD)
  @javax.annotation.Nullable
  private String _1passwordPassword;

  public static final String SERIALIZED_NAME_1PASSWORD_SECRET_KEY = "1password-secret-key";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_SECRET_KEY)
  @javax.annotation.Nullable
  private String _1passwordSecretKey;

  public static final String SERIALIZED_NAME_1PASSWORD_URL = "1password-url";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_URL)
  @javax.annotation.Nullable
  private String _1passwordUrl;

  public static final String SERIALIZED_NAME_1PASSWORD_VAULTS = "1password-vaults";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_VAULTS)
  @javax.annotation.Nullable
  private List<String> _1passwordVaults = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_KEY_DECODED = "ServiceAccountKeyDecoded";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_KEY_DECODED)
  @javax.annotation.Nullable
  private String serviceAccountKeyDecoded;

  public static final String SERIALIZED_NAME_AD_AUTO_ROTATE = "ad-auto-rotate";
  @SerializedName(SERIALIZED_NAME_AD_AUTO_ROTATE)
  @javax.annotation.Nullable
  private String adAutoRotate;

  public static final String SERIALIZED_NAME_AD_COMPUTER_BASE_DN = "ad-computer-base-dn";
  @SerializedName(SERIALIZED_NAME_AD_COMPUTER_BASE_DN)
  @javax.annotation.Nullable
  private String adComputerBaseDn;

  public static final String SERIALIZED_NAME_AD_DISCOVER_SERVICES = "ad-discover-services";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVER_SERVICES)
  @javax.annotation.Nullable
  private String adDiscoverServices = "false";

  public static final String SERIALIZED_NAME_AD_DISCOVERY_TYPES = "ad-discovery-types";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVERY_TYPES)
  @javax.annotation.Nullable
  private List<String> adDiscoveryTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_AD_DOMAIN_NAME = "ad-domain-name";
  @SerializedName(SERIALIZED_NAME_AD_DOMAIN_NAME)
  @javax.annotation.Nullable
  private String adDomainName;

  public static final String SERIALIZED_NAME_AD_DOMAIN_USERS_PATH_TEMPLATE = "ad-domain-users-path-template";
  @SerializedName(SERIALIZED_NAME_AD_DOMAIN_USERS_PATH_TEMPLATE)
  @javax.annotation.Nullable
  private String adDomainUsersPathTemplate;

  public static final String SERIALIZED_NAME_AD_LOCAL_USERS_IGNORE = "ad-local-users-ignore";
  @SerializedName(SERIALIZED_NAME_AD_LOCAL_USERS_IGNORE)
  @javax.annotation.Nullable
  private String adLocalUsersIgnore;

  public static final String SERIALIZED_NAME_AD_LOCAL_USERS_PATH_TEMPLATE = "ad-local-users-path-template";
  @SerializedName(SERIALIZED_NAME_AD_LOCAL_USERS_PATH_TEMPLATE)
  @javax.annotation.Nullable
  private String adLocalUsersPathTemplate;

  public static final String SERIALIZED_NAME_AD_OS_FILTER = "ad-os-filter";
  @SerializedName(SERIALIZED_NAME_AD_OS_FILTER)
  @javax.annotation.Nullable
  private String adOsFilter;

  public static final String SERIALIZED_NAME_AD_ROTATION_HOUR = "ad-rotation-hour";
  @SerializedName(SERIALIZED_NAME_AD_ROTATION_HOUR)
  @javax.annotation.Nullable
  private Integer adRotationHour;

  public static final String SERIALIZED_NAME_AD_ROTATION_INTERVAL = "ad-rotation-interval";
  @SerializedName(SERIALIZED_NAME_AD_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private Integer adRotationInterval;

  public static final String SERIALIZED_NAME_AD_SRA_ENABLE_RDP = "ad-sra-enable-rdp";
  @SerializedName(SERIALIZED_NAME_AD_SRA_ENABLE_RDP)
  @javax.annotation.Nullable
  private String adSraEnableRdp;

  public static final String SERIALIZED_NAME_AD_SSH_PORT = "ad-ssh-port";
  @SerializedName(SERIALIZED_NAME_AD_SSH_PORT)
  @javax.annotation.Nullable
  private String adSshPort = "22";

  public static final String SERIALIZED_NAME_AD_TARGET_FORMAT = "ad-target-format";
  @SerializedName(SERIALIZED_NAME_AD_TARGET_FORMAT)
  @javax.annotation.Nullable
  private String adTargetFormat = "linked";

  public static final String SERIALIZED_NAME_AD_TARGET_NAME = "ad-target-name";
  @SerializedName(SERIALIZED_NAME_AD_TARGET_NAME)
  @javax.annotation.Nullable
  private String adTargetName;

  public static final String SERIALIZED_NAME_AD_TARGETS_PATH_TEMPLATE = "ad-targets-path-template";
  @SerializedName(SERIALIZED_NAME_AD_TARGETS_PATH_TEMPLATE)
  @javax.annotation.Nullable
  private String adTargetsPathTemplate;

  public static final String SERIALIZED_NAME_AD_TARGETS_TYPE = "ad-targets-type";
  @SerializedName(SERIALIZED_NAME_AD_TARGETS_TYPE)
  @javax.annotation.Nullable
  private String adTargetsType = "windows";

  public static final String SERIALIZED_NAME_AD_USER_BASE_DN = "ad-user-base-dn";
  @SerializedName(SERIALIZED_NAME_AD_USER_BASE_DN)
  @javax.annotation.Nullable
  private String adUserBaseDn;

  public static final String SERIALIZED_NAME_AD_USER_GROUPS = "ad-user-groups";
  @SerializedName(SERIALIZED_NAME_AD_USER_GROUPS)
  @javax.annotation.Nullable
  private String adUserGroups;

  public static final String SERIALIZED_NAME_AD_WINRM_OVER_HTTP = "ad-winrm-over-http";
  @SerializedName(SERIALIZED_NAME_AD_WINRM_OVER_HTTP)
  @javax.annotation.Nullable
  private String adWinrmOverHttp = "false";

  public static final String SERIALIZED_NAME_AD_WINRM_PORT = "ad-winrm-port";
  @SerializedName(SERIALIZED_NAME_AD_WINRM_PORT)
  @javax.annotation.Nullable
  private String adWinrmPort = "5986";

  public static final String SERIALIZED_NAME_AD_DISCOVER_LOCAL_USERS = "ad_discover_local_users";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVER_LOCAL_USERS)
  @javax.annotation.Nullable
  private String adDiscoverLocalUsers;

  public static final String SERIALIZED_NAME_AWS_KEY = "aws-key";
  @SerializedName(SERIALIZED_NAME_AWS_KEY)
  @javax.annotation.Nullable
  private String awsKey;

  public static final String SERIALIZED_NAME_AWS_KEY_ID = "aws-key-id";
  @SerializedName(SERIALIZED_NAME_AWS_KEY_ID)
  @javax.annotation.Nullable
  private String awsKeyId;

  public static final String SERIALIZED_NAME_AWS_REGION = "aws-region";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  @javax.annotation.Nullable
  private String awsRegion = "us-east-2";

  public static final String SERIALIZED_NAME_AZURE_CLIENT_ID = "azure-client-id";
  @SerializedName(SERIALIZED_NAME_AZURE_CLIENT_ID)
  @javax.annotation.Nullable
  private String azureClientId;

  public static final String SERIALIZED_NAME_AZURE_KV_NAME = "azure-kv-name";
  @SerializedName(SERIALIZED_NAME_AZURE_KV_NAME)
  @javax.annotation.Nullable
  private String azureKvName;

  public static final String SERIALIZED_NAME_AZURE_SECRET = "azure-secret";
  @SerializedName(SERIALIZED_NAME_AZURE_SECRET)
  @javax.annotation.Nullable
  private String azureSecret;

  public static final String SERIALIZED_NAME_AZURE_TENANT_ID = "azure-tenant-id";
  @SerializedName(SERIALIZED_NAME_AZURE_TENANT_ID)
  @javax.annotation.Nullable
  private String azureTenantId;

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  @javax.annotation.Nullable
  private String gcpKey;

  public static final String SERIALIZED_NAME_HASHI_JSON = "hashi-json";
  @SerializedName(SERIALIZED_NAME_HASHI_JSON)
  @javax.annotation.Nullable
  private String hashiJson = "true";

  public static final String SERIALIZED_NAME_HASHI_NS = "hashi-ns";
  @SerializedName(SERIALIZED_NAME_HASHI_NS)
  @javax.annotation.Nullable
  private List<String> hashiNs = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASHI_TOKEN = "hashi-token";
  @SerializedName(SERIALIZED_NAME_HASHI_TOKEN)
  @javax.annotation.Nullable
  private String hashiToken;

  public static final String SERIALIZED_NAME_HASHI_URL = "hashi-url";
  @SerializedName(SERIALIZED_NAME_HASHI_URL)
  @javax.annotation.Nullable
  private String hashiUrl;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_K8S_CA_CERTIFICATE = "k8s-ca-certificate";
  @SerializedName(SERIALIZED_NAME_K8S_CA_CERTIFICATE)
  @javax.annotation.Nullable
  private List<Integer> k8sCaCertificate = new ArrayList<>();

  public static final String SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE = "k8s-client-certificate";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE)
  @javax.annotation.Nullable
  private List<Integer> k8sClientCertificate = new ArrayList<>();

  public static final String SERIALIZED_NAME_K8S_CLIENT_KEY = "k8s-client-key";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_KEY)
  @javax.annotation.Nullable
  private List<Integer> k8sClientKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_K8S_NAMESPACE = "k8s-namespace";
  @SerializedName(SERIALIZED_NAME_K8S_NAMESPACE)
  @javax.annotation.Nullable
  private String k8sNamespace;

  public static final String SERIALIZED_NAME_K8S_PASSWORD = "k8s-password";
  @SerializedName(SERIALIZED_NAME_K8S_PASSWORD)
  @javax.annotation.Nullable
  private String k8sPassword;

  public static final String SERIALIZED_NAME_K8S_SKIP_SYSTEM = "k8s-skip-system";
  @SerializedName(SERIALIZED_NAME_K8S_SKIP_SYSTEM)
  @javax.annotation.Nullable
  private Boolean k8sSkipSystem;

  public static final String SERIALIZED_NAME_K8S_TOKEN = "k8s-token";
  @SerializedName(SERIALIZED_NAME_K8S_TOKEN)
  @javax.annotation.Nullable
  private String k8sToken;

  public static final String SERIALIZED_NAME_K8S_URL = "k8s-url";
  @SerializedName(SERIALIZED_NAME_K8S_URL)
  @javax.annotation.Nullable
  private String k8sUrl;

  public static final String SERIALIZED_NAME_K8S_USERNAME = "k8s-username";
  @SerializedName(SERIALIZED_NAME_K8S_USERNAME)
  @javax.annotation.Nullable
  private String k8sUsername;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROTECTION_KEY = "protection-key";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY)
  @javax.annotation.Nullable
  private String protectionKey;

  public static final String SERIALIZED_NAME_SI_AUTO_ROTATE = "si-auto-rotate";
  @SerializedName(SERIALIZED_NAME_SI_AUTO_ROTATE)
  @javax.annotation.Nullable
  private String siAutoRotate;

  public static final String SERIALIZED_NAME_SI_ROTATION_HOUR = "si-rotation-hour";
  @SerializedName(SERIALIZED_NAME_SI_ROTATION_HOUR)
  @javax.annotation.Nullable
  private Integer siRotationHour;

  public static final String SERIALIZED_NAME_SI_ROTATION_INTERVAL = "si-rotation-interval";
  @SerializedName(SERIALIZED_NAME_SI_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private Integer siRotationInterval;

  public static final String SERIALIZED_NAME_SI_SRA_ENABLE_RDP = "si-sra-enable-rdp";
  @SerializedName(SERIALIZED_NAME_SI_SRA_ENABLE_RDP)
  @javax.annotation.Nullable
  private String siSraEnableRdp = "false";

  public static final String SERIALIZED_NAME_SI_TARGET_NAME = "si-target-name";
  @SerializedName(SERIALIZED_NAME_SI_TARGET_NAME)
  @javax.annotation.Nonnull
  private String siTargetName;

  public static final String SERIALIZED_NAME_SI_USER_GROUPS = "si-user-groups";
  @SerializedName(SERIALIZED_NAME_SI_USER_GROUPS)
  @javax.annotation.Nullable
  private String siUserGroups;

  public static final String SERIALIZED_NAME_SI_USERS_IGNORE = "si-users-ignore";
  @SerializedName(SERIALIZED_NAME_SI_USERS_IGNORE)
  @javax.annotation.Nullable
  private String siUsersIgnore;

  public static final String SERIALIZED_NAME_SI_USERS_PATH_TEMPLATE = "si-users-path-template";
  @SerializedName(SERIALIZED_NAME_SI_USERS_PATH_TEMPLATE)
  @javax.annotation.Nonnull
  private String siUsersPathTemplate;

  public static final String SERIALIZED_NAME_TARGET_LOCATION = "target-location";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATION)
  @javax.annotation.Nonnull
  private String targetLocation;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public GatewayCreateMigration() {
  }

  public GatewayCreateMigration _1passwordEmail(@javax.annotation.Nullable String _1passwordEmail) {
    this._1passwordEmail = _1passwordEmail;
    return this;
  }

  /**
   * 1Password user email to connect to the API
   * @return _1passwordEmail
   */
  @javax.annotation.Nullable
  public String get1passwordEmail() {
    return _1passwordEmail;
  }

  public void set1passwordEmail(@javax.annotation.Nullable String _1passwordEmail) {
    this._1passwordEmail = _1passwordEmail;
  }


  public GatewayCreateMigration _1passwordPassword(@javax.annotation.Nullable String _1passwordPassword) {
    this._1passwordPassword = _1passwordPassword;
    return this;
  }

  /**
   * 1Password user password to connect to the API
   * @return _1passwordPassword
   */
  @javax.annotation.Nullable
  public String get1passwordPassword() {
    return _1passwordPassword;
  }

  public void set1passwordPassword(@javax.annotation.Nullable String _1passwordPassword) {
    this._1passwordPassword = _1passwordPassword;
  }


  public GatewayCreateMigration _1passwordSecretKey(@javax.annotation.Nullable String _1passwordSecretKey) {
    this._1passwordSecretKey = _1passwordSecretKey;
    return this;
  }

  /**
   * 1Password user secret key to connect to the API
   * @return _1passwordSecretKey
   */
  @javax.annotation.Nullable
  public String get1passwordSecretKey() {
    return _1passwordSecretKey;
  }

  public void set1passwordSecretKey(@javax.annotation.Nullable String _1passwordSecretKey) {
    this._1passwordSecretKey = _1passwordSecretKey;
  }


  public GatewayCreateMigration _1passwordUrl(@javax.annotation.Nullable String _1passwordUrl) {
    this._1passwordUrl = _1passwordUrl;
    return this;
  }

  /**
   * 1Password api container url
   * @return _1passwordUrl
   */
  @javax.annotation.Nullable
  public String get1passwordUrl() {
    return _1passwordUrl;
  }

  public void set1passwordUrl(@javax.annotation.Nullable String _1passwordUrl) {
    this._1passwordUrl = _1passwordUrl;
  }


  public GatewayCreateMigration _1passwordVaults(@javax.annotation.Nullable List<String> _1passwordVaults) {
    this._1passwordVaults = _1passwordVaults;
    return this;
  }

  public GatewayCreateMigration add1passwordVaultsItem(String _1passwordVaultsItem) {
    if (this._1passwordVaults == null) {
      this._1passwordVaults = new ArrayList<>();
    }
    this._1passwordVaults.add(_1passwordVaultsItem);
    return this;
  }

  /**
   * 1Password list of vault to get the items from
   * @return _1passwordVaults
   */
  @javax.annotation.Nullable
  public List<String> get1passwordVaults() {
    return _1passwordVaults;
  }

  public void set1passwordVaults(@javax.annotation.Nullable List<String> _1passwordVaults) {
    this._1passwordVaults = _1passwordVaults;
  }


  public GatewayCreateMigration serviceAccountKeyDecoded(@javax.annotation.Nullable String serviceAccountKeyDecoded) {
    this.serviceAccountKeyDecoded = serviceAccountKeyDecoded;
    return this;
  }

  /**
   * Get serviceAccountKeyDecoded
   * @return serviceAccountKeyDecoded
   */
  @javax.annotation.Nullable
  public String getServiceAccountKeyDecoded() {
    return serviceAccountKeyDecoded;
  }

  public void setServiceAccountKeyDecoded(@javax.annotation.Nullable String serviceAccountKeyDecoded) {
    this.serviceAccountKeyDecoded = serviceAccountKeyDecoded;
  }


  public GatewayCreateMigration adAutoRotate(@javax.annotation.Nullable String adAutoRotate) {
    this.adAutoRotate = adAutoRotate;
    return this;
  }

  /**
   * Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --ad-rotation-interval and --ad-rotation-hour parameters (Relevant only for Active Directory migration)
   * @return adAutoRotate
   */
  @javax.annotation.Nullable
  public String getAdAutoRotate() {
    return adAutoRotate;
  }

  public void setAdAutoRotate(@javax.annotation.Nullable String adAutoRotate) {
    this.adAutoRotate = adAutoRotate;
  }


  public GatewayCreateMigration adComputerBaseDn(@javax.annotation.Nullable String adComputerBaseDn) {
    this.adComputerBaseDn = adComputerBaseDn;
    return this;
  }

  /**
   * Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN&#x3D;Computers,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
   * @return adComputerBaseDn
   */
  @javax.annotation.Nullable
  public String getAdComputerBaseDn() {
    return adComputerBaseDn;
  }

  public void setAdComputerBaseDn(@javax.annotation.Nullable String adComputerBaseDn) {
    this.adComputerBaseDn = adComputerBaseDn;
  }


  public GatewayCreateMigration adDiscoverServices(@javax.annotation.Nullable String adDiscoverServices) {
    this.adDiscoverServices = adDiscoverServices;
    return this;
  }

  /**
   * Enable/Disable discovery of Windows services from each domain server as part of the SSH/Windows Rotated Secrets. Default is false. (Relevant only for Active Directory migration)
   * @return adDiscoverServices
   */
  @javax.annotation.Nullable
  public String getAdDiscoverServices() {
    return adDiscoverServices;
  }

  public void setAdDiscoverServices(@javax.annotation.Nullable String adDiscoverServices) {
    this.adDiscoverServices = adDiscoverServices;
  }


  public GatewayCreateMigration adDiscoveryTypes(@javax.annotation.Nullable List<String> adDiscoveryTypes) {
    this.adDiscoveryTypes = adDiscoveryTypes;
    return this;
  }

  public GatewayCreateMigration addAdDiscoveryTypesItem(String adDiscoveryTypesItem) {
    if (this.adDiscoveryTypes == null) {
      this.adDiscoveryTypes = new ArrayList<>();
    }
    this.adDiscoveryTypes.add(adDiscoveryTypesItem);
    return this;
  }

  /**
   * Set migration discovery types (domain-users, computers, local-users). (Relevant only for Active Directory migration)
   * @return adDiscoveryTypes
   */
  @javax.annotation.Nullable
  public List<String> getAdDiscoveryTypes() {
    return adDiscoveryTypes;
  }

  public void setAdDiscoveryTypes(@javax.annotation.Nullable List<String> adDiscoveryTypes) {
    this.adDiscoveryTypes = adDiscoveryTypes;
  }


  public GatewayCreateMigration adDomainName(@javax.annotation.Nullable String adDomainName) {
    this.adDomainName = adDomainName;
    return this;
  }

  /**
   * Active Directory Domain Name (Relevant only for Active Directory migration)
   * @return adDomainName
   */
  @javax.annotation.Nullable
  public String getAdDomainName() {
    return adDomainName;
  }

  public void setAdDomainName(@javax.annotation.Nullable String adDomainName) {
    this.adDomainName = adDomainName;
  }


  public GatewayCreateMigration adDomainUsersPathTemplate(@javax.annotation.Nullable String adDomainUsersPathTemplate) {
    this.adDomainUsersPathTemplate = adDomainUsersPathTemplate;
    return this;
  }

  /**
   * Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration)
   * @return adDomainUsersPathTemplate
   */
  @javax.annotation.Nullable
  public String getAdDomainUsersPathTemplate() {
    return adDomainUsersPathTemplate;
  }

  public void setAdDomainUsersPathTemplate(@javax.annotation.Nullable String adDomainUsersPathTemplate) {
    this.adDomainUsersPathTemplate = adDomainUsersPathTemplate;
  }


  public GatewayCreateMigration adLocalUsersIgnore(@javax.annotation.Nullable String adLocalUsersIgnore) {
    this.adLocalUsersIgnore = adLocalUsersIgnore;
    return this;
  }

  /**
   * Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration)
   * @return adLocalUsersIgnore
   */
  @javax.annotation.Nullable
  public String getAdLocalUsersIgnore() {
    return adLocalUsersIgnore;
  }

  public void setAdLocalUsersIgnore(@javax.annotation.Nullable String adLocalUsersIgnore) {
    this.adLocalUsersIgnore = adLocalUsersIgnore;
  }


  public GatewayCreateMigration adLocalUsersPathTemplate(@javax.annotation.Nullable String adLocalUsersPathTemplate) {
    this.adLocalUsersPathTemplate = adLocalUsersPathTemplate;
    return this;
  }

  /**
   * Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration)
   * @return adLocalUsersPathTemplate
   */
  @javax.annotation.Nullable
  public String getAdLocalUsersPathTemplate() {
    return adLocalUsersPathTemplate;
  }

  public void setAdLocalUsersPathTemplate(@javax.annotation.Nullable String adLocalUsersPathTemplate) {
    this.adLocalUsersPathTemplate = adLocalUsersPathTemplate;
  }


  public GatewayCreateMigration adOsFilter(@javax.annotation.Nullable String adOsFilter) {
    this.adOsFilter = adOsFilter;
    return this;
  }

  /**
   * Filter by Operating System to run the migration, can be used with wildcards, e.g. SRV20* (Relevant only for Active Directory migration)
   * @return adOsFilter
   */
  @javax.annotation.Nullable
  public String getAdOsFilter() {
    return adOsFilter;
  }

  public void setAdOsFilter(@javax.annotation.Nullable String adOsFilter) {
    this.adOsFilter = adOsFilter;
  }


  public GatewayCreateMigration adRotationHour(@javax.annotation.Nullable Integer adRotationHour) {
    this.adRotationHour = adRotationHour;
    return this;
  }

  /**
   * The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration)
   * @return adRotationHour
   */
  @javax.annotation.Nullable
  public Integer getAdRotationHour() {
    return adRotationHour;
  }

  public void setAdRotationHour(@javax.annotation.Nullable Integer adRotationHour) {
    this.adRotationHour = adRotationHour;
  }


  public GatewayCreateMigration adRotationInterval(@javax.annotation.Nullable Integer adRotationInterval) {
    this.adRotationInterval = adRotationInterval;
    return this;
  }

  /**
   * The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration)
   * @return adRotationInterval
   */
  @javax.annotation.Nullable
  public Integer getAdRotationInterval() {
    return adRotationInterval;
  }

  public void setAdRotationInterval(@javax.annotation.Nullable Integer adRotationInterval) {
    this.adRotationInterval = adRotationInterval;
  }


  public GatewayCreateMigration adSraEnableRdp(@javax.annotation.Nullable String adSraEnableRdp) {
    this.adSraEnableRdp = adSraEnableRdp;
    return this;
  }

  /**
   * Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration)
   * @return adSraEnableRdp
   */
  @javax.annotation.Nullable
  public String getAdSraEnableRdp() {
    return adSraEnableRdp;
  }

  public void setAdSraEnableRdp(@javax.annotation.Nullable String adSraEnableRdp) {
    this.adSraEnableRdp = adSraEnableRdp;
  }


  public GatewayCreateMigration adSshPort(@javax.annotation.Nullable String adSshPort) {
    this.adSshPort = adSshPort;
    return this;
  }

  /**
   * Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration)
   * @return adSshPort
   */
  @javax.annotation.Nullable
  public String getAdSshPort() {
    return adSshPort;
  }

  public void setAdSshPort(@javax.annotation.Nullable String adSshPort) {
    this.adSshPort = adSshPort;
  }


  public GatewayCreateMigration adTargetFormat(@javax.annotation.Nullable String adTargetFormat) {
    this.adTargetFormat = adTargetFormat;
    return this;
  }

  /**
   * Relevant only for ad-discovery-types&#x3D;computers. For linked, all computers will be migrated into a linked target(s). if set with regular, the migration will create a target for each computer.
   * @return adTargetFormat
   */
  @javax.annotation.Nullable
  public String getAdTargetFormat() {
    return adTargetFormat;
  }

  public void setAdTargetFormat(@javax.annotation.Nullable String adTargetFormat) {
    this.adTargetFormat = adTargetFormat;
  }


  public GatewayCreateMigration adTargetName(@javax.annotation.Nullable String adTargetName) {
    this.adTargetName = adTargetName;
    return this;
  }

  /**
   * Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration)
   * @return adTargetName
   */
  @javax.annotation.Nullable
  public String getAdTargetName() {
    return adTargetName;
  }

  public void setAdTargetName(@javax.annotation.Nullable String adTargetName) {
    this.adTargetName = adTargetName;
  }


  public GatewayCreateMigration adTargetsPathTemplate(@javax.annotation.Nullable String adTargetsPathTemplate) {
    this.adTargetsPathTemplate = adTargetsPathTemplate;
    return this;
  }

  /**
   * Path location template for migrating domain servers as SSH/Windows Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration)
   * @return adTargetsPathTemplate
   */
  @javax.annotation.Nullable
  public String getAdTargetsPathTemplate() {
    return adTargetsPathTemplate;
  }

  public void setAdTargetsPathTemplate(@javax.annotation.Nullable String adTargetsPathTemplate) {
    this.adTargetsPathTemplate = adTargetsPathTemplate;
  }


  public GatewayCreateMigration adTargetsType(@javax.annotation.Nullable String adTargetsType) {
    this.adTargetsType = adTargetsType;
    return this;
  }

  /**
   * Set the target type of the domain servers [ssh/windows](Relevant only for Active Directory migration)
   * @return adTargetsType
   */
  @javax.annotation.Nullable
  public String getAdTargetsType() {
    return adTargetsType;
  }

  public void setAdTargetsType(@javax.annotation.Nullable String adTargetsType) {
    this.adTargetsType = adTargetsType;
  }


  public GatewayCreateMigration adUserBaseDn(@javax.annotation.Nullable String adUserBaseDn) {
    this.adUserBaseDn = adUserBaseDn;
    return this;
  }

  /**
   * Distinguished Name of User objects to search in Active Directory, e.g.: CN&#x3D;Users,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
   * @return adUserBaseDn
   */
  @javax.annotation.Nullable
  public String getAdUserBaseDn() {
    return adUserBaseDn;
  }

  public void setAdUserBaseDn(@javax.annotation.Nullable String adUserBaseDn) {
    this.adUserBaseDn = adUserBaseDn;
  }


  public GatewayCreateMigration adUserGroups(@javax.annotation.Nullable String adUserGroups) {
    this.adUserGroups = adUserGroups;
    return this;
  }

  /**
   * Comma-separated list of domain groups from which privileged domain users will be migrated. If empty, migrate all users based on the --ad-user-base-dn (Relevant only for Active Directory migration)
   * @return adUserGroups
   */
  @javax.annotation.Nullable
  public String getAdUserGroups() {
    return adUserGroups;
  }

  public void setAdUserGroups(@javax.annotation.Nullable String adUserGroups) {
    this.adUserGroups = adUserGroups;
  }


  public GatewayCreateMigration adWinrmOverHttp(@javax.annotation.Nullable String adWinrmOverHttp) {
    this.adWinrmOverHttp = adWinrmOverHttp;
    return this;
  }

  /**
   * Use WinRM over HTTP, by default runs over HTTPS
   * @return adWinrmOverHttp
   */
  @javax.annotation.Nullable
  public String getAdWinrmOverHttp() {
    return adWinrmOverHttp;
  }

  public void setAdWinrmOverHttp(@javax.annotation.Nullable String adWinrmOverHttp) {
    this.adWinrmOverHttp = adWinrmOverHttp;
  }


  public GatewayCreateMigration adWinrmPort(@javax.annotation.Nullable String adWinrmPort) {
    this.adWinrmPort = adWinrmPort;
    return this;
  }

  /**
   * Set the WinRM Port for further connection to the domain servers. Default is 5986 (Relevant only for Active Directory migration)
   * @return adWinrmPort
   */
  @javax.annotation.Nullable
  public String getAdWinrmPort() {
    return adWinrmPort;
  }

  public void setAdWinrmPort(@javax.annotation.Nullable String adWinrmPort) {
    this.adWinrmPort = adWinrmPort;
  }


  public GatewayCreateMigration adDiscoverLocalUsers(@javax.annotation.Nullable String adDiscoverLocalUsers) {
    this.adDiscoverLocalUsers = adDiscoverLocalUsers;
    return this;
  }

  /**
   * Enable/Disable discovery of local users from each domain server and migrate them as SSH/Windows Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration) Deprecated: use AdDiscoverTypes
   * @return adDiscoverLocalUsers
   */
  @javax.annotation.Nullable
  public String getAdDiscoverLocalUsers() {
    return adDiscoverLocalUsers;
  }

  public void setAdDiscoverLocalUsers(@javax.annotation.Nullable String adDiscoverLocalUsers) {
    this.adDiscoverLocalUsers = adDiscoverLocalUsers;
  }


  public GatewayCreateMigration awsKey(@javax.annotation.Nullable String awsKey) {
    this.awsKey = awsKey;
    return this;
  }

  /**
   * AWS Secret Access Key (relevant only for AWS migration)
   * @return awsKey
   */
  @javax.annotation.Nullable
  public String getAwsKey() {
    return awsKey;
  }

  public void setAwsKey(@javax.annotation.Nullable String awsKey) {
    this.awsKey = awsKey;
  }


  public GatewayCreateMigration awsKeyId(@javax.annotation.Nullable String awsKeyId) {
    this.awsKeyId = awsKeyId;
    return this;
  }

  /**
   * AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)
   * @return awsKeyId
   */
  @javax.annotation.Nullable
  public String getAwsKeyId() {
    return awsKeyId;
  }

  public void setAwsKeyId(@javax.annotation.Nullable String awsKeyId) {
    this.awsKeyId = awsKeyId;
  }


  public GatewayCreateMigration awsRegion(@javax.annotation.Nullable String awsRegion) {
    this.awsRegion = awsRegion;
    return this;
  }

  /**
   * AWS region of the required Secrets Manager (relevant only for AWS migration)
   * @return awsRegion
   */
  @javax.annotation.Nullable
  public String getAwsRegion() {
    return awsRegion;
  }

  public void setAwsRegion(@javax.annotation.Nullable String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public GatewayCreateMigration azureClientId(@javax.annotation.Nullable String azureClientId) {
    this.azureClientId = azureClientId;
    return this;
  }

  /**
   * Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)
   * @return azureClientId
   */
  @javax.annotation.Nullable
  public String getAzureClientId() {
    return azureClientId;
  }

  public void setAzureClientId(@javax.annotation.Nullable String azureClientId) {
    this.azureClientId = azureClientId;
  }


  public GatewayCreateMigration azureKvName(@javax.annotation.Nullable String azureKvName) {
    this.azureKvName = azureKvName;
    return this;
  }

  /**
   * Azure Key Vault Name (relevant only for Azure Key Vault migration)
   * @return azureKvName
   */
  @javax.annotation.Nullable
  public String getAzureKvName() {
    return azureKvName;
  }

  public void setAzureKvName(@javax.annotation.Nullable String azureKvName) {
    this.azureKvName = azureKvName;
  }


  public GatewayCreateMigration azureSecret(@javax.annotation.Nullable String azureSecret) {
    this.azureSecret = azureSecret;
    return this;
  }

  /**
   * Azure Key Vault secret (relevant only for Azure Key Vault migration)
   * @return azureSecret
   */
  @javax.annotation.Nullable
  public String getAzureSecret() {
    return azureSecret;
  }

  public void setAzureSecret(@javax.annotation.Nullable String azureSecret) {
    this.azureSecret = azureSecret;
  }


  public GatewayCreateMigration azureTenantId(@javax.annotation.Nullable String azureTenantId) {
    this.azureTenantId = azureTenantId;
    return this;
  }

  /**
   * Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)
   * @return azureTenantId
   */
  @javax.annotation.Nullable
  public String getAzureTenantId() {
    return azureTenantId;
  }

  public void setAzureTenantId(@javax.annotation.Nullable String azureTenantId) {
    this.azureTenantId = azureTenantId;
  }


  public GatewayCreateMigration gcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
    return this;
  }

  /**
   * Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)
   * @return gcpKey
   */
  @javax.annotation.Nullable
  public String getGcpKey() {
    return gcpKey;
  }

  public void setGcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public GatewayCreateMigration hashiJson(@javax.annotation.Nullable String hashiJson) {
    this.hashiJson = hashiJson;
    return this;
  }

  /**
   * Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration) [true/false]
   * @return hashiJson
   */
  @javax.annotation.Nullable
  public String getHashiJson() {
    return hashiJson;
  }

  public void setHashiJson(@javax.annotation.Nullable String hashiJson) {
    this.hashiJson = hashiJson;
  }


  public GatewayCreateMigration hashiNs(@javax.annotation.Nullable List<String> hashiNs) {
    this.hashiNs = hashiNs;
    return this;
  }

  public GatewayCreateMigration addHashiNsItem(String hashiNsItem) {
    if (this.hashiNs == null) {
      this.hashiNs = new ArrayList<>();
    }
    this.hashiNs.add(hashiNsItem);
    return this;
  }

  /**
   * HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)
   * @return hashiNs
   */
  @javax.annotation.Nullable
  public List<String> getHashiNs() {
    return hashiNs;
  }

  public void setHashiNs(@javax.annotation.Nullable List<String> hashiNs) {
    this.hashiNs = hashiNs;
  }


  public GatewayCreateMigration hashiToken(@javax.annotation.Nullable String hashiToken) {
    this.hashiToken = hashiToken;
    return this;
  }

  /**
   * HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)
   * @return hashiToken
   */
  @javax.annotation.Nullable
  public String getHashiToken() {
    return hashiToken;
  }

  public void setHashiToken(@javax.annotation.Nullable String hashiToken) {
    this.hashiToken = hashiToken;
  }


  public GatewayCreateMigration hashiUrl(@javax.annotation.Nullable String hashiUrl) {
    this.hashiUrl = hashiUrl;
    return this;
  }

  /**
   * HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)
   * @return hashiUrl
   */
  @javax.annotation.Nullable
  public String getHashiUrl() {
    return hashiUrl;
  }

  public void setHashiUrl(@javax.annotation.Nullable String hashiUrl) {
    this.hashiUrl = hashiUrl;
  }


  public GatewayCreateMigration json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayCreateMigration k8sCaCertificate(@javax.annotation.Nullable List<Integer> k8sCaCertificate) {
    this.k8sCaCertificate = k8sCaCertificate;
    return this;
  }

  public GatewayCreateMigration addK8sCaCertificateItem(Integer k8sCaCertificateItem) {
    if (this.k8sCaCertificate == null) {
      this.k8sCaCertificate = new ArrayList<>();
    }
    this.k8sCaCertificate.add(k8sCaCertificateItem);
    return this;
  }

  /**
   * For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sCaCertificate
   */
  @javax.annotation.Nullable
  public List<Integer> getK8sCaCertificate() {
    return k8sCaCertificate;
  }

  public void setK8sCaCertificate(@javax.annotation.Nullable List<Integer> k8sCaCertificate) {
    this.k8sCaCertificate = k8sCaCertificate;
  }


  public GatewayCreateMigration k8sClientCertificate(@javax.annotation.Nullable List<Integer> k8sClientCertificate) {
    this.k8sClientCertificate = k8sClientCertificate;
    return this;
  }

  public GatewayCreateMigration addK8sClientCertificateItem(Integer k8sClientCertificateItem) {
    if (this.k8sClientCertificate == null) {
      this.k8sClientCertificate = new ArrayList<>();
    }
    this.k8sClientCertificate.add(k8sClientCertificateItem);
    return this;
  }

  /**
   * K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sClientCertificate
   */
  @javax.annotation.Nullable
  public List<Integer> getK8sClientCertificate() {
    return k8sClientCertificate;
  }

  public void setK8sClientCertificate(@javax.annotation.Nullable List<Integer> k8sClientCertificate) {
    this.k8sClientCertificate = k8sClientCertificate;
  }


  public GatewayCreateMigration k8sClientKey(@javax.annotation.Nullable List<Integer> k8sClientKey) {
    this.k8sClientKey = k8sClientKey;
    return this;
  }

  public GatewayCreateMigration addK8sClientKeyItem(Integer k8sClientKeyItem) {
    if (this.k8sClientKey == null) {
      this.k8sClientKey = new ArrayList<>();
    }
    this.k8sClientKey.add(k8sClientKeyItem);
    return this;
  }

  /**
   * K8s Client key (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sClientKey
   */
  @javax.annotation.Nullable
  public List<Integer> getK8sClientKey() {
    return k8sClientKey;
  }

  public void setK8sClientKey(@javax.annotation.Nullable List<Integer> k8sClientKey) {
    this.k8sClientKey = k8sClientKey;
  }


  public GatewayCreateMigration k8sNamespace(@javax.annotation.Nullable String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
    return this;
  }

  /**
   * K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)
   * @return k8sNamespace
   */
  @javax.annotation.Nullable
  public String getK8sNamespace() {
    return k8sNamespace;
  }

  public void setK8sNamespace(@javax.annotation.Nullable String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
  }


  public GatewayCreateMigration k8sPassword(@javax.annotation.Nullable String k8sPassword) {
    this.k8sPassword = k8sPassword;
    return this;
  }

  /**
   * K8s Client password (relevant only for K8s migration with Password Authentication method)
   * @return k8sPassword
   */
  @javax.annotation.Nullable
  public String getK8sPassword() {
    return k8sPassword;
  }

  public void setK8sPassword(@javax.annotation.Nullable String k8sPassword) {
    this.k8sPassword = k8sPassword;
  }


  public GatewayCreateMigration k8sSkipSystem(@javax.annotation.Nullable Boolean k8sSkipSystem) {
    this.k8sSkipSystem = k8sSkipSystem;
    return this;
  }

  /**
   * K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)
   * @return k8sSkipSystem
   */
  @javax.annotation.Nullable
  public Boolean getK8sSkipSystem() {
    return k8sSkipSystem;
  }

  public void setK8sSkipSystem(@javax.annotation.Nullable Boolean k8sSkipSystem) {
    this.k8sSkipSystem = k8sSkipSystem;
  }


  public GatewayCreateMigration k8sToken(@javax.annotation.Nullable String k8sToken) {
    this.k8sToken = k8sToken;
    return this;
  }

  /**
   * For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)
   * @return k8sToken
   */
  @javax.annotation.Nullable
  public String getK8sToken() {
    return k8sToken;
  }

  public void setK8sToken(@javax.annotation.Nullable String k8sToken) {
    this.k8sToken = k8sToken;
  }


  public GatewayCreateMigration k8sUrl(@javax.annotation.Nullable String k8sUrl) {
    this.k8sUrl = k8sUrl;
    return this;
  }

  /**
   * K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)
   * @return k8sUrl
   */
  @javax.annotation.Nullable
  public String getK8sUrl() {
    return k8sUrl;
  }

  public void setK8sUrl(@javax.annotation.Nullable String k8sUrl) {
    this.k8sUrl = k8sUrl;
  }


  public GatewayCreateMigration k8sUsername(@javax.annotation.Nullable String k8sUsername) {
    this.k8sUsername = k8sUsername;
    return this;
  }

  /**
   * For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)
   * @return k8sUsername
   */
  @javax.annotation.Nullable
  public String getK8sUsername() {
    return k8sUsername;
  }

  public void setK8sUsername(@javax.annotation.Nullable String k8sUsername) {
    this.k8sUsername = k8sUsername;
  }


  public GatewayCreateMigration name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Migration name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayCreateMigration protectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
    return this;
  }

  /**
   * The name of the key that protects the classic key value (if empty, the account default key will be used)
   * @return protectionKey
   */
  @javax.annotation.Nullable
  public String getProtectionKey() {
    return protectionKey;
  }

  public void setProtectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
  }


  public GatewayCreateMigration siAutoRotate(@javax.annotation.Nullable String siAutoRotate) {
    this.siAutoRotate = siAutoRotate;
    return this;
  }

  /**
   * Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --si-rotation-interval and --si-rotation-hour parameters (Relevant only for Server Inventory migration)
   * @return siAutoRotate
   */
  @javax.annotation.Nullable
  public String getSiAutoRotate() {
    return siAutoRotate;
  }

  public void setSiAutoRotate(@javax.annotation.Nullable String siAutoRotate) {
    this.siAutoRotate = siAutoRotate;
  }


  public GatewayCreateMigration siRotationHour(@javax.annotation.Nullable Integer siRotationHour) {
    this.siRotationHour = siRotationHour;
    return this;
  }

  /**
   * The hour of the scheduled rotation in UTC (Relevant only for Server Inventory migration)
   * @return siRotationHour
   */
  @javax.annotation.Nullable
  public Integer getSiRotationHour() {
    return siRotationHour;
  }

  public void setSiRotationHour(@javax.annotation.Nullable Integer siRotationHour) {
    this.siRotationHour = siRotationHour;
  }


  public GatewayCreateMigration siRotationInterval(@javax.annotation.Nullable Integer siRotationInterval) {
    this.siRotationInterval = siRotationInterval;
    return this;
  }

  /**
   * The number of days to wait between every automatic rotation [1-365] (Relevant only for Server Inventory migration)
   * @return siRotationInterval
   */
  @javax.annotation.Nullable
  public Integer getSiRotationInterval() {
    return siRotationInterval;
  }

  public void setSiRotationInterval(@javax.annotation.Nullable Integer siRotationInterval) {
    this.siRotationInterval = siRotationInterval;
  }


  public GatewayCreateMigration siSraEnableRdp(@javax.annotation.Nullable String siSraEnableRdp) {
    this.siSraEnableRdp = siSraEnableRdp;
    return this;
  }

  /**
   * Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Server Inventory migration)
   * @return siSraEnableRdp
   */
  @javax.annotation.Nullable
  public String getSiSraEnableRdp() {
    return siSraEnableRdp;
  }

  public void setSiSraEnableRdp(@javax.annotation.Nullable String siSraEnableRdp) {
    this.siSraEnableRdp = siSraEnableRdp;
  }


  public GatewayCreateMigration siTargetName(@javax.annotation.Nonnull String siTargetName) {
    this.siTargetName = siTargetName;
    return this;
  }

  /**
   * SSH, Windows or Linked Target Name. (Relevant only for Server Inventory migration)
   * @return siTargetName
   */
  @javax.annotation.Nonnull
  public String getSiTargetName() {
    return siTargetName;
  }

  public void setSiTargetName(@javax.annotation.Nonnull String siTargetName) {
    this.siTargetName = siTargetName;
  }


  public GatewayCreateMigration siUserGroups(@javax.annotation.Nullable String siUserGroups) {
    this.siUserGroups = siUserGroups;
    return this;
  }

  /**
   * Comma-separated list of groups to migrate users from. If empty, all users from all groups will be migrated (Relevant only for Server Inventory migration)
   * @return siUserGroups
   */
  @javax.annotation.Nullable
  public String getSiUserGroups() {
    return siUserGroups;
  }

  public void setSiUserGroups(@javax.annotation.Nullable String siUserGroups) {
    this.siUserGroups = siUserGroups;
  }


  public GatewayCreateMigration siUsersIgnore(@javax.annotation.Nullable String siUsersIgnore) {
    this.siUsersIgnore = siUsersIgnore;
    return this;
  }

  /**
   * Comma-separated list of Local Users which should not be migrated (Relevant only for Server Inventory migration)
   * @return siUsersIgnore
   */
  @javax.annotation.Nullable
  public String getSiUsersIgnore() {
    return siUsersIgnore;
  }

  public void setSiUsersIgnore(@javax.annotation.Nullable String siUsersIgnore) {
    this.siUsersIgnore = siUsersIgnore;
  }


  public GatewayCreateMigration siUsersPathTemplate(@javax.annotation.Nonnull String siUsersPathTemplate) {
    this.siUsersPathTemplate = siUsersPathTemplate;
    return this;
  }

  /**
   * Path location template for migrating users as Rotated Secrets e.g.: .../Users/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Server Inventory migration)
   * @return siUsersPathTemplate
   */
  @javax.annotation.Nonnull
  public String getSiUsersPathTemplate() {
    return siUsersPathTemplate;
  }

  public void setSiUsersPathTemplate(@javax.annotation.Nonnull String siUsersPathTemplate) {
    this.siUsersPathTemplate = siUsersPathTemplate;
  }


  public GatewayCreateMigration targetLocation(@javax.annotation.Nonnull String targetLocation) {
    this.targetLocation = targetLocation;
    return this;
  }

  /**
   * Target location in Akeyless for imported secrets
   * @return targetLocation
   */
  @javax.annotation.Nonnull
  public String getTargetLocation() {
    return targetLocation;
  }

  public void setTargetLocation(@javax.annotation.Nonnull String targetLocation) {
    this.targetLocation = targetLocation;
  }


  public GatewayCreateMigration token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayCreateMigration type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public GatewayCreateMigration uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateMigration gatewayCreateMigration = (GatewayCreateMigration) o;
    return Objects.equals(this._1passwordEmail, gatewayCreateMigration._1passwordEmail) &&
        Objects.equals(this._1passwordPassword, gatewayCreateMigration._1passwordPassword) &&
        Objects.equals(this._1passwordSecretKey, gatewayCreateMigration._1passwordSecretKey) &&
        Objects.equals(this._1passwordUrl, gatewayCreateMigration._1passwordUrl) &&
        Objects.equals(this._1passwordVaults, gatewayCreateMigration._1passwordVaults) &&
        Objects.equals(this.serviceAccountKeyDecoded, gatewayCreateMigration.serviceAccountKeyDecoded) &&
        Objects.equals(this.adAutoRotate, gatewayCreateMigration.adAutoRotate) &&
        Objects.equals(this.adComputerBaseDn, gatewayCreateMigration.adComputerBaseDn) &&
        Objects.equals(this.adDiscoverServices, gatewayCreateMigration.adDiscoverServices) &&
        Objects.equals(this.adDiscoveryTypes, gatewayCreateMigration.adDiscoveryTypes) &&
        Objects.equals(this.adDomainName, gatewayCreateMigration.adDomainName) &&
        Objects.equals(this.adDomainUsersPathTemplate, gatewayCreateMigration.adDomainUsersPathTemplate) &&
        Objects.equals(this.adLocalUsersIgnore, gatewayCreateMigration.adLocalUsersIgnore) &&
        Objects.equals(this.adLocalUsersPathTemplate, gatewayCreateMigration.adLocalUsersPathTemplate) &&
        Objects.equals(this.adOsFilter, gatewayCreateMigration.adOsFilter) &&
        Objects.equals(this.adRotationHour, gatewayCreateMigration.adRotationHour) &&
        Objects.equals(this.adRotationInterval, gatewayCreateMigration.adRotationInterval) &&
        Objects.equals(this.adSraEnableRdp, gatewayCreateMigration.adSraEnableRdp) &&
        Objects.equals(this.adSshPort, gatewayCreateMigration.adSshPort) &&
        Objects.equals(this.adTargetFormat, gatewayCreateMigration.adTargetFormat) &&
        Objects.equals(this.adTargetName, gatewayCreateMigration.adTargetName) &&
        Objects.equals(this.adTargetsPathTemplate, gatewayCreateMigration.adTargetsPathTemplate) &&
        Objects.equals(this.adTargetsType, gatewayCreateMigration.adTargetsType) &&
        Objects.equals(this.adUserBaseDn, gatewayCreateMigration.adUserBaseDn) &&
        Objects.equals(this.adUserGroups, gatewayCreateMigration.adUserGroups) &&
        Objects.equals(this.adWinrmOverHttp, gatewayCreateMigration.adWinrmOverHttp) &&
        Objects.equals(this.adWinrmPort, gatewayCreateMigration.adWinrmPort) &&
        Objects.equals(this.adDiscoverLocalUsers, gatewayCreateMigration.adDiscoverLocalUsers) &&
        Objects.equals(this.awsKey, gatewayCreateMigration.awsKey) &&
        Objects.equals(this.awsKeyId, gatewayCreateMigration.awsKeyId) &&
        Objects.equals(this.awsRegion, gatewayCreateMigration.awsRegion) &&
        Objects.equals(this.azureClientId, gatewayCreateMigration.azureClientId) &&
        Objects.equals(this.azureKvName, gatewayCreateMigration.azureKvName) &&
        Objects.equals(this.azureSecret, gatewayCreateMigration.azureSecret) &&
        Objects.equals(this.azureTenantId, gatewayCreateMigration.azureTenantId) &&
        Objects.equals(this.gcpKey, gatewayCreateMigration.gcpKey) &&
        Objects.equals(this.hashiJson, gatewayCreateMigration.hashiJson) &&
        Objects.equals(this.hashiNs, gatewayCreateMigration.hashiNs) &&
        Objects.equals(this.hashiToken, gatewayCreateMigration.hashiToken) &&
        Objects.equals(this.hashiUrl, gatewayCreateMigration.hashiUrl) &&
        Objects.equals(this.json, gatewayCreateMigration.json) &&
        Objects.equals(this.k8sCaCertificate, gatewayCreateMigration.k8sCaCertificate) &&
        Objects.equals(this.k8sClientCertificate, gatewayCreateMigration.k8sClientCertificate) &&
        Objects.equals(this.k8sClientKey, gatewayCreateMigration.k8sClientKey) &&
        Objects.equals(this.k8sNamespace, gatewayCreateMigration.k8sNamespace) &&
        Objects.equals(this.k8sPassword, gatewayCreateMigration.k8sPassword) &&
        Objects.equals(this.k8sSkipSystem, gatewayCreateMigration.k8sSkipSystem) &&
        Objects.equals(this.k8sToken, gatewayCreateMigration.k8sToken) &&
        Objects.equals(this.k8sUrl, gatewayCreateMigration.k8sUrl) &&
        Objects.equals(this.k8sUsername, gatewayCreateMigration.k8sUsername) &&
        Objects.equals(this.name, gatewayCreateMigration.name) &&
        Objects.equals(this.protectionKey, gatewayCreateMigration.protectionKey) &&
        Objects.equals(this.siAutoRotate, gatewayCreateMigration.siAutoRotate) &&
        Objects.equals(this.siRotationHour, gatewayCreateMigration.siRotationHour) &&
        Objects.equals(this.siRotationInterval, gatewayCreateMigration.siRotationInterval) &&
        Objects.equals(this.siSraEnableRdp, gatewayCreateMigration.siSraEnableRdp) &&
        Objects.equals(this.siTargetName, gatewayCreateMigration.siTargetName) &&
        Objects.equals(this.siUserGroups, gatewayCreateMigration.siUserGroups) &&
        Objects.equals(this.siUsersIgnore, gatewayCreateMigration.siUsersIgnore) &&
        Objects.equals(this.siUsersPathTemplate, gatewayCreateMigration.siUsersPathTemplate) &&
        Objects.equals(this.targetLocation, gatewayCreateMigration.targetLocation) &&
        Objects.equals(this.token, gatewayCreateMigration.token) &&
        Objects.equals(this.type, gatewayCreateMigration.type) &&
        Objects.equals(this.uidToken, gatewayCreateMigration.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_1passwordEmail, _1passwordPassword, _1passwordSecretKey, _1passwordUrl, _1passwordVaults, serviceAccountKeyDecoded, adAutoRotate, adComputerBaseDn, adDiscoverServices, adDiscoveryTypes, adDomainName, adDomainUsersPathTemplate, adLocalUsersIgnore, adLocalUsersPathTemplate, adOsFilter, adRotationHour, adRotationInterval, adSraEnableRdp, adSshPort, adTargetFormat, adTargetName, adTargetsPathTemplate, adTargetsType, adUserBaseDn, adUserGroups, adWinrmOverHttp, adWinrmPort, adDiscoverLocalUsers, awsKey, awsKeyId, awsRegion, azureClientId, azureKvName, azureSecret, azureTenantId, gcpKey, hashiJson, hashiNs, hashiToken, hashiUrl, json, k8sCaCertificate, k8sClientCertificate, k8sClientKey, k8sNamespace, k8sPassword, k8sSkipSystem, k8sToken, k8sUrl, k8sUsername, name, protectionKey, siAutoRotate, siRotationHour, siRotationInterval, siSraEnableRdp, siTargetName, siUserGroups, siUsersIgnore, siUsersPathTemplate, targetLocation, token, type, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateMigration {\n");
    sb.append("    _1passwordEmail: ").append(toIndentedString(_1passwordEmail)).append("\n");
    sb.append("    _1passwordPassword: ").append(toIndentedString(_1passwordPassword)).append("\n");
    sb.append("    _1passwordSecretKey: ").append(toIndentedString(_1passwordSecretKey)).append("\n");
    sb.append("    _1passwordUrl: ").append(toIndentedString(_1passwordUrl)).append("\n");
    sb.append("    _1passwordVaults: ").append(toIndentedString(_1passwordVaults)).append("\n");
    sb.append("    serviceAccountKeyDecoded: ").append(toIndentedString(serviceAccountKeyDecoded)).append("\n");
    sb.append("    adAutoRotate: ").append(toIndentedString(adAutoRotate)).append("\n");
    sb.append("    adComputerBaseDn: ").append(toIndentedString(adComputerBaseDn)).append("\n");
    sb.append("    adDiscoverServices: ").append(toIndentedString(adDiscoverServices)).append("\n");
    sb.append("    adDiscoveryTypes: ").append(toIndentedString(adDiscoveryTypes)).append("\n");
    sb.append("    adDomainName: ").append(toIndentedString(adDomainName)).append("\n");
    sb.append("    adDomainUsersPathTemplate: ").append(toIndentedString(adDomainUsersPathTemplate)).append("\n");
    sb.append("    adLocalUsersIgnore: ").append(toIndentedString(adLocalUsersIgnore)).append("\n");
    sb.append("    adLocalUsersPathTemplate: ").append(toIndentedString(adLocalUsersPathTemplate)).append("\n");
    sb.append("    adOsFilter: ").append(toIndentedString(adOsFilter)).append("\n");
    sb.append("    adRotationHour: ").append(toIndentedString(adRotationHour)).append("\n");
    sb.append("    adRotationInterval: ").append(toIndentedString(adRotationInterval)).append("\n");
    sb.append("    adSraEnableRdp: ").append(toIndentedString(adSraEnableRdp)).append("\n");
    sb.append("    adSshPort: ").append(toIndentedString(adSshPort)).append("\n");
    sb.append("    adTargetFormat: ").append(toIndentedString(adTargetFormat)).append("\n");
    sb.append("    adTargetName: ").append(toIndentedString(adTargetName)).append("\n");
    sb.append("    adTargetsPathTemplate: ").append(toIndentedString(adTargetsPathTemplate)).append("\n");
    sb.append("    adTargetsType: ").append(toIndentedString(adTargetsType)).append("\n");
    sb.append("    adUserBaseDn: ").append(toIndentedString(adUserBaseDn)).append("\n");
    sb.append("    adUserGroups: ").append(toIndentedString(adUserGroups)).append("\n");
    sb.append("    adWinrmOverHttp: ").append(toIndentedString(adWinrmOverHttp)).append("\n");
    sb.append("    adWinrmPort: ").append(toIndentedString(adWinrmPort)).append("\n");
    sb.append("    adDiscoverLocalUsers: ").append(toIndentedString(adDiscoverLocalUsers)).append("\n");
    sb.append("    awsKey: ").append(toIndentedString(awsKey)).append("\n");
    sb.append("    awsKeyId: ").append(toIndentedString(awsKeyId)).append("\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    azureClientId: ").append(toIndentedString(azureClientId)).append("\n");
    sb.append("    azureKvName: ").append(toIndentedString(azureKvName)).append("\n");
    sb.append("    azureSecret: ").append(toIndentedString(azureSecret)).append("\n");
    sb.append("    azureTenantId: ").append(toIndentedString(azureTenantId)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    hashiJson: ").append(toIndentedString(hashiJson)).append("\n");
    sb.append("    hashiNs: ").append(toIndentedString(hashiNs)).append("\n");
    sb.append("    hashiToken: ").append(toIndentedString(hashiToken)).append("\n");
    sb.append("    hashiUrl: ").append(toIndentedString(hashiUrl)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    k8sCaCertificate: ").append(toIndentedString(k8sCaCertificate)).append("\n");
    sb.append("    k8sClientCertificate: ").append(toIndentedString(k8sClientCertificate)).append("\n");
    sb.append("    k8sClientKey: ").append(toIndentedString(k8sClientKey)).append("\n");
    sb.append("    k8sNamespace: ").append(toIndentedString(k8sNamespace)).append("\n");
    sb.append("    k8sPassword: ").append(toIndentedString(k8sPassword)).append("\n");
    sb.append("    k8sSkipSystem: ").append(toIndentedString(k8sSkipSystem)).append("\n");
    sb.append("    k8sToken: ").append(toIndentedString(k8sToken)).append("\n");
    sb.append("    k8sUrl: ").append(toIndentedString(k8sUrl)).append("\n");
    sb.append("    k8sUsername: ").append(toIndentedString(k8sUsername)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionKey: ").append(toIndentedString(protectionKey)).append("\n");
    sb.append("    siAutoRotate: ").append(toIndentedString(siAutoRotate)).append("\n");
    sb.append("    siRotationHour: ").append(toIndentedString(siRotationHour)).append("\n");
    sb.append("    siRotationInterval: ").append(toIndentedString(siRotationInterval)).append("\n");
    sb.append("    siSraEnableRdp: ").append(toIndentedString(siSraEnableRdp)).append("\n");
    sb.append("    siTargetName: ").append(toIndentedString(siTargetName)).append("\n");
    sb.append("    siUserGroups: ").append(toIndentedString(siUserGroups)).append("\n");
    sb.append("    siUsersIgnore: ").append(toIndentedString(siUsersIgnore)).append("\n");
    sb.append("    siUsersPathTemplate: ").append(toIndentedString(siUsersPathTemplate)).append("\n");
    sb.append("    targetLocation: ").append(toIndentedString(targetLocation)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("1password-email");
    openapiFields.add("1password-password");
    openapiFields.add("1password-secret-key");
    openapiFields.add("1password-url");
    openapiFields.add("1password-vaults");
    openapiFields.add("ServiceAccountKeyDecoded");
    openapiFields.add("ad-auto-rotate");
    openapiFields.add("ad-computer-base-dn");
    openapiFields.add("ad-discover-services");
    openapiFields.add("ad-discovery-types");
    openapiFields.add("ad-domain-name");
    openapiFields.add("ad-domain-users-path-template");
    openapiFields.add("ad-local-users-ignore");
    openapiFields.add("ad-local-users-path-template");
    openapiFields.add("ad-os-filter");
    openapiFields.add("ad-rotation-hour");
    openapiFields.add("ad-rotation-interval");
    openapiFields.add("ad-sra-enable-rdp");
    openapiFields.add("ad-ssh-port");
    openapiFields.add("ad-target-format");
    openapiFields.add("ad-target-name");
    openapiFields.add("ad-targets-path-template");
    openapiFields.add("ad-targets-type");
    openapiFields.add("ad-user-base-dn");
    openapiFields.add("ad-user-groups");
    openapiFields.add("ad-winrm-over-http");
    openapiFields.add("ad-winrm-port");
    openapiFields.add("ad_discover_local_users");
    openapiFields.add("aws-key");
    openapiFields.add("aws-key-id");
    openapiFields.add("aws-region");
    openapiFields.add("azure-client-id");
    openapiFields.add("azure-kv-name");
    openapiFields.add("azure-secret");
    openapiFields.add("azure-tenant-id");
    openapiFields.add("gcp-key");
    openapiFields.add("hashi-json");
    openapiFields.add("hashi-ns");
    openapiFields.add("hashi-token");
    openapiFields.add("hashi-url");
    openapiFields.add("json");
    openapiFields.add("k8s-ca-certificate");
    openapiFields.add("k8s-client-certificate");
    openapiFields.add("k8s-client-key");
    openapiFields.add("k8s-namespace");
    openapiFields.add("k8s-password");
    openapiFields.add("k8s-skip-system");
    openapiFields.add("k8s-token");
    openapiFields.add("k8s-url");
    openapiFields.add("k8s-username");
    openapiFields.add("name");
    openapiFields.add("protection-key");
    openapiFields.add("si-auto-rotate");
    openapiFields.add("si-rotation-hour");
    openapiFields.add("si-rotation-interval");
    openapiFields.add("si-sra-enable-rdp");
    openapiFields.add("si-target-name");
    openapiFields.add("si-user-groups");
    openapiFields.add("si-users-ignore");
    openapiFields.add("si-users-path-template");
    openapiFields.add("target-location");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("si-target-name");
    openapiRequiredFields.add("si-users-path-template");
    openapiRequiredFields.add("target-location");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayCreateMigration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayCreateMigration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayCreateMigration is not found in the empty JSON string", GatewayCreateMigration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayCreateMigration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayCreateMigration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayCreateMigration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("1password-email") != null && !jsonObj.get("1password-email").isJsonNull()) && !jsonObj.get("1password-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1password-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1password-email").toString()));
      }
      if ((jsonObj.get("1password-password") != null && !jsonObj.get("1password-password").isJsonNull()) && !jsonObj.get("1password-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1password-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1password-password").toString()));
      }
      if ((jsonObj.get("1password-secret-key") != null && !jsonObj.get("1password-secret-key").isJsonNull()) && !jsonObj.get("1password-secret-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1password-secret-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1password-secret-key").toString()));
      }
      if ((jsonObj.get("1password-url") != null && !jsonObj.get("1password-url").isJsonNull()) && !jsonObj.get("1password-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1password-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1password-url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("1password-vaults") != null && !jsonObj.get("1password-vaults").isJsonNull() && !jsonObj.get("1password-vaults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `1password-vaults` to be an array in the JSON string but got `%s`", jsonObj.get("1password-vaults").toString()));
      }
      if ((jsonObj.get("ServiceAccountKeyDecoded") != null && !jsonObj.get("ServiceAccountKeyDecoded").isJsonNull()) && !jsonObj.get("ServiceAccountKeyDecoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceAccountKeyDecoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceAccountKeyDecoded").toString()));
      }
      if ((jsonObj.get("ad-auto-rotate") != null && !jsonObj.get("ad-auto-rotate").isJsonNull()) && !jsonObj.get("ad-auto-rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-auto-rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-auto-rotate").toString()));
      }
      if ((jsonObj.get("ad-computer-base-dn") != null && !jsonObj.get("ad-computer-base-dn").isJsonNull()) && !jsonObj.get("ad-computer-base-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-computer-base-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-computer-base-dn").toString()));
      }
      if ((jsonObj.get("ad-discover-services") != null && !jsonObj.get("ad-discover-services").isJsonNull()) && !jsonObj.get("ad-discover-services").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-discover-services` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-discover-services").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ad-discovery-types") != null && !jsonObj.get("ad-discovery-types").isJsonNull() && !jsonObj.get("ad-discovery-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-discovery-types` to be an array in the JSON string but got `%s`", jsonObj.get("ad-discovery-types").toString()));
      }
      if ((jsonObj.get("ad-domain-name") != null && !jsonObj.get("ad-domain-name").isJsonNull()) && !jsonObj.get("ad-domain-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-domain-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-domain-name").toString()));
      }
      if ((jsonObj.get("ad-domain-users-path-template") != null && !jsonObj.get("ad-domain-users-path-template").isJsonNull()) && !jsonObj.get("ad-domain-users-path-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-domain-users-path-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-domain-users-path-template").toString()));
      }
      if ((jsonObj.get("ad-local-users-ignore") != null && !jsonObj.get("ad-local-users-ignore").isJsonNull()) && !jsonObj.get("ad-local-users-ignore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-local-users-ignore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-local-users-ignore").toString()));
      }
      if ((jsonObj.get("ad-local-users-path-template") != null && !jsonObj.get("ad-local-users-path-template").isJsonNull()) && !jsonObj.get("ad-local-users-path-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-local-users-path-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-local-users-path-template").toString()));
      }
      if ((jsonObj.get("ad-os-filter") != null && !jsonObj.get("ad-os-filter").isJsonNull()) && !jsonObj.get("ad-os-filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-os-filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-os-filter").toString()));
      }
      if ((jsonObj.get("ad-sra-enable-rdp") != null && !jsonObj.get("ad-sra-enable-rdp").isJsonNull()) && !jsonObj.get("ad-sra-enable-rdp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-sra-enable-rdp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-sra-enable-rdp").toString()));
      }
      if ((jsonObj.get("ad-ssh-port") != null && !jsonObj.get("ad-ssh-port").isJsonNull()) && !jsonObj.get("ad-ssh-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-ssh-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-ssh-port").toString()));
      }
      if ((jsonObj.get("ad-target-format") != null && !jsonObj.get("ad-target-format").isJsonNull()) && !jsonObj.get("ad-target-format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-target-format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-target-format").toString()));
      }
      if ((jsonObj.get("ad-target-name") != null && !jsonObj.get("ad-target-name").isJsonNull()) && !jsonObj.get("ad-target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-target-name").toString()));
      }
      if ((jsonObj.get("ad-targets-path-template") != null && !jsonObj.get("ad-targets-path-template").isJsonNull()) && !jsonObj.get("ad-targets-path-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-targets-path-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-targets-path-template").toString()));
      }
      if ((jsonObj.get("ad-targets-type") != null && !jsonObj.get("ad-targets-type").isJsonNull()) && !jsonObj.get("ad-targets-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-targets-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-targets-type").toString()));
      }
      if ((jsonObj.get("ad-user-base-dn") != null && !jsonObj.get("ad-user-base-dn").isJsonNull()) && !jsonObj.get("ad-user-base-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-user-base-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-user-base-dn").toString()));
      }
      if ((jsonObj.get("ad-user-groups") != null && !jsonObj.get("ad-user-groups").isJsonNull()) && !jsonObj.get("ad-user-groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-user-groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-user-groups").toString()));
      }
      if ((jsonObj.get("ad-winrm-over-http") != null && !jsonObj.get("ad-winrm-over-http").isJsonNull()) && !jsonObj.get("ad-winrm-over-http").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-winrm-over-http` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-winrm-over-http").toString()));
      }
      if ((jsonObj.get("ad-winrm-port") != null && !jsonObj.get("ad-winrm-port").isJsonNull()) && !jsonObj.get("ad-winrm-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad-winrm-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad-winrm-port").toString()));
      }
      if ((jsonObj.get("ad_discover_local_users") != null && !jsonObj.get("ad_discover_local_users").isJsonNull()) && !jsonObj.get("ad_discover_local_users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ad_discover_local_users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ad_discover_local_users").toString()));
      }
      if ((jsonObj.get("aws-key") != null && !jsonObj.get("aws-key").isJsonNull()) && !jsonObj.get("aws-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws-key").toString()));
      }
      if ((jsonObj.get("aws-key-id") != null && !jsonObj.get("aws-key-id").isJsonNull()) && !jsonObj.get("aws-key-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws-key-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws-key-id").toString()));
      }
      if ((jsonObj.get("aws-region") != null && !jsonObj.get("aws-region").isJsonNull()) && !jsonObj.get("aws-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws-region").toString()));
      }
      if ((jsonObj.get("azure-client-id") != null && !jsonObj.get("azure-client-id").isJsonNull()) && !jsonObj.get("azure-client-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-client-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-client-id").toString()));
      }
      if ((jsonObj.get("azure-kv-name") != null && !jsonObj.get("azure-kv-name").isJsonNull()) && !jsonObj.get("azure-kv-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-kv-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-kv-name").toString()));
      }
      if ((jsonObj.get("azure-secret") != null && !jsonObj.get("azure-secret").isJsonNull()) && !jsonObj.get("azure-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-secret").toString()));
      }
      if ((jsonObj.get("azure-tenant-id") != null && !jsonObj.get("azure-tenant-id").isJsonNull()) && !jsonObj.get("azure-tenant-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-tenant-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-tenant-id").toString()));
      }
      if ((jsonObj.get("gcp-key") != null && !jsonObj.get("gcp-key").isJsonNull()) && !jsonObj.get("gcp-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key").toString()));
      }
      if ((jsonObj.get("hashi-json") != null && !jsonObj.get("hashi-json").isJsonNull()) && !jsonObj.get("hashi-json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashi-json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashi-json").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashi-ns") != null && !jsonObj.get("hashi-ns").isJsonNull() && !jsonObj.get("hashi-ns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashi-ns` to be an array in the JSON string but got `%s`", jsonObj.get("hashi-ns").toString()));
      }
      if ((jsonObj.get("hashi-token") != null && !jsonObj.get("hashi-token").isJsonNull()) && !jsonObj.get("hashi-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashi-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashi-token").toString()));
      }
      if ((jsonObj.get("hashi-url") != null && !jsonObj.get("hashi-url").isJsonNull()) && !jsonObj.get("hashi-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashi-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashi-url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("k8s-ca-certificate") != null && !jsonObj.get("k8s-ca-certificate").isJsonNull() && !jsonObj.get("k8s-ca-certificate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-ca-certificate` to be an array in the JSON string but got `%s`", jsonObj.get("k8s-ca-certificate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("k8s-client-certificate") != null && !jsonObj.get("k8s-client-certificate").isJsonNull() && !jsonObj.get("k8s-client-certificate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-client-certificate` to be an array in the JSON string but got `%s`", jsonObj.get("k8s-client-certificate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("k8s-client-key") != null && !jsonObj.get("k8s-client-key").isJsonNull() && !jsonObj.get("k8s-client-key").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-client-key` to be an array in the JSON string but got `%s`", jsonObj.get("k8s-client-key").toString()));
      }
      if ((jsonObj.get("k8s-namespace") != null && !jsonObj.get("k8s-namespace").isJsonNull()) && !jsonObj.get("k8s-namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-namespace").toString()));
      }
      if ((jsonObj.get("k8s-password") != null && !jsonObj.get("k8s-password").isJsonNull()) && !jsonObj.get("k8s-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-password").toString()));
      }
      if ((jsonObj.get("k8s-token") != null && !jsonObj.get("k8s-token").isJsonNull()) && !jsonObj.get("k8s-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-token").toString()));
      }
      if ((jsonObj.get("k8s-url") != null && !jsonObj.get("k8s-url").isJsonNull()) && !jsonObj.get("k8s-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-url").toString()));
      }
      if ((jsonObj.get("k8s-username") != null && !jsonObj.get("k8s-username").isJsonNull()) && !jsonObj.get("k8s-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-username").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protection-key") != null && !jsonObj.get("protection-key").isJsonNull()) && !jsonObj.get("protection-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection-key").toString()));
      }
      if ((jsonObj.get("si-auto-rotate") != null && !jsonObj.get("si-auto-rotate").isJsonNull()) && !jsonObj.get("si-auto-rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-auto-rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-auto-rotate").toString()));
      }
      if ((jsonObj.get("si-sra-enable-rdp") != null && !jsonObj.get("si-sra-enable-rdp").isJsonNull()) && !jsonObj.get("si-sra-enable-rdp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-sra-enable-rdp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-sra-enable-rdp").toString()));
      }
      if (!jsonObj.get("si-target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-target-name").toString()));
      }
      if ((jsonObj.get("si-user-groups") != null && !jsonObj.get("si-user-groups").isJsonNull()) && !jsonObj.get("si-user-groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-user-groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-user-groups").toString()));
      }
      if ((jsonObj.get("si-users-ignore") != null && !jsonObj.get("si-users-ignore").isJsonNull()) && !jsonObj.get("si-users-ignore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-users-ignore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-users-ignore").toString()));
      }
      if (!jsonObj.get("si-users-path-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `si-users-path-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("si-users-path-template").toString()));
      }
      if (!jsonObj.get("target-location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-location").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayCreateMigration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayCreateMigration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayCreateMigration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayCreateMigration.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayCreateMigration>() {
           @Override
           public void write(JsonWriter out, GatewayCreateMigration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayCreateMigration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayCreateMigration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayCreateMigration
   * @throws IOException if the JSON string is invalid with respect to GatewayCreateMigration
   */
  public static GatewayCreateMigration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayCreateMigration.class);
  }

  /**
   * Convert an instance of GatewayCreateMigration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

