/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * gatewayCreateMigration is a command that create migration
 */
@ApiModel(description = "gatewayCreateMigration is a command that create migration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayCreateMigration {
  public static final String SERIALIZED_NAME_1PASSWORD_EMAIL = "1password-email";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_EMAIL)
  private String _1passwordEmail;

  public static final String SERIALIZED_NAME_1PASSWORD_PASSWORD = "1password-password";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_PASSWORD)
  private String _1passwordPassword;

  public static final String SERIALIZED_NAME_1PASSWORD_SECRET_KEY = "1password-secret-key";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_SECRET_KEY)
  private String _1passwordSecretKey;

  public static final String SERIALIZED_NAME_1PASSWORD_URL = "1password-url";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_URL)
  private String _1passwordUrl;

  public static final String SERIALIZED_NAME_1PASSWORD_VAULTS = "1password-vaults";
  @SerializedName(SERIALIZED_NAME_1PASSWORD_VAULTS)
  private List<String> _1passwordVaults = null;

  public static final String SERIALIZED_NAME_AD_DISCOVER_SERVICES = "ad-discover-services";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVER_SERVICES)
  private String adDiscoverServices = "false";

  public static final String SERIALIZED_NAME_AD_DISCOVERY_TYPES = "ad-discovery-types";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVERY_TYPES)
  private List<String> adDiscoveryTypes = null;

  public static final String SERIALIZED_NAME_AD_OS_FILTER = "ad-os-filter";
  @SerializedName(SERIALIZED_NAME_AD_OS_FILTER)
  private String adOsFilter;

  public static final String SERIALIZED_NAME_AD_SSH_PORT = "ad-ssh-port";
  @SerializedName(SERIALIZED_NAME_AD_SSH_PORT)
  private String adSshPort = "22";

  public static final String SERIALIZED_NAME_AD_TARGETS_TYPE = "ad-targets-type";
  @SerializedName(SERIALIZED_NAME_AD_TARGETS_TYPE)
  private String adTargetsType = "windows";

  public static final String SERIALIZED_NAME_AD_WINRM_OVER_HTTP = "ad-winrm-over-http";
  @SerializedName(SERIALIZED_NAME_AD_WINRM_OVER_HTTP)
  private String adWinrmOverHttp = "false";

  public static final String SERIALIZED_NAME_AD_WINRM_PORT = "ad-winrm-port";
  @SerializedName(SERIALIZED_NAME_AD_WINRM_PORT)
  private String adWinrmPort = "5986";

  public static final String SERIALIZED_NAME_AD_AUTO_ROTATE = "ad_auto_rotate";
  @SerializedName(SERIALIZED_NAME_AD_AUTO_ROTATE)
  private String adAutoRotate;

  public static final String SERIALIZED_NAME_AD_COMPUTER_BASE_DN = "ad_computer_base_dn";
  @SerializedName(SERIALIZED_NAME_AD_COMPUTER_BASE_DN)
  private String adComputerBaseDn;

  public static final String SERIALIZED_NAME_AD_DISCOVER_LOCAL_USERS = "ad_discover_local_users";
  @SerializedName(SERIALIZED_NAME_AD_DISCOVER_LOCAL_USERS)
  private String adDiscoverLocalUsers;

  public static final String SERIALIZED_NAME_AD_DOMAIN_NAME = "ad_domain_name";
  @SerializedName(SERIALIZED_NAME_AD_DOMAIN_NAME)
  private String adDomainName;

  public static final String SERIALIZED_NAME_AD_DOMAIN_USERS_PATH_TEMPLATE = "ad_domain_users_path_template";
  @SerializedName(SERIALIZED_NAME_AD_DOMAIN_USERS_PATH_TEMPLATE)
  private String adDomainUsersPathTemplate;

  public static final String SERIALIZED_NAME_AD_LOCAL_USERS_IGNORE = "ad_local_users_ignore";
  @SerializedName(SERIALIZED_NAME_AD_LOCAL_USERS_IGNORE)
  private String adLocalUsersIgnore;

  public static final String SERIALIZED_NAME_AD_LOCAL_USERS_PATH_TEMPLATE = "ad_local_users_path_template";
  @SerializedName(SERIALIZED_NAME_AD_LOCAL_USERS_PATH_TEMPLATE)
  private String adLocalUsersPathTemplate;

  public static final String SERIALIZED_NAME_AD_ROTATION_HOUR = "ad_rotation_hour";
  @SerializedName(SERIALIZED_NAME_AD_ROTATION_HOUR)
  private Integer adRotationHour;

  public static final String SERIALIZED_NAME_AD_ROTATION_INTERVAL = "ad_rotation_interval";
  @SerializedName(SERIALIZED_NAME_AD_ROTATION_INTERVAL)
  private Integer adRotationInterval;

  public static final String SERIALIZED_NAME_AD_SRA_ENABLE_RDP = "ad_sra_enable_rdp";
  @SerializedName(SERIALIZED_NAME_AD_SRA_ENABLE_RDP)
  private String adSraEnableRdp;

  public static final String SERIALIZED_NAME_AD_TARGET_NAME = "ad_target_name";
  @SerializedName(SERIALIZED_NAME_AD_TARGET_NAME)
  private String adTargetName;

  public static final String SERIALIZED_NAME_AD_TARGETS_PATH_TEMPLATE = "ad_targets_path_template";
  @SerializedName(SERIALIZED_NAME_AD_TARGETS_PATH_TEMPLATE)
  private String adTargetsPathTemplate;

  public static final String SERIALIZED_NAME_AD_USER_BASE_DN = "ad_user_base_dn";
  @SerializedName(SERIALIZED_NAME_AD_USER_BASE_DN)
  private String adUserBaseDn;

  public static final String SERIALIZED_NAME_AD_USER_GROUPS = "ad_user_groups";
  @SerializedName(SERIALIZED_NAME_AD_USER_GROUPS)
  private String adUserGroups;

  public static final String SERIALIZED_NAME_AWS_KEY = "aws-key";
  @SerializedName(SERIALIZED_NAME_AWS_KEY)
  private String awsKey;

  public static final String SERIALIZED_NAME_AWS_KEY_ID = "aws-key-id";
  @SerializedName(SERIALIZED_NAME_AWS_KEY_ID)
  private String awsKeyId;

  public static final String SERIALIZED_NAME_AWS_REGION = "aws-region";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  private String awsRegion = "us-east-2";

  public static final String SERIALIZED_NAME_AZURE_CLIENT_ID = "azure-client-id";
  @SerializedName(SERIALIZED_NAME_AZURE_CLIENT_ID)
  private String azureClientId;

  public static final String SERIALIZED_NAME_AZURE_KV_NAME = "azure-kv-name";
  @SerializedName(SERIALIZED_NAME_AZURE_KV_NAME)
  private String azureKvName;

  public static final String SERIALIZED_NAME_AZURE_SECRET = "azure-secret";
  @SerializedName(SERIALIZED_NAME_AZURE_SECRET)
  private String azureSecret;

  public static final String SERIALIZED_NAME_AZURE_TENANT_ID = "azure-tenant-id";
  @SerializedName(SERIALIZED_NAME_AZURE_TENANT_ID)
  private String azureTenantId;

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  private String gcpKey;

  public static final String SERIALIZED_NAME_HASHI_JSON = "hashi-json";
  @SerializedName(SERIALIZED_NAME_HASHI_JSON)
  private String hashiJson = "true";

  public static final String SERIALIZED_NAME_HASHI_NS = "hashi-ns";
  @SerializedName(SERIALIZED_NAME_HASHI_NS)
  private List<String> hashiNs = null;

  public static final String SERIALIZED_NAME_HASHI_TOKEN = "hashi-token";
  @SerializedName(SERIALIZED_NAME_HASHI_TOKEN)
  private String hashiToken;

  public static final String SERIALIZED_NAME_HASHI_URL = "hashi-url";
  @SerializedName(SERIALIZED_NAME_HASHI_URL)
  private String hashiUrl;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_K8S_CA_CERTIFICATE = "k8s-ca-certificate";
  @SerializedName(SERIALIZED_NAME_K8S_CA_CERTIFICATE)
  private List<Integer> k8sCaCertificate = null;

  public static final String SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE = "k8s-client-certificate";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE)
  private List<Integer> k8sClientCertificate = null;

  public static final String SERIALIZED_NAME_K8S_CLIENT_KEY = "k8s-client-key";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_KEY)
  private List<Integer> k8sClientKey = null;

  public static final String SERIALIZED_NAME_K8S_NAMESPACE = "k8s-namespace";
  @SerializedName(SERIALIZED_NAME_K8S_NAMESPACE)
  private String k8sNamespace;

  public static final String SERIALIZED_NAME_K8S_PASSWORD = "k8s-password";
  @SerializedName(SERIALIZED_NAME_K8S_PASSWORD)
  private String k8sPassword;

  public static final String SERIALIZED_NAME_K8S_SKIP_SYSTEM = "k8s-skip-system";
  @SerializedName(SERIALIZED_NAME_K8S_SKIP_SYSTEM)
  private Boolean k8sSkipSystem;

  public static final String SERIALIZED_NAME_K8S_TOKEN = "k8s-token";
  @SerializedName(SERIALIZED_NAME_K8S_TOKEN)
  private String k8sToken;

  public static final String SERIALIZED_NAME_K8S_URL = "k8s-url";
  @SerializedName(SERIALIZED_NAME_K8S_URL)
  private String k8sUrl;

  public static final String SERIALIZED_NAME_K8S_USERNAME = "k8s-username";
  @SerializedName(SERIALIZED_NAME_K8S_USERNAME)
  private String k8sUsername;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTECTION_KEY = "protection-key";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY)
  private String protectionKey;

  public static final String SERIALIZED_NAME_SI_AUTO_ROTATE = "si-auto-rotate";
  @SerializedName(SERIALIZED_NAME_SI_AUTO_ROTATE)
  private String siAutoRotate;

  public static final String SERIALIZED_NAME_SI_ROTATION_HOUR = "si-rotation-hour";
  @SerializedName(SERIALIZED_NAME_SI_ROTATION_HOUR)
  private Integer siRotationHour;

  public static final String SERIALIZED_NAME_SI_ROTATION_INTERVAL = "si-rotation-interval";
  @SerializedName(SERIALIZED_NAME_SI_ROTATION_INTERVAL)
  private Integer siRotationInterval;

  public static final String SERIALIZED_NAME_SI_SRA_ENABLE_RDP = "si-sra-enable-rdp";
  @SerializedName(SERIALIZED_NAME_SI_SRA_ENABLE_RDP)
  private String siSraEnableRdp = "false";

  public static final String SERIALIZED_NAME_SI_TARGET_NAME = "si-target-name";
  @SerializedName(SERIALIZED_NAME_SI_TARGET_NAME)
  private String siTargetName;

  public static final String SERIALIZED_NAME_SI_USERS_IGNORE = "si-users-ignore";
  @SerializedName(SERIALIZED_NAME_SI_USERS_IGNORE)
  private String siUsersIgnore;

  public static final String SERIALIZED_NAME_SI_USERS_PATH_TEMPLATE = "si-users-path-template";
  @SerializedName(SERIALIZED_NAME_SI_USERS_PATH_TEMPLATE)
  private String siUsersPathTemplate;

  public static final String SERIALIZED_NAME_TARGET_LOCATION = "target-location";
  @SerializedName(SERIALIZED_NAME_TARGET_LOCATION)
  private String targetLocation;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public GatewayCreateMigration() { 
  }

  public GatewayCreateMigration _1passwordEmail(String _1passwordEmail) {
    
    this._1passwordEmail = _1passwordEmail;
    return this;
  }

   /**
   * 1Password user email to connect to the API
   * @return _1passwordEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1Password user email to connect to the API")

  public String get1passwordEmail() {
    return _1passwordEmail;
  }


  public void set1passwordEmail(String _1passwordEmail) {
    this._1passwordEmail = _1passwordEmail;
  }


  public GatewayCreateMigration _1passwordPassword(String _1passwordPassword) {
    
    this._1passwordPassword = _1passwordPassword;
    return this;
  }

   /**
   * 1Password user password to connect to the API
   * @return _1passwordPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1Password user password to connect to the API")

  public String get1passwordPassword() {
    return _1passwordPassword;
  }


  public void set1passwordPassword(String _1passwordPassword) {
    this._1passwordPassword = _1passwordPassword;
  }


  public GatewayCreateMigration _1passwordSecretKey(String _1passwordSecretKey) {
    
    this._1passwordSecretKey = _1passwordSecretKey;
    return this;
  }

   /**
   * 1Password user secret key to connect to the API
   * @return _1passwordSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1Password user secret key to connect to the API")

  public String get1passwordSecretKey() {
    return _1passwordSecretKey;
  }


  public void set1passwordSecretKey(String _1passwordSecretKey) {
    this._1passwordSecretKey = _1passwordSecretKey;
  }


  public GatewayCreateMigration _1passwordUrl(String _1passwordUrl) {
    
    this._1passwordUrl = _1passwordUrl;
    return this;
  }

   /**
   * 1Password api container url
   * @return _1passwordUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1Password api container url")

  public String get1passwordUrl() {
    return _1passwordUrl;
  }


  public void set1passwordUrl(String _1passwordUrl) {
    this._1passwordUrl = _1passwordUrl;
  }


  public GatewayCreateMigration _1passwordVaults(List<String> _1passwordVaults) {
    
    this._1passwordVaults = _1passwordVaults;
    return this;
  }

  public GatewayCreateMigration add1passwordVaultsItem(String _1passwordVaultsItem) {
    if (this._1passwordVaults == null) {
      this._1passwordVaults = new ArrayList<String>();
    }
    this._1passwordVaults.add(_1passwordVaultsItem);
    return this;
  }

   /**
   * 1Password list of vault to get the items from
   * @return _1passwordVaults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "1Password list of vault to get the items from")

  public List<String> get1passwordVaults() {
    return _1passwordVaults;
  }


  public void set1passwordVaults(List<String> _1passwordVaults) {
    this._1passwordVaults = _1passwordVaults;
  }


  public GatewayCreateMigration adDiscoverServices(String adDiscoverServices) {
    
    this.adDiscoverServices = adDiscoverServices;
    return this;
  }

   /**
   * Enable/Disable discovery of Windows services from each domain server as part of the SSH/Windows Rotated Secrets. Default is false. (Relevant only for Active Directory migration)
   * @return adDiscoverServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable discovery of Windows services from each domain server as part of the SSH/Windows Rotated Secrets. Default is false. (Relevant only for Active Directory migration)")

  public String getAdDiscoverServices() {
    return adDiscoverServices;
  }


  public void setAdDiscoverServices(String adDiscoverServices) {
    this.adDiscoverServices = adDiscoverServices;
  }


  public GatewayCreateMigration adDiscoveryTypes(List<String> adDiscoveryTypes) {
    
    this.adDiscoveryTypes = adDiscoveryTypes;
    return this;
  }

  public GatewayCreateMigration addAdDiscoveryTypesItem(String adDiscoveryTypesItem) {
    if (this.adDiscoveryTypes == null) {
      this.adDiscoveryTypes = new ArrayList<String>();
    }
    this.adDiscoveryTypes.add(adDiscoveryTypesItem);
    return this;
  }

   /**
   * Set migration discovery types (domain-users, computers, local-users). (Relevant only for Active Directory migration)
   * @return adDiscoveryTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set migration discovery types (domain-users, computers, local-users). (Relevant only for Active Directory migration)")

  public List<String> getAdDiscoveryTypes() {
    return adDiscoveryTypes;
  }


  public void setAdDiscoveryTypes(List<String> adDiscoveryTypes) {
    this.adDiscoveryTypes = adDiscoveryTypes;
  }


  public GatewayCreateMigration adOsFilter(String adOsFilter) {
    
    this.adOsFilter = adOsFilter;
    return this;
  }

   /**
   * Filter by Operating System to run the migration, can be used with wildcards, e.g. SRV20* (Relevant only for Active Directory migration)
   * @return adOsFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by Operating System to run the migration, can be used with wildcards, e.g. SRV20* (Relevant only for Active Directory migration)")

  public String getAdOsFilter() {
    return adOsFilter;
  }


  public void setAdOsFilter(String adOsFilter) {
    this.adOsFilter = adOsFilter;
  }


  public GatewayCreateMigration adSshPort(String adSshPort) {
    
    this.adSshPort = adSshPort;
    return this;
  }

   /**
   * Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration)
   * @return adSshPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set the SSH Port for further connection to the domain servers. Default is port 22 (Relevant only for Active Directory migration)")

  public String getAdSshPort() {
    return adSshPort;
  }


  public void setAdSshPort(String adSshPort) {
    this.adSshPort = adSshPort;
  }


  public GatewayCreateMigration adTargetsType(String adTargetsType) {
    
    this.adTargetsType = adTargetsType;
    return this;
  }

   /**
   * Set the target type of the domain servers [ssh/windows](Relevant only for Active Directory migration)
   * @return adTargetsType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set the target type of the domain servers [ssh/windows](Relevant only for Active Directory migration)")

  public String getAdTargetsType() {
    return adTargetsType;
  }


  public void setAdTargetsType(String adTargetsType) {
    this.adTargetsType = adTargetsType;
  }


  public GatewayCreateMigration adWinrmOverHttp(String adWinrmOverHttp) {
    
    this.adWinrmOverHttp = adWinrmOverHttp;
    return this;
  }

   /**
   * Use WinRM over HTTP, by default runs over HTTPS
   * @return adWinrmOverHttp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use WinRM over HTTP, by default runs over HTTPS")

  public String getAdWinrmOverHttp() {
    return adWinrmOverHttp;
  }


  public void setAdWinrmOverHttp(String adWinrmOverHttp) {
    this.adWinrmOverHttp = adWinrmOverHttp;
  }


  public GatewayCreateMigration adWinrmPort(String adWinrmPort) {
    
    this.adWinrmPort = adWinrmPort;
    return this;
  }

   /**
   * Set the WinRM Port for further connection to the domain servers. Default is 5986 (Relevant only for Active Directory migration)
   * @return adWinrmPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set the WinRM Port for further connection to the domain servers. Default is 5986 (Relevant only for Active Directory migration)")

  public String getAdWinrmPort() {
    return adWinrmPort;
  }


  public void setAdWinrmPort(String adWinrmPort) {
    this.adWinrmPort = adWinrmPort;
  }


  public GatewayCreateMigration adAutoRotate(String adAutoRotate) {
    
    this.adAutoRotate = adAutoRotate;
    return this;
  }

   /**
   * Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --ad-rotation-interval and --ad-rotation-hour parameters (Relevant only for Active Directory migration)
   * @return adAutoRotate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --ad-rotation-interval and --ad-rotation-hour parameters (Relevant only for Active Directory migration)")

  public String getAdAutoRotate() {
    return adAutoRotate;
  }


  public void setAdAutoRotate(String adAutoRotate) {
    this.adAutoRotate = adAutoRotate;
  }


  public GatewayCreateMigration adComputerBaseDn(String adComputerBaseDn) {
    
    this.adComputerBaseDn = adComputerBaseDn;
    return this;
  }

   /**
   * Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN&#x3D;Computers,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
   * @return adComputerBaseDn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Distinguished Name of Computer objects (servers) to search in Active Directory e.g.: CN=Computers,DC=example,DC=com (Relevant only for Active Directory migration)")

  public String getAdComputerBaseDn() {
    return adComputerBaseDn;
  }


  public void setAdComputerBaseDn(String adComputerBaseDn) {
    this.adComputerBaseDn = adComputerBaseDn;
  }


  public GatewayCreateMigration adDiscoverLocalUsers(String adDiscoverLocalUsers) {
    
    this.adDiscoverLocalUsers = adDiscoverLocalUsers;
    return this;
  }

   /**
   * Enable/Disable discovery of local users from each domain server and migrate them as SSH/Windows Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration) Deprecated: use AdDiscoverTypes
   * @return adDiscoverLocalUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable discovery of local users from each domain server and migrate them as SSH/Windows Rotated Secrets. Default is false: only domain users will be migrated. Discovery of local users might require further installation of SSH on the servers, based on the supplied computer base DN. This will be implemented automatically as part of the migration process (Relevant only for Active Directory migration) Deprecated: use AdDiscoverTypes")

  public String getAdDiscoverLocalUsers() {
    return adDiscoverLocalUsers;
  }


  public void setAdDiscoverLocalUsers(String adDiscoverLocalUsers) {
    this.adDiscoverLocalUsers = adDiscoverLocalUsers;
  }


  public GatewayCreateMigration adDomainName(String adDomainName) {
    
    this.adDomainName = adDomainName;
    return this;
  }

   /**
   * Active Directory Domain Name (Relevant only for Active Directory migration)
   * @return adDomainName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active Directory Domain Name (Relevant only for Active Directory migration)")

  public String getAdDomainName() {
    return adDomainName;
  }


  public void setAdDomainName(String adDomainName) {
    this.adDomainName = adDomainName;
  }


  public GatewayCreateMigration adDomainUsersPathTemplate(String adDomainUsersPathTemplate) {
    
    this.adDomainUsersPathTemplate = adDomainUsersPathTemplate;
    return this;
  }

   /**
   * Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration)
   * @return adDomainUsersPathTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path location template for migrating domain users as Rotated Secrets e.g.: .../DomainUsers/{{USERNAME}} (Relevant only for Active Directory migration)")

  public String getAdDomainUsersPathTemplate() {
    return adDomainUsersPathTemplate;
  }


  public void setAdDomainUsersPathTemplate(String adDomainUsersPathTemplate) {
    this.adDomainUsersPathTemplate = adDomainUsersPathTemplate;
  }


  public GatewayCreateMigration adLocalUsersIgnore(String adLocalUsersIgnore) {
    
    this.adLocalUsersIgnore = adLocalUsersIgnore;
    return this;
  }

   /**
   * Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration)
   * @return adLocalUsersIgnore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma-separated list of Local Users which should not be migrated (Relevant only for Active Directory migration)")

  public String getAdLocalUsersIgnore() {
    return adLocalUsersIgnore;
  }


  public void setAdLocalUsersIgnore(String adLocalUsersIgnore) {
    this.adLocalUsersIgnore = adLocalUsersIgnore;
  }


  public GatewayCreateMigration adLocalUsersPathTemplate(String adLocalUsersPathTemplate) {
    
    this.adLocalUsersPathTemplate = adLocalUsersPathTemplate;
    return this;
  }

   /**
   * Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration)
   * @return adLocalUsersPathTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path location template for migrating domain users as Rotated Secrets e.g.: .../LocalUsers/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Active Directory migration)")

  public String getAdLocalUsersPathTemplate() {
    return adLocalUsersPathTemplate;
  }


  public void setAdLocalUsersPathTemplate(String adLocalUsersPathTemplate) {
    this.adLocalUsersPathTemplate = adLocalUsersPathTemplate;
  }


  public GatewayCreateMigration adRotationHour(Integer adRotationHour) {
    
    this.adRotationHour = adRotationHour;
    return this;
  }

   /**
   * The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration)
   * @return adRotationHour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hour of the scheduled rotation in UTC (Relevant only for Active Directory migration)")

  public Integer getAdRotationHour() {
    return adRotationHour;
  }


  public void setAdRotationHour(Integer adRotationHour) {
    this.adRotationHour = adRotationHour;
  }


  public GatewayCreateMigration adRotationInterval(Integer adRotationInterval) {
    
    this.adRotationInterval = adRotationInterval;
    return this;
  }

   /**
   * The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration)
   * @return adRotationInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of days to wait between every automatic rotation [1-365] (Relevant only for Active Directory migration)")

  public Integer getAdRotationInterval() {
    return adRotationInterval;
  }


  public void setAdRotationInterval(Integer adRotationInterval) {
    this.adRotationInterval = adRotationInterval;
  }


  public GatewayCreateMigration adSraEnableRdp(String adSraEnableRdp) {
    
    this.adSraEnableRdp = adSraEnableRdp;
    return this;
  }

   /**
   * Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration)
   * @return adSraEnableRdp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Active Directory migration)")

  public String getAdSraEnableRdp() {
    return adSraEnableRdp;
  }


  public void setAdSraEnableRdp(String adSraEnableRdp) {
    this.adSraEnableRdp = adSraEnableRdp;
  }


  public GatewayCreateMigration adTargetName(String adTargetName) {
    
    this.adTargetName = adTargetName;
    return this;
  }

   /**
   * Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration)
   * @return adTargetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active Directory LDAP Target Name. Server type should be Active Directory (Relevant only for Active Directory migration)")

  public String getAdTargetName() {
    return adTargetName;
  }


  public void setAdTargetName(String adTargetName) {
    this.adTargetName = adTargetName;
  }


  public GatewayCreateMigration adTargetsPathTemplate(String adTargetsPathTemplate) {
    
    this.adTargetsPathTemplate = adTargetsPathTemplate;
    return this;
  }

   /**
   * Path location template for migrating domain servers as SSH/Windows Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration)
   * @return adTargetsPathTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path location template for migrating domain servers as SSH/Windows Targets e.g.: .../Servers/{{COMPUTER_NAME}} (Relevant only for Active Directory migration)")

  public String getAdTargetsPathTemplate() {
    return adTargetsPathTemplate;
  }


  public void setAdTargetsPathTemplate(String adTargetsPathTemplate) {
    this.adTargetsPathTemplate = adTargetsPathTemplate;
  }


  public GatewayCreateMigration adUserBaseDn(String adUserBaseDn) {
    
    this.adUserBaseDn = adUserBaseDn;
    return this;
  }

   /**
   * Distinguished Name of User objects to search in Active Directory, e.g.: CN&#x3D;Users,DC&#x3D;example,DC&#x3D;com (Relevant only for Active Directory migration)
   * @return adUserBaseDn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Distinguished Name of User objects to search in Active Directory, e.g.: CN=Users,DC=example,DC=com (Relevant only for Active Directory migration)")

  public String getAdUserBaseDn() {
    return adUserBaseDn;
  }


  public void setAdUserBaseDn(String adUserBaseDn) {
    this.adUserBaseDn = adUserBaseDn;
  }


  public GatewayCreateMigration adUserGroups(String adUserGroups) {
    
    this.adUserGroups = adUserGroups;
    return this;
  }

   /**
   * Comma-separated list of domain groups from which privileged domain users will be migrated. If empty, migrate all users based on the --ad-user-base-dn (Relevant only for Active Directory migration)
   * @return adUserGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma-separated list of domain groups from which privileged domain users will be migrated. If empty, migrate all users based on the --ad-user-base-dn (Relevant only for Active Directory migration)")

  public String getAdUserGroups() {
    return adUserGroups;
  }


  public void setAdUserGroups(String adUserGroups) {
    this.adUserGroups = adUserGroups;
  }


  public GatewayCreateMigration awsKey(String awsKey) {
    
    this.awsKey = awsKey;
    return this;
  }

   /**
   * AWS Secret Access Key (relevant only for AWS migration)
   * @return awsKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS Secret Access Key (relevant only for AWS migration)")

  public String getAwsKey() {
    return awsKey;
  }


  public void setAwsKey(String awsKey) {
    this.awsKey = awsKey;
  }


  public GatewayCreateMigration awsKeyId(String awsKeyId) {
    
    this.awsKeyId = awsKeyId;
    return this;
  }

   /**
   * AWS Access Key ID with sufficient permissions to get all secrets, e.g. &#39;arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]&#39; (relevant only for AWS migration)
   * @return awsKeyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS Access Key ID with sufficient permissions to get all secrets, e.g. 'arn:aws:secretsmanager:[Region]:[AccountId]:secret:[/path/to/secrets/_*]' (relevant only for AWS migration)")

  public String getAwsKeyId() {
    return awsKeyId;
  }


  public void setAwsKeyId(String awsKeyId) {
    this.awsKeyId = awsKeyId;
  }


  public GatewayCreateMigration awsRegion(String awsRegion) {
    
    this.awsRegion = awsRegion;
    return this;
  }

   /**
   * AWS region of the required Secrets Manager (relevant only for AWS migration)
   * @return awsRegion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS region of the required Secrets Manager (relevant only for AWS migration)")

  public String getAwsRegion() {
    return awsRegion;
  }


  public void setAwsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public GatewayCreateMigration azureClientId(String azureClientId) {
    
    this.azureClientId = azureClientId;
    return this;
  }

   /**
   * Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)
   * @return azureClientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Azure Key Vault Access client ID, should be Azure AD App with a service principal (relevant only for Azure Key Vault migration)")

  public String getAzureClientId() {
    return azureClientId;
  }


  public void setAzureClientId(String azureClientId) {
    this.azureClientId = azureClientId;
  }


  public GatewayCreateMigration azureKvName(String azureKvName) {
    
    this.azureKvName = azureKvName;
    return this;
  }

   /**
   * Azure Key Vault Name (relevant only for Azure Key Vault migration)
   * @return azureKvName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Azure Key Vault Name (relevant only for Azure Key Vault migration)")

  public String getAzureKvName() {
    return azureKvName;
  }


  public void setAzureKvName(String azureKvName) {
    this.azureKvName = azureKvName;
  }


  public GatewayCreateMigration azureSecret(String azureSecret) {
    
    this.azureSecret = azureSecret;
    return this;
  }

   /**
   * Azure Key Vault secret (relevant only for Azure Key Vault migration)
   * @return azureSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Azure Key Vault secret (relevant only for Azure Key Vault migration)")

  public String getAzureSecret() {
    return azureSecret;
  }


  public void setAzureSecret(String azureSecret) {
    this.azureSecret = azureSecret;
  }


  public GatewayCreateMigration azureTenantId(String azureTenantId) {
    
    this.azureTenantId = azureTenantId;
    return this;
  }

   /**
   * Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)
   * @return azureTenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Azure Key Vault Access tenant ID (relevant only for Azure Key Vault migration)")

  public String getAzureTenantId() {
    return azureTenantId;
  }


  public void setAzureTenantId(String azureTenantId) {
    this.azureTenantId = azureTenantId;
  }


  public GatewayCreateMigration gcpKey(String gcpKey) {
    
    this.gcpKey = gcpKey;
    return this;
  }

   /**
   * Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. &#39;roles/secretmanager.secretAccessor&#39; (relevant only for GCP migration)
   * @return gcpKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base64-encoded GCP Service Account private key text with sufficient permissions to Secrets Manager, Minimum required permission is Secret Manager Secret Accessor, e.g. 'roles/secretmanager.secretAccessor' (relevant only for GCP migration)")

  public String getGcpKey() {
    return gcpKey;
  }


  public void setGcpKey(String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public GatewayCreateMigration hashiJson(String hashiJson) {
    
    this.hashiJson = hashiJson;
    return this;
  }

   /**
   * Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration) [true/false]
   * @return hashiJson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Import secret key as json value or independent secrets (relevant only for HasiCorp Vault migration) [true/false]")

  public String getHashiJson() {
    return hashiJson;
  }


  public void setHashiJson(String hashiJson) {
    this.hashiJson = hashiJson;
  }


  public GatewayCreateMigration hashiNs(List<String> hashiNs) {
    
    this.hashiNs = hashiNs;
    return this;
  }

  public GatewayCreateMigration addHashiNsItem(String hashiNsItem) {
    if (this.hashiNs == null) {
      this.hashiNs = new ArrayList<String>();
    }
    this.hashiNs.add(hashiNsItem);
    return this;
  }

   /**
   * HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)
   * @return hashiNs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HashiCorp Vault Namespaces is a comma-separated list of namespaces which need to be imported into Akeyless Vault. For every provided namespace, all its child namespaces are imported as well, e.g. nmsp/subnmsp1/subnmsp2,nmsp/anothernmsp. By default, import all namespaces (relevant only for HasiCorp Vault migration)")

  public List<String> getHashiNs() {
    return hashiNs;
  }


  public void setHashiNs(List<String> hashiNs) {
    this.hashiNs = hashiNs;
  }


  public GatewayCreateMigration hashiToken(String hashiToken) {
    
    this.hashiToken = hashiToken;
    return this;
  }

   /**
   * HashiCorp Vault access token with sufficient permissions to preform list &amp; read operations on secrets objects (relevant only for HasiCorp Vault migration)
   * @return hashiToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HashiCorp Vault access token with sufficient permissions to preform list & read operations on secrets objects (relevant only for HasiCorp Vault migration)")

  public String getHashiToken() {
    return hashiToken;
  }


  public void setHashiToken(String hashiToken) {
    this.hashiToken = hashiToken;
  }


  public GatewayCreateMigration hashiUrl(String hashiUrl) {
    
    this.hashiUrl = hashiUrl;
    return this;
  }

   /**
   * HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)
   * @return hashiUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HashiCorp Vault API URL, e.g. https://vault-mgr01:8200 (relevant only for HasiCorp Vault migration)")

  public String getHashiUrl() {
    return hashiUrl;
  }


  public void setHashiUrl(String hashiUrl) {
    this.hashiUrl = hashiUrl;
  }


  public GatewayCreateMigration json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public GatewayCreateMigration k8sCaCertificate(List<Integer> k8sCaCertificate) {
    
    this.k8sCaCertificate = k8sCaCertificate;
    return this;
  }

  public GatewayCreateMigration addK8sCaCertificateItem(Integer k8sCaCertificateItem) {
    if (this.k8sCaCertificate == null) {
      this.k8sCaCertificate = new ArrayList<Integer>();
    }
    this.k8sCaCertificate.add(k8sCaCertificateItem);
    return this;
  }

   /**
   * For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sCaCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For Certificate Authentication method K8s Cluster CA certificate (relevant only for K8s migration with Certificate Authentication method)")

  public List<Integer> getK8sCaCertificate() {
    return k8sCaCertificate;
  }


  public void setK8sCaCertificate(List<Integer> k8sCaCertificate) {
    this.k8sCaCertificate = k8sCaCertificate;
  }


  public GatewayCreateMigration k8sClientCertificate(List<Integer> k8sClientCertificate) {
    
    this.k8sClientCertificate = k8sClientCertificate;
    return this;
  }

  public GatewayCreateMigration addK8sClientCertificateItem(Integer k8sClientCertificateItem) {
    if (this.k8sClientCertificate == null) {
      this.k8sClientCertificate = new ArrayList<Integer>();
    }
    this.k8sClientCertificate.add(k8sClientCertificateItem);
    return this;
  }

   /**
   * K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sClientCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s Client certificate with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Certificate Authentication method)")

  public List<Integer> getK8sClientCertificate() {
    return k8sClientCertificate;
  }


  public void setK8sClientCertificate(List<Integer> k8sClientCertificate) {
    this.k8sClientCertificate = k8sClientCertificate;
  }


  public GatewayCreateMigration k8sClientKey(List<Integer> k8sClientKey) {
    
    this.k8sClientKey = k8sClientKey;
    return this;
  }

  public GatewayCreateMigration addK8sClientKeyItem(Integer k8sClientKeyItem) {
    if (this.k8sClientKey == null) {
      this.k8sClientKey = new ArrayList<Integer>();
    }
    this.k8sClientKey.add(k8sClientKeyItem);
    return this;
  }

   /**
   * K8s Client key (relevant only for K8s migration with Certificate Authentication method)
   * @return k8sClientKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s Client key (relevant only for K8s migration with Certificate Authentication method)")

  public List<Integer> getK8sClientKey() {
    return k8sClientKey;
  }


  public void setK8sClientKey(List<Integer> k8sClientKey) {
    this.k8sClientKey = k8sClientKey;
  }


  public GatewayCreateMigration k8sNamespace(String k8sNamespace) {
    
    this.k8sNamespace = k8sNamespace;
    return this;
  }

   /**
   * K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)
   * @return k8sNamespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s Namespace, Use this field to import secrets from a particular namespace only. By default, the secrets are imported from all namespaces (relevant only for K8s migration)")

  public String getK8sNamespace() {
    return k8sNamespace;
  }


  public void setK8sNamespace(String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
  }


  public GatewayCreateMigration k8sPassword(String k8sPassword) {
    
    this.k8sPassword = k8sPassword;
    return this;
  }

   /**
   * K8s Client password (relevant only for K8s migration with Password Authentication method)
   * @return k8sPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s Client password (relevant only for K8s migration with Password Authentication method)")

  public String getK8sPassword() {
    return k8sPassword;
  }


  public void setK8sPassword(String k8sPassword) {
    this.k8sPassword = k8sPassword;
  }


  public GatewayCreateMigration k8sSkipSystem(Boolean k8sSkipSystem) {
    
    this.k8sSkipSystem = k8sSkipSystem;
    return this;
  }

   /**
   * K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)
   * @return k8sSkipSystem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s Skip Control Plane Secrets, This option allows to avoid importing secrets from system namespaces (relevant only for K8s migration)")

  public Boolean getK8sSkipSystem() {
    return k8sSkipSystem;
  }


  public void setK8sSkipSystem(Boolean k8sSkipSystem) {
    this.k8sSkipSystem = k8sSkipSystem;
  }


  public GatewayCreateMigration k8sToken(String k8sToken) {
    
    this.k8sToken = k8sToken;
    return this;
  }

   /**
   * For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)
   * @return k8sToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For Token Authentication method K8s Bearer Token with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Token Authentication method)")

  public String getK8sToken() {
    return k8sToken;
  }


  public void setK8sToken(String k8sToken) {
    this.k8sToken = k8sToken;
  }


  public GatewayCreateMigration k8sUrl(String k8sUrl) {
    
    this.k8sUrl = k8sUrl;
    return this;
  }

   /**
   * K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)
   * @return k8sUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "K8s API Server URL, e.g. https://k8s-api.mycompany.com:6443 (relevant only for K8s migration)")

  public String getK8sUrl() {
    return k8sUrl;
  }


  public void setK8sUrl(String k8sUrl) {
    this.k8sUrl = k8sUrl;
  }


  public GatewayCreateMigration k8sUsername(String k8sUsername) {
    
    this.k8sUsername = k8sUsername;
    return this;
  }

   /**
   * For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)
   * @return k8sUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For Password Authentication method K8s Client username with sufficient permission to list and get secrets in the namespace(s) you selected (relevant only for K8s migration with Password Authentication method)")

  public String getK8sUsername() {
    return k8sUsername;
  }


  public void setK8sUsername(String k8sUsername) {
    this.k8sUsername = k8sUsername;
  }


  public GatewayCreateMigration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Migration name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Migration name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayCreateMigration protectionKey(String protectionKey) {
    
    this.protectionKey = protectionKey;
    return this;
  }

   /**
   * The name of the key that protects the classic key value (if empty, the account default key will be used)
   * @return protectionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the key that protects the classic key value (if empty, the account default key will be used)")

  public String getProtectionKey() {
    return protectionKey;
  }


  public void setProtectionKey(String protectionKey) {
    this.protectionKey = protectionKey;
  }


  public GatewayCreateMigration siAutoRotate(String siAutoRotate) {
    
    this.siAutoRotate = siAutoRotate;
    return this;
  }

   /**
   * Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --si-rotation-interval and --si-rotation-hour parameters (Relevant only for Server Inventory migration)
   * @return siAutoRotate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable automatic/recurrent rotation for migrated secrets. Default is false: only manual rotation is allowed for migrated secrets. If set to true, this command should be combined with --si-rotation-interval and --si-rotation-hour parameters (Relevant only for Server Inventory migration)")

  public String getSiAutoRotate() {
    return siAutoRotate;
  }


  public void setSiAutoRotate(String siAutoRotate) {
    this.siAutoRotate = siAutoRotate;
  }


  public GatewayCreateMigration siRotationHour(Integer siRotationHour) {
    
    this.siRotationHour = siRotationHour;
    return this;
  }

   /**
   * The hour of the scheduled rotation in UTC (Relevant only for Server Inventory migration)
   * @return siRotationHour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hour of the scheduled rotation in UTC (Relevant only for Server Inventory migration)")

  public Integer getSiRotationHour() {
    return siRotationHour;
  }


  public void setSiRotationHour(Integer siRotationHour) {
    this.siRotationHour = siRotationHour;
  }


  public GatewayCreateMigration siRotationInterval(Integer siRotationInterval) {
    
    this.siRotationInterval = siRotationInterval;
    return this;
  }

   /**
   * The number of days to wait between every automatic rotation [1-365] (Relevant only for Server Inventory migration)
   * @return siRotationInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of days to wait between every automatic rotation [1-365] (Relevant only for Server Inventory migration)")

  public Integer getSiRotationInterval() {
    return siRotationInterval;
  }


  public void setSiRotationInterval(Integer siRotationInterval) {
    this.siRotationInterval = siRotationInterval;
  }


  public GatewayCreateMigration siSraEnableRdp(String siSraEnableRdp) {
    
    this.siSraEnableRdp = siSraEnableRdp;
    return this;
  }

   /**
   * Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Server Inventory migration)
   * @return siSraEnableRdp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable RDP Secure Remote Access for the migrated local users rotated secrets. Default is false: rotated secrets will not be created with SRA (Relevant only for Server Inventory migration)")

  public String getSiSraEnableRdp() {
    return siSraEnableRdp;
  }


  public void setSiSraEnableRdp(String siSraEnableRdp) {
    this.siSraEnableRdp = siSraEnableRdp;
  }


  public GatewayCreateMigration siTargetName(String siTargetName) {
    
    this.siTargetName = siTargetName;
    return this;
  }

   /**
   * SSH, Windows or Linked Target Name. (Relevant only for Server Inventory migration)
   * @return siTargetName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SSH, Windows or Linked Target Name. (Relevant only for Server Inventory migration)")

  public String getSiTargetName() {
    return siTargetName;
  }


  public void setSiTargetName(String siTargetName) {
    this.siTargetName = siTargetName;
  }


  public GatewayCreateMigration siUsersIgnore(String siUsersIgnore) {
    
    this.siUsersIgnore = siUsersIgnore;
    return this;
  }

   /**
   * Comma-separated list of Local Users which should not be migrated (Relevant only for Server Inventory migration)
   * @return siUsersIgnore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma-separated list of Local Users which should not be migrated (Relevant only for Server Inventory migration)")

  public String getSiUsersIgnore() {
    return siUsersIgnore;
  }


  public void setSiUsersIgnore(String siUsersIgnore) {
    this.siUsersIgnore = siUsersIgnore;
  }


  public GatewayCreateMigration siUsersPathTemplate(String siUsersPathTemplate) {
    
    this.siUsersPathTemplate = siUsersPathTemplate;
    return this;
  }

   /**
   * Path location template for migrating users as Rotated Secrets e.g.: .../Users/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Server Inventory migration)
   * @return siUsersPathTemplate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Path location template for migrating users as Rotated Secrets e.g.: .../Users/{{COMPUTER_NAME}}/{{USERNAME}} (Relevant only for Server Inventory migration)")

  public String getSiUsersPathTemplate() {
    return siUsersPathTemplate;
  }


  public void setSiUsersPathTemplate(String siUsersPathTemplate) {
    this.siUsersPathTemplate = siUsersPathTemplate;
  }


  public GatewayCreateMigration targetLocation(String targetLocation) {
    
    this.targetLocation = targetLocation;
    return this;
  }

   /**
   * Target location in Akeyless for imported secrets
   * @return targetLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Target location in Akeyless for imported secrets")

  public String getTargetLocation() {
    return targetLocation;
  }


  public void setTargetLocation(String targetLocation) {
    this.targetLocation = targetLocation;
  }


  public GatewayCreateMigration token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayCreateMigration type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory)
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Migration type (hashi/aws/gcp/k8s/azure_kv/1password/active_directory)")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public GatewayCreateMigration uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateMigration gatewayCreateMigration = (GatewayCreateMigration) o;
    return Objects.equals(this._1passwordEmail, gatewayCreateMigration._1passwordEmail) &&
        Objects.equals(this._1passwordPassword, gatewayCreateMigration._1passwordPassword) &&
        Objects.equals(this._1passwordSecretKey, gatewayCreateMigration._1passwordSecretKey) &&
        Objects.equals(this._1passwordUrl, gatewayCreateMigration._1passwordUrl) &&
        Objects.equals(this._1passwordVaults, gatewayCreateMigration._1passwordVaults) &&
        Objects.equals(this.adDiscoverServices, gatewayCreateMigration.adDiscoverServices) &&
        Objects.equals(this.adDiscoveryTypes, gatewayCreateMigration.adDiscoveryTypes) &&
        Objects.equals(this.adOsFilter, gatewayCreateMigration.adOsFilter) &&
        Objects.equals(this.adSshPort, gatewayCreateMigration.adSshPort) &&
        Objects.equals(this.adTargetsType, gatewayCreateMigration.adTargetsType) &&
        Objects.equals(this.adWinrmOverHttp, gatewayCreateMigration.adWinrmOverHttp) &&
        Objects.equals(this.adWinrmPort, gatewayCreateMigration.adWinrmPort) &&
        Objects.equals(this.adAutoRotate, gatewayCreateMigration.adAutoRotate) &&
        Objects.equals(this.adComputerBaseDn, gatewayCreateMigration.adComputerBaseDn) &&
        Objects.equals(this.adDiscoverLocalUsers, gatewayCreateMigration.adDiscoverLocalUsers) &&
        Objects.equals(this.adDomainName, gatewayCreateMigration.adDomainName) &&
        Objects.equals(this.adDomainUsersPathTemplate, gatewayCreateMigration.adDomainUsersPathTemplate) &&
        Objects.equals(this.adLocalUsersIgnore, gatewayCreateMigration.adLocalUsersIgnore) &&
        Objects.equals(this.adLocalUsersPathTemplate, gatewayCreateMigration.adLocalUsersPathTemplate) &&
        Objects.equals(this.adRotationHour, gatewayCreateMigration.adRotationHour) &&
        Objects.equals(this.adRotationInterval, gatewayCreateMigration.adRotationInterval) &&
        Objects.equals(this.adSraEnableRdp, gatewayCreateMigration.adSraEnableRdp) &&
        Objects.equals(this.adTargetName, gatewayCreateMigration.adTargetName) &&
        Objects.equals(this.adTargetsPathTemplate, gatewayCreateMigration.adTargetsPathTemplate) &&
        Objects.equals(this.adUserBaseDn, gatewayCreateMigration.adUserBaseDn) &&
        Objects.equals(this.adUserGroups, gatewayCreateMigration.adUserGroups) &&
        Objects.equals(this.awsKey, gatewayCreateMigration.awsKey) &&
        Objects.equals(this.awsKeyId, gatewayCreateMigration.awsKeyId) &&
        Objects.equals(this.awsRegion, gatewayCreateMigration.awsRegion) &&
        Objects.equals(this.azureClientId, gatewayCreateMigration.azureClientId) &&
        Objects.equals(this.azureKvName, gatewayCreateMigration.azureKvName) &&
        Objects.equals(this.azureSecret, gatewayCreateMigration.azureSecret) &&
        Objects.equals(this.azureTenantId, gatewayCreateMigration.azureTenantId) &&
        Objects.equals(this.gcpKey, gatewayCreateMigration.gcpKey) &&
        Objects.equals(this.hashiJson, gatewayCreateMigration.hashiJson) &&
        Objects.equals(this.hashiNs, gatewayCreateMigration.hashiNs) &&
        Objects.equals(this.hashiToken, gatewayCreateMigration.hashiToken) &&
        Objects.equals(this.hashiUrl, gatewayCreateMigration.hashiUrl) &&
        Objects.equals(this.json, gatewayCreateMigration.json) &&
        Objects.equals(this.k8sCaCertificate, gatewayCreateMigration.k8sCaCertificate) &&
        Objects.equals(this.k8sClientCertificate, gatewayCreateMigration.k8sClientCertificate) &&
        Objects.equals(this.k8sClientKey, gatewayCreateMigration.k8sClientKey) &&
        Objects.equals(this.k8sNamespace, gatewayCreateMigration.k8sNamespace) &&
        Objects.equals(this.k8sPassword, gatewayCreateMigration.k8sPassword) &&
        Objects.equals(this.k8sSkipSystem, gatewayCreateMigration.k8sSkipSystem) &&
        Objects.equals(this.k8sToken, gatewayCreateMigration.k8sToken) &&
        Objects.equals(this.k8sUrl, gatewayCreateMigration.k8sUrl) &&
        Objects.equals(this.k8sUsername, gatewayCreateMigration.k8sUsername) &&
        Objects.equals(this.name, gatewayCreateMigration.name) &&
        Objects.equals(this.protectionKey, gatewayCreateMigration.protectionKey) &&
        Objects.equals(this.siAutoRotate, gatewayCreateMigration.siAutoRotate) &&
        Objects.equals(this.siRotationHour, gatewayCreateMigration.siRotationHour) &&
        Objects.equals(this.siRotationInterval, gatewayCreateMigration.siRotationInterval) &&
        Objects.equals(this.siSraEnableRdp, gatewayCreateMigration.siSraEnableRdp) &&
        Objects.equals(this.siTargetName, gatewayCreateMigration.siTargetName) &&
        Objects.equals(this.siUsersIgnore, gatewayCreateMigration.siUsersIgnore) &&
        Objects.equals(this.siUsersPathTemplate, gatewayCreateMigration.siUsersPathTemplate) &&
        Objects.equals(this.targetLocation, gatewayCreateMigration.targetLocation) &&
        Objects.equals(this.token, gatewayCreateMigration.token) &&
        Objects.equals(this.type, gatewayCreateMigration.type) &&
        Objects.equals(this.uidToken, gatewayCreateMigration.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_1passwordEmail, _1passwordPassword, _1passwordSecretKey, _1passwordUrl, _1passwordVaults, adDiscoverServices, adDiscoveryTypes, adOsFilter, adSshPort, adTargetsType, adWinrmOverHttp, adWinrmPort, adAutoRotate, adComputerBaseDn, adDiscoverLocalUsers, adDomainName, adDomainUsersPathTemplate, adLocalUsersIgnore, adLocalUsersPathTemplate, adRotationHour, adRotationInterval, adSraEnableRdp, adTargetName, adTargetsPathTemplate, adUserBaseDn, adUserGroups, awsKey, awsKeyId, awsRegion, azureClientId, azureKvName, azureSecret, azureTenantId, gcpKey, hashiJson, hashiNs, hashiToken, hashiUrl, json, k8sCaCertificate, k8sClientCertificate, k8sClientKey, k8sNamespace, k8sPassword, k8sSkipSystem, k8sToken, k8sUrl, k8sUsername, name, protectionKey, siAutoRotate, siRotationHour, siRotationInterval, siSraEnableRdp, siTargetName, siUsersIgnore, siUsersPathTemplate, targetLocation, token, type, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateMigration {\n");
    sb.append("    _1passwordEmail: ").append(toIndentedString(_1passwordEmail)).append("\n");
    sb.append("    _1passwordPassword: ").append(toIndentedString(_1passwordPassword)).append("\n");
    sb.append("    _1passwordSecretKey: ").append(toIndentedString(_1passwordSecretKey)).append("\n");
    sb.append("    _1passwordUrl: ").append(toIndentedString(_1passwordUrl)).append("\n");
    sb.append("    _1passwordVaults: ").append(toIndentedString(_1passwordVaults)).append("\n");
    sb.append("    adDiscoverServices: ").append(toIndentedString(adDiscoverServices)).append("\n");
    sb.append("    adDiscoveryTypes: ").append(toIndentedString(adDiscoveryTypes)).append("\n");
    sb.append("    adOsFilter: ").append(toIndentedString(adOsFilter)).append("\n");
    sb.append("    adSshPort: ").append(toIndentedString(adSshPort)).append("\n");
    sb.append("    adTargetsType: ").append(toIndentedString(adTargetsType)).append("\n");
    sb.append("    adWinrmOverHttp: ").append(toIndentedString(adWinrmOverHttp)).append("\n");
    sb.append("    adWinrmPort: ").append(toIndentedString(adWinrmPort)).append("\n");
    sb.append("    adAutoRotate: ").append(toIndentedString(adAutoRotate)).append("\n");
    sb.append("    adComputerBaseDn: ").append(toIndentedString(adComputerBaseDn)).append("\n");
    sb.append("    adDiscoverLocalUsers: ").append(toIndentedString(adDiscoverLocalUsers)).append("\n");
    sb.append("    adDomainName: ").append(toIndentedString(adDomainName)).append("\n");
    sb.append("    adDomainUsersPathTemplate: ").append(toIndentedString(adDomainUsersPathTemplate)).append("\n");
    sb.append("    adLocalUsersIgnore: ").append(toIndentedString(adLocalUsersIgnore)).append("\n");
    sb.append("    adLocalUsersPathTemplate: ").append(toIndentedString(adLocalUsersPathTemplate)).append("\n");
    sb.append("    adRotationHour: ").append(toIndentedString(adRotationHour)).append("\n");
    sb.append("    adRotationInterval: ").append(toIndentedString(adRotationInterval)).append("\n");
    sb.append("    adSraEnableRdp: ").append(toIndentedString(adSraEnableRdp)).append("\n");
    sb.append("    adTargetName: ").append(toIndentedString(adTargetName)).append("\n");
    sb.append("    adTargetsPathTemplate: ").append(toIndentedString(adTargetsPathTemplate)).append("\n");
    sb.append("    adUserBaseDn: ").append(toIndentedString(adUserBaseDn)).append("\n");
    sb.append("    adUserGroups: ").append(toIndentedString(adUserGroups)).append("\n");
    sb.append("    awsKey: ").append(toIndentedString(awsKey)).append("\n");
    sb.append("    awsKeyId: ").append(toIndentedString(awsKeyId)).append("\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    azureClientId: ").append(toIndentedString(azureClientId)).append("\n");
    sb.append("    azureKvName: ").append(toIndentedString(azureKvName)).append("\n");
    sb.append("    azureSecret: ").append(toIndentedString(azureSecret)).append("\n");
    sb.append("    azureTenantId: ").append(toIndentedString(azureTenantId)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    hashiJson: ").append(toIndentedString(hashiJson)).append("\n");
    sb.append("    hashiNs: ").append(toIndentedString(hashiNs)).append("\n");
    sb.append("    hashiToken: ").append(toIndentedString(hashiToken)).append("\n");
    sb.append("    hashiUrl: ").append(toIndentedString(hashiUrl)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    k8sCaCertificate: ").append(toIndentedString(k8sCaCertificate)).append("\n");
    sb.append("    k8sClientCertificate: ").append(toIndentedString(k8sClientCertificate)).append("\n");
    sb.append("    k8sClientKey: ").append(toIndentedString(k8sClientKey)).append("\n");
    sb.append("    k8sNamespace: ").append(toIndentedString(k8sNamespace)).append("\n");
    sb.append("    k8sPassword: ").append(toIndentedString(k8sPassword)).append("\n");
    sb.append("    k8sSkipSystem: ").append(toIndentedString(k8sSkipSystem)).append("\n");
    sb.append("    k8sToken: ").append(toIndentedString(k8sToken)).append("\n");
    sb.append("    k8sUrl: ").append(toIndentedString(k8sUrl)).append("\n");
    sb.append("    k8sUsername: ").append(toIndentedString(k8sUsername)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionKey: ").append(toIndentedString(protectionKey)).append("\n");
    sb.append("    siAutoRotate: ").append(toIndentedString(siAutoRotate)).append("\n");
    sb.append("    siRotationHour: ").append(toIndentedString(siRotationHour)).append("\n");
    sb.append("    siRotationInterval: ").append(toIndentedString(siRotationInterval)).append("\n");
    sb.append("    siSraEnableRdp: ").append(toIndentedString(siSraEnableRdp)).append("\n");
    sb.append("    siTargetName: ").append(toIndentedString(siTargetName)).append("\n");
    sb.append("    siUsersIgnore: ").append(toIndentedString(siUsersIgnore)).append("\n");
    sb.append("    siUsersPathTemplate: ").append(toIndentedString(siUsersPathTemplate)).append("\n");
    sb.append("    targetLocation: ").append(toIndentedString(targetLocation)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

