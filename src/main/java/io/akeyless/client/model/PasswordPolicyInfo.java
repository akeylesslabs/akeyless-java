/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * PasswordPolicyInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PasswordPolicyInfo {
  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password_length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private Long passwordLength;

  public static final String SERIALIZED_NAME_USE_CAPITAL_LETTERS = "use_capital_letters";
  @SerializedName(SERIALIZED_NAME_USE_CAPITAL_LETTERS)
  @javax.annotation.Nullable
  private Boolean useCapitalLetters;

  public static final String SERIALIZED_NAME_USE_LOWER_LETTERS = "use_lower_letters";
  @SerializedName(SERIALIZED_NAME_USE_LOWER_LETTERS)
  @javax.annotation.Nullable
  private Boolean useLowerLetters;

  public static final String SERIALIZED_NAME_USE_NUMBERS = "use_numbers";
  @SerializedName(SERIALIZED_NAME_USE_NUMBERS)
  @javax.annotation.Nullable
  private Boolean useNumbers;

  public static final String SERIALIZED_NAME_USE_SPECIAL_CHARACTERS = "use_special_characters";
  @SerializedName(SERIALIZED_NAME_USE_SPECIAL_CHARACTERS)
  @javax.annotation.Nullable
  private Boolean useSpecialCharacters;

  public PasswordPolicyInfo() {
  }

  public PasswordPolicyInfo passwordLength(@javax.annotation.Nullable Long passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * Get passwordLength
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public Long getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable Long passwordLength) {
    this.passwordLength = passwordLength;
  }


  public PasswordPolicyInfo useCapitalLetters(@javax.annotation.Nullable Boolean useCapitalLetters) {
    this.useCapitalLetters = useCapitalLetters;
    return this;
  }

  /**
   * Get useCapitalLetters
   * @return useCapitalLetters
   */
  @javax.annotation.Nullable
  public Boolean getUseCapitalLetters() {
    return useCapitalLetters;
  }

  public void setUseCapitalLetters(@javax.annotation.Nullable Boolean useCapitalLetters) {
    this.useCapitalLetters = useCapitalLetters;
  }


  public PasswordPolicyInfo useLowerLetters(@javax.annotation.Nullable Boolean useLowerLetters) {
    this.useLowerLetters = useLowerLetters;
    return this;
  }

  /**
   * Get useLowerLetters
   * @return useLowerLetters
   */
  @javax.annotation.Nullable
  public Boolean getUseLowerLetters() {
    return useLowerLetters;
  }

  public void setUseLowerLetters(@javax.annotation.Nullable Boolean useLowerLetters) {
    this.useLowerLetters = useLowerLetters;
  }


  public PasswordPolicyInfo useNumbers(@javax.annotation.Nullable Boolean useNumbers) {
    this.useNumbers = useNumbers;
    return this;
  }

  /**
   * Get useNumbers
   * @return useNumbers
   */
  @javax.annotation.Nullable
  public Boolean getUseNumbers() {
    return useNumbers;
  }

  public void setUseNumbers(@javax.annotation.Nullable Boolean useNumbers) {
    this.useNumbers = useNumbers;
  }


  public PasswordPolicyInfo useSpecialCharacters(@javax.annotation.Nullable Boolean useSpecialCharacters) {
    this.useSpecialCharacters = useSpecialCharacters;
    return this;
  }

  /**
   * Get useSpecialCharacters
   * @return useSpecialCharacters
   */
  @javax.annotation.Nullable
  public Boolean getUseSpecialCharacters() {
    return useSpecialCharacters;
  }

  public void setUseSpecialCharacters(@javax.annotation.Nullable Boolean useSpecialCharacters) {
    this.useSpecialCharacters = useSpecialCharacters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyInfo passwordPolicyInfo = (PasswordPolicyInfo) o;
    return Objects.equals(this.passwordLength, passwordPolicyInfo.passwordLength) &&
        Objects.equals(this.useCapitalLetters, passwordPolicyInfo.useCapitalLetters) &&
        Objects.equals(this.useLowerLetters, passwordPolicyInfo.useLowerLetters) &&
        Objects.equals(this.useNumbers, passwordPolicyInfo.useNumbers) &&
        Objects.equals(this.useSpecialCharacters, passwordPolicyInfo.useSpecialCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passwordLength, useCapitalLetters, useLowerLetters, useNumbers, useSpecialCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyInfo {\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    useCapitalLetters: ").append(toIndentedString(useCapitalLetters)).append("\n");
    sb.append("    useLowerLetters: ").append(toIndentedString(useLowerLetters)).append("\n");
    sb.append("    useNumbers: ").append(toIndentedString(useNumbers)).append("\n");
    sb.append("    useSpecialCharacters: ").append(toIndentedString(useSpecialCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("password_length");
    openapiFields.add("use_capital_letters");
    openapiFields.add("use_lower_letters");
    openapiFields.add("use_numbers");
    openapiFields.add("use_special_characters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordPolicyInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordPolicyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyInfo is not found in the empty JSON string", PasswordPolicyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordPolicyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordPolicyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyInfo>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordPolicyInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordPolicyInfo
   * @throws IOException if the JSON string is invalid with respect to PasswordPolicyInfo
   */
  public static PasswordPolicyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyInfo.class);
  }

  /**
   * Convert an instance of PasswordPolicyInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

