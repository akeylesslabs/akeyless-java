/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ClientUsageInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ClientUsageInfo {
  public static final String SERIALIZED_NAME_ACCESS_ID = "access_id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  @javax.annotation.Nullable
  private String accessId;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nullable
  private String accessType;

  public static final String SERIALIZED_NAME_AUTH_METHOD_NAME = "auth_method_name";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD_NAME)
  @javax.annotation.Nullable
  private String authMethodName;

  public static final String SERIALIZED_NAME_CLIENT_UNIQUE_ID = "client_unique_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_UNIQUE_ID)
  @javax.annotation.Nullable
  private String clientUniqueId;

  public static final String SERIALIZED_NAME_EXCEEDED_CLIENTS = "exceeded_clients";
  @SerializedName(SERIALIZED_NAME_EXCEEDED_CLIENTS)
  @javax.annotation.Nullable
  private Long exceededClients;

  public ClientUsageInfo() {
  }

  public ClientUsageInfo accessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * Get accessId
   * @return accessId
   */
  @javax.annotation.Nullable
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(@javax.annotation.Nullable String accessId) {
    this.accessId = accessId;
  }


  public ClientUsageInfo accessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public String getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nullable String accessType) {
    this.accessType = accessType;
  }


  public ClientUsageInfo authMethodName(@javax.annotation.Nullable String authMethodName) {
    this.authMethodName = authMethodName;
    return this;
  }

  /**
   * Get authMethodName
   * @return authMethodName
   */
  @javax.annotation.Nullable
  public String getAuthMethodName() {
    return authMethodName;
  }

  public void setAuthMethodName(@javax.annotation.Nullable String authMethodName) {
    this.authMethodName = authMethodName;
  }


  public ClientUsageInfo clientUniqueId(@javax.annotation.Nullable String clientUniqueId) {
    this.clientUniqueId = clientUniqueId;
    return this;
  }

  /**
   * Get clientUniqueId
   * @return clientUniqueId
   */
  @javax.annotation.Nullable
  public String getClientUniqueId() {
    return clientUniqueId;
  }

  public void setClientUniqueId(@javax.annotation.Nullable String clientUniqueId) {
    this.clientUniqueId = clientUniqueId;
  }


  public ClientUsageInfo exceededClients(@javax.annotation.Nullable Long exceededClients) {
    this.exceededClients = exceededClients;
    return this;
  }

  /**
   * Get exceededClients
   * @return exceededClients
   */
  @javax.annotation.Nullable
  public Long getExceededClients() {
    return exceededClients;
  }

  public void setExceededClients(@javax.annotation.Nullable Long exceededClients) {
    this.exceededClients = exceededClients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientUsageInfo clientUsageInfo = (ClientUsageInfo) o;
    return Objects.equals(this.accessId, clientUsageInfo.accessId) &&
        Objects.equals(this.accessType, clientUsageInfo.accessType) &&
        Objects.equals(this.authMethodName, clientUsageInfo.authMethodName) &&
        Objects.equals(this.clientUniqueId, clientUsageInfo.clientUniqueId) &&
        Objects.equals(this.exceededClients, clientUsageInfo.exceededClients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, accessType, authMethodName, clientUniqueId, exceededClients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientUsageInfo {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    authMethodName: ").append(toIndentedString(authMethodName)).append("\n");
    sb.append("    clientUniqueId: ").append(toIndentedString(clientUniqueId)).append("\n");
    sb.append("    exceededClients: ").append(toIndentedString(exceededClients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_id");
    openapiFields.add("access_type");
    openapiFields.add("auth_method_name");
    openapiFields.add("client_unique_id");
    openapiFields.add("exceeded_clients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientUsageInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientUsageInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientUsageInfo is not found in the empty JSON string", ClientUsageInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientUsageInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientUsageInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_id") != null && !jsonObj.get("access_id").isJsonNull()) && !jsonObj.get("access_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_id").toString()));
      }
      if ((jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) && !jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      if ((jsonObj.get("auth_method_name") != null && !jsonObj.get("auth_method_name").isJsonNull()) && !jsonObj.get("auth_method_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_method_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_method_name").toString()));
      }
      if ((jsonObj.get("client_unique_id") != null && !jsonObj.get("client_unique_id").isJsonNull()) && !jsonObj.get("client_unique_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_unique_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_unique_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientUsageInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientUsageInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientUsageInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientUsageInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientUsageInfo>() {
           @Override
           public void write(JsonWriter out, ClientUsageInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientUsageInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientUsageInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientUsageInfo
   * @throws IOException if the JSON string is invalid with respect to ClientUsageInfo
   */
  public static ClientUsageInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientUsageInfo.class);
  }

  /**
   * Convert an instance of ClientUsageInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

