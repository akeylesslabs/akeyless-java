/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayUpdateRemoteAccess is a command that update remote access config
 */
@ApiModel(description = "gatewayUpdateRemoteAccess is a command that update remote access config")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayUpdateRemoteAccess {
  public static final String SERIALIZED_NAME_ALLOWED_URLS = "allowed-urls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_URLS)
  private String allowedUrls = "use-existing";

  public static final String SERIALIZED_NAME_HIDE_SESSION_RECORDING = "hide-session-recording";
  @SerializedName(SERIALIZED_NAME_HIDE_SESSION_RECORDING)
  private String hideSessionRecording;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEXALGS = "kexalgs";
  @SerializedName(SERIALIZED_NAME_KEXALGS)
  private String kexalgs = "use-existing";

  public static final String SERIALIZED_NAME_KEYBOARD_LAYOUT = "keyboard-layout";
  @SerializedName(SERIALIZED_NAME_KEYBOARD_LAYOUT)
  private String keyboardLayout = "use-existing";

  public static final String SERIALIZED_NAME_LEGACY_SSH_ALGORITHM = "legacy-ssh-algorithm";
  @SerializedName(SERIALIZED_NAME_LEGACY_SSH_ALGORITHM)
  private String legacySshAlgorithm;

  public static final String SERIALIZED_NAME_RDP_TARGET_CONFIGURATION = "rdp-target-configuration";
  @SerializedName(SERIALIZED_NAME_RDP_TARGET_CONFIGURATION)
  private String rdpTargetConfiguration = "use-existing";

  public static final String SERIALIZED_NAME_SSH_TARGET_CONFIGURATION = "ssh-target-configuration";
  @SerializedName(SERIALIZED_NAME_SSH_TARGET_CONFIGURATION)
  private String sshTargetConfiguration = "use-existing";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public GatewayUpdateRemoteAccess() { 
  }

  public GatewayUpdateRemoteAccess allowedUrls(String allowedUrls) {
    
    this.allowedUrls = allowedUrls;
    return this;
  }

   /**
   * List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)
   * @return allowedUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)")

  public String getAllowedUrls() {
    return allowedUrls;
  }


  public void setAllowedUrls(String allowedUrls) {
    this.allowedUrls = allowedUrls;
  }


  public GatewayUpdateRemoteAccess hideSessionRecording(String hideSessionRecording) {
    
    this.hideSessionRecording = hideSessionRecording;
    return this;
  }

   /**
   * Specifies whether to show/hide if the session is currently recorded [true/false]
   * @return hideSessionRecording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to show/hide if the session is currently recorded [true/false]")

  public String getHideSessionRecording() {
    return hideSessionRecording;
  }


  public void setHideSessionRecording(String hideSessionRecording) {
    this.hideSessionRecording = hideSessionRecording;
  }


  public GatewayUpdateRemoteAccess json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public GatewayUpdateRemoteAccess kexalgs(String kexalgs) {
    
    this.kexalgs = kexalgs;
    return this;
  }

   /**
   * Decide which algorithm will be used as part of the SSH initial hand-shake process
   * @return kexalgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Decide which algorithm will be used as part of the SSH initial hand-shake process")

  public String getKexalgs() {
    return kexalgs;
  }


  public void setKexalgs(String kexalgs) {
    this.kexalgs = kexalgs;
  }


  public GatewayUpdateRemoteAccess keyboardLayout(String keyboardLayout) {
    
    this.keyboardLayout = keyboardLayout;
    return this;
  }

   /**
   * Enable support for additional keyboard layouts
   * @return keyboardLayout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable support for additional keyboard layouts")

  public String getKeyboardLayout() {
    return keyboardLayout;
  }


  public void setKeyboardLayout(String keyboardLayout) {
    this.keyboardLayout = keyboardLayout;
  }


  public GatewayUpdateRemoteAccess legacySshAlgorithm(String legacySshAlgorithm) {
    
    this.legacySshAlgorithm = legacySshAlgorithm;
    return this;
  }

   /**
   * Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]
   * @return legacySshAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]")

  public String getLegacySshAlgorithm() {
    return legacySshAlgorithm;
  }


  public void setLegacySshAlgorithm(String legacySshAlgorithm) {
    this.legacySshAlgorithm = legacySshAlgorithm;
  }


  public GatewayUpdateRemoteAccess rdpTargetConfiguration(String rdpTargetConfiguration) {
    
    this.rdpTargetConfiguration = rdpTargetConfiguration;
    return this;
  }

   /**
   * Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
   * @return rdpTargetConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email")

  public String getRdpTargetConfiguration() {
    return rdpTargetConfiguration;
  }


  public void setRdpTargetConfiguration(String rdpTargetConfiguration) {
    this.rdpTargetConfiguration = rdpTargetConfiguration;
  }


  public GatewayUpdateRemoteAccess sshTargetConfiguration(String sshTargetConfiguration) {
    
    this.sshTargetConfiguration = sshTargetConfiguration;
    return this;
  }

   /**
   * Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
   * @return sshTargetConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email")

  public String getSshTargetConfiguration() {
    return sshTargetConfiguration;
  }


  public void setSshTargetConfiguration(String sshTargetConfiguration) {
    this.sshTargetConfiguration = sshTargetConfiguration;
  }


  public GatewayUpdateRemoteAccess token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayUpdateRemoteAccess uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess = (GatewayUpdateRemoteAccess) o;
    return Objects.equals(this.allowedUrls, gatewayUpdateRemoteAccess.allowedUrls) &&
        Objects.equals(this.hideSessionRecording, gatewayUpdateRemoteAccess.hideSessionRecording) &&
        Objects.equals(this.json, gatewayUpdateRemoteAccess.json) &&
        Objects.equals(this.kexalgs, gatewayUpdateRemoteAccess.kexalgs) &&
        Objects.equals(this.keyboardLayout, gatewayUpdateRemoteAccess.keyboardLayout) &&
        Objects.equals(this.legacySshAlgorithm, gatewayUpdateRemoteAccess.legacySshAlgorithm) &&
        Objects.equals(this.rdpTargetConfiguration, gatewayUpdateRemoteAccess.rdpTargetConfiguration) &&
        Objects.equals(this.sshTargetConfiguration, gatewayUpdateRemoteAccess.sshTargetConfiguration) &&
        Objects.equals(this.token, gatewayUpdateRemoteAccess.token) &&
        Objects.equals(this.uidToken, gatewayUpdateRemoteAccess.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUrls, hideSessionRecording, json, kexalgs, keyboardLayout, legacySshAlgorithm, rdpTargetConfiguration, sshTargetConfiguration, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateRemoteAccess {\n");
    sb.append("    allowedUrls: ").append(toIndentedString(allowedUrls)).append("\n");
    sb.append("    hideSessionRecording: ").append(toIndentedString(hideSessionRecording)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    kexalgs: ").append(toIndentedString(kexalgs)).append("\n");
    sb.append("    keyboardLayout: ").append(toIndentedString(keyboardLayout)).append("\n");
    sb.append("    legacySshAlgorithm: ").append(toIndentedString(legacySshAlgorithm)).append("\n");
    sb.append("    rdpTargetConfiguration: ").append(toIndentedString(rdpTargetConfiguration)).append("\n");
    sb.append("    sshTargetConfiguration: ").append(toIndentedString(sshTargetConfiguration)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

