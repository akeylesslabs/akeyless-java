/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateRemoteAccess is a command that update remote access config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateRemoteAccess {
  public static final String SERIALIZED_NAME_ALLOWED_URLS = "allowed-urls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_URLS)
  @javax.annotation.Nullable
  private String allowedUrls = "use-existing";

  public static final String SERIALIZED_NAME_HIDE_SESSION_RECORDING = "hide-session-recording";
  @SerializedName(SERIALIZED_NAME_HIDE_SESSION_RECORDING)
  @javax.annotation.Nullable
  private String hideSessionRecording;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEXALGS = "kexalgs";
  @SerializedName(SERIALIZED_NAME_KEXALGS)
  @javax.annotation.Nullable
  private String kexalgs = "use-existing";

  public static final String SERIALIZED_NAME_KEYBOARD_LAYOUT = "keyboard-layout";
  @SerializedName(SERIALIZED_NAME_KEYBOARD_LAYOUT)
  @javax.annotation.Nullable
  private String keyboardLayout = "use-existing";

  public static final String SERIALIZED_NAME_LEGACY_SSH_ALGORITHM = "legacy-ssh-algorithm";
  @SerializedName(SERIALIZED_NAME_LEGACY_SSH_ALGORITHM)
  @javax.annotation.Nullable
  private String legacySshAlgorithm;

  public static final String SERIALIZED_NAME_RDP_TARGET_CONFIGURATION = "rdp-target-configuration";
  @SerializedName(SERIALIZED_NAME_RDP_TARGET_CONFIGURATION)
  @javax.annotation.Nullable
  private String rdpTargetConfiguration = "use-existing";

  public static final String SERIALIZED_NAME_SSH_TARGET_CONFIGURATION = "ssh-target-configuration";
  @SerializedName(SERIALIZED_NAME_SSH_TARGET_CONFIGURATION)
  @javax.annotation.Nullable
  private String sshTargetConfiguration = "use-existing";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public GatewayUpdateRemoteAccess() {
  }

  public GatewayUpdateRemoteAccess allowedUrls(@javax.annotation.Nullable String allowedUrls) {
    this.allowedUrls = allowedUrls;
    return this;
  }

  /**
   * List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)
   * @return allowedUrls
   */
  @javax.annotation.Nullable
  public String getAllowedUrls() {
    return allowedUrls;
  }

  public void setAllowedUrls(@javax.annotation.Nullable String allowedUrls) {
    this.allowedUrls = allowedUrls;
  }


  public GatewayUpdateRemoteAccess hideSessionRecording(@javax.annotation.Nullable String hideSessionRecording) {
    this.hideSessionRecording = hideSessionRecording;
    return this;
  }

  /**
   * Specifies whether to show/hide if the session is currently recorded [true/false]
   * @return hideSessionRecording
   */
  @javax.annotation.Nullable
  public String getHideSessionRecording() {
    return hideSessionRecording;
  }

  public void setHideSessionRecording(@javax.annotation.Nullable String hideSessionRecording) {
    this.hideSessionRecording = hideSessionRecording;
  }


  public GatewayUpdateRemoteAccess json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateRemoteAccess kexalgs(@javax.annotation.Nullable String kexalgs) {
    this.kexalgs = kexalgs;
    return this;
  }

  /**
   * Decide which algorithm will be used as part of the SSH initial hand-shake process
   * @return kexalgs
   */
  @javax.annotation.Nullable
  public String getKexalgs() {
    return kexalgs;
  }

  public void setKexalgs(@javax.annotation.Nullable String kexalgs) {
    this.kexalgs = kexalgs;
  }


  public GatewayUpdateRemoteAccess keyboardLayout(@javax.annotation.Nullable String keyboardLayout) {
    this.keyboardLayout = keyboardLayout;
    return this;
  }

  /**
   * Enable support for additional keyboard layouts
   * @return keyboardLayout
   */
  @javax.annotation.Nullable
  public String getKeyboardLayout() {
    return keyboardLayout;
  }

  public void setKeyboardLayout(@javax.annotation.Nullable String keyboardLayout) {
    this.keyboardLayout = keyboardLayout;
  }


  public GatewayUpdateRemoteAccess legacySshAlgorithm(@javax.annotation.Nullable String legacySshAlgorithm) {
    this.legacySshAlgorithm = legacySshAlgorithm;
    return this;
  }

  /**
   * Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]
   * @return legacySshAlgorithm
   */
  @javax.annotation.Nullable
  public String getLegacySshAlgorithm() {
    return legacySshAlgorithm;
  }

  public void setLegacySshAlgorithm(@javax.annotation.Nullable String legacySshAlgorithm) {
    this.legacySshAlgorithm = legacySshAlgorithm;
  }


  public GatewayUpdateRemoteAccess rdpTargetConfiguration(@javax.annotation.Nullable String rdpTargetConfiguration) {
    this.rdpTargetConfiguration = rdpTargetConfiguration;
    return this;
  }

  /**
   * Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
   * @return rdpTargetConfiguration
   */
  @javax.annotation.Nullable
  public String getRdpTargetConfiguration() {
    return rdpTargetConfiguration;
  }

  public void setRdpTargetConfiguration(@javax.annotation.Nullable String rdpTargetConfiguration) {
    this.rdpTargetConfiguration = rdpTargetConfiguration;
  }


  public GatewayUpdateRemoteAccess sshTargetConfiguration(@javax.annotation.Nullable String sshTargetConfiguration) {
    this.sshTargetConfiguration = sshTargetConfiguration;
    return this;
  }

  /**
   * Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email
   * @return sshTargetConfiguration
   */
  @javax.annotation.Nullable
  public String getSshTargetConfiguration() {
    return sshTargetConfiguration;
  }

  public void setSshTargetConfiguration(@javax.annotation.Nullable String sshTargetConfiguration) {
    this.sshTargetConfiguration = sshTargetConfiguration;
  }


  public GatewayUpdateRemoteAccess token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateRemoteAccess uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateRemoteAccess gatewayUpdateRemoteAccess = (GatewayUpdateRemoteAccess) o;
    return Objects.equals(this.allowedUrls, gatewayUpdateRemoteAccess.allowedUrls) &&
        Objects.equals(this.hideSessionRecording, gatewayUpdateRemoteAccess.hideSessionRecording) &&
        Objects.equals(this.json, gatewayUpdateRemoteAccess.json) &&
        Objects.equals(this.kexalgs, gatewayUpdateRemoteAccess.kexalgs) &&
        Objects.equals(this.keyboardLayout, gatewayUpdateRemoteAccess.keyboardLayout) &&
        Objects.equals(this.legacySshAlgorithm, gatewayUpdateRemoteAccess.legacySshAlgorithm) &&
        Objects.equals(this.rdpTargetConfiguration, gatewayUpdateRemoteAccess.rdpTargetConfiguration) &&
        Objects.equals(this.sshTargetConfiguration, gatewayUpdateRemoteAccess.sshTargetConfiguration) &&
        Objects.equals(this.token, gatewayUpdateRemoteAccess.token) &&
        Objects.equals(this.uidToken, gatewayUpdateRemoteAccess.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUrls, hideSessionRecording, json, kexalgs, keyboardLayout, legacySshAlgorithm, rdpTargetConfiguration, sshTargetConfiguration, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateRemoteAccess {\n");
    sb.append("    allowedUrls: ").append(toIndentedString(allowedUrls)).append("\n");
    sb.append("    hideSessionRecording: ").append(toIndentedString(hideSessionRecording)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    kexalgs: ").append(toIndentedString(kexalgs)).append("\n");
    sb.append("    keyboardLayout: ").append(toIndentedString(keyboardLayout)).append("\n");
    sb.append("    legacySshAlgorithm: ").append(toIndentedString(legacySshAlgorithm)).append("\n");
    sb.append("    rdpTargetConfiguration: ").append(toIndentedString(rdpTargetConfiguration)).append("\n");
    sb.append("    sshTargetConfiguration: ").append(toIndentedString(sshTargetConfiguration)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed-urls");
    openapiFields.add("hide-session-recording");
    openapiFields.add("json");
    openapiFields.add("kexalgs");
    openapiFields.add("keyboard-layout");
    openapiFields.add("legacy-ssh-algorithm");
    openapiFields.add("rdp-target-configuration");
    openapiFields.add("ssh-target-configuration");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateRemoteAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateRemoteAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateRemoteAccess is not found in the empty JSON string", GatewayUpdateRemoteAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateRemoteAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateRemoteAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowed-urls") != null && !jsonObj.get("allowed-urls").isJsonNull()) && !jsonObj.get("allowed-urls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-urls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed-urls").toString()));
      }
      if ((jsonObj.get("hide-session-recording") != null && !jsonObj.get("hide-session-recording").isJsonNull()) && !jsonObj.get("hide-session-recording").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hide-session-recording` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hide-session-recording").toString()));
      }
      if ((jsonObj.get("kexalgs") != null && !jsonObj.get("kexalgs").isJsonNull()) && !jsonObj.get("kexalgs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kexalgs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kexalgs").toString()));
      }
      if ((jsonObj.get("keyboard-layout") != null && !jsonObj.get("keyboard-layout").isJsonNull()) && !jsonObj.get("keyboard-layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyboard-layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyboard-layout").toString()));
      }
      if ((jsonObj.get("legacy-ssh-algorithm") != null && !jsonObj.get("legacy-ssh-algorithm").isJsonNull()) && !jsonObj.get("legacy-ssh-algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacy-ssh-algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacy-ssh-algorithm").toString()));
      }
      if ((jsonObj.get("rdp-target-configuration") != null && !jsonObj.get("rdp-target-configuration").isJsonNull()) && !jsonObj.get("rdp-target-configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdp-target-configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdp-target-configuration").toString()));
      }
      if ((jsonObj.get("ssh-target-configuration") != null && !jsonObj.get("ssh-target-configuration").isJsonNull()) && !jsonObj.get("ssh-target-configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh-target-configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh-target-configuration").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateRemoteAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateRemoteAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateRemoteAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateRemoteAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateRemoteAccess>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateRemoteAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateRemoteAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateRemoteAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateRemoteAccess
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateRemoteAccess
   */
  public static GatewayUpdateRemoteAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateRemoteAccess.class);
  }

  /**
   * Convert an instance of GatewayUpdateRemoteAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

