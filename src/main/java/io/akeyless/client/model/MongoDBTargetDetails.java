/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * MongoDBTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class MongoDBTargetDetails {
  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY = "mongodb_atlas_api_private_key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPrivateKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY = "mongodb_atlas_api_public_key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPublicKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID = "mongodb_atlas_project_id";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID)
  @javax.annotation.Nullable
  private String mongodbAtlasProjectId;

  public static final String SERIALIZED_NAME_MONGODB_DB_NAME = "mongodb_db_name";
  @SerializedName(SERIALIZED_NAME_MONGODB_DB_NAME)
  @javax.annotation.Nullable
  private String mongodbDbName;

  public static final String SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB = "mongodb_default_auth_db";
  @SerializedName(SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB)
  @javax.annotation.Nullable
  private String mongodbDefaultAuthDb;

  public static final String SERIALIZED_NAME_MONGODB_HOST_PORT = "mongodb_host_port";
  @SerializedName(SERIALIZED_NAME_MONGODB_HOST_PORT)
  @javax.annotation.Nullable
  private String mongodbHostPort;

  public static final String SERIALIZED_NAME_MONGODB_IS_ATLAS = "mongodb_is_atlas";
  @SerializedName(SERIALIZED_NAME_MONGODB_IS_ATLAS)
  @javax.annotation.Nullable
  private Boolean mongodbIsAtlas;

  public static final String SERIALIZED_NAME_MONGODB_PASSWORD = "mongodb_password";
  @SerializedName(SERIALIZED_NAME_MONGODB_PASSWORD)
  @javax.annotation.Nullable
  private String mongodbPassword;

  public static final String SERIALIZED_NAME_MONGODB_URI_CONNECTION = "mongodb_uri_connection";
  @SerializedName(SERIALIZED_NAME_MONGODB_URI_CONNECTION)
  @javax.annotation.Nullable
  private String mongodbUriConnection;

  public static final String SERIALIZED_NAME_MONGODB_URI_OPTIONS = "mongodb_uri_options";
  @SerializedName(SERIALIZED_NAME_MONGODB_URI_OPTIONS)
  @javax.annotation.Nullable
  private String mongodbUriOptions;

  public static final String SERIALIZED_NAME_MONGODB_USERNAME = "mongodb_username";
  @SerializedName(SERIALIZED_NAME_MONGODB_USERNAME)
  @javax.annotation.Nullable
  private String mongodbUsername;

  public MongoDBTargetDetails() {
  }

  public MongoDBTargetDetails mongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
    return this;
  }

  /**
   * Get mongodbAtlasApiPrivateKey
   * @return mongodbAtlasApiPrivateKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPrivateKey() {
    return mongodbAtlasApiPrivateKey;
  }

  public void setMongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
  }


  public MongoDBTargetDetails mongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
    return this;
  }

  /**
   * Get mongodbAtlasApiPublicKey
   * @return mongodbAtlasApiPublicKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPublicKey() {
    return mongodbAtlasApiPublicKey;
  }

  public void setMongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
  }


  public MongoDBTargetDetails mongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
    return this;
  }

  /**
   * mongodb atlas fields
   * @return mongodbAtlasProjectId
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasProjectId() {
    return mongodbAtlasProjectId;
  }

  public void setMongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
  }


  public MongoDBTargetDetails mongodbDbName(@javax.annotation.Nullable String mongodbDbName) {
    this.mongodbDbName = mongodbDbName;
    return this;
  }

  /**
   * common fields
   * @return mongodbDbName
   */
  @javax.annotation.Nullable
  public String getMongodbDbName() {
    return mongodbDbName;
  }

  public void setMongodbDbName(@javax.annotation.Nullable String mongodbDbName) {
    this.mongodbDbName = mongodbDbName;
  }


  public MongoDBTargetDetails mongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
    return this;
  }

  /**
   * Get mongodbDefaultAuthDb
   * @return mongodbDefaultAuthDb
   */
  @javax.annotation.Nullable
  public String getMongodbDefaultAuthDb() {
    return mongodbDefaultAuthDb;
  }

  public void setMongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
  }


  public MongoDBTargetDetails mongodbHostPort(@javax.annotation.Nullable String mongodbHostPort) {
    this.mongodbHostPort = mongodbHostPort;
    return this;
  }

  /**
   * Get mongodbHostPort
   * @return mongodbHostPort
   */
  @javax.annotation.Nullable
  public String getMongodbHostPort() {
    return mongodbHostPort;
  }

  public void setMongodbHostPort(@javax.annotation.Nullable String mongodbHostPort) {
    this.mongodbHostPort = mongodbHostPort;
  }


  public MongoDBTargetDetails mongodbIsAtlas(@javax.annotation.Nullable Boolean mongodbIsAtlas) {
    this.mongodbIsAtlas = mongodbIsAtlas;
    return this;
  }

  /**
   * Get mongodbIsAtlas
   * @return mongodbIsAtlas
   */
  @javax.annotation.Nullable
  public Boolean getMongodbIsAtlas() {
    return mongodbIsAtlas;
  }

  public void setMongodbIsAtlas(@javax.annotation.Nullable Boolean mongodbIsAtlas) {
    this.mongodbIsAtlas = mongodbIsAtlas;
  }


  public MongoDBTargetDetails mongodbPassword(@javax.annotation.Nullable String mongodbPassword) {
    this.mongodbPassword = mongodbPassword;
    return this;
  }

  /**
   * Get mongodbPassword
   * @return mongodbPassword
   */
  @javax.annotation.Nullable
  public String getMongodbPassword() {
    return mongodbPassword;
  }

  public void setMongodbPassword(@javax.annotation.Nullable String mongodbPassword) {
    this.mongodbPassword = mongodbPassword;
  }


  public MongoDBTargetDetails mongodbUriConnection(@javax.annotation.Nullable String mongodbUriConnection) {
    this.mongodbUriConnection = mongodbUriConnection;
    return this;
  }

  /**
   * mongodb fields
   * @return mongodbUriConnection
   */
  @javax.annotation.Nullable
  public String getMongodbUriConnection() {
    return mongodbUriConnection;
  }

  public void setMongodbUriConnection(@javax.annotation.Nullable String mongodbUriConnection) {
    this.mongodbUriConnection = mongodbUriConnection;
  }


  public MongoDBTargetDetails mongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
    return this;
  }

  /**
   * Get mongodbUriOptions
   * @return mongodbUriOptions
   */
  @javax.annotation.Nullable
  public String getMongodbUriOptions() {
    return mongodbUriOptions;
  }

  public void setMongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
  }


  public MongoDBTargetDetails mongodbUsername(@javax.annotation.Nullable String mongodbUsername) {
    this.mongodbUsername = mongodbUsername;
    return this;
  }

  /**
   * Get mongodbUsername
   * @return mongodbUsername
   */
  @javax.annotation.Nullable
  public String getMongodbUsername() {
    return mongodbUsername;
  }

  public void setMongodbUsername(@javax.annotation.Nullable String mongodbUsername) {
    this.mongodbUsername = mongodbUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MongoDBTargetDetails mongoDBTargetDetails = (MongoDBTargetDetails) o;
    return Objects.equals(this.mongodbAtlasApiPrivateKey, mongoDBTargetDetails.mongodbAtlasApiPrivateKey) &&
        Objects.equals(this.mongodbAtlasApiPublicKey, mongoDBTargetDetails.mongodbAtlasApiPublicKey) &&
        Objects.equals(this.mongodbAtlasProjectId, mongoDBTargetDetails.mongodbAtlasProjectId) &&
        Objects.equals(this.mongodbDbName, mongoDBTargetDetails.mongodbDbName) &&
        Objects.equals(this.mongodbDefaultAuthDb, mongoDBTargetDetails.mongodbDefaultAuthDb) &&
        Objects.equals(this.mongodbHostPort, mongoDBTargetDetails.mongodbHostPort) &&
        Objects.equals(this.mongodbIsAtlas, mongoDBTargetDetails.mongodbIsAtlas) &&
        Objects.equals(this.mongodbPassword, mongoDBTargetDetails.mongodbPassword) &&
        Objects.equals(this.mongodbUriConnection, mongoDBTargetDetails.mongodbUriConnection) &&
        Objects.equals(this.mongodbUriOptions, mongoDBTargetDetails.mongodbUriOptions) &&
        Objects.equals(this.mongodbUsername, mongoDBTargetDetails.mongodbUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mongodbAtlasApiPrivateKey, mongodbAtlasApiPublicKey, mongodbAtlasProjectId, mongodbDbName, mongodbDefaultAuthDb, mongodbHostPort, mongodbIsAtlas, mongodbPassword, mongodbUriConnection, mongodbUriOptions, mongodbUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MongoDBTargetDetails {\n");
    sb.append("    mongodbAtlasApiPrivateKey: ").append(toIndentedString(mongodbAtlasApiPrivateKey)).append("\n");
    sb.append("    mongodbAtlasApiPublicKey: ").append(toIndentedString(mongodbAtlasApiPublicKey)).append("\n");
    sb.append("    mongodbAtlasProjectId: ").append(toIndentedString(mongodbAtlasProjectId)).append("\n");
    sb.append("    mongodbDbName: ").append(toIndentedString(mongodbDbName)).append("\n");
    sb.append("    mongodbDefaultAuthDb: ").append(toIndentedString(mongodbDefaultAuthDb)).append("\n");
    sb.append("    mongodbHostPort: ").append(toIndentedString(mongodbHostPort)).append("\n");
    sb.append("    mongodbIsAtlas: ").append(toIndentedString(mongodbIsAtlas)).append("\n");
    sb.append("    mongodbPassword: ").append(toIndentedString(mongodbPassword)).append("\n");
    sb.append("    mongodbUriConnection: ").append(toIndentedString(mongodbUriConnection)).append("\n");
    sb.append("    mongodbUriOptions: ").append(toIndentedString(mongodbUriOptions)).append("\n");
    sb.append("    mongodbUsername: ").append(toIndentedString(mongodbUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mongodb_atlas_api_private_key");
    openapiFields.add("mongodb_atlas_api_public_key");
    openapiFields.add("mongodb_atlas_project_id");
    openapiFields.add("mongodb_db_name");
    openapiFields.add("mongodb_default_auth_db");
    openapiFields.add("mongodb_host_port");
    openapiFields.add("mongodb_is_atlas");
    openapiFields.add("mongodb_password");
    openapiFields.add("mongodb_uri_connection");
    openapiFields.add("mongodb_uri_options");
    openapiFields.add("mongodb_username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MongoDBTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MongoDBTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MongoDBTargetDetails is not found in the empty JSON string", MongoDBTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MongoDBTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MongoDBTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mongodb_atlas_api_private_key") != null && !jsonObj.get("mongodb_atlas_api_private_key").isJsonNull()) && !jsonObj.get("mongodb_atlas_api_private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_atlas_api_private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_atlas_api_private_key").toString()));
      }
      if ((jsonObj.get("mongodb_atlas_api_public_key") != null && !jsonObj.get("mongodb_atlas_api_public_key").isJsonNull()) && !jsonObj.get("mongodb_atlas_api_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_atlas_api_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_atlas_api_public_key").toString()));
      }
      if ((jsonObj.get("mongodb_atlas_project_id") != null && !jsonObj.get("mongodb_atlas_project_id").isJsonNull()) && !jsonObj.get("mongodb_atlas_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_atlas_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_atlas_project_id").toString()));
      }
      if ((jsonObj.get("mongodb_db_name") != null && !jsonObj.get("mongodb_db_name").isJsonNull()) && !jsonObj.get("mongodb_db_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_db_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_db_name").toString()));
      }
      if ((jsonObj.get("mongodb_default_auth_db") != null && !jsonObj.get("mongodb_default_auth_db").isJsonNull()) && !jsonObj.get("mongodb_default_auth_db").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_default_auth_db` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_default_auth_db").toString()));
      }
      if ((jsonObj.get("mongodb_host_port") != null && !jsonObj.get("mongodb_host_port").isJsonNull()) && !jsonObj.get("mongodb_host_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_host_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_host_port").toString()));
      }
      if ((jsonObj.get("mongodb_password") != null && !jsonObj.get("mongodb_password").isJsonNull()) && !jsonObj.get("mongodb_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_password").toString()));
      }
      if ((jsonObj.get("mongodb_uri_connection") != null && !jsonObj.get("mongodb_uri_connection").isJsonNull()) && !jsonObj.get("mongodb_uri_connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_uri_connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_uri_connection").toString()));
      }
      if ((jsonObj.get("mongodb_uri_options") != null && !jsonObj.get("mongodb_uri_options").isJsonNull()) && !jsonObj.get("mongodb_uri_options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_uri_options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_uri_options").toString()));
      }
      if ((jsonObj.get("mongodb_username") != null && !jsonObj.get("mongodb_username").isJsonNull()) && !jsonObj.get("mongodb_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb_username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MongoDBTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MongoDBTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MongoDBTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MongoDBTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MongoDBTargetDetails>() {
           @Override
           public void write(JsonWriter out, MongoDBTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MongoDBTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MongoDBTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MongoDBTargetDetails
   * @throws IOException if the JSON string is invalid with respect to MongoDBTargetDetails
   */
  public static MongoDBTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MongoDBTargetDetails.class);
  }

  /**
   * Convert an instance of MongoDBTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

