/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UscSyncInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UscSyncInfo {
  public static final String SERIALIZED_NAME_JQ_SECRET_FILTER = "jq_secret_filter";
  @SerializedName(SERIALIZED_NAME_JQ_SECRET_FILTER)
  @javax.annotation.Nullable
  private String jqSecretFilter;

  public static final String SERIALIZED_NAME_LAST_ERROR = "last_error";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR)
  @javax.annotation.Nullable
  private String lastError;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_SECRET_ID = "secret_id";
  @SerializedName(SERIALIZED_NAME_SECRET_ID)
  @javax.annotation.Nullable
  private String secretId;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secret_name";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  @javax.annotation.Nullable
  private String secretName;

  public UscSyncInfo() {
  }

  public UscSyncInfo jqSecretFilter(@javax.annotation.Nullable String jqSecretFilter) {
    this.jqSecretFilter = jqSecretFilter;
    return this;
  }

  /**
   * Get jqSecretFilter
   * @return jqSecretFilter
   */
  @javax.annotation.Nullable
  public String getJqSecretFilter() {
    return jqSecretFilter;
  }

  public void setJqSecretFilter(@javax.annotation.Nullable String jqSecretFilter) {
    this.jqSecretFilter = jqSecretFilter;
  }


  public UscSyncInfo lastError(@javax.annotation.Nullable String lastError) {
    this.lastError = lastError;
    return this;
  }

  /**
   * Get lastError
   * @return lastError
   */
  @javax.annotation.Nullable
  public String getLastError() {
    return lastError;
  }

  public void setLastError(@javax.annotation.Nullable String lastError) {
    this.lastError = lastError;
  }


  public UscSyncInfo namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public UscSyncInfo secretId(@javax.annotation.Nullable String secretId) {
    this.secretId = secretId;
    return this;
  }

  /**
   * Get secretId
   * @return secretId
   */
  @javax.annotation.Nullable
  public String getSecretId() {
    return secretId;
  }

  public void setSecretId(@javax.annotation.Nullable String secretId) {
    this.secretId = secretId;
  }


  public UscSyncInfo secretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
    return this;
  }

  /**
   * Get secretName
   * @return secretName
   */
  @javax.annotation.Nullable
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(@javax.annotation.Nullable String secretName) {
    this.secretName = secretName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UscSyncInfo uscSyncInfo = (UscSyncInfo) o;
    return Objects.equals(this.jqSecretFilter, uscSyncInfo.jqSecretFilter) &&
        Objects.equals(this.lastError, uscSyncInfo.lastError) &&
        Objects.equals(this.namespace, uscSyncInfo.namespace) &&
        Objects.equals(this.secretId, uscSyncInfo.secretId) &&
        Objects.equals(this.secretName, uscSyncInfo.secretName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jqSecretFilter, lastError, namespace, secretId, secretName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UscSyncInfo {\n");
    sb.append("    jqSecretFilter: ").append(toIndentedString(jqSecretFilter)).append("\n");
    sb.append("    lastError: ").append(toIndentedString(lastError)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    secretId: ").append(toIndentedString(secretId)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jq_secret_filter");
    openapiFields.add("last_error");
    openapiFields.add("namespace");
    openapiFields.add("secret_id");
    openapiFields.add("secret_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UscSyncInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UscSyncInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UscSyncInfo is not found in the empty JSON string", UscSyncInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UscSyncInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UscSyncInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("jq_secret_filter") != null && !jsonObj.get("jq_secret_filter").isJsonNull()) && !jsonObj.get("jq_secret_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jq_secret_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jq_secret_filter").toString()));
      }
      if ((jsonObj.get("last_error") != null && !jsonObj.get("last_error").isJsonNull()) && !jsonObj.get("last_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_error").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("secret_id") != null && !jsonObj.get("secret_id").isJsonNull()) && !jsonObj.get("secret_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_id").toString()));
      }
      if ((jsonObj.get("secret_name") != null && !jsonObj.get("secret_name").isJsonNull()) && !jsonObj.get("secret_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UscSyncInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UscSyncInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UscSyncInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UscSyncInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UscSyncInfo>() {
           @Override
           public void write(JsonWriter out, UscSyncInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UscSyncInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UscSyncInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UscSyncInfo
   * @throws IOException if the JSON string is invalid with respect to UscSyncInfo
   */
  public static UscSyncInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UscSyncInfo.class);
  }

  /**
   * Convert an instance of UscSyncInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

