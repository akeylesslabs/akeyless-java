/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateProducerMySQL is a command that updates mysql producer [Deprecated: Use dynamic-secret-update-mysql command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateProducerMySQL {
  public static final String SERIALIZED_NAME_DB_SERVER_CERTIFICATES = "db-server-certificates";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_CERTIFICATES)
  @javax.annotation.Nullable
  private String dbServerCertificates;

  public static final String SERIALIZED_NAME_DB_SERVER_NAME = "db-server-name";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_NAME)
  @javax.annotation.Nullable
  private String dbServerName;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_MYSQL_DBNAME = "mysql-dbname";
  @SerializedName(SERIALIZED_NAME_MYSQL_DBNAME)
  @javax.annotation.Nullable
  private String mysqlDbname;

  public static final String SERIALIZED_NAME_MYSQL_HOST = "mysql-host";
  @SerializedName(SERIALIZED_NAME_MYSQL_HOST)
  @javax.annotation.Nullable
  private String mysqlHost = "127.0.0.1";

  public static final String SERIALIZED_NAME_MYSQL_PASSWORD = "mysql-password";
  @SerializedName(SERIALIZED_NAME_MYSQL_PASSWORD)
  @javax.annotation.Nullable
  private String mysqlPassword;

  public static final String SERIALIZED_NAME_MYSQL_PORT = "mysql-port";
  @SerializedName(SERIALIZED_NAME_MYSQL_PORT)
  @javax.annotation.Nullable
  private String mysqlPort = "3306";

  public static final String SERIALIZED_NAME_MYSQL_REVOCATION_STATEMENTS = "mysql-revocation-statements";
  @SerializedName(SERIALIZED_NAME_MYSQL_REVOCATION_STATEMENTS)
  @javax.annotation.Nullable
  private String mysqlRevocationStatements;

  public static final String SERIALIZED_NAME_MYSQL_SCREATION_STATEMENTS = "mysql-screation-statements";
  @SerializedName(SERIALIZED_NAME_MYSQL_SCREATION_STATEMENTS)
  @javax.annotation.Nullable
  private String mysqlScreationStatements;

  public static final String SERIALIZED_NAME_MYSQL_USERNAME = "mysql-username";
  @SerializedName(SERIALIZED_NAME_MYSQL_USERNAME)
  @javax.annotation.Nullable
  private String mysqlUsername;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PASSWORD_LENGTH = "password-length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_LENGTH)
  @javax.annotation.Nullable
  private String passwordLength;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DELAY = "secure-access-delay";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DELAY)
  @javax.annotation.Nullable
  private Long secureAccessDelay;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  @javax.annotation.Nullable
  private Boolean ssl = false;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE = "ssl-certificate";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE)
  @javax.annotation.Nullable
  private String sslCertificate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public GatewayUpdateProducerMySQL() {
  }

  public GatewayUpdateProducerMySQL dbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
    return this;
  }

  /**
   * (Optional) DB server certificates
   * @return dbServerCertificates
   */
  @javax.annotation.Nullable
  public String getDbServerCertificates() {
    return dbServerCertificates;
  }

  public void setDbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
  }


  public GatewayUpdateProducerMySQL dbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
    return this;
  }

  /**
   * (Optional) Server name for certificate verification
   * @return dbServerName
   */
  @javax.annotation.Nullable
  public String getDbServerName() {
    return dbServerName;
  }

  public void setDbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
  }


  public GatewayUpdateProducerMySQL deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GatewayUpdateProducerMySQL json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateProducerMySQL mysqlDbname(@javax.annotation.Nullable String mysqlDbname) {
    this.mysqlDbname = mysqlDbname;
    return this;
  }

  /**
   * MySQL DB Name
   * @return mysqlDbname
   */
  @javax.annotation.Nullable
  public String getMysqlDbname() {
    return mysqlDbname;
  }

  public void setMysqlDbname(@javax.annotation.Nullable String mysqlDbname) {
    this.mysqlDbname = mysqlDbname;
  }


  public GatewayUpdateProducerMySQL mysqlHost(@javax.annotation.Nullable String mysqlHost) {
    this.mysqlHost = mysqlHost;
    return this;
  }

  /**
   * MySQL Host
   * @return mysqlHost
   */
  @javax.annotation.Nullable
  public String getMysqlHost() {
    return mysqlHost;
  }

  public void setMysqlHost(@javax.annotation.Nullable String mysqlHost) {
    this.mysqlHost = mysqlHost;
  }


  public GatewayUpdateProducerMySQL mysqlPassword(@javax.annotation.Nullable String mysqlPassword) {
    this.mysqlPassword = mysqlPassword;
    return this;
  }

  /**
   * MySQL Password
   * @return mysqlPassword
   */
  @javax.annotation.Nullable
  public String getMysqlPassword() {
    return mysqlPassword;
  }

  public void setMysqlPassword(@javax.annotation.Nullable String mysqlPassword) {
    this.mysqlPassword = mysqlPassword;
  }


  public GatewayUpdateProducerMySQL mysqlPort(@javax.annotation.Nullable String mysqlPort) {
    this.mysqlPort = mysqlPort;
    return this;
  }

  /**
   * MySQL Port
   * @return mysqlPort
   */
  @javax.annotation.Nullable
  public String getMysqlPort() {
    return mysqlPort;
  }

  public void setMysqlPort(@javax.annotation.Nullable String mysqlPort) {
    this.mysqlPort = mysqlPort;
  }


  public GatewayUpdateProducerMySQL mysqlRevocationStatements(@javax.annotation.Nullable String mysqlRevocationStatements) {
    this.mysqlRevocationStatements = mysqlRevocationStatements;
    return this;
  }

  /**
   * MySQL Revocation statements
   * @return mysqlRevocationStatements
   */
  @javax.annotation.Nullable
  public String getMysqlRevocationStatements() {
    return mysqlRevocationStatements;
  }

  public void setMysqlRevocationStatements(@javax.annotation.Nullable String mysqlRevocationStatements) {
    this.mysqlRevocationStatements = mysqlRevocationStatements;
  }


  public GatewayUpdateProducerMySQL mysqlScreationStatements(@javax.annotation.Nullable String mysqlScreationStatements) {
    this.mysqlScreationStatements = mysqlScreationStatements;
    return this;
  }

  /**
   * MySQL Creation statements
   * @return mysqlScreationStatements
   */
  @javax.annotation.Nullable
  public String getMysqlScreationStatements() {
    return mysqlScreationStatements;
  }

  public void setMysqlScreationStatements(@javax.annotation.Nullable String mysqlScreationStatements) {
    this.mysqlScreationStatements = mysqlScreationStatements;
  }


  public GatewayUpdateProducerMySQL mysqlUsername(@javax.annotation.Nullable String mysqlUsername) {
    this.mysqlUsername = mysqlUsername;
    return this;
  }

  /**
   * MySQL Username
   * @return mysqlUsername
   */
  @javax.annotation.Nullable
  public String getMysqlUsername() {
    return mysqlUsername;
  }

  public void setMysqlUsername(@javax.annotation.Nullable String mysqlUsername) {
    this.mysqlUsername = mysqlUsername;
  }


  public GatewayUpdateProducerMySQL name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public GatewayUpdateProducerMySQL newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public GatewayUpdateProducerMySQL passwordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
    return this;
  }

  /**
   * The length of the password to be generated
   * @return passwordLength
   */
  @javax.annotation.Nullable
  public String getPasswordLength() {
    return passwordLength;
  }

  public void setPasswordLength(@javax.annotation.Nullable String passwordLength) {
    this.passwordLength = passwordLength;
  }


  public GatewayUpdateProducerMySQL producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public GatewayUpdateProducerMySQL secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public GatewayUpdateProducerMySQL secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public GatewayUpdateProducerMySQL secureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
    return this;
  }

  /**
   * The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
   * @return secureAccessDelay
   */
  @javax.annotation.Nullable
  public Long getSecureAccessDelay() {
    return secureAccessDelay;
  }

  public void setSecureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
  }


  public GatewayUpdateProducerMySQL secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public GatewayUpdateProducerMySQL secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public GatewayUpdateProducerMySQL addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public GatewayUpdateProducerMySQL secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public GatewayUpdateProducerMySQL ssl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Enable/Disable SSL [true/false]
   * @return ssl
   */
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
  }


  public GatewayUpdateProducerMySQL sslCertificate(@javax.annotation.Nullable String sslCertificate) {
    this.sslCertificate = sslCertificate;
    return this;
  }

  /**
   * SSL connection certificate
   * @return sslCertificate
   */
  @javax.annotation.Nullable
  public String getSslCertificate() {
    return sslCertificate;
  }

  public void setSslCertificate(@javax.annotation.Nullable String sslCertificate) {
    this.sslCertificate = sslCertificate;
  }


  public GatewayUpdateProducerMySQL tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GatewayUpdateProducerMySQL addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public GatewayUpdateProducerMySQL targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public GatewayUpdateProducerMySQL token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateProducerMySQL uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayUpdateProducerMySQL userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateProducerMySQL gatewayUpdateProducerMySQL = (GatewayUpdateProducerMySQL) o;
    return Objects.equals(this.dbServerCertificates, gatewayUpdateProducerMySQL.dbServerCertificates) &&
        Objects.equals(this.dbServerName, gatewayUpdateProducerMySQL.dbServerName) &&
        Objects.equals(this.deleteProtection, gatewayUpdateProducerMySQL.deleteProtection) &&
        Objects.equals(this.json, gatewayUpdateProducerMySQL.json) &&
        Objects.equals(this.mysqlDbname, gatewayUpdateProducerMySQL.mysqlDbname) &&
        Objects.equals(this.mysqlHost, gatewayUpdateProducerMySQL.mysqlHost) &&
        Objects.equals(this.mysqlPassword, gatewayUpdateProducerMySQL.mysqlPassword) &&
        Objects.equals(this.mysqlPort, gatewayUpdateProducerMySQL.mysqlPort) &&
        Objects.equals(this.mysqlRevocationStatements, gatewayUpdateProducerMySQL.mysqlRevocationStatements) &&
        Objects.equals(this.mysqlScreationStatements, gatewayUpdateProducerMySQL.mysqlScreationStatements) &&
        Objects.equals(this.mysqlUsername, gatewayUpdateProducerMySQL.mysqlUsername) &&
        Objects.equals(this.name, gatewayUpdateProducerMySQL.name) &&
        Objects.equals(this.newName, gatewayUpdateProducerMySQL.newName) &&
        Objects.equals(this.passwordLength, gatewayUpdateProducerMySQL.passwordLength) &&
        Objects.equals(this.producerEncryptionKeyName, gatewayUpdateProducerMySQL.producerEncryptionKeyName) &&
        Objects.equals(this.secureAccessBastionIssuer, gatewayUpdateProducerMySQL.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, gatewayUpdateProducerMySQL.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessDelay, gatewayUpdateProducerMySQL.secureAccessDelay) &&
        Objects.equals(this.secureAccessEnable, gatewayUpdateProducerMySQL.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, gatewayUpdateProducerMySQL.secureAccessHost) &&
        Objects.equals(this.secureAccessWeb, gatewayUpdateProducerMySQL.secureAccessWeb) &&
        Objects.equals(this.ssl, gatewayUpdateProducerMySQL.ssl) &&
        Objects.equals(this.sslCertificate, gatewayUpdateProducerMySQL.sslCertificate) &&
        Objects.equals(this.tags, gatewayUpdateProducerMySQL.tags) &&
        Objects.equals(this.targetName, gatewayUpdateProducerMySQL.targetName) &&
        Objects.equals(this.token, gatewayUpdateProducerMySQL.token) &&
        Objects.equals(this.uidToken, gatewayUpdateProducerMySQL.uidToken) &&
        Objects.equals(this.userTtl, gatewayUpdateProducerMySQL.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbServerCertificates, dbServerName, deleteProtection, json, mysqlDbname, mysqlHost, mysqlPassword, mysqlPort, mysqlRevocationStatements, mysqlScreationStatements, mysqlUsername, name, newName, passwordLength, producerEncryptionKeyName, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessDelay, secureAccessEnable, secureAccessHost, secureAccessWeb, ssl, sslCertificate, tags, targetName, token, uidToken, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateProducerMySQL {\n");
    sb.append("    dbServerCertificates: ").append(toIndentedString(dbServerCertificates)).append("\n");
    sb.append("    dbServerName: ").append(toIndentedString(dbServerName)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    mysqlDbname: ").append(toIndentedString(mysqlDbname)).append("\n");
    sb.append("    mysqlHost: ").append(toIndentedString(mysqlHost)).append("\n");
    sb.append("    mysqlPassword: ").append(toIndentedString(mysqlPassword)).append("\n");
    sb.append("    mysqlPort: ").append(toIndentedString(mysqlPort)).append("\n");
    sb.append("    mysqlRevocationStatements: ").append(toIndentedString(mysqlRevocationStatements)).append("\n");
    sb.append("    mysqlScreationStatements: ").append(toIndentedString(mysqlScreationStatements)).append("\n");
    sb.append("    mysqlUsername: ").append(toIndentedString(mysqlUsername)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    passwordLength: ").append(toIndentedString(passwordLength)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessDelay: ").append(toIndentedString(secureAccessDelay)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    sslCertificate: ").append(toIndentedString(sslCertificate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("db-server-certificates");
    openapiFields.add("db-server-name");
    openapiFields.add("delete_protection");
    openapiFields.add("json");
    openapiFields.add("mysql-dbname");
    openapiFields.add("mysql-host");
    openapiFields.add("mysql-password");
    openapiFields.add("mysql-port");
    openapiFields.add("mysql-revocation-statements");
    openapiFields.add("mysql-screation-statements");
    openapiFields.add("mysql-username");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("password-length");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-delay");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-web");
    openapiFields.add("ssl");
    openapiFields.add("ssl-certificate");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateProducerMySQL
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateProducerMySQL.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateProducerMySQL is not found in the empty JSON string", GatewayUpdateProducerMySQL.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateProducerMySQL.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateProducerMySQL` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayUpdateProducerMySQL.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("db-server-certificates") != null && !jsonObj.get("db-server-certificates").isJsonNull()) && !jsonObj.get("db-server-certificates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-certificates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-certificates").toString()));
      }
      if ((jsonObj.get("db-server-name") != null && !jsonObj.get("db-server-name").isJsonNull()) && !jsonObj.get("db-server-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-name").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("mysql-dbname") != null && !jsonObj.get("mysql-dbname").isJsonNull()) && !jsonObj.get("mysql-dbname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-dbname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-dbname").toString()));
      }
      if ((jsonObj.get("mysql-host") != null && !jsonObj.get("mysql-host").isJsonNull()) && !jsonObj.get("mysql-host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-host").toString()));
      }
      if ((jsonObj.get("mysql-password") != null && !jsonObj.get("mysql-password").isJsonNull()) && !jsonObj.get("mysql-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-password").toString()));
      }
      if ((jsonObj.get("mysql-port") != null && !jsonObj.get("mysql-port").isJsonNull()) && !jsonObj.get("mysql-port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-port").toString()));
      }
      if ((jsonObj.get("mysql-revocation-statements") != null && !jsonObj.get("mysql-revocation-statements").isJsonNull()) && !jsonObj.get("mysql-revocation-statements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-revocation-statements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-revocation-statements").toString()));
      }
      if ((jsonObj.get("mysql-screation-statements") != null && !jsonObj.get("mysql-screation-statements").isJsonNull()) && !jsonObj.get("mysql-screation-statements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-screation-statements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-screation-statements").toString()));
      }
      if ((jsonObj.get("mysql-username") != null && !jsonObj.get("mysql-username").isJsonNull()) && !jsonObj.get("mysql-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mysql-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mysql-username").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("password-length") != null && !jsonObj.get("password-length").isJsonNull()) && !jsonObj.get("password-length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-length").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      if ((jsonObj.get("ssl-certificate") != null && !jsonObj.get("ssl-certificate").isJsonNull()) && !jsonObj.get("ssl-certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl-certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl-certificate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateProducerMySQL.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateProducerMySQL' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateProducerMySQL> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateProducerMySQL.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateProducerMySQL>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateProducerMySQL value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateProducerMySQL read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateProducerMySQL given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateProducerMySQL
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateProducerMySQL
   */
  public static GatewayUpdateProducerMySQL fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateProducerMySQL.class);
  }

  /**
   * Convert an instance of GatewayUpdateProducerMySQL to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

