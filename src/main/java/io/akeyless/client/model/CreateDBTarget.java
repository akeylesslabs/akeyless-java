/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * createDBTarget is a command that creates a new target. [Deprecated: Use target-create-db command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateDBTarget {
  public static final String SERIALIZED_NAME_AZURE_CLIENT_ID = "azure-client-id";
  @SerializedName(SERIALIZED_NAME_AZURE_CLIENT_ID)
  @javax.annotation.Nullable
  private String azureClientId;

  public static final String SERIALIZED_NAME_AZURE_CLIENT_SECRET = "azure-client-secret";
  @SerializedName(SERIALIZED_NAME_AZURE_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String azureClientSecret;

  public static final String SERIALIZED_NAME_AZURE_TENANT_ID = "azure-tenant-id";
  @SerializedName(SERIALIZED_NAME_AZURE_TENANT_ID)
  @javax.annotation.Nullable
  private String azureTenantId;

  public static final String SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER = "cloud-service-provider";
  @SerializedName(SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER)
  @javax.annotation.Nullable
  private String cloudServiceProvider;

  public static final String SERIALIZED_NAME_CLUSTER_MODE = "cluster-mode";
  @SerializedName(SERIALIZED_NAME_CLUSTER_MODE)
  @javax.annotation.Nullable
  private Boolean clusterMode;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connection-type";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  @javax.annotation.Nonnull
  private String connectionType = "credentials";

  public static final String SERIALIZED_NAME_DB_NAME = "db-name";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  @javax.annotation.Nullable
  private String dbName;

  public static final String SERIALIZED_NAME_DB_SERVER_CERTIFICATES = "db-server-certificates";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_CERTIFICATES)
  @javax.annotation.Nullable
  private String dbServerCertificates;

  public static final String SERIALIZED_NAME_DB_SERVER_NAME = "db-server-name";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_NAME)
  @javax.annotation.Nullable
  private String dbServerName;

  public static final String SERIALIZED_NAME_DB_TYPE = "db-type";
  @SerializedName(SERIALIZED_NAME_DB_TYPE)
  @javax.annotation.Nonnull
  private String dbType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private String host;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS = "mongodb-atlas";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS)
  @javax.annotation.Nullable
  private Boolean mongodbAtlas;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY = "mongodb-atlas-api-private-key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPrivateKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY = "mongodb-atlas-api-public-key";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_API_PUBLIC_KEY)
  @javax.annotation.Nullable
  private String mongodbAtlasApiPublicKey;

  public static final String SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID = "mongodb-atlas-project-id";
  @SerializedName(SERIALIZED_NAME_MONGODB_ATLAS_PROJECT_ID)
  @javax.annotation.Nullable
  private String mongodbAtlasProjectId;

  public static final String SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB = "mongodb-default-auth-db";
  @SerializedName(SERIALIZED_NAME_MONGODB_DEFAULT_AUTH_DB)
  @javax.annotation.Nullable
  private String mongodbDefaultAuthDb;

  public static final String SERIALIZED_NAME_MONGODB_URI_OPTIONS = "mongodb-uri-options";
  @SerializedName(SERIALIZED_NAME_MONGODB_URI_OPTIONS)
  @javax.annotation.Nullable
  private String mongodbUriOptions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_ORACLE_SERVICE_NAME = "oracle-service-name";
  @SerializedName(SERIALIZED_NAME_ORACLE_SERVICE_NAME)
  @javax.annotation.Nullable
  private String oracleServiceName;

  public static final String SERIALIZED_NAME_ORACLE_WALLET_LOGIN_TYPE = "oracle-wallet-login-type";
  @SerializedName(SERIALIZED_NAME_ORACLE_WALLET_LOGIN_TYPE)
  @javax.annotation.Nullable
  private String oracleWalletLoginType;

  public static final String SERIALIZED_NAME_ORACLE_WALLET_P12_FILE_DATA = "oracle-wallet-p12-file-data";
  @SerializedName(SERIALIZED_NAME_ORACLE_WALLET_P12_FILE_DATA)
  @javax.annotation.Nullable
  private String oracleWalletP12FileData;

  public static final String SERIALIZED_NAME_ORACLE_WALLET_SSO_FILE_DATA = "oracle-wallet-sso-file-data";
  @SerializedName(SERIALIZED_NAME_ORACLE_WALLET_SSO_FILE_DATA)
  @javax.annotation.Nullable
  private String oracleWalletSsoFileData;

  public static final String SERIALIZED_NAME_PARENT_TARGET_NAME = "parent-target-name";
  @SerializedName(SERIALIZED_NAME_PARENT_TARGET_NAME)
  @javax.annotation.Nullable
  private String parentTargetName;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private String port;

  public static final String SERIALIZED_NAME_PWD = "pwd";
  @SerializedName(SERIALIZED_NAME_PWD)
  @javax.annotation.Nullable
  private String pwd;

  public static final String SERIALIZED_NAME_SNOWFLAKE_ACCOUNT = "snowflake-account";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_ACCOUNT)
  @javax.annotation.Nullable
  private String snowflakeAccount;

  public static final String SERIALIZED_NAME_SNOWFLAKE_API_PRIVATE_KEY = "snowflake-api-private-key";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_API_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String snowflakeApiPrivateKey;

  public static final String SERIALIZED_NAME_SNOWFLAKE_API_PRIVATE_KEY_PASSWORD = "snowflake-api-private-key-password";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_API_PRIVATE_KEY_PASSWORD)
  @javax.annotation.Nullable
  private String snowflakeApiPrivateKeyPassword;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  @javax.annotation.Nullable
  private Boolean ssl = false;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATE = "ssl-certificate";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATE)
  @javax.annotation.Nullable
  private String sslCertificate;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_NAME = "user-name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nullable
  private String userName;

  public CreateDBTarget() {
  }

  public CreateDBTarget azureClientId(@javax.annotation.Nullable String azureClientId) {
    this.azureClientId = azureClientId;
    return this;
  }

  /**
   * (Optional) Client id (relevant for \&quot;cloud-service-provider\&quot; only)
   * @return azureClientId
   */
  @javax.annotation.Nullable
  public String getAzureClientId() {
    return azureClientId;
  }

  public void setAzureClientId(@javax.annotation.Nullable String azureClientId) {
    this.azureClientId = azureClientId;
  }


  public CreateDBTarget azureClientSecret(@javax.annotation.Nullable String azureClientSecret) {
    this.azureClientSecret = azureClientSecret;
    return this;
  }

  /**
   * (Optional) Client secret (relevant for \&quot;cloud-service-provider\&quot; only)
   * @return azureClientSecret
   */
  @javax.annotation.Nullable
  public String getAzureClientSecret() {
    return azureClientSecret;
  }

  public void setAzureClientSecret(@javax.annotation.Nullable String azureClientSecret) {
    this.azureClientSecret = azureClientSecret;
  }


  public CreateDBTarget azureTenantId(@javax.annotation.Nullable String azureTenantId) {
    this.azureTenantId = azureTenantId;
    return this;
  }

  /**
   * (Optional) Tenant id (relevant for \&quot;cloud-service-provider\&quot; only)
   * @return azureTenantId
   */
  @javax.annotation.Nullable
  public String getAzureTenantId() {
    return azureTenantId;
  }

  public void setAzureTenantId(@javax.annotation.Nullable String azureTenantId) {
    this.azureTenantId = azureTenantId;
  }


  public CreateDBTarget cloudServiceProvider(@javax.annotation.Nullable String cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
    return this;
  }

  /**
   * (Optional) Cloud service provider (currently only supports Azure)
   * @return cloudServiceProvider
   */
  @javax.annotation.Nullable
  public String getCloudServiceProvider() {
    return cloudServiceProvider;
  }

  public void setCloudServiceProvider(@javax.annotation.Nullable String cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
  }


  public CreateDBTarget clusterMode(@javax.annotation.Nullable Boolean clusterMode) {
    this.clusterMode = clusterMode;
    return this;
  }

  /**
   * Cluster Mode
   * @return clusterMode
   */
  @javax.annotation.Nullable
  public Boolean getClusterMode() {
    return clusterMode;
  }

  public void setClusterMode(@javax.annotation.Nullable Boolean clusterMode) {
    this.clusterMode = clusterMode;
  }


  public CreateDBTarget comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public CreateDBTarget connectionType(@javax.annotation.Nonnull String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Type of connection to mssql database [credentials/cloud-identity/wallet/parent-target]
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(@javax.annotation.Nonnull String connectionType) {
    this.connectionType = connectionType;
  }


  public CreateDBTarget dbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
    return this;
  }

  /**
   * Get dbName
   * @return dbName
   */
  @javax.annotation.Nullable
  public String getDbName() {
    return dbName;
  }

  public void setDbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
  }


  public CreateDBTarget dbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
    return this;
  }

  /**
   * (Optional) DB server certificates
   * @return dbServerCertificates
   */
  @javax.annotation.Nullable
  public String getDbServerCertificates() {
    return dbServerCertificates;
  }

  public void setDbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
  }


  public CreateDBTarget dbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
    return this;
  }

  /**
   * (Optional) Server name for certificate verification
   * @return dbServerName
   */
  @javax.annotation.Nullable
  public String getDbServerName() {
    return dbServerName;
  }

  public void setDbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
  }


  public CreateDBTarget dbType(@javax.annotation.Nonnull String dbType) {
    this.dbType = dbType;
    return this;
  }

  /**
   * Get dbType
   * @return dbType
   */
  @javax.annotation.Nonnull
  public String getDbType() {
    return dbType;
  }

  public void setDbType(@javax.annotation.Nonnull String dbType) {
    this.dbType = dbType;
  }


  public CreateDBTarget description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateDBTarget host(@javax.annotation.Nullable String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nullable String host) {
    this.host = host;
  }


  public CreateDBTarget json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateDBTarget key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public CreateDBTarget maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public CreateDBTarget mongodbAtlas(@javax.annotation.Nullable Boolean mongodbAtlas) {
    this.mongodbAtlas = mongodbAtlas;
    return this;
  }

  /**
   * Get mongodbAtlas
   * @return mongodbAtlas
   */
  @javax.annotation.Nullable
  public Boolean getMongodbAtlas() {
    return mongodbAtlas;
  }

  public void setMongodbAtlas(@javax.annotation.Nullable Boolean mongodbAtlas) {
    this.mongodbAtlas = mongodbAtlas;
  }


  public CreateDBTarget mongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
    return this;
  }

  /**
   * MongoDB Atlas private key
   * @return mongodbAtlasApiPrivateKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPrivateKey() {
    return mongodbAtlasApiPrivateKey;
  }

  public void setMongodbAtlasApiPrivateKey(@javax.annotation.Nullable String mongodbAtlasApiPrivateKey) {
    this.mongodbAtlasApiPrivateKey = mongodbAtlasApiPrivateKey;
  }


  public CreateDBTarget mongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
    return this;
  }

  /**
   * MongoDB Atlas public key
   * @return mongodbAtlasApiPublicKey
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasApiPublicKey() {
    return mongodbAtlasApiPublicKey;
  }

  public void setMongodbAtlasApiPublicKey(@javax.annotation.Nullable String mongodbAtlasApiPublicKey) {
    this.mongodbAtlasApiPublicKey = mongodbAtlasApiPublicKey;
  }


  public CreateDBTarget mongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
    return this;
  }

  /**
   * MongoDB Atlas project ID
   * @return mongodbAtlasProjectId
   */
  @javax.annotation.Nullable
  public String getMongodbAtlasProjectId() {
    return mongodbAtlasProjectId;
  }

  public void setMongodbAtlasProjectId(@javax.annotation.Nullable String mongodbAtlasProjectId) {
    this.mongodbAtlasProjectId = mongodbAtlasProjectId;
  }


  public CreateDBTarget mongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
    return this;
  }

  /**
   * MongoDB server default authentication database
   * @return mongodbDefaultAuthDb
   */
  @javax.annotation.Nullable
  public String getMongodbDefaultAuthDb() {
    return mongodbDefaultAuthDb;
  }

  public void setMongodbDefaultAuthDb(@javax.annotation.Nullable String mongodbDefaultAuthDb) {
    this.mongodbDefaultAuthDb = mongodbDefaultAuthDb;
  }


  public CreateDBTarget mongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
    return this;
  }

  /**
   * MongoDB server URI options
   * @return mongodbUriOptions
   */
  @javax.annotation.Nullable
  public String getMongodbUriOptions() {
    return mongodbUriOptions;
  }

  public void setMongodbUriOptions(@javax.annotation.Nullable String mongodbUriOptions) {
    this.mongodbUriOptions = mongodbUriOptions;
  }


  public CreateDBTarget name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateDBTarget oracleServiceName(@javax.annotation.Nullable String oracleServiceName) {
    this.oracleServiceName = oracleServiceName;
    return this;
  }

  /**
   * Oracle db service name
   * @return oracleServiceName
   */
  @javax.annotation.Nullable
  public String getOracleServiceName() {
    return oracleServiceName;
  }

  public void setOracleServiceName(@javax.annotation.Nullable String oracleServiceName) {
    this.oracleServiceName = oracleServiceName;
  }


  public CreateDBTarget oracleWalletLoginType(@javax.annotation.Nullable String oracleWalletLoginType) {
    this.oracleWalletLoginType = oracleWalletLoginType;
    return this;
  }

  /**
   * Oracle Wallet login type (password/mtls)
   * @return oracleWalletLoginType
   */
  @javax.annotation.Nullable
  public String getOracleWalletLoginType() {
    return oracleWalletLoginType;
  }

  public void setOracleWalletLoginType(@javax.annotation.Nullable String oracleWalletLoginType) {
    this.oracleWalletLoginType = oracleWalletLoginType;
  }


  public CreateDBTarget oracleWalletP12FileData(@javax.annotation.Nullable String oracleWalletP12FileData) {
    this.oracleWalletP12FileData = oracleWalletP12FileData;
    return this;
  }

  /**
   * Oracle wallet p12 file data in base64
   * @return oracleWalletP12FileData
   */
  @javax.annotation.Nullable
  public String getOracleWalletP12FileData() {
    return oracleWalletP12FileData;
  }

  public void setOracleWalletP12FileData(@javax.annotation.Nullable String oracleWalletP12FileData) {
    this.oracleWalletP12FileData = oracleWalletP12FileData;
  }


  public CreateDBTarget oracleWalletSsoFileData(@javax.annotation.Nullable String oracleWalletSsoFileData) {
    this.oracleWalletSsoFileData = oracleWalletSsoFileData;
    return this;
  }

  /**
   * Oracle wallet sso file data in base64
   * @return oracleWalletSsoFileData
   */
  @javax.annotation.Nullable
  public String getOracleWalletSsoFileData() {
    return oracleWalletSsoFileData;
  }

  public void setOracleWalletSsoFileData(@javax.annotation.Nullable String oracleWalletSsoFileData) {
    this.oracleWalletSsoFileData = oracleWalletSsoFileData;
  }


  public CreateDBTarget parentTargetName(@javax.annotation.Nullable String parentTargetName) {
    this.parentTargetName = parentTargetName;
    return this;
  }

  /**
   * Name of the parent target, relevant only when connection-type is parent-target
   * @return parentTargetName
   */
  @javax.annotation.Nullable
  public String getParentTargetName() {
    return parentTargetName;
  }

  public void setParentTargetName(@javax.annotation.Nullable String parentTargetName) {
    this.parentTargetName = parentTargetName;
  }


  public CreateDBTarget port(@javax.annotation.Nullable String port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nullable String port) {
    this.port = port;
  }


  public CreateDBTarget pwd(@javax.annotation.Nullable String pwd) {
    this.pwd = pwd;
    return this;
  }

  /**
   * Get pwd
   * @return pwd
   */
  @javax.annotation.Nullable
  public String getPwd() {
    return pwd;
  }

  public void setPwd(@javax.annotation.Nullable String pwd) {
    this.pwd = pwd;
  }


  public CreateDBTarget snowflakeAccount(@javax.annotation.Nullable String snowflakeAccount) {
    this.snowflakeAccount = snowflakeAccount;
    return this;
  }

  /**
   * Get snowflakeAccount
   * @return snowflakeAccount
   */
  @javax.annotation.Nullable
  public String getSnowflakeAccount() {
    return snowflakeAccount;
  }

  public void setSnowflakeAccount(@javax.annotation.Nullable String snowflakeAccount) {
    this.snowflakeAccount = snowflakeAccount;
  }


  public CreateDBTarget snowflakeApiPrivateKey(@javax.annotation.Nullable String snowflakeApiPrivateKey) {
    this.snowflakeApiPrivateKey = snowflakeApiPrivateKey;
    return this;
  }

  /**
   * RSA Private key (base64 encoded)
   * @return snowflakeApiPrivateKey
   */
  @javax.annotation.Nullable
  public String getSnowflakeApiPrivateKey() {
    return snowflakeApiPrivateKey;
  }

  public void setSnowflakeApiPrivateKey(@javax.annotation.Nullable String snowflakeApiPrivateKey) {
    this.snowflakeApiPrivateKey = snowflakeApiPrivateKey;
  }


  public CreateDBTarget snowflakeApiPrivateKeyPassword(@javax.annotation.Nullable String snowflakeApiPrivateKeyPassword) {
    this.snowflakeApiPrivateKeyPassword = snowflakeApiPrivateKeyPassword;
    return this;
  }

  /**
   * The Private key passphrase
   * @return snowflakeApiPrivateKeyPassword
   */
  @javax.annotation.Nullable
  public String getSnowflakeApiPrivateKeyPassword() {
    return snowflakeApiPrivateKeyPassword;
  }

  public void setSnowflakeApiPrivateKeyPassword(@javax.annotation.Nullable String snowflakeApiPrivateKeyPassword) {
    this.snowflakeApiPrivateKeyPassword = snowflakeApiPrivateKeyPassword;
  }


  public CreateDBTarget ssl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Enable/Disable SSL [true/false]
   * @return ssl
   */
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(@javax.annotation.Nullable Boolean ssl) {
    this.ssl = ssl;
  }


  public CreateDBTarget sslCertificate(@javax.annotation.Nullable String sslCertificate) {
    this.sslCertificate = sslCertificate;
    return this;
  }

  /**
   * SSL connection certificate
   * @return sslCertificate
   */
  @javax.annotation.Nullable
  public String getSslCertificate() {
    return sslCertificate;
  }

  public void setSslCertificate(@javax.annotation.Nullable String sslCertificate) {
    this.sslCertificate = sslCertificate;
  }


  public CreateDBTarget token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateDBTarget uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public CreateDBTarget userName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDBTarget createDBTarget = (CreateDBTarget) o;
    return Objects.equals(this.azureClientId, createDBTarget.azureClientId) &&
        Objects.equals(this.azureClientSecret, createDBTarget.azureClientSecret) &&
        Objects.equals(this.azureTenantId, createDBTarget.azureTenantId) &&
        Objects.equals(this.cloudServiceProvider, createDBTarget.cloudServiceProvider) &&
        Objects.equals(this.clusterMode, createDBTarget.clusterMode) &&
        Objects.equals(this.comment, createDBTarget.comment) &&
        Objects.equals(this.connectionType, createDBTarget.connectionType) &&
        Objects.equals(this.dbName, createDBTarget.dbName) &&
        Objects.equals(this.dbServerCertificates, createDBTarget.dbServerCertificates) &&
        Objects.equals(this.dbServerName, createDBTarget.dbServerName) &&
        Objects.equals(this.dbType, createDBTarget.dbType) &&
        Objects.equals(this.description, createDBTarget.description) &&
        Objects.equals(this.host, createDBTarget.host) &&
        Objects.equals(this.json, createDBTarget.json) &&
        Objects.equals(this.key, createDBTarget.key) &&
        Objects.equals(this.maxVersions, createDBTarget.maxVersions) &&
        Objects.equals(this.mongodbAtlas, createDBTarget.mongodbAtlas) &&
        Objects.equals(this.mongodbAtlasApiPrivateKey, createDBTarget.mongodbAtlasApiPrivateKey) &&
        Objects.equals(this.mongodbAtlasApiPublicKey, createDBTarget.mongodbAtlasApiPublicKey) &&
        Objects.equals(this.mongodbAtlasProjectId, createDBTarget.mongodbAtlasProjectId) &&
        Objects.equals(this.mongodbDefaultAuthDb, createDBTarget.mongodbDefaultAuthDb) &&
        Objects.equals(this.mongodbUriOptions, createDBTarget.mongodbUriOptions) &&
        Objects.equals(this.name, createDBTarget.name) &&
        Objects.equals(this.oracleServiceName, createDBTarget.oracleServiceName) &&
        Objects.equals(this.oracleWalletLoginType, createDBTarget.oracleWalletLoginType) &&
        Objects.equals(this.oracleWalletP12FileData, createDBTarget.oracleWalletP12FileData) &&
        Objects.equals(this.oracleWalletSsoFileData, createDBTarget.oracleWalletSsoFileData) &&
        Objects.equals(this.parentTargetName, createDBTarget.parentTargetName) &&
        Objects.equals(this.port, createDBTarget.port) &&
        Objects.equals(this.pwd, createDBTarget.pwd) &&
        Objects.equals(this.snowflakeAccount, createDBTarget.snowflakeAccount) &&
        Objects.equals(this.snowflakeApiPrivateKey, createDBTarget.snowflakeApiPrivateKey) &&
        Objects.equals(this.snowflakeApiPrivateKeyPassword, createDBTarget.snowflakeApiPrivateKeyPassword) &&
        Objects.equals(this.ssl, createDBTarget.ssl) &&
        Objects.equals(this.sslCertificate, createDBTarget.sslCertificate) &&
        Objects.equals(this.token, createDBTarget.token) &&
        Objects.equals(this.uidToken, createDBTarget.uidToken) &&
        Objects.equals(this.userName, createDBTarget.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureClientId, azureClientSecret, azureTenantId, cloudServiceProvider, clusterMode, comment, connectionType, dbName, dbServerCertificates, dbServerName, dbType, description, host, json, key, maxVersions, mongodbAtlas, mongodbAtlasApiPrivateKey, mongodbAtlasApiPublicKey, mongodbAtlasProjectId, mongodbDefaultAuthDb, mongodbUriOptions, name, oracleServiceName, oracleWalletLoginType, oracleWalletP12FileData, oracleWalletSsoFileData, parentTargetName, port, pwd, snowflakeAccount, snowflakeApiPrivateKey, snowflakeApiPrivateKeyPassword, ssl, sslCertificate, token, uidToken, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDBTarget {\n");
    sb.append("    azureClientId: ").append(toIndentedString(azureClientId)).append("\n");
    sb.append("    azureClientSecret: ").append(toIndentedString(azureClientSecret)).append("\n");
    sb.append("    azureTenantId: ").append(toIndentedString(azureTenantId)).append("\n");
    sb.append("    cloudServiceProvider: ").append(toIndentedString(cloudServiceProvider)).append("\n");
    sb.append("    clusterMode: ").append(toIndentedString(clusterMode)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    dbServerCertificates: ").append(toIndentedString(dbServerCertificates)).append("\n");
    sb.append("    dbServerName: ").append(toIndentedString(dbServerName)).append("\n");
    sb.append("    dbType: ").append(toIndentedString(dbType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    mongodbAtlas: ").append(toIndentedString(mongodbAtlas)).append("\n");
    sb.append("    mongodbAtlasApiPrivateKey: ").append(toIndentedString(mongodbAtlasApiPrivateKey)).append("\n");
    sb.append("    mongodbAtlasApiPublicKey: ").append(toIndentedString(mongodbAtlasApiPublicKey)).append("\n");
    sb.append("    mongodbAtlasProjectId: ").append(toIndentedString(mongodbAtlasProjectId)).append("\n");
    sb.append("    mongodbDefaultAuthDb: ").append(toIndentedString(mongodbDefaultAuthDb)).append("\n");
    sb.append("    mongodbUriOptions: ").append(toIndentedString(mongodbUriOptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oracleServiceName: ").append(toIndentedString(oracleServiceName)).append("\n");
    sb.append("    oracleWalletLoginType: ").append(toIndentedString(oracleWalletLoginType)).append("\n");
    sb.append("    oracleWalletP12FileData: ").append(toIndentedString(oracleWalletP12FileData)).append("\n");
    sb.append("    oracleWalletSsoFileData: ").append(toIndentedString(oracleWalletSsoFileData)).append("\n");
    sb.append("    parentTargetName: ").append(toIndentedString(parentTargetName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    pwd: ").append(toIndentedString(pwd)).append("\n");
    sb.append("    snowflakeAccount: ").append(toIndentedString(snowflakeAccount)).append("\n");
    sb.append("    snowflakeApiPrivateKey: ").append(toIndentedString(snowflakeApiPrivateKey)).append("\n");
    sb.append("    snowflakeApiPrivateKeyPassword: ").append(toIndentedString(snowflakeApiPrivateKeyPassword)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    sslCertificate: ").append(toIndentedString(sslCertificate)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azure-client-id");
    openapiFields.add("azure-client-secret");
    openapiFields.add("azure-tenant-id");
    openapiFields.add("cloud-service-provider");
    openapiFields.add("cluster-mode");
    openapiFields.add("comment");
    openapiFields.add("connection-type");
    openapiFields.add("db-name");
    openapiFields.add("db-server-certificates");
    openapiFields.add("db-server-name");
    openapiFields.add("db-type");
    openapiFields.add("description");
    openapiFields.add("host");
    openapiFields.add("json");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("mongodb-atlas");
    openapiFields.add("mongodb-atlas-api-private-key");
    openapiFields.add("mongodb-atlas-api-public-key");
    openapiFields.add("mongodb-atlas-project-id");
    openapiFields.add("mongodb-default-auth-db");
    openapiFields.add("mongodb-uri-options");
    openapiFields.add("name");
    openapiFields.add("oracle-service-name");
    openapiFields.add("oracle-wallet-login-type");
    openapiFields.add("oracle-wallet-p12-file-data");
    openapiFields.add("oracle-wallet-sso-file-data");
    openapiFields.add("parent-target-name");
    openapiFields.add("port");
    openapiFields.add("pwd");
    openapiFields.add("snowflake-account");
    openapiFields.add("snowflake-api-private-key");
    openapiFields.add("snowflake-api-private-key-password");
    openapiFields.add("ssl");
    openapiFields.add("ssl-certificate");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connection-type");
    openapiRequiredFields.add("db-type");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDBTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDBTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDBTarget is not found in the empty JSON string", CreateDBTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDBTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDBTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDBTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azure-client-id") != null && !jsonObj.get("azure-client-id").isJsonNull()) && !jsonObj.get("azure-client-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-client-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-client-id").toString()));
      }
      if ((jsonObj.get("azure-client-secret") != null && !jsonObj.get("azure-client-secret").isJsonNull()) && !jsonObj.get("azure-client-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-client-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-client-secret").toString()));
      }
      if ((jsonObj.get("azure-tenant-id") != null && !jsonObj.get("azure-tenant-id").isJsonNull()) && !jsonObj.get("azure-tenant-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure-tenant-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure-tenant-id").toString()));
      }
      if ((jsonObj.get("cloud-service-provider") != null && !jsonObj.get("cloud-service-provider").isJsonNull()) && !jsonObj.get("cloud-service-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud-service-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud-service-provider").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("connection-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection-type").toString()));
      }
      if ((jsonObj.get("db-name") != null && !jsonObj.get("db-name").isJsonNull()) && !jsonObj.get("db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-name").toString()));
      }
      if ((jsonObj.get("db-server-certificates") != null && !jsonObj.get("db-server-certificates").isJsonNull()) && !jsonObj.get("db-server-certificates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-certificates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-certificates").toString()));
      }
      if ((jsonObj.get("db-server-name") != null && !jsonObj.get("db-server-name").isJsonNull()) && !jsonObj.get("db-server-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-server-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-server-name").toString()));
      }
      if (!jsonObj.get("db-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db-type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-api-private-key") != null && !jsonObj.get("mongodb-atlas-api-private-key").isJsonNull()) && !jsonObj.get("mongodb-atlas-api-private-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-api-private-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-api-private-key").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-api-public-key") != null && !jsonObj.get("mongodb-atlas-api-public-key").isJsonNull()) && !jsonObj.get("mongodb-atlas-api-public-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-api-public-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-api-public-key").toString()));
      }
      if ((jsonObj.get("mongodb-atlas-project-id") != null && !jsonObj.get("mongodb-atlas-project-id").isJsonNull()) && !jsonObj.get("mongodb-atlas-project-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-atlas-project-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-atlas-project-id").toString()));
      }
      if ((jsonObj.get("mongodb-default-auth-db") != null && !jsonObj.get("mongodb-default-auth-db").isJsonNull()) && !jsonObj.get("mongodb-default-auth-db").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-default-auth-db` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-default-auth-db").toString()));
      }
      if ((jsonObj.get("mongodb-uri-options") != null && !jsonObj.get("mongodb-uri-options").isJsonNull()) && !jsonObj.get("mongodb-uri-options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mongodb-uri-options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mongodb-uri-options").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("oracle-service-name") != null && !jsonObj.get("oracle-service-name").isJsonNull()) && !jsonObj.get("oracle-service-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-service-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-service-name").toString()));
      }
      if ((jsonObj.get("oracle-wallet-login-type") != null && !jsonObj.get("oracle-wallet-login-type").isJsonNull()) && !jsonObj.get("oracle-wallet-login-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-wallet-login-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-wallet-login-type").toString()));
      }
      if ((jsonObj.get("oracle-wallet-p12-file-data") != null && !jsonObj.get("oracle-wallet-p12-file-data").isJsonNull()) && !jsonObj.get("oracle-wallet-p12-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-wallet-p12-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-wallet-p12-file-data").toString()));
      }
      if ((jsonObj.get("oracle-wallet-sso-file-data") != null && !jsonObj.get("oracle-wallet-sso-file-data").isJsonNull()) && !jsonObj.get("oracle-wallet-sso-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle-wallet-sso-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle-wallet-sso-file-data").toString()));
      }
      if ((jsonObj.get("parent-target-name") != null && !jsonObj.get("parent-target-name").isJsonNull()) && !jsonObj.get("parent-target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent-target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent-target-name").toString()));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("pwd") != null && !jsonObj.get("pwd").isJsonNull()) && !jsonObj.get("pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pwd").toString()));
      }
      if ((jsonObj.get("snowflake-account") != null && !jsonObj.get("snowflake-account").isJsonNull()) && !jsonObj.get("snowflake-account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflake-account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflake-account").toString()));
      }
      if ((jsonObj.get("snowflake-api-private-key") != null && !jsonObj.get("snowflake-api-private-key").isJsonNull()) && !jsonObj.get("snowflake-api-private-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflake-api-private-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflake-api-private-key").toString()));
      }
      if ((jsonObj.get("snowflake-api-private-key-password") != null && !jsonObj.get("snowflake-api-private-key-password").isJsonNull()) && !jsonObj.get("snowflake-api-private-key-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflake-api-private-key-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflake-api-private-key-password").toString()));
      }
      if ((jsonObj.get("ssl-certificate") != null && !jsonObj.get("ssl-certificate").isJsonNull()) && !jsonObj.get("ssl-certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl-certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl-certificate").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-name") != null && !jsonObj.get("user-name").isJsonNull()) && !jsonObj.get("user-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDBTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDBTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDBTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDBTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDBTarget>() {
           @Override
           public void write(JsonWriter out, CreateDBTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDBTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDBTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDBTarget
   * @throws IOException if the JSON string is invalid with respect to CreateDBTarget
   */
  public static CreateDBTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDBTarget.class);
  }

  /**
   * Convert an instance of CreateDBTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

