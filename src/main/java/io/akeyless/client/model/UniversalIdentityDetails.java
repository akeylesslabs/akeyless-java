/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.UIDTokenDetails;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UniversalIdentityDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UniversalIdentityDetails {
  public static final String SERIALIZED_NAME_MAX_DEPTH = "max_depth";
  @SerializedName(SERIALIZED_NAME_MAX_DEPTH)
  @javax.annotation.Nullable
  private Integer maxDepth;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOKENS = "number_of_tokens";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOKENS)
  @javax.annotation.Nullable
  private Long numberOfTokens;

  public static final String SERIALIZED_NAME_ROOT = "root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  @javax.annotation.Nullable
  private UIDTokenDetails root;

  public UniversalIdentityDetails() {
  }

  public UniversalIdentityDetails maxDepth(@javax.annotation.Nullable Integer maxDepth) {
    this.maxDepth = maxDepth;
    return this;
  }

  /**
   * Get maxDepth
   * @return maxDepth
   */
  @javax.annotation.Nullable
  public Integer getMaxDepth() {
    return maxDepth;
  }

  public void setMaxDepth(@javax.annotation.Nullable Integer maxDepth) {
    this.maxDepth = maxDepth;
  }


  public UniversalIdentityDetails numberOfTokens(@javax.annotation.Nullable Long numberOfTokens) {
    this.numberOfTokens = numberOfTokens;
    return this;
  }

  /**
   * Get numberOfTokens
   * @return numberOfTokens
   */
  @javax.annotation.Nullable
  public Long getNumberOfTokens() {
    return numberOfTokens;
  }

  public void setNumberOfTokens(@javax.annotation.Nullable Long numberOfTokens) {
    this.numberOfTokens = numberOfTokens;
  }


  public UniversalIdentityDetails root(@javax.annotation.Nullable UIDTokenDetails root) {
    this.root = root;
    return this;
  }

  /**
   * Get root
   * @return root
   */
  @javax.annotation.Nullable
  public UIDTokenDetails getRoot() {
    return root;
  }

  public void setRoot(@javax.annotation.Nullable UIDTokenDetails root) {
    this.root = root;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UniversalIdentityDetails universalIdentityDetails = (UniversalIdentityDetails) o;
    return Objects.equals(this.maxDepth, universalIdentityDetails.maxDepth) &&
        Objects.equals(this.numberOfTokens, universalIdentityDetails.numberOfTokens) &&
        Objects.equals(this.root, universalIdentityDetails.root);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxDepth, numberOfTokens, root);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UniversalIdentityDetails {\n");
    sb.append("    maxDepth: ").append(toIndentedString(maxDepth)).append("\n");
    sb.append("    numberOfTokens: ").append(toIndentedString(numberOfTokens)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("max_depth");
    openapiFields.add("number_of_tokens");
    openapiFields.add("root");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UniversalIdentityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UniversalIdentityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UniversalIdentityDetails is not found in the empty JSON string", UniversalIdentityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UniversalIdentityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UniversalIdentityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `root`
      if (jsonObj.get("root") != null && !jsonObj.get("root").isJsonNull()) {
        UIDTokenDetails.validateJsonElement(jsonObj.get("root"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UniversalIdentityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UniversalIdentityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UniversalIdentityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UniversalIdentityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UniversalIdentityDetails>() {
           @Override
           public void write(JsonWriter out, UniversalIdentityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UniversalIdentityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UniversalIdentityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UniversalIdentityDetails
   * @throws IOException if the JSON string is invalid with respect to UniversalIdentityDetails
   */
  public static UniversalIdentityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UniversalIdentityDetails.class);
  }

  /**
   * Convert an instance of UniversalIdentityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

