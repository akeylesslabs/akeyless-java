/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CreateEventForwarder
 */

public class CreateEventForwarder {
  public static final String SERIALIZED_NAME_ADMIN_NAME = "admin-name";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  private String adminName;

  public static final String SERIALIZED_NAME_ADMIN_PWD = "admin-pwd";
  @SerializedName(SERIALIZED_NAME_ADMIN_PWD)
  private String adminPwd;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_TO = "email-to";
  @SerializedName(SERIALIZED_NAME_EMAIL_TO)
  private String emailTo;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_LOCATIONS = "event-source-locations";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_LOCATIONS)
  private List<String> eventSourceLocations = new ArrayList<String>();

  public static final String SERIALIZED_NAME_EVENT_SOURCE_TYPE = "event-source-type";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_TYPE)
  private String eventSourceType = "item";

  public static final String SERIALIZED_NAME_EVENT_TYPES = "event-types";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List<String> eventTypes = null;

  public static final String SERIALIZED_NAME_EVERY = "every";
  @SerializedName(SERIALIZED_NAME_EVERY)
  private String every;

  public static final String SERIALIZED_NAME_FORWARDER_TYPE = "forwarder-type";
  @SerializedName(SERIALIZED_NAME_FORWARDER_TYPE)
  private String forwarderType;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNNER_TYPE = "runner-type";
  @SerializedName(SERIALIZED_NAME_RUNNER_TYPE)
  private String runnerType;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;


  public CreateEventForwarder adminName(String adminName) {
    
    this.adminName = adminName;
    return this;
  }

   /**
   * Workstation Admin Name
   * @return adminName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Admin Name")

  public String getAdminName() {
    return adminName;
  }


  public void setAdminName(String adminName) {
    this.adminName = adminName;
  }


  public CreateEventForwarder adminPwd(String adminPwd) {
    
    this.adminPwd = adminPwd;
    return this;
  }

   /**
   * Workstation Admin password
   * @return adminPwd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Admin password")

  public String getAdminPwd() {
    return adminPwd;
  }


  public void setAdminPwd(String adminPwd) {
    this.adminPwd = adminPwd;
  }


  public CreateEventForwarder comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Deprecated - use description
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated - use description")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public CreateEventForwarder description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the object
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the object")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateEventForwarder emailTo(String emailTo) {
    
    this.emailTo = emailTo;
    return this;
  }

   /**
   * A comma seperated list of email addresses to send event to (relevant only for \\\&quot;email\\\&quot; Event Forwarder)
   * @return emailTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma seperated list of email addresses to send event to (relevant only for \\\"email\\\" Event Forwarder)")

  public String getEmailTo() {
    return emailTo;
  }


  public void setEmailTo(String emailTo) {
    this.emailTo = emailTo;
  }


  public CreateEventForwarder eventSourceLocations(List<String> eventSourceLocations) {
    
    this.eventSourceLocations = eventSourceLocations;
    return this;
  }

  public CreateEventForwarder addEventSourceLocationsItem(String eventSourceLocationsItem) {
    this.eventSourceLocations.add(eventSourceLocationsItem);
    return this;
  }

   /**
   * Event sources
   * @return eventSourceLocations
  **/
  @ApiModelProperty(required = true, value = "Event sources")

  public List<String> getEventSourceLocations() {
    return eventSourceLocations;
  }


  public void setEventSourceLocations(List<String> eventSourceLocations) {
    this.eventSourceLocations = eventSourceLocations;
  }


  public CreateEventForwarder eventSourceType(String eventSourceType) {
    
    this.eventSourceType = eventSourceType;
    return this;
  }

   /**
   * Event Source type [item, target]
   * @return eventSourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event Source type [item, target]")

  public String getEventSourceType() {
    return eventSourceType;
  }


  public void setEventSourceType(String eventSourceType) {
    this.eventSourceType = eventSourceType;
  }


  public CreateEventForwarder eventTypes(List<String> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public CreateEventForwarder addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<String>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

   /**
   * Event types
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event types")

  public List<String> getEventTypes() {
    return eventTypes;
  }


  public void setEventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public CreateEventForwarder every(String every) {
    
    this.every = every;
    return this;
  }

   /**
   * Rate of periodic runner repetition in hours
   * @return every
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate of periodic runner repetition in hours")

  public String getEvery() {
    return every;
  }


  public void setEvery(String every) {
    this.every = every;
  }


  public CreateEventForwarder forwarderType(String forwarderType) {
    
    this.forwarderType = forwarderType;
    return this;
  }

   /**
   * Get forwarderType
   * @return forwarderType
  **/
  @ApiModelProperty(required = true, value = "")

  public String getForwarderType() {
    return forwarderType;
  }


  public void setForwarderType(String forwarderType) {
    this.forwarderType = forwarderType;
  }


  public CreateEventForwarder host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * Workstation Host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Host")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public CreateEventForwarder json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public CreateEventForwarder key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public CreateEventForwarder name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * EventForwarder name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "EventForwarder name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CreateEventForwarder runnerType(String runnerType) {
    
    this.runnerType = runnerType;
    return this;
  }

   /**
   * Get runnerType
   * @return runnerType
  **/
  @ApiModelProperty(required = true, value = "")

  public String getRunnerType() {
    return runnerType;
  }


  public void setRunnerType(String runnerType) {
    this.runnerType = runnerType;
  }


  public CreateEventForwarder token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public CreateEventForwarder uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventForwarder createEventForwarder = (CreateEventForwarder) o;
    return Objects.equals(this.adminName, createEventForwarder.adminName) &&
        Objects.equals(this.adminPwd, createEventForwarder.adminPwd) &&
        Objects.equals(this.comment, createEventForwarder.comment) &&
        Objects.equals(this.description, createEventForwarder.description) &&
        Objects.equals(this.emailTo, createEventForwarder.emailTo) &&
        Objects.equals(this.eventSourceLocations, createEventForwarder.eventSourceLocations) &&
        Objects.equals(this.eventSourceType, createEventForwarder.eventSourceType) &&
        Objects.equals(this.eventTypes, createEventForwarder.eventTypes) &&
        Objects.equals(this.every, createEventForwarder.every) &&
        Objects.equals(this.forwarderType, createEventForwarder.forwarderType) &&
        Objects.equals(this.host, createEventForwarder.host) &&
        Objects.equals(this.json, createEventForwarder.json) &&
        Objects.equals(this.key, createEventForwarder.key) &&
        Objects.equals(this.name, createEventForwarder.name) &&
        Objects.equals(this.runnerType, createEventForwarder.runnerType) &&
        Objects.equals(this.token, createEventForwarder.token) &&
        Objects.equals(this.uidToken, createEventForwarder.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminName, adminPwd, comment, description, emailTo, eventSourceLocations, eventSourceType, eventTypes, every, forwarderType, host, json, key, name, runnerType, token, uidToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventForwarder {\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    adminPwd: ").append(toIndentedString(adminPwd)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailTo: ").append(toIndentedString(emailTo)).append("\n");
    sb.append("    eventSourceLocations: ").append(toIndentedString(eventSourceLocations)).append("\n");
    sb.append("    eventSourceType: ").append(toIndentedString(eventSourceType)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    every: ").append(toIndentedString(every)).append("\n");
    sb.append("    forwarderType: ").append(toIndentedString(forwarderType)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runnerType: ").append(toIndentedString(runnerType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

