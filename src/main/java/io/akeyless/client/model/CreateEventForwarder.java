/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * createEventForwarder is a command that creates a new event forwarder [Deprecated - please use event-forwarder-create-* command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateEventForwarder {
  public static final String SERIALIZED_NAME_ADMIN_NAME = "admin-name";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  @javax.annotation.Nullable
  private String adminName;

  public static final String SERIALIZED_NAME_ADMIN_PWD = "admin-pwd";
  @SerializedName(SERIALIZED_NAME_ADMIN_PWD)
  @javax.annotation.Nullable
  private String adminPwd;

  public static final String SERIALIZED_NAME_APP_PRIVATE_KEY_BASE64 = "app-private-key-base64";
  @SerializedName(SERIALIZED_NAME_APP_PRIVATE_KEY_BASE64)
  @javax.annotation.Nullable
  private String appPrivateKeyBase64;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth-type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  @javax.annotation.Nullable
  private String authType = "user-pass";

  public static final String SERIALIZED_NAME_CLIENT_ID = "client-id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client-secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String clientSecret;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_TO = "email-to";
  @SerializedName(SERIALIZED_NAME_EMAIL_TO)
  @javax.annotation.Nullable
  private String emailTo;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_LOCATIONS = "event-source-locations";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_LOCATIONS)
  @javax.annotation.Nonnull
  private List<String> eventSourceLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_SOURCE_TYPE = "event-source-type";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_TYPE)
  @javax.annotation.Nullable
  private String eventSourceType = "item";

  public static final String SERIALIZED_NAME_EVENT_TYPES = "event-types";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  @javax.annotation.Nullable
  private List<String> eventTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVERY = "every";
  @SerializedName(SERIALIZED_NAME_EVERY)
  @javax.annotation.Nullable
  private String every;

  public static final String SERIALIZED_NAME_FORWARDER_TYPE = "forwarder-type";
  @SerializedName(SERIALIZED_NAME_FORWARDER_TYPE)
  @javax.annotation.Nonnull
  private String forwarderType;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private String host;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_RUNNER_TYPE = "runner-type";
  @SerializedName(SERIALIZED_NAME_RUNNER_TYPE)
  @javax.annotation.Nonnull
  private String runnerType;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user-email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  @javax.annotation.Nullable
  private String userEmail;

  public CreateEventForwarder() {
  }

  public CreateEventForwarder adminName(@javax.annotation.Nullable String adminName) {
    this.adminName = adminName;
    return this;
  }

  /**
   * Workstation Admin Name
   * @return adminName
   */
  @javax.annotation.Nullable
  public String getAdminName() {
    return adminName;
  }

  public void setAdminName(@javax.annotation.Nullable String adminName) {
    this.adminName = adminName;
  }


  public CreateEventForwarder adminPwd(@javax.annotation.Nullable String adminPwd) {
    this.adminPwd = adminPwd;
    return this;
  }

  /**
   * Workstation Admin password
   * @return adminPwd
   */
  @javax.annotation.Nullable
  public String getAdminPwd() {
    return adminPwd;
  }

  public void setAdminPwd(@javax.annotation.Nullable String adminPwd) {
    this.adminPwd = adminPwd;
  }


  public CreateEventForwarder appPrivateKeyBase64(@javax.annotation.Nullable String appPrivateKeyBase64) {
    this.appPrivateKeyBase64 = appPrivateKeyBase64;
    return this;
  }

  /**
   * The RSA Private Key PEM formatted in base64 to use when connecting to ServiceNow with jwt authentication
   * @return appPrivateKeyBase64
   */
  @javax.annotation.Nullable
  public String getAppPrivateKeyBase64() {
    return appPrivateKeyBase64;
  }

  public void setAppPrivateKeyBase64(@javax.annotation.Nullable String appPrivateKeyBase64) {
    this.appPrivateKeyBase64 = appPrivateKeyBase64;
  }


  public CreateEventForwarder authType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * The authentication type to use when connecting to ServiceNow (user-pass / jwt)
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
  }


  public CreateEventForwarder clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The client ID to use when connecting to ServiceNow with jwt authentication
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public CreateEventForwarder clientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * The client secret to use when connecting to ServiceNow with jwt authentication
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public CreateEventForwarder comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public CreateEventForwarder description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateEventForwarder emailTo(@javax.annotation.Nullable String emailTo) {
    this.emailTo = emailTo;
    return this;
  }

  /**
   * A comma seperated list of email addresses to send event to (relevant only for \&quot;email\&quot; Event Forwarder)
   * @return emailTo
   */
  @javax.annotation.Nullable
  public String getEmailTo() {
    return emailTo;
  }

  public void setEmailTo(@javax.annotation.Nullable String emailTo) {
    this.emailTo = emailTo;
  }


  public CreateEventForwarder eventSourceLocations(@javax.annotation.Nonnull List<String> eventSourceLocations) {
    this.eventSourceLocations = eventSourceLocations;
    return this;
  }

  public CreateEventForwarder addEventSourceLocationsItem(String eventSourceLocationsItem) {
    if (this.eventSourceLocations == null) {
      this.eventSourceLocations = new ArrayList<>();
    }
    this.eventSourceLocations.add(eventSourceLocationsItem);
    return this;
  }

  /**
   * Event sources
   * @return eventSourceLocations
   */
  @javax.annotation.Nonnull
  public List<String> getEventSourceLocations() {
    return eventSourceLocations;
  }

  public void setEventSourceLocations(@javax.annotation.Nonnull List<String> eventSourceLocations) {
    this.eventSourceLocations = eventSourceLocations;
  }


  public CreateEventForwarder eventSourceType(@javax.annotation.Nullable String eventSourceType) {
    this.eventSourceType = eventSourceType;
    return this;
  }

  /**
   * Event Source type [item, target, auth_method, gateway]
   * @return eventSourceType
   */
  @javax.annotation.Nullable
  public String getEventSourceType() {
    return eventSourceType;
  }

  public void setEventSourceType(@javax.annotation.Nullable String eventSourceType) {
    this.eventSourceType = eventSourceType;
  }


  public CreateEventForwarder eventTypes(@javax.annotation.Nullable List<String> eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  public CreateEventForwarder addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

  /**
   * List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]
   * @return eventTypes
   */
  @javax.annotation.Nullable
  public List<String> getEventTypes() {
    return eventTypes;
  }

  public void setEventTypes(@javax.annotation.Nullable List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public CreateEventForwarder every(@javax.annotation.Nullable String every) {
    this.every = every;
    return this;
  }

  /**
   * Rate of periodic runner repetition in hours
   * @return every
   */
  @javax.annotation.Nullable
  public String getEvery() {
    return every;
  }

  public void setEvery(@javax.annotation.Nullable String every) {
    this.every = every;
  }


  public CreateEventForwarder forwarderType(@javax.annotation.Nonnull String forwarderType) {
    this.forwarderType = forwarderType;
    return this;
  }

  /**
   * Get forwarderType
   * @return forwarderType
   */
  @javax.annotation.Nonnull
  public String getForwarderType() {
    return forwarderType;
  }

  public void setForwarderType(@javax.annotation.Nonnull String forwarderType) {
    this.forwarderType = forwarderType;
  }


  public CreateEventForwarder host(@javax.annotation.Nullable String host) {
    this.host = host;
    return this;
  }

  /**
   * Workstation Host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nullable String host) {
    this.host = host;
  }


  public CreateEventForwarder json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public CreateEventForwarder key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public CreateEventForwarder name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * EventForwarder name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateEventForwarder runnerType(@javax.annotation.Nonnull String runnerType) {
    this.runnerType = runnerType;
    return this;
  }

  /**
   * Get runnerType
   * @return runnerType
   */
  @javax.annotation.Nonnull
  public String getRunnerType() {
    return runnerType;
  }

  public void setRunnerType(@javax.annotation.Nonnull String runnerType) {
    this.runnerType = runnerType;
  }


  public CreateEventForwarder token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public CreateEventForwarder uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public CreateEventForwarder userEmail(@javax.annotation.Nullable String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * The user email to use when connecting to ServiceNow with jwt authentication
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(@javax.annotation.Nullable String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventForwarder createEventForwarder = (CreateEventForwarder) o;
    return Objects.equals(this.adminName, createEventForwarder.adminName) &&
        Objects.equals(this.adminPwd, createEventForwarder.adminPwd) &&
        Objects.equals(this.appPrivateKeyBase64, createEventForwarder.appPrivateKeyBase64) &&
        Objects.equals(this.authType, createEventForwarder.authType) &&
        Objects.equals(this.clientId, createEventForwarder.clientId) &&
        Objects.equals(this.clientSecret, createEventForwarder.clientSecret) &&
        Objects.equals(this.comment, createEventForwarder.comment) &&
        Objects.equals(this.description, createEventForwarder.description) &&
        Objects.equals(this.emailTo, createEventForwarder.emailTo) &&
        Objects.equals(this.eventSourceLocations, createEventForwarder.eventSourceLocations) &&
        Objects.equals(this.eventSourceType, createEventForwarder.eventSourceType) &&
        Objects.equals(this.eventTypes, createEventForwarder.eventTypes) &&
        Objects.equals(this.every, createEventForwarder.every) &&
        Objects.equals(this.forwarderType, createEventForwarder.forwarderType) &&
        Objects.equals(this.host, createEventForwarder.host) &&
        Objects.equals(this.json, createEventForwarder.json) &&
        Objects.equals(this.key, createEventForwarder.key) &&
        Objects.equals(this.name, createEventForwarder.name) &&
        Objects.equals(this.runnerType, createEventForwarder.runnerType) &&
        Objects.equals(this.token, createEventForwarder.token) &&
        Objects.equals(this.uidToken, createEventForwarder.uidToken) &&
        Objects.equals(this.userEmail, createEventForwarder.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminName, adminPwd, appPrivateKeyBase64, authType, clientId, clientSecret, comment, description, emailTo, eventSourceLocations, eventSourceType, eventTypes, every, forwarderType, host, json, key, name, runnerType, token, uidToken, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventForwarder {\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    adminPwd: ").append(toIndentedString(adminPwd)).append("\n");
    sb.append("    appPrivateKeyBase64: ").append(toIndentedString(appPrivateKeyBase64)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailTo: ").append(toIndentedString(emailTo)).append("\n");
    sb.append("    eventSourceLocations: ").append(toIndentedString(eventSourceLocations)).append("\n");
    sb.append("    eventSourceType: ").append(toIndentedString(eventSourceType)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    every: ").append(toIndentedString(every)).append("\n");
    sb.append("    forwarderType: ").append(toIndentedString(forwarderType)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runnerType: ").append(toIndentedString(runnerType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin-name");
    openapiFields.add("admin-pwd");
    openapiFields.add("app-private-key-base64");
    openapiFields.add("auth-type");
    openapiFields.add("client-id");
    openapiFields.add("client-secret");
    openapiFields.add("comment");
    openapiFields.add("description");
    openapiFields.add("email-to");
    openapiFields.add("event-source-locations");
    openapiFields.add("event-source-type");
    openapiFields.add("event-types");
    openapiFields.add("every");
    openapiFields.add("forwarder-type");
    openapiFields.add("host");
    openapiFields.add("json");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("runner-type");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event-source-locations");
    openapiRequiredFields.add("forwarder-type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("runner-type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEventForwarder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEventForwarder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEventForwarder is not found in the empty JSON string", CreateEventForwarder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEventForwarder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEventForwarder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEventForwarder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admin-name") != null && !jsonObj.get("admin-name").isJsonNull()) && !jsonObj.get("admin-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-name").toString()));
      }
      if ((jsonObj.get("admin-pwd") != null && !jsonObj.get("admin-pwd").isJsonNull()) && !jsonObj.get("admin-pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin-pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin-pwd").toString()));
      }
      if ((jsonObj.get("app-private-key-base64") != null && !jsonObj.get("app-private-key-base64").isJsonNull()) && !jsonObj.get("app-private-key-base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app-private-key-base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app-private-key-base64").toString()));
      }
      if ((jsonObj.get("auth-type") != null && !jsonObj.get("auth-type").isJsonNull()) && !jsonObj.get("auth-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-type").toString()));
      }
      if ((jsonObj.get("client-id") != null && !jsonObj.get("client-id").isJsonNull()) && !jsonObj.get("client-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-id").toString()));
      }
      if ((jsonObj.get("client-secret") != null && !jsonObj.get("client-secret").isJsonNull()) && !jsonObj.get("client-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-secret").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email-to") != null && !jsonObj.get("email-to").isJsonNull()) && !jsonObj.get("email-to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email-to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email-to").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("event-source-locations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("event-source-locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-source-locations` to be an array in the JSON string but got `%s`", jsonObj.get("event-source-locations").toString()));
      }
      if ((jsonObj.get("event-source-type") != null && !jsonObj.get("event-source-type").isJsonNull()) && !jsonObj.get("event-source-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-source-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event-source-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event-types") != null && !jsonObj.get("event-types").isJsonNull() && !jsonObj.get("event-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event-types` to be an array in the JSON string but got `%s`", jsonObj.get("event-types").toString()));
      }
      if ((jsonObj.get("every") != null && !jsonObj.get("every").isJsonNull()) && !jsonObj.get("every").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `every` to be a primitive type in the JSON string but got `%s`", jsonObj.get("every").toString()));
      }
      if (!jsonObj.get("forwarder-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwarder-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forwarder-type").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("runner-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runner-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runner-type").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-email") != null && !jsonObj.get("user-email").isJsonNull()) && !jsonObj.get("user-email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEventForwarder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEventForwarder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEventForwarder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEventForwarder.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEventForwarder>() {
           @Override
           public void write(JsonWriter out, CreateEventForwarder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEventForwarder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEventForwarder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEventForwarder
   * @throws IOException if the JSON string is invalid with respect to CreateEventForwarder
   */
  public static CreateEventForwarder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEventForwarder.class);
  }

  /**
   * Convert an instance of CreateEventForwarder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

