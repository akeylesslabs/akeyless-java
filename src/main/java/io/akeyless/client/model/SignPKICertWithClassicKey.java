/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SignPKICertWithClassicKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SignPKICertWithClassicKey {
  public static final String SERIALIZED_NAME_COMMON_NAME = "common-name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DISPLAY_ID = "display-id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  private String displayId;

  public static final String SERIALIZED_NAME_DNS_NAMES = "dns-names";
  @SerializedName(SERIALIZED_NAME_DNS_NAMES)
  private String dnsNames;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_USAGE = "key-usage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  private String keyUsage = "DigitalSignature,KeyAgreement,KeyEncipherment";

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNITS = "organizational-units";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNITS)
  private String organizationalUnits;

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private String organizations;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal-code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private String province;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_PEM_DATA = "public-key-pem-data";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_PEM_DATA)
  private String publicKeyPemData;

  public static final String SERIALIZED_NAME_SIGNING_METHOD = "signing-method";
  @SerializedName(SERIALIZED_NAME_SIGNING_METHOD)
  private String signingMethod;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street-address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Long ttl;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_URI_SANS = "uri-sans";
  @SerializedName(SERIALIZED_NAME_URI_SANS)
  private String uriSans;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public SignPKICertWithClassicKey() { 
  }

  public SignPKICertWithClassicKey commonName(String commonName) {
    
    this.commonName = commonName;
    return this;
  }

   /**
   * The common name to be included in the PKI certificate
   * @return commonName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The common name to be included in the PKI certificate")

  public String getCommonName() {
    return commonName;
  }


  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public SignPKICertWithClassicKey country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * A comma-separated list of the country that will be set in the issued certificate
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of the country that will be set in the issued certificate")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public SignPKICertWithClassicKey displayId(String displayId) {
    
    this.displayId = displayId;
    return this;
  }

   /**
   * The name of the key to use in the sign PKI Cert process
   * @return displayId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the key to use in the sign PKI Cert process")

  public String getDisplayId() {
    return displayId;
  }


  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }


  public SignPKICertWithClassicKey dnsNames(String dnsNames) {
    
    this.dnsNames = dnsNames;
    return this;
  }

   /**
   * DNS Names to be included in the PKI certificate (in a comma-delimited list)
   * @return dnsNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DNS Names to be included in the PKI certificate (in a comma-delimited list)")

  public String getDnsNames() {
    return dnsNames;
  }


  public void setDnsNames(String dnsNames) {
    this.dnsNames = dnsNames;
  }


  public SignPKICertWithClassicKey json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public SignPKICertWithClassicKey keyUsage(String keyUsage) {
    
    this.keyUsage = keyUsage;
    return this;
  }

   /**
   * key-usage
   * @return keyUsage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "key-usage")

  public String getKeyUsage() {
    return keyUsage;
  }


  public void setKeyUsage(String keyUsage) {
    this.keyUsage = keyUsage;
  }


  public SignPKICertWithClassicKey locality(String locality) {
    
    this.locality = locality;
    return this;
  }

   /**
   * A comma-separated list of the locality that will be set in the issued certificate
   * @return locality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of the locality that will be set in the issued certificate")

  public String getLocality() {
    return locality;
  }


  public void setLocality(String locality) {
    this.locality = locality;
  }


  public SignPKICertWithClassicKey organizationalUnits(String organizationalUnits) {
    
    this.organizationalUnits = organizationalUnits;
    return this;
  }

   /**
   * A comma-separated list of organizational units (OU) that will be set in the issued certificate
   * @return organizationalUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of organizational units (OU) that will be set in the issued certificate")

  public String getOrganizationalUnits() {
    return organizationalUnits;
  }


  public void setOrganizationalUnits(String organizationalUnits) {
    this.organizationalUnits = organizationalUnits;
  }


  public SignPKICertWithClassicKey organizations(String organizations) {
    
    this.organizations = organizations;
    return this;
  }

   /**
   * A comma-separated list of organizations (O) that will be set in the issued certificate
   * @return organizations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of organizations (O) that will be set in the issued certificate")

  public String getOrganizations() {
    return organizations;
  }


  public void setOrganizations(String organizations) {
    this.organizations = organizations;
  }


  public SignPKICertWithClassicKey postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * A comma-separated list of the postal code that will be set in the issued certificate
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of the postal code that will be set in the issued certificate")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public SignPKICertWithClassicKey province(String province) {
    
    this.province = province;
    return this;
  }

   /**
   * A comma-separated list of the province that will be set in the issued certificate
   * @return province
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of the province that will be set in the issued certificate")

  public String getProvince() {
    return province;
  }


  public void setProvince(String province) {
    this.province = province;
  }


  public SignPKICertWithClassicKey publicKeyPemData(String publicKeyPemData) {
    
    this.publicKeyPemData = publicKeyPemData;
    return this;
  }

   /**
   * PublicKey using for signing in a PEM format.
   * @return publicKeyPemData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PublicKey using for signing in a PEM format.")

  public String getPublicKeyPemData() {
    return publicKeyPemData;
  }


  public void setPublicKeyPemData(String publicKeyPemData) {
    this.publicKeyPemData = publicKeyPemData;
  }


  public SignPKICertWithClassicKey signingMethod(String signingMethod) {
    
    this.signingMethod = signingMethod;
    return this;
  }

   /**
   * SigningMethod
   * @return signingMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SigningMethod")

  public String getSigningMethod() {
    return signingMethod;
  }


  public void setSigningMethod(String signingMethod) {
    this.signingMethod = signingMethod;
  }


  public SignPKICertWithClassicKey streetAddress(String streetAddress) {
    
    this.streetAddress = streetAddress;
    return this;
  }

   /**
   * A comma-separated list of the street address that will be set in the issued certificate
   * @return streetAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of the street address that will be set in the issued certificate")

  public String getStreetAddress() {
    return streetAddress;
  }


  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public SignPKICertWithClassicKey token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public SignPKICertWithClassicKey ttl(Long ttl) {
    
    this.ttl = ttl;
    return this;
  }

   /**
   * he requested Time To Live for the certificate, in seconds
   * @return ttl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "he requested Time To Live for the certificate, in seconds")

  public Long getTtl() {
    return ttl;
  }


  public void setTtl(Long ttl) {
    this.ttl = ttl;
  }


  public SignPKICertWithClassicKey uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public SignPKICertWithClassicKey uriSans(String uriSans) {
    
    this.uriSans = uriSans;
    return this;
  }

   /**
   * The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
   * @return uriSans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)")

  public String getUriSans() {
    return uriSans;
  }


  public void setUriSans(String uriSans) {
    this.uriSans = uriSans;
  }


  public SignPKICertWithClassicKey version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * classic key version
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "classic key version")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignPKICertWithClassicKey signPKICertWithClassicKey = (SignPKICertWithClassicKey) o;
    return Objects.equals(this.commonName, signPKICertWithClassicKey.commonName) &&
        Objects.equals(this.country, signPKICertWithClassicKey.country) &&
        Objects.equals(this.displayId, signPKICertWithClassicKey.displayId) &&
        Objects.equals(this.dnsNames, signPKICertWithClassicKey.dnsNames) &&
        Objects.equals(this.json, signPKICertWithClassicKey.json) &&
        Objects.equals(this.keyUsage, signPKICertWithClassicKey.keyUsage) &&
        Objects.equals(this.locality, signPKICertWithClassicKey.locality) &&
        Objects.equals(this.organizationalUnits, signPKICertWithClassicKey.organizationalUnits) &&
        Objects.equals(this.organizations, signPKICertWithClassicKey.organizations) &&
        Objects.equals(this.postalCode, signPKICertWithClassicKey.postalCode) &&
        Objects.equals(this.province, signPKICertWithClassicKey.province) &&
        Objects.equals(this.publicKeyPemData, signPKICertWithClassicKey.publicKeyPemData) &&
        Objects.equals(this.signingMethod, signPKICertWithClassicKey.signingMethod) &&
        Objects.equals(this.streetAddress, signPKICertWithClassicKey.streetAddress) &&
        Objects.equals(this.token, signPKICertWithClassicKey.token) &&
        Objects.equals(this.ttl, signPKICertWithClassicKey.ttl) &&
        Objects.equals(this.uidToken, signPKICertWithClassicKey.uidToken) &&
        Objects.equals(this.uriSans, signPKICertWithClassicKey.uriSans) &&
        Objects.equals(this.version, signPKICertWithClassicKey.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, country, displayId, dnsNames, json, keyUsage, locality, organizationalUnits, organizations, postalCode, province, publicKeyPemData, signingMethod, streetAddress, token, ttl, uidToken, uriSans, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignPKICertWithClassicKey {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    dnsNames: ").append(toIndentedString(dnsNames)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    organizationalUnits: ").append(toIndentedString(organizationalUnits)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    publicKeyPemData: ").append(toIndentedString(publicKeyPemData)).append("\n");
    sb.append("    signingMethod: ").append(toIndentedString(signingMethod)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uriSans: ").append(toIndentedString(uriSans)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

