/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SignPKICertWithClassicKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SignPKICertWithClassicKey {
  public static final String SERIALIZED_NAME_COMMON_NAME = "common-name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  @javax.annotation.Nullable
  private String commonName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_DISPLAY_ID = "display-id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  @javax.annotation.Nonnull
  private String displayId;

  public static final String SERIALIZED_NAME_DNS_NAMES = "dns-names";
  @SerializedName(SERIALIZED_NAME_DNS_NAMES)
  @javax.annotation.Nullable
  private String dnsNames;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_USAGE = "key-usage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  @javax.annotation.Nullable
  private String keyUsage = "DigitalSignature,KeyAgreement,KeyEncipherment";

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  @javax.annotation.Nullable
  private String locality;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNITS = "organizational-units";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNITS)
  @javax.annotation.Nullable
  private String organizationalUnits;

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  @javax.annotation.Nullable
  private String organizations;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal-code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  @javax.annotation.Nullable
  private String postalCode;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  @javax.annotation.Nullable
  private String province;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_PEM_DATA = "public-key-pem-data";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_PEM_DATA)
  @javax.annotation.Nullable
  private String publicKeyPemData;

  public static final String SERIALIZED_NAME_SIGNING_METHOD = "signing-method";
  @SerializedName(SERIALIZED_NAME_SIGNING_METHOD)
  @javax.annotation.Nonnull
  private String signingMethod;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street-address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  @javax.annotation.Nullable
  private String streetAddress;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nonnull
  private Long ttl;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_URI_SANS = "uri-sans";
  @SerializedName(SERIALIZED_NAME_URI_SANS)
  @javax.annotation.Nullable
  private String uriSans;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private Integer version;

  public SignPKICertWithClassicKey() {
  }

  public SignPKICertWithClassicKey commonName(@javax.annotation.Nullable String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * The common name to be included in the PKI certificate
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(@javax.annotation.Nullable String commonName) {
    this.commonName = commonName;
  }


  public SignPKICertWithClassicKey country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * A comma-separated list of the country that will be set in the issued certificate
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public SignPKICertWithClassicKey displayId(@javax.annotation.Nonnull String displayId) {
    this.displayId = displayId;
    return this;
  }

  /**
   * The name of the key to use in the sign PKI Cert process
   * @return displayId
   */
  @javax.annotation.Nonnull
  public String getDisplayId() {
    return displayId;
  }

  public void setDisplayId(@javax.annotation.Nonnull String displayId) {
    this.displayId = displayId;
  }


  public SignPKICertWithClassicKey dnsNames(@javax.annotation.Nullable String dnsNames) {
    this.dnsNames = dnsNames;
    return this;
  }

  /**
   * DNS Names to be included in the PKI certificate (in a comma-delimited list)
   * @return dnsNames
   */
  @javax.annotation.Nullable
  public String getDnsNames() {
    return dnsNames;
  }

  public void setDnsNames(@javax.annotation.Nullable String dnsNames) {
    this.dnsNames = dnsNames;
  }


  public SignPKICertWithClassicKey json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public SignPKICertWithClassicKey keyUsage(@javax.annotation.Nullable String keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  /**
   * key-usage
   * @return keyUsage
   */
  @javax.annotation.Nullable
  public String getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(@javax.annotation.Nullable String keyUsage) {
    this.keyUsage = keyUsage;
  }


  public SignPKICertWithClassicKey locality(@javax.annotation.Nullable String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * A comma-separated list of the locality that will be set in the issued certificate
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(@javax.annotation.Nullable String locality) {
    this.locality = locality;
  }


  public SignPKICertWithClassicKey organizationalUnits(@javax.annotation.Nullable String organizationalUnits) {
    this.organizationalUnits = organizationalUnits;
    return this;
  }

  /**
   * A comma-separated list of organizational units (OU) that will be set in the issued certificate
   * @return organizationalUnits
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnits() {
    return organizationalUnits;
  }

  public void setOrganizationalUnits(@javax.annotation.Nullable String organizationalUnits) {
    this.organizationalUnits = organizationalUnits;
  }


  public SignPKICertWithClassicKey organizations(@javax.annotation.Nullable String organizations) {
    this.organizations = organizations;
    return this;
  }

  /**
   * A comma-separated list of organizations (O) that will be set in the issued certificate
   * @return organizations
   */
  @javax.annotation.Nullable
  public String getOrganizations() {
    return organizations;
  }

  public void setOrganizations(@javax.annotation.Nullable String organizations) {
    this.organizations = organizations;
  }


  public SignPKICertWithClassicKey postalCode(@javax.annotation.Nullable String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * A comma-separated list of the postal code that will be set in the issued certificate
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(@javax.annotation.Nullable String postalCode) {
    this.postalCode = postalCode;
  }


  public SignPKICertWithClassicKey province(@javax.annotation.Nullable String province) {
    this.province = province;
    return this;
  }

  /**
   * A comma-separated list of the province that will be set in the issued certificate
   * @return province
   */
  @javax.annotation.Nullable
  public String getProvince() {
    return province;
  }

  public void setProvince(@javax.annotation.Nullable String province) {
    this.province = province;
  }


  public SignPKICertWithClassicKey publicKeyPemData(@javax.annotation.Nullable String publicKeyPemData) {
    this.publicKeyPemData = publicKeyPemData;
    return this;
  }

  /**
   * PublicKey using for signing in a PEM format.
   * @return publicKeyPemData
   */
  @javax.annotation.Nullable
  public String getPublicKeyPemData() {
    return publicKeyPemData;
  }

  public void setPublicKeyPemData(@javax.annotation.Nullable String publicKeyPemData) {
    this.publicKeyPemData = publicKeyPemData;
  }


  public SignPKICertWithClassicKey signingMethod(@javax.annotation.Nonnull String signingMethod) {
    this.signingMethod = signingMethod;
    return this;
  }

  /**
   * SigningMethod
   * @return signingMethod
   */
  @javax.annotation.Nonnull
  public String getSigningMethod() {
    return signingMethod;
  }

  public void setSigningMethod(@javax.annotation.Nonnull String signingMethod) {
    this.signingMethod = signingMethod;
  }


  public SignPKICertWithClassicKey streetAddress(@javax.annotation.Nullable String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * A comma-separated list of the street address that will be set in the issued certificate
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(@javax.annotation.Nullable String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public SignPKICertWithClassicKey token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public SignPKICertWithClassicKey ttl(@javax.annotation.Nonnull Long ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * he requested Time To Live for the certificate, in seconds
   * @return ttl
   */
  @javax.annotation.Nonnull
  public Long getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nonnull Long ttl) {
    this.ttl = ttl;
  }


  public SignPKICertWithClassicKey uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public SignPKICertWithClassicKey uriSans(@javax.annotation.Nullable String uriSans) {
    this.uriSans = uriSans;
    return this;
  }

  /**
   * The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
   * @return uriSans
   */
  @javax.annotation.Nullable
  public String getUriSans() {
    return uriSans;
  }

  public void setUriSans(@javax.annotation.Nullable String uriSans) {
    this.uriSans = uriSans;
  }


  public SignPKICertWithClassicKey version(@javax.annotation.Nonnull Integer version) {
    this.version = version;
    return this;
  }

  /**
   * classic key version
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignPKICertWithClassicKey signPKICertWithClassicKey = (SignPKICertWithClassicKey) o;
    return Objects.equals(this.commonName, signPKICertWithClassicKey.commonName) &&
        Objects.equals(this.country, signPKICertWithClassicKey.country) &&
        Objects.equals(this.displayId, signPKICertWithClassicKey.displayId) &&
        Objects.equals(this.dnsNames, signPKICertWithClassicKey.dnsNames) &&
        Objects.equals(this.json, signPKICertWithClassicKey.json) &&
        Objects.equals(this.keyUsage, signPKICertWithClassicKey.keyUsage) &&
        Objects.equals(this.locality, signPKICertWithClassicKey.locality) &&
        Objects.equals(this.organizationalUnits, signPKICertWithClassicKey.organizationalUnits) &&
        Objects.equals(this.organizations, signPKICertWithClassicKey.organizations) &&
        Objects.equals(this.postalCode, signPKICertWithClassicKey.postalCode) &&
        Objects.equals(this.province, signPKICertWithClassicKey.province) &&
        Objects.equals(this.publicKeyPemData, signPKICertWithClassicKey.publicKeyPemData) &&
        Objects.equals(this.signingMethod, signPKICertWithClassicKey.signingMethod) &&
        Objects.equals(this.streetAddress, signPKICertWithClassicKey.streetAddress) &&
        Objects.equals(this.token, signPKICertWithClassicKey.token) &&
        Objects.equals(this.ttl, signPKICertWithClassicKey.ttl) &&
        Objects.equals(this.uidToken, signPKICertWithClassicKey.uidToken) &&
        Objects.equals(this.uriSans, signPKICertWithClassicKey.uriSans) &&
        Objects.equals(this.version, signPKICertWithClassicKey.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, country, displayId, dnsNames, json, keyUsage, locality, organizationalUnits, organizations, postalCode, province, publicKeyPemData, signingMethod, streetAddress, token, ttl, uidToken, uriSans, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignPKICertWithClassicKey {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    dnsNames: ").append(toIndentedString(dnsNames)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    organizationalUnits: ").append(toIndentedString(organizationalUnits)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    publicKeyPemData: ").append(toIndentedString(publicKeyPemData)).append("\n");
    sb.append("    signingMethod: ").append(toIndentedString(signingMethod)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uriSans: ").append(toIndentedString(uriSans)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("common-name");
    openapiFields.add("country");
    openapiFields.add("display-id");
    openapiFields.add("dns-names");
    openapiFields.add("json");
    openapiFields.add("key-usage");
    openapiFields.add("locality");
    openapiFields.add("organizational-units");
    openapiFields.add("organizations");
    openapiFields.add("postal-code");
    openapiFields.add("province");
    openapiFields.add("public-key-pem-data");
    openapiFields.add("signing-method");
    openapiFields.add("street-address");
    openapiFields.add("token");
    openapiFields.add("ttl");
    openapiFields.add("uid-token");
    openapiFields.add("uri-sans");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("display-id");
    openapiRequiredFields.add("signing-method");
    openapiRequiredFields.add("ttl");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignPKICertWithClassicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignPKICertWithClassicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignPKICertWithClassicKey is not found in the empty JSON string", SignPKICertWithClassicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignPKICertWithClassicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignPKICertWithClassicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignPKICertWithClassicKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("common-name") != null && !jsonObj.get("common-name").isJsonNull()) && !jsonObj.get("common-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common-name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("display-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display-id").toString()));
      }
      if ((jsonObj.get("dns-names") != null && !jsonObj.get("dns-names").isJsonNull()) && !jsonObj.get("dns-names").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns-names` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns-names").toString()));
      }
      if ((jsonObj.get("key-usage") != null && !jsonObj.get("key-usage").isJsonNull()) && !jsonObj.get("key-usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-usage").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("organizational-units") != null && !jsonObj.get("organizational-units").isJsonNull()) && !jsonObj.get("organizational-units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizational-units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizational-units").toString()));
      }
      if ((jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull()) && !jsonObj.get("organizations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
      }
      if ((jsonObj.get("postal-code") != null && !jsonObj.get("postal-code").isJsonNull()) && !jsonObj.get("postal-code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal-code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal-code").toString()));
      }
      if ((jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) && !jsonObj.get("province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province").toString()));
      }
      if ((jsonObj.get("public-key-pem-data") != null && !jsonObj.get("public-key-pem-data").isJsonNull()) && !jsonObj.get("public-key-pem-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public-key-pem-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public-key-pem-data").toString()));
      }
      if (!jsonObj.get("signing-method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing-method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing-method").toString()));
      }
      if ((jsonObj.get("street-address") != null && !jsonObj.get("street-address").isJsonNull()) && !jsonObj.get("street-address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street-address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street-address").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("uri-sans") != null && !jsonObj.get("uri-sans").isJsonNull()) && !jsonObj.get("uri-sans").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri-sans` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri-sans").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignPKICertWithClassicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignPKICertWithClassicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignPKICertWithClassicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignPKICertWithClassicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<SignPKICertWithClassicKey>() {
           @Override
           public void write(JsonWriter out, SignPKICertWithClassicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignPKICertWithClassicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignPKICertWithClassicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignPKICertWithClassicKey
   * @throws IOException if the JSON string is invalid with respect to SignPKICertWithClassicKey
   */
  public static SignPKICertWithClassicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignPKICertWithClassicKey.class);
  }

  /**
   * Convert an instance of SignPKICertWithClassicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

