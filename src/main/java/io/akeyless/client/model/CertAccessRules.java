/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * CertAccessRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CertAccessRules {
  public static final String SERIALIZED_NAME_ALLOWED_CORS = "allowed_cors";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CORS)
  @javax.annotation.Nullable
  private List<String> allowedCors = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_COMMON_NAMES = "bound_common_names";
  @SerializedName(SERIALIZED_NAME_BOUND_COMMON_NAMES)
  @javax.annotation.Nullable
  private List<String> boundCommonNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_DNS_SANS = "bound_dns_sans";
  @SerializedName(SERIALIZED_NAME_BOUND_DNS_SANS)
  @javax.annotation.Nullable
  private List<String> boundDnsSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_EMAIL_SANS = "bound_email_sans";
  @SerializedName(SERIALIZED_NAME_BOUND_EMAIL_SANS)
  @javax.annotation.Nullable
  private List<String> boundEmailSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_EXTENSIONS = "bound_extensions";
  @SerializedName(SERIALIZED_NAME_BOUND_EXTENSIONS)
  @javax.annotation.Nullable
  private List<String> boundExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_ORGANIZATIONAL_UNITS = "bound_organizational_units";
  @SerializedName(SERIALIZED_NAME_BOUND_ORGANIZATIONAL_UNITS)
  @javax.annotation.Nullable
  private List<String> boundOrganizationalUnits = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_URI_SANS = "bound_uri_sans";
  @SerializedName(SERIALIZED_NAME_BOUND_URI_SANS)
  @javax.annotation.Nullable
  private List<String> boundUriSans = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  @javax.annotation.Nullable
  private String certificate;

  public static final String SERIALIZED_NAME_REVOKED_CERT_IDS = "revoked_cert_ids";
  @SerializedName(SERIALIZED_NAME_REVOKED_CERT_IDS)
  @javax.annotation.Nullable
  private List<String> revokedCertIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String uniqueIdentifier;

  public CertAccessRules() {
  }

  public CertAccessRules allowedCors(@javax.annotation.Nullable List<String> allowedCors) {
    this.allowedCors = allowedCors;
    return this;
  }

  public CertAccessRules addAllowedCorsItem(String allowedCorsItem) {
    if (this.allowedCors == null) {
      this.allowedCors = new ArrayList<>();
    }
    this.allowedCors.add(allowedCorsItem);
    return this;
  }

  /**
   * a list of allowed cors domains if used for browser authentication
   * @return allowedCors
   */
  @javax.annotation.Nullable
  public List<String> getAllowedCors() {
    return allowedCors;
  }

  public void setAllowedCors(@javax.annotation.Nullable List<String> allowedCors) {
    this.allowedCors = allowedCors;
  }


  public CertAccessRules boundCommonNames(@javax.annotation.Nullable List<String> boundCommonNames) {
    this.boundCommonNames = boundCommonNames;
    return this;
  }

  public CertAccessRules addBoundCommonNamesItem(String boundCommonNamesItem) {
    if (this.boundCommonNames == null) {
      this.boundCommonNames = new ArrayList<>();
    }
    this.boundCommonNames.add(boundCommonNamesItem);
    return this;
  }

  /**
   * A list of names. At least one must exist in the Common Name. Supports globbing.
   * @return boundCommonNames
   */
  @javax.annotation.Nullable
  public List<String> getBoundCommonNames() {
    return boundCommonNames;
  }

  public void setBoundCommonNames(@javax.annotation.Nullable List<String> boundCommonNames) {
    this.boundCommonNames = boundCommonNames;
  }


  public CertAccessRules boundDnsSans(@javax.annotation.Nullable List<String> boundDnsSans) {
    this.boundDnsSans = boundDnsSans;
    return this;
  }

  public CertAccessRules addBoundDnsSansItem(String boundDnsSansItem) {
    if (this.boundDnsSans == null) {
      this.boundDnsSans = new ArrayList<>();
    }
    this.boundDnsSans.add(boundDnsSansItem);
    return this;
  }

  /**
   * A list of DNS names. At least one must exist in the SANs. Supports globbing.
   * @return boundDnsSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundDnsSans() {
    return boundDnsSans;
  }

  public void setBoundDnsSans(@javax.annotation.Nullable List<String> boundDnsSans) {
    this.boundDnsSans = boundDnsSans;
  }


  public CertAccessRules boundEmailSans(@javax.annotation.Nullable List<String> boundEmailSans) {
    this.boundEmailSans = boundEmailSans;
    return this;
  }

  public CertAccessRules addBoundEmailSansItem(String boundEmailSansItem) {
    if (this.boundEmailSans == null) {
      this.boundEmailSans = new ArrayList<>();
    }
    this.boundEmailSans.add(boundEmailSansItem);
    return this;
  }

  /**
   * A list of Email Addresses. At least one must exist in the SANs. Supports globbing.
   * @return boundEmailSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundEmailSans() {
    return boundEmailSans;
  }

  public void setBoundEmailSans(@javax.annotation.Nullable List<String> boundEmailSans) {
    this.boundEmailSans = boundEmailSans;
  }


  public CertAccessRules boundExtensions(@javax.annotation.Nullable List<String> boundExtensions) {
    this.boundExtensions = boundExtensions;
    return this;
  }

  public CertAccessRules addBoundExtensionsItem(String boundExtensionsItem) {
    if (this.boundExtensions == null) {
      this.boundExtensions = new ArrayList<>();
    }
    this.boundExtensions.add(boundExtensionsItem);
    return this;
  }

  /**
   * A list of extensions formatted as \&quot;oid:value\&quot;. Expects the extension value to be some type of ASN1 encoded string. All values must match. Supports globbing on \&quot;value\&quot;.
   * @return boundExtensions
   */
  @javax.annotation.Nullable
  public List<String> getBoundExtensions() {
    return boundExtensions;
  }

  public void setBoundExtensions(@javax.annotation.Nullable List<String> boundExtensions) {
    this.boundExtensions = boundExtensions;
  }


  public CertAccessRules boundOrganizationalUnits(@javax.annotation.Nullable List<String> boundOrganizationalUnits) {
    this.boundOrganizationalUnits = boundOrganizationalUnits;
    return this;
  }

  public CertAccessRules addBoundOrganizationalUnitsItem(String boundOrganizationalUnitsItem) {
    if (this.boundOrganizationalUnits == null) {
      this.boundOrganizationalUnits = new ArrayList<>();
    }
    this.boundOrganizationalUnits.add(boundOrganizationalUnitsItem);
    return this;
  }

  /**
   * A list of Organizational Units names. At least one must exist in the OU field.
   * @return boundOrganizationalUnits
   */
  @javax.annotation.Nullable
  public List<String> getBoundOrganizationalUnits() {
    return boundOrganizationalUnits;
  }

  public void setBoundOrganizationalUnits(@javax.annotation.Nullable List<String> boundOrganizationalUnits) {
    this.boundOrganizationalUnits = boundOrganizationalUnits;
  }


  public CertAccessRules boundUriSans(@javax.annotation.Nullable List<String> boundUriSans) {
    this.boundUriSans = boundUriSans;
    return this;
  }

  public CertAccessRules addBoundUriSansItem(String boundUriSansItem) {
    if (this.boundUriSans == null) {
      this.boundUriSans = new ArrayList<>();
    }
    this.boundUriSans.add(boundUriSansItem);
    return this;
  }

  /**
   * A list of URIs. At least one must exist in the SANs. Supports globbing.
   * @return boundUriSans
   */
  @javax.annotation.Nullable
  public List<String> getBoundUriSans() {
    return boundUriSans;
  }

  public void setBoundUriSans(@javax.annotation.Nullable List<String> boundUriSans) {
    this.boundUriSans = boundUriSans;
  }


  public CertAccessRules certificate(@javax.annotation.Nullable String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Base64 encdoed PEM certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(@javax.annotation.Nullable String certificate) {
    this.certificate = certificate;
  }


  public CertAccessRules revokedCertIds(@javax.annotation.Nullable List<String> revokedCertIds) {
    this.revokedCertIds = revokedCertIds;
    return this;
  }

  public CertAccessRules addRevokedCertIdsItem(String revokedCertIdsItem) {
    if (this.revokedCertIds == null) {
      this.revokedCertIds = new ArrayList<>();
    }
    this.revokedCertIds.add(revokedCertIdsItem);
    return this;
  }

  /**
   * A list of revoked cert ids
   * @return revokedCertIds
   */
  @javax.annotation.Nullable
  public List<String> getRevokedCertIds() {
    return revokedCertIds;
  }

  public void setRevokedCertIds(@javax.annotation.Nullable List<String> revokedCertIds) {
    this.revokedCertIds = revokedCertIds;
  }


  public CertAccessRules uniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier to distinguish different users
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertAccessRules certAccessRules = (CertAccessRules) o;
    return Objects.equals(this.allowedCors, certAccessRules.allowedCors) &&
        Objects.equals(this.boundCommonNames, certAccessRules.boundCommonNames) &&
        Objects.equals(this.boundDnsSans, certAccessRules.boundDnsSans) &&
        Objects.equals(this.boundEmailSans, certAccessRules.boundEmailSans) &&
        Objects.equals(this.boundExtensions, certAccessRules.boundExtensions) &&
        Objects.equals(this.boundOrganizationalUnits, certAccessRules.boundOrganizationalUnits) &&
        Objects.equals(this.boundUriSans, certAccessRules.boundUriSans) &&
        Objects.equals(this.certificate, certAccessRules.certificate) &&
        Objects.equals(this.revokedCertIds, certAccessRules.revokedCertIds) &&
        Objects.equals(this.uniqueIdentifier, certAccessRules.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedCors, boundCommonNames, boundDnsSans, boundEmailSans, boundExtensions, boundOrganizationalUnits, boundUriSans, certificate, revokedCertIds, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertAccessRules {\n");
    sb.append("    allowedCors: ").append(toIndentedString(allowedCors)).append("\n");
    sb.append("    boundCommonNames: ").append(toIndentedString(boundCommonNames)).append("\n");
    sb.append("    boundDnsSans: ").append(toIndentedString(boundDnsSans)).append("\n");
    sb.append("    boundEmailSans: ").append(toIndentedString(boundEmailSans)).append("\n");
    sb.append("    boundExtensions: ").append(toIndentedString(boundExtensions)).append("\n");
    sb.append("    boundOrganizationalUnits: ").append(toIndentedString(boundOrganizationalUnits)).append("\n");
    sb.append("    boundUriSans: ").append(toIndentedString(boundUriSans)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    revokedCertIds: ").append(toIndentedString(revokedCertIds)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_cors");
    openapiFields.add("bound_common_names");
    openapiFields.add("bound_dns_sans");
    openapiFields.add("bound_email_sans");
    openapiFields.add("bound_extensions");
    openapiFields.add("bound_organizational_units");
    openapiFields.add("bound_uri_sans");
    openapiFields.add("certificate");
    openapiFields.add("revoked_cert_ids");
    openapiFields.add("unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertAccessRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertAccessRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertAccessRules is not found in the empty JSON string", CertAccessRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertAccessRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertAccessRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_cors") != null && !jsonObj.get("allowed_cors").isJsonNull() && !jsonObj.get("allowed_cors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_cors` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_cors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_common_names") != null && !jsonObj.get("bound_common_names").isJsonNull() && !jsonObj.get("bound_common_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_common_names` to be an array in the JSON string but got `%s`", jsonObj.get("bound_common_names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_dns_sans") != null && !jsonObj.get("bound_dns_sans").isJsonNull() && !jsonObj.get("bound_dns_sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_dns_sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound_dns_sans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_email_sans") != null && !jsonObj.get("bound_email_sans").isJsonNull() && !jsonObj.get("bound_email_sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_email_sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound_email_sans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_extensions") != null && !jsonObj.get("bound_extensions").isJsonNull() && !jsonObj.get("bound_extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("bound_extensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_organizational_units") != null && !jsonObj.get("bound_organizational_units").isJsonNull() && !jsonObj.get("bound_organizational_units").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_organizational_units` to be an array in the JSON string but got `%s`", jsonObj.get("bound_organizational_units").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_uri_sans") != null && !jsonObj.get("bound_uri_sans").isJsonNull() && !jsonObj.get("bound_uri_sans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_uri_sans` to be an array in the JSON string but got `%s`", jsonObj.get("bound_uri_sans").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revoked_cert_ids") != null && !jsonObj.get("revoked_cert_ids").isJsonNull() && !jsonObj.get("revoked_cert_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revoked_cert_ids` to be an array in the JSON string but got `%s`", jsonObj.get("revoked_cert_ids").toString()));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertAccessRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertAccessRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertAccessRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertAccessRules.class));

       return (TypeAdapter<T>) new TypeAdapter<CertAccessRules>() {
           @Override
           public void write(JsonWriter out, CertAccessRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertAccessRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertAccessRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertAccessRules
   * @throws IOException if the JSON string is invalid with respect to CertAccessRules
   */
  public static CertAccessRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertAccessRules.class);
  }

  /**
   * Convert an instance of CertAccessRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

