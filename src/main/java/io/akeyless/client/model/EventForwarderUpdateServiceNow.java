/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * eventForwarderUpdateServiceNow is a command that updates service now event forwarder
 */
@ApiModel(description = "eventForwarderUpdateServiceNow is a command that updates service now event forwarder")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventForwarderUpdateServiceNow {
  public static final String SERIALIZED_NAME_ADMIN_NAME = "admin-name";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  private String adminName;

  public static final String SERIALIZED_NAME_ADMIN_PWD = "admin-pwd";
  @SerializedName(SERIALIZED_NAME_ADMIN_PWD)
  private String adminPwd;

  public static final String SERIALIZED_NAME_APP_PRIVATE_KEY_BASE64 = "app-private-key-base64";
  @SerializedName(SERIALIZED_NAME_APP_PRIVATE_KEY_BASE64)
  private String appPrivateKeyBase64;

  public static final String SERIALIZED_NAME_AUTH_METHODS_EVENT_SOURCE_LOCATIONS = "auth-methods-event-source-locations";
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS_EVENT_SOURCE_LOCATIONS)
  private List<String> authMethodsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth-type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private String authType = "user-pass";

  public static final String SERIALIZED_NAME_CLIENT_ID = "client-id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client-secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private String enable = "true";

  public static final String SERIALIZED_NAME_EVENT_TYPES = "event-types";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPES)
  private List<String> eventTypes = null;

  public static final String SERIALIZED_NAME_GATEWAYS_EVENT_SOURCE_LOCATIONS = "gateways-event-source-locations";
  @SerializedName(SERIALIZED_NAME_GATEWAYS_EVENT_SOURCE_LOCATIONS)
  private List<String> gatewaysEventSourceLocations = new ArrayList<String>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_ITEMS_EVENT_SOURCE_LOCATIONS = "items-event-source-locations";
  @SerializedName(SERIALIZED_NAME_ITEMS_EVENT_SOURCE_LOCATIONS)
  private List<String> itemsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  private String newName;

  public static final String SERIALIZED_NAME_TARGETS_EVENT_SOURCE_LOCATIONS = "targets-event-source-locations";
  @SerializedName(SERIALIZED_NAME_TARGETS_EVENT_SOURCE_LOCATIONS)
  private List<String> targetsEventSourceLocations = null;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user-email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public EventForwarderUpdateServiceNow() { 
  }

  public EventForwarderUpdateServiceNow adminName(String adminName) {
    
    this.adminName = adminName;
    return this;
  }

   /**
   * Workstation Admin Name
   * @return adminName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Admin Name")

  public String getAdminName() {
    return adminName;
  }


  public void setAdminName(String adminName) {
    this.adminName = adminName;
  }


  public EventForwarderUpdateServiceNow adminPwd(String adminPwd) {
    
    this.adminPwd = adminPwd;
    return this;
  }

   /**
   * Workstation Admin Password
   * @return adminPwd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Admin Password")

  public String getAdminPwd() {
    return adminPwd;
  }


  public void setAdminPwd(String adminPwd) {
    this.adminPwd = adminPwd;
  }


  public EventForwarderUpdateServiceNow appPrivateKeyBase64(String appPrivateKeyBase64) {
    
    this.appPrivateKeyBase64 = appPrivateKeyBase64;
    return this;
  }

   /**
   * The RSA Private Key to use when connecting with jwt authentication
   * @return appPrivateKeyBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The RSA Private Key to use when connecting with jwt authentication")

  public String getAppPrivateKeyBase64() {
    return appPrivateKeyBase64;
  }


  public void setAppPrivateKeyBase64(String appPrivateKeyBase64) {
    this.appPrivateKeyBase64 = appPrivateKeyBase64;
  }


  public EventForwarderUpdateServiceNow authMethodsEventSourceLocations(List<String> authMethodsEventSourceLocations) {
    
    this.authMethodsEventSourceLocations = authMethodsEventSourceLocations;
    return this;
  }

  public EventForwarderUpdateServiceNow addAuthMethodsEventSourceLocationsItem(String authMethodsEventSourceLocationsItem) {
    if (this.authMethodsEventSourceLocations == null) {
      this.authMethodsEventSourceLocations = new ArrayList<String>();
    }
    this.authMethodsEventSourceLocations.add(authMethodsEventSourceLocationsItem);
    return this;
  }

   /**
   * Auth Method Event sources
   * @return authMethodsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Auth Method Event sources")

  public List<String> getAuthMethodsEventSourceLocations() {
    return authMethodsEventSourceLocations;
  }


  public void setAuthMethodsEventSourceLocations(List<String> authMethodsEventSourceLocations) {
    this.authMethodsEventSourceLocations = authMethodsEventSourceLocations;
  }


  public EventForwarderUpdateServiceNow authType(String authType) {
    
    this.authType = authType;
    return this;
  }

   /**
   * The authentication type to use [user-pass/jwt]
   * @return authType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authentication type to use [user-pass/jwt]")

  public String getAuthType() {
    return authType;
  }


  public void setAuthType(String authType) {
    this.authType = authType;
  }


  public EventForwarderUpdateServiceNow clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The client ID to use when connecting with jwt authentication
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client ID to use when connecting with jwt authentication")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public EventForwarderUpdateServiceNow clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The client secret to use when connecting with jwt authentication
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client secret to use when connecting with jwt authentication")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public EventForwarderUpdateServiceNow description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the object
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the object")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EventForwarderUpdateServiceNow enable(String enable) {
    
    this.enable = enable;
    return this;
  }

   /**
   * Enable/Disable Event Forwarder [true/false]
   * @return enable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable/Disable Event Forwarder [true/false]")

  public String getEnable() {
    return enable;
  }


  public void setEnable(String enable) {
    this.enable = enable;
  }


  public EventForwarderUpdateServiceNow eventTypes(List<String> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public EventForwarderUpdateServiceNow addEventTypesItem(String eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<String>();
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

   /**
   * List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]")

  public List<String> getEventTypes() {
    return eventTypes;
  }


  public void setEventTypes(List<String> eventTypes) {
    this.eventTypes = eventTypes;
  }


  public EventForwarderUpdateServiceNow gatewaysEventSourceLocations(List<String> gatewaysEventSourceLocations) {
    
    this.gatewaysEventSourceLocations = gatewaysEventSourceLocations;
    return this;
  }

  public EventForwarderUpdateServiceNow addGatewaysEventSourceLocationsItem(String gatewaysEventSourceLocationsItem) {
    this.gatewaysEventSourceLocations.add(gatewaysEventSourceLocationsItem);
    return this;
  }

   /**
   * Event sources
   * @return gatewaysEventSourceLocations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Event sources")

  public List<String> getGatewaysEventSourceLocations() {
    return gatewaysEventSourceLocations;
  }


  public void setGatewaysEventSourceLocations(List<String> gatewaysEventSourceLocations) {
    this.gatewaysEventSourceLocations = gatewaysEventSourceLocations;
  }


  public EventForwarderUpdateServiceNow host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * Workstation Host
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Workstation Host")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public EventForwarderUpdateServiceNow itemsEventSourceLocations(List<String> itemsEventSourceLocations) {
    
    this.itemsEventSourceLocations = itemsEventSourceLocations;
    return this;
  }

  public EventForwarderUpdateServiceNow addItemsEventSourceLocationsItem(String itemsEventSourceLocationsItem) {
    if (this.itemsEventSourceLocations == null) {
      this.itemsEventSourceLocations = new ArrayList<String>();
    }
    this.itemsEventSourceLocations.add(itemsEventSourceLocationsItem);
    return this;
  }

   /**
   * Items Event sources
   * @return itemsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Items Event sources")

  public List<String> getItemsEventSourceLocations() {
    return itemsEventSourceLocations;
  }


  public void setItemsEventSourceLocations(List<String> itemsEventSourceLocations) {
    this.itemsEventSourceLocations = itemsEventSourceLocations;
  }


  public EventForwarderUpdateServiceNow json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public EventForwarderUpdateServiceNow keepPrevVersion(String keepPrevVersion) {
    
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

   /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to keep previous version [true/false]. If not set, use default according to account settings")

  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }


  public void setKeepPrevVersion(String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public EventForwarderUpdateServiceNow key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public EventForwarderUpdateServiceNow name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * EventForwarder name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "EventForwarder name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EventForwarderUpdateServiceNow newName(String newName) {
    
    this.newName = newName;
    return this;
  }

   /**
   * New EventForwarder name
   * @return newName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New EventForwarder name")

  public String getNewName() {
    return newName;
  }


  public void setNewName(String newName) {
    this.newName = newName;
  }


  public EventForwarderUpdateServiceNow targetsEventSourceLocations(List<String> targetsEventSourceLocations) {
    
    this.targetsEventSourceLocations = targetsEventSourceLocations;
    return this;
  }

  public EventForwarderUpdateServiceNow addTargetsEventSourceLocationsItem(String targetsEventSourceLocationsItem) {
    if (this.targetsEventSourceLocations == null) {
      this.targetsEventSourceLocations = new ArrayList<String>();
    }
    this.targetsEventSourceLocations.add(targetsEventSourceLocationsItem);
    return this;
  }

   /**
   * Targets Event sources
   * @return targetsEventSourceLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Targets Event sources")

  public List<String> getTargetsEventSourceLocations() {
    return targetsEventSourceLocations;
  }


  public void setTargetsEventSourceLocations(List<String> targetsEventSourceLocations) {
    this.targetsEventSourceLocations = targetsEventSourceLocations;
  }


  public EventForwarderUpdateServiceNow token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public EventForwarderUpdateServiceNow uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public EventForwarderUpdateServiceNow userEmail(String userEmail) {
    
    this.userEmail = userEmail;
    return this;
  }

   /**
   * The user email to identify with when connecting with jwt authentication
   * @return userEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user email to identify with when connecting with jwt authentication")

  public String getUserEmail() {
    return userEmail;
  }


  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventForwarderUpdateServiceNow eventForwarderUpdateServiceNow = (EventForwarderUpdateServiceNow) o;
    return Objects.equals(this.adminName, eventForwarderUpdateServiceNow.adminName) &&
        Objects.equals(this.adminPwd, eventForwarderUpdateServiceNow.adminPwd) &&
        Objects.equals(this.appPrivateKeyBase64, eventForwarderUpdateServiceNow.appPrivateKeyBase64) &&
        Objects.equals(this.authMethodsEventSourceLocations, eventForwarderUpdateServiceNow.authMethodsEventSourceLocations) &&
        Objects.equals(this.authType, eventForwarderUpdateServiceNow.authType) &&
        Objects.equals(this.clientId, eventForwarderUpdateServiceNow.clientId) &&
        Objects.equals(this.clientSecret, eventForwarderUpdateServiceNow.clientSecret) &&
        Objects.equals(this.description, eventForwarderUpdateServiceNow.description) &&
        Objects.equals(this.enable, eventForwarderUpdateServiceNow.enable) &&
        Objects.equals(this.eventTypes, eventForwarderUpdateServiceNow.eventTypes) &&
        Objects.equals(this.gatewaysEventSourceLocations, eventForwarderUpdateServiceNow.gatewaysEventSourceLocations) &&
        Objects.equals(this.host, eventForwarderUpdateServiceNow.host) &&
        Objects.equals(this.itemsEventSourceLocations, eventForwarderUpdateServiceNow.itemsEventSourceLocations) &&
        Objects.equals(this.json, eventForwarderUpdateServiceNow.json) &&
        Objects.equals(this.keepPrevVersion, eventForwarderUpdateServiceNow.keepPrevVersion) &&
        Objects.equals(this.key, eventForwarderUpdateServiceNow.key) &&
        Objects.equals(this.name, eventForwarderUpdateServiceNow.name) &&
        Objects.equals(this.newName, eventForwarderUpdateServiceNow.newName) &&
        Objects.equals(this.targetsEventSourceLocations, eventForwarderUpdateServiceNow.targetsEventSourceLocations) &&
        Objects.equals(this.token, eventForwarderUpdateServiceNow.token) &&
        Objects.equals(this.uidToken, eventForwarderUpdateServiceNow.uidToken) &&
        Objects.equals(this.userEmail, eventForwarderUpdateServiceNow.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminName, adminPwd, appPrivateKeyBase64, authMethodsEventSourceLocations, authType, clientId, clientSecret, description, enable, eventTypes, gatewaysEventSourceLocations, host, itemsEventSourceLocations, json, keepPrevVersion, key, name, newName, targetsEventSourceLocations, token, uidToken, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventForwarderUpdateServiceNow {\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    adminPwd: ").append(toIndentedString(adminPwd)).append("\n");
    sb.append("    appPrivateKeyBase64: ").append(toIndentedString(appPrivateKeyBase64)).append("\n");
    sb.append("    authMethodsEventSourceLocations: ").append(toIndentedString(authMethodsEventSourceLocations)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    gatewaysEventSourceLocations: ").append(toIndentedString(gatewaysEventSourceLocations)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    itemsEventSourceLocations: ").append(toIndentedString(itemsEventSourceLocations)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    targetsEventSourceLocations: ").append(toIndentedString(targetsEventSourceLocations)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

