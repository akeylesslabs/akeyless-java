/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ListItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ListItems {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  @javax.annotation.Nullable
  private String accessibility = "regular";

  public static final String SERIALIZED_NAME_ADVANCED_FILTER = "advanced-filter";
  @SerializedName(SERIALIZED_NAME_ADVANCED_FILTER)
  @javax.annotation.Nullable
  private String advancedFilter;

  public static final String SERIALIZED_NAME_AUTO_PAGINATION = "auto-pagination";
  @SerializedName(SERIALIZED_NAME_AUTO_PAGINATION)
  @javax.annotation.Nullable
  private String autoPagination = "enabled";

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private String filter;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_MINIMAL_VIEW = "minimal-view";
  @SerializedName(SERIALIZED_NAME_MINIMAL_VIEW)
  @javax.annotation.Nullable
  private Boolean minimalView;

  public static final String SERIALIZED_NAME_MODIFIED_AFTER = "modified-after";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AFTER)
  @javax.annotation.Nullable
  private Long modifiedAfter;

  public static final String SERIALIZED_NAME_PAGINATION_TOKEN = "pagination-token";
  @SerializedName(SERIALIZED_NAME_PAGINATION_TOKEN)
  @javax.annotation.Nullable
  private String paginationToken;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_SRA_ONLY = "sra-only";
  @SerializedName(SERIALIZED_NAME_SRA_ONLY)
  @javax.annotation.Nullable
  private Boolean sraOnly = false;

  public static final String SERIALIZED_NAME_SUB_TYPES = "sub-types";
  @SerializedName(SERIALIZED_NAME_SUB_TYPES)
  @javax.annotation.Nullable
  private List<String> subTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private List<String> type = new ArrayList<>();

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public ListItems() {
  }

  public ListItems accessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * for personal password manager
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
  }


  public ListItems advancedFilter(@javax.annotation.Nullable String advancedFilter) {
    this.advancedFilter = advancedFilter;
    return this;
  }

  /**
   * Filter by item name/username/website or part of it
   * @return advancedFilter
   */
  @javax.annotation.Nullable
  public String getAdvancedFilter() {
    return advancedFilter;
  }

  public void setAdvancedFilter(@javax.annotation.Nullable String advancedFilter) {
    this.advancedFilter = advancedFilter;
  }


  public ListItems autoPagination(@javax.annotation.Nullable String autoPagination) {
    this.autoPagination = autoPagination;
    return this;
  }

  /**
   * Retrieve all items using pagination, when disabled retrieving only first 1000 items
   * @return autoPagination
   */
  @javax.annotation.Nullable
  public String getAutoPagination() {
    return autoPagination;
  }

  public void setAutoPagination(@javax.annotation.Nullable String autoPagination) {
    this.autoPagination = autoPagination;
  }


  public ListItems filter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Filter by item name or part of it
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
  }


  public ListItems json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public ListItems minimalView(@javax.annotation.Nullable Boolean minimalView) {
    this.minimalView = minimalView;
    return this;
  }

  /**
   * Show only basic information of the items
   * @return minimalView
   */
  @javax.annotation.Nullable
  public Boolean getMinimalView() {
    return minimalView;
  }

  public void setMinimalView(@javax.annotation.Nullable Boolean minimalView) {
    this.minimalView = minimalView;
  }


  public ListItems modifiedAfter(@javax.annotation.Nullable Long modifiedAfter) {
    this.modifiedAfter = modifiedAfter;
    return this;
  }

  /**
   * List only secrets modified after specified date (in unix time)
   * @return modifiedAfter
   */
  @javax.annotation.Nullable
  public Long getModifiedAfter() {
    return modifiedAfter;
  }

  public void setModifiedAfter(@javax.annotation.Nullable Long modifiedAfter) {
    this.modifiedAfter = modifiedAfter;
  }


  public ListItems paginationToken(@javax.annotation.Nullable String paginationToken) {
    this.paginationToken = paginationToken;
    return this;
  }

  /**
   * Next page reference
   * @return paginationToken
   */
  @javax.annotation.Nullable
  public String getPaginationToken() {
    return paginationToken;
  }

  public void setPaginationToken(@javax.annotation.Nullable String paginationToken) {
    this.paginationToken = paginationToken;
  }


  public ListItems path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Path to folder
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public ListItems sraOnly(@javax.annotation.Nullable Boolean sraOnly) {
    this.sraOnly = sraOnly;
    return this;
  }

  /**
   * Filter by items with SRA functionality enabled
   * @return sraOnly
   */
  @javax.annotation.Nullable
  public Boolean getSraOnly() {
    return sraOnly;
  }

  public void setSraOnly(@javax.annotation.Nullable Boolean sraOnly) {
    this.sraOnly = sraOnly;
  }


  public ListItems subTypes(@javax.annotation.Nullable List<String> subTypes) {
    this.subTypes = subTypes;
    return this;
  }

  public ListItems addSubTypesItem(String subTypesItem) {
    if (this.subTypes == null) {
      this.subTypes = new ArrayList<>();
    }
    this.subTypes.add(subTypesItem);
    return this;
  }

  /**
   * Get subTypes
   * @return subTypes
   */
  @javax.annotation.Nullable
  public List<String> getSubTypes() {
    return subTypes;
  }

  public void setSubTypes(@javax.annotation.Nullable List<String> subTypes) {
    this.subTypes = subTypes;
  }


  public ListItems tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Filter by item tag
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public ListItems token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public ListItems type(@javax.annotation.Nullable List<String> type) {
    this.type = type;
    return this;
  }

  public ListItems addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * The item types list of the requested items. In case it is empty, all types of items will be returned. options: [key, static-secret, dynamic-secret, classic-key]
   * @return type
   */
  @javax.annotation.Nullable
  public List<String> getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable List<String> type) {
    this.type = type;
  }


  public ListItems uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListItems listItems = (ListItems) o;
    return Objects.equals(this.accessibility, listItems.accessibility) &&
        Objects.equals(this.advancedFilter, listItems.advancedFilter) &&
        Objects.equals(this.autoPagination, listItems.autoPagination) &&
        Objects.equals(this.filter, listItems.filter) &&
        Objects.equals(this.json, listItems.json) &&
        Objects.equals(this.minimalView, listItems.minimalView) &&
        Objects.equals(this.modifiedAfter, listItems.modifiedAfter) &&
        Objects.equals(this.paginationToken, listItems.paginationToken) &&
        Objects.equals(this.path, listItems.path) &&
        Objects.equals(this.sraOnly, listItems.sraOnly) &&
        Objects.equals(this.subTypes, listItems.subTypes) &&
        Objects.equals(this.tag, listItems.tag) &&
        Objects.equals(this.token, listItems.token) &&
        Objects.equals(this.type, listItems.type) &&
        Objects.equals(this.uidToken, listItems.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, advancedFilter, autoPagination, filter, json, minimalView, modifiedAfter, paginationToken, path, sraOnly, subTypes, tag, token, type, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListItems {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    advancedFilter: ").append(toIndentedString(advancedFilter)).append("\n");
    sb.append("    autoPagination: ").append(toIndentedString(autoPagination)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    minimalView: ").append(toIndentedString(minimalView)).append("\n");
    sb.append("    modifiedAfter: ").append(toIndentedString(modifiedAfter)).append("\n");
    sb.append("    paginationToken: ").append(toIndentedString(paginationToken)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    sraOnly: ").append(toIndentedString(sraOnly)).append("\n");
    sb.append("    subTypes: ").append(toIndentedString(subTypes)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("advanced-filter");
    openapiFields.add("auto-pagination");
    openapiFields.add("filter");
    openapiFields.add("json");
    openapiFields.add("minimal-view");
    openapiFields.add("modified-after");
    openapiFields.add("pagination-token");
    openapiFields.add("path");
    openapiFields.add("sra-only");
    openapiFields.add("sub-types");
    openapiFields.add("tag");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListItems is not found in the empty JSON string", ListItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      if ((jsonObj.get("advanced-filter") != null && !jsonObj.get("advanced-filter").isJsonNull()) && !jsonObj.get("advanced-filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advanced-filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advanced-filter").toString()));
      }
      if ((jsonObj.get("auto-pagination") != null && !jsonObj.get("auto-pagination").isJsonNull()) && !jsonObj.get("auto-pagination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto-pagination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto-pagination").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("pagination-token") != null && !jsonObj.get("pagination-token").isJsonNull()) && !jsonObj.get("pagination-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pagination-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pagination-token").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sub-types") != null && !jsonObj.get("sub-types").isJsonNull() && !jsonObj.get("sub-types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub-types` to be an array in the JSON string but got `%s`", jsonObj.get("sub-types").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListItems.class));

       return (TypeAdapter<T>) new TypeAdapter<ListItems>() {
           @Override
           public void write(JsonWriter out, ListItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListItems
   * @throws IOException if the JSON string is invalid with respect to ListItems
   */
  public static ListItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListItems.class);
  }

  /**
   * Convert an instance of ListItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

