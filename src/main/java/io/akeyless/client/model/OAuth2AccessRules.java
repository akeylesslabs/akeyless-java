/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.OAuth2CustomClaim;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * OAuth2AccessRules contains access rules specific to OAuth2 authentication method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class OAuth2AccessRules {
  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  @javax.annotation.Nullable
  private String audience;

  public static final String SERIALIZED_NAME_AUTHORIZED_GW_CLUSTER_NAME = "authorized_gw_cluster_name";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_GW_CLUSTER_NAME)
  @javax.annotation.Nullable
  private String authorizedGwClusterName;

  public static final String SERIALIZED_NAME_BOUND_CLAIMS = "bound_claims";
  @SerializedName(SERIALIZED_NAME_BOUND_CLAIMS)
  @javax.annotation.Nullable
  private List<OAuth2CustomClaim> boundClaims = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_CLIENTS_ID = "bound_clients_id";
  @SerializedName(SERIALIZED_NAME_BOUND_CLIENTS_ID)
  @javax.annotation.Nullable
  private List<String> boundClientsId = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  @javax.annotation.Nullable
  private String certificate;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  @javax.annotation.Nullable
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_JSON_DATA = "jwks_json_data";
  @SerializedName(SERIALIZED_NAME_JWKS_JSON_DATA)
  @javax.annotation.Nullable
  private String jwksJsonData;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwks_uri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  @javax.annotation.Nullable
  private String jwksUri;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String uniqueIdentifier;

  public OAuth2AccessRules() {
  }

  public OAuth2AccessRules audience(@javax.annotation.Nullable String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * The audience in the JWT.
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(@javax.annotation.Nullable String audience) {
    this.audience = audience;
  }


  public OAuth2AccessRules authorizedGwClusterName(@javax.annotation.Nullable String authorizedGwClusterName) {
    this.authorizedGwClusterName = authorizedGwClusterName;
    return this;
  }

  /**
   * The gateway cluster name that is authorized to access JWKeySetURL
   * @return authorizedGwClusterName
   */
  @javax.annotation.Nullable
  public String getAuthorizedGwClusterName() {
    return authorizedGwClusterName;
  }

  public void setAuthorizedGwClusterName(@javax.annotation.Nullable String authorizedGwClusterName) {
    this.authorizedGwClusterName = authorizedGwClusterName;
  }


  public OAuth2AccessRules boundClaims(@javax.annotation.Nullable List<OAuth2CustomClaim> boundClaims) {
    this.boundClaims = boundClaims;
    return this;
  }

  public OAuth2AccessRules addBoundClaimsItem(OAuth2CustomClaim boundClaimsItem) {
    if (this.boundClaims == null) {
      this.boundClaims = new ArrayList<>();
    }
    this.boundClaims.add(boundClaimsItem);
    return this;
  }

  /**
   * The claims that login is restricted to.
   * @return boundClaims
   */
  @javax.annotation.Nullable
  public List<OAuth2CustomClaim> getBoundClaims() {
    return boundClaims;
  }

  public void setBoundClaims(@javax.annotation.Nullable List<OAuth2CustomClaim> boundClaims) {
    this.boundClaims = boundClaims;
  }


  public OAuth2AccessRules boundClientsId(@javax.annotation.Nullable List<String> boundClientsId) {
    this.boundClientsId = boundClientsId;
    return this;
  }

  public OAuth2AccessRules addBoundClientsIdItem(String boundClientsIdItem) {
    if (this.boundClientsId == null) {
      this.boundClientsId = new ArrayList<>();
    }
    this.boundClientsId.add(boundClientsIdItem);
    return this;
  }

  /**
   * The clients ids that login is restricted to.
   * @return boundClientsId
   */
  @javax.annotation.Nullable
  public List<String> getBoundClientsId() {
    return boundClientsId;
  }

  public void setBoundClientsId(@javax.annotation.Nullable List<String> boundClientsId) {
    this.boundClientsId = boundClientsId;
  }


  public OAuth2AccessRules certificate(@javax.annotation.Nullable String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Certificate to use when calling jwks_uri from the gateway. in PEM format
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(@javax.annotation.Nullable String certificate) {
    this.certificate = certificate;
  }


  public OAuth2AccessRules issuer(@javax.annotation.Nullable String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Issuer URL
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(@javax.annotation.Nullable String issuer) {
    this.issuer = issuer;
  }


  public OAuth2AccessRules jwksJsonData(@javax.annotation.Nullable String jwksJsonData) {
    this.jwksJsonData = jwksJsonData;
    return this;
  }

  /**
   * The JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. base64 encoded string
   * @return jwksJsonData
   */
  @javax.annotation.Nullable
  public String getJwksJsonData() {
    return jwksJsonData;
  }

  public void setJwksJsonData(@javax.annotation.Nullable String jwksJsonData) {
    this.jwksJsonData = jwksJsonData;
  }


  public OAuth2AccessRules jwksUri(@javax.annotation.Nullable String jwksUri) {
    this.jwksUri = jwksUri;
    return this;
  }

  /**
   * The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.
   * @return jwksUri
   */
  @javax.annotation.Nullable
  public String getJwksUri() {
    return jwksUri;
  }

  public void setJwksUri(@javax.annotation.Nullable String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public OAuth2AccessRules uniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier to distinguish different users
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2AccessRules oauth2AccessRules = (OAuth2AccessRules) o;
    return Objects.equals(this.audience, oauth2AccessRules.audience) &&
        Objects.equals(this.authorizedGwClusterName, oauth2AccessRules.authorizedGwClusterName) &&
        Objects.equals(this.boundClaims, oauth2AccessRules.boundClaims) &&
        Objects.equals(this.boundClientsId, oauth2AccessRules.boundClientsId) &&
        Objects.equals(this.certificate, oauth2AccessRules.certificate) &&
        Objects.equals(this.issuer, oauth2AccessRules.issuer) &&
        Objects.equals(this.jwksJsonData, oauth2AccessRules.jwksJsonData) &&
        Objects.equals(this.jwksUri, oauth2AccessRules.jwksUri) &&
        Objects.equals(this.uniqueIdentifier, oauth2AccessRules.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audience, authorizedGwClusterName, boundClaims, boundClientsId, certificate, issuer, jwksJsonData, jwksUri, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2AccessRules {\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    authorizedGwClusterName: ").append(toIndentedString(authorizedGwClusterName)).append("\n");
    sb.append("    boundClaims: ").append(toIndentedString(boundClaims)).append("\n");
    sb.append("    boundClientsId: ").append(toIndentedString(boundClientsId)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksJsonData: ").append(toIndentedString(jwksJsonData)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audience");
    openapiFields.add("authorized_gw_cluster_name");
    openapiFields.add("bound_claims");
    openapiFields.add("bound_clients_id");
    openapiFields.add("certificate");
    openapiFields.add("issuer");
    openapiFields.add("jwks_json_data");
    openapiFields.add("jwks_uri");
    openapiFields.add("unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2AccessRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2AccessRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2AccessRules is not found in the empty JSON string", OAuth2AccessRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2AccessRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2AccessRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("authorized_gw_cluster_name") != null && !jsonObj.get("authorized_gw_cluster_name").isJsonNull()) && !jsonObj.get("authorized_gw_cluster_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorized_gw_cluster_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorized_gw_cluster_name").toString()));
      }
      if (jsonObj.get("bound_claims") != null && !jsonObj.get("bound_claims").isJsonNull()) {
        JsonArray jsonArrayboundClaims = jsonObj.getAsJsonArray("bound_claims");
        if (jsonArrayboundClaims != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bound_claims").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bound_claims` to be an array in the JSON string but got `%s`", jsonObj.get("bound_claims").toString()));
          }

          // validate the optional field `bound_claims` (array)
          for (int i = 0; i < jsonArrayboundClaims.size(); i++) {
            OAuth2CustomClaim.validateJsonElement(jsonArrayboundClaims.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound_clients_id") != null && !jsonObj.get("bound_clients_id").isJsonNull() && !jsonObj.get("bound_clients_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound_clients_id` to be an array in the JSON string but got `%s`", jsonObj.get("bound_clients_id").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("jwks_json_data") != null && !jsonObj.get("jwks_json_data").isJsonNull()) && !jsonObj.get("jwks_json_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_json_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_json_data").toString()));
      }
      if ((jsonObj.get("jwks_uri") != null && !jsonObj.get("jwks_uri").isJsonNull()) && !jsonObj.get("jwks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_uri").toString()));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2AccessRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2AccessRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2AccessRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2AccessRules.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2AccessRules>() {
           @Override
           public void write(JsonWriter out, OAuth2AccessRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2AccessRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2AccessRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2AccessRules
   * @throws IOException if the JSON string is invalid with respect to OAuth2AccessRules
   */
  public static OAuth2AccessRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2AccessRules.class);
  }

  /**
   * Convert an instance of OAuth2AccessRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

