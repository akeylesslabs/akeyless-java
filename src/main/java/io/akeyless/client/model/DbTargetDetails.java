/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.WalletDetails;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * DbTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DbTargetDetails {
  public static final String SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER = "cloud_service_provider";
  @SerializedName(SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER)
  @javax.annotation.Nullable
  private String cloudServiceProvider;

  public static final String SERIALIZED_NAME_CLUSTER_MODE = "cluster_mode";
  @SerializedName(SERIALIZED_NAME_CLUSTER_MODE)
  @javax.annotation.Nullable
  private Boolean clusterMode;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connection_type";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  @javax.annotation.Nullable
  private String connectionType;

  public static final String SERIALIZED_NAME_DB_CLIENT_ID = "db_client_id";
  @SerializedName(SERIALIZED_NAME_DB_CLIENT_ID)
  @javax.annotation.Nullable
  private String dbClientId;

  public static final String SERIALIZED_NAME_DB_CLIENT_SECRET = "db_client_secret";
  @SerializedName(SERIALIZED_NAME_DB_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String dbClientSecret;

  public static final String SERIALIZED_NAME_DB_HOST_NAME = "db_host_name";
  @SerializedName(SERIALIZED_NAME_DB_HOST_NAME)
  @javax.annotation.Nullable
  private String dbHostName;

  public static final String SERIALIZED_NAME_DB_NAME = "db_name";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  @javax.annotation.Nullable
  private String dbName;

  public static final String SERIALIZED_NAME_DB_PORT = "db_port";
  @SerializedName(SERIALIZED_NAME_DB_PORT)
  @javax.annotation.Nullable
  private String dbPort;

  public static final String SERIALIZED_NAME_DB_PRIVATE_KEY = "db_private_key";
  @SerializedName(SERIALIZED_NAME_DB_PRIVATE_KEY)
  @javax.annotation.Nullable
  private String dbPrivateKey;

  public static final String SERIALIZED_NAME_DB_PRIVATE_KEY_PASSPHRASE = "db_private_key_passphrase";
  @SerializedName(SERIALIZED_NAME_DB_PRIVATE_KEY_PASSPHRASE)
  @javax.annotation.Nullable
  private String dbPrivateKeyPassphrase;

  public static final String SERIALIZED_NAME_DB_PWD = "db_pwd";
  @SerializedName(SERIALIZED_NAME_DB_PWD)
  @javax.annotation.Nullable
  private String dbPwd;

  public static final String SERIALIZED_NAME_DB_SERVER_CERTIFICATES = "db_server_certificates";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_CERTIFICATES)
  @javax.annotation.Nullable
  private String dbServerCertificates;

  public static final String SERIALIZED_NAME_DB_SERVER_NAME = "db_server_name";
  @SerializedName(SERIALIZED_NAME_DB_SERVER_NAME)
  @javax.annotation.Nullable
  private String dbServerName;

  public static final String SERIALIZED_NAME_DB_TENANT_ID = "db_tenant_id";
  @SerializedName(SERIALIZED_NAME_DB_TENANT_ID)
  @javax.annotation.Nullable
  private String dbTenantId;

  public static final String SERIALIZED_NAME_DB_USER_NAME = "db_user_name";
  @SerializedName(SERIALIZED_NAME_DB_USER_NAME)
  @javax.annotation.Nullable
  private String dbUserName;

  public static final String SERIALIZED_NAME_ORACLE_WALLET_DETAILS = "oracle_wallet_details";
  @SerializedName(SERIALIZED_NAME_ORACLE_WALLET_DETAILS)
  @javax.annotation.Nullable
  private WalletDetails oracleWalletDetails;

  public static final String SERIALIZED_NAME_SF_ACCOUNT = "sf_account";
  @SerializedName(SERIALIZED_NAME_SF_ACCOUNT)
  @javax.annotation.Nullable
  private String sfAccount;

  public static final String SERIALIZED_NAME_SSL_CONNECTION_CERTIFICATE = "ssl_connection_certificate";
  @SerializedName(SERIALIZED_NAME_SSL_CONNECTION_CERTIFICATE)
  @javax.annotation.Nullable
  private String sslConnectionCertificate;

  public static final String SERIALIZED_NAME_SSL_CONNECTION_MODE = "ssl_connection_mode";
  @SerializedName(SERIALIZED_NAME_SSL_CONNECTION_MODE)
  @javax.annotation.Nullable
  private Boolean sslConnectionMode;

  public DbTargetDetails() {
  }

  public DbTargetDetails cloudServiceProvider(@javax.annotation.Nullable String cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
    return this;
  }

  /**
   * Get cloudServiceProvider
   * @return cloudServiceProvider
   */
  @javax.annotation.Nullable
  public String getCloudServiceProvider() {
    return cloudServiceProvider;
  }

  public void setCloudServiceProvider(@javax.annotation.Nullable String cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
  }


  public DbTargetDetails clusterMode(@javax.annotation.Nullable Boolean clusterMode) {
    this.clusterMode = clusterMode;
    return this;
  }

  /**
   * Get clusterMode
   * @return clusterMode
   */
  @javax.annotation.Nullable
  public Boolean getClusterMode() {
    return clusterMode;
  }

  public void setClusterMode(@javax.annotation.Nullable Boolean clusterMode) {
    this.clusterMode = clusterMode;
  }


  public DbTargetDetails connectionType(@javax.annotation.Nullable String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(@javax.annotation.Nullable String connectionType) {
    this.connectionType = connectionType;
  }


  public DbTargetDetails dbClientId(@javax.annotation.Nullable String dbClientId) {
    this.dbClientId = dbClientId;
    return this;
  }

  /**
   * Get dbClientId
   * @return dbClientId
   */
  @javax.annotation.Nullable
  public String getDbClientId() {
    return dbClientId;
  }

  public void setDbClientId(@javax.annotation.Nullable String dbClientId) {
    this.dbClientId = dbClientId;
  }


  public DbTargetDetails dbClientSecret(@javax.annotation.Nullable String dbClientSecret) {
    this.dbClientSecret = dbClientSecret;
    return this;
  }

  /**
   * Get dbClientSecret
   * @return dbClientSecret
   */
  @javax.annotation.Nullable
  public String getDbClientSecret() {
    return dbClientSecret;
  }

  public void setDbClientSecret(@javax.annotation.Nullable String dbClientSecret) {
    this.dbClientSecret = dbClientSecret;
  }


  public DbTargetDetails dbHostName(@javax.annotation.Nullable String dbHostName) {
    this.dbHostName = dbHostName;
    return this;
  }

  /**
   * Get dbHostName
   * @return dbHostName
   */
  @javax.annotation.Nullable
  public String getDbHostName() {
    return dbHostName;
  }

  public void setDbHostName(@javax.annotation.Nullable String dbHostName) {
    this.dbHostName = dbHostName;
  }


  public DbTargetDetails dbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
    return this;
  }

  /**
   * Get dbName
   * @return dbName
   */
  @javax.annotation.Nullable
  public String getDbName() {
    return dbName;
  }

  public void setDbName(@javax.annotation.Nullable String dbName) {
    this.dbName = dbName;
  }


  public DbTargetDetails dbPort(@javax.annotation.Nullable String dbPort) {
    this.dbPort = dbPort;
    return this;
  }

  /**
   * Get dbPort
   * @return dbPort
   */
  @javax.annotation.Nullable
  public String getDbPort() {
    return dbPort;
  }

  public void setDbPort(@javax.annotation.Nullable String dbPort) {
    this.dbPort = dbPort;
  }


  public DbTargetDetails dbPrivateKey(@javax.annotation.Nullable String dbPrivateKey) {
    this.dbPrivateKey = dbPrivateKey;
    return this;
  }

  /**
   * (Optional) Private Key in PEM format
   * @return dbPrivateKey
   */
  @javax.annotation.Nullable
  public String getDbPrivateKey() {
    return dbPrivateKey;
  }

  public void setDbPrivateKey(@javax.annotation.Nullable String dbPrivateKey) {
    this.dbPrivateKey = dbPrivateKey;
  }


  public DbTargetDetails dbPrivateKeyPassphrase(@javax.annotation.Nullable String dbPrivateKeyPassphrase) {
    this.dbPrivateKeyPassphrase = dbPrivateKeyPassphrase;
    return this;
  }

  /**
   * Get dbPrivateKeyPassphrase
   * @return dbPrivateKeyPassphrase
   */
  @javax.annotation.Nullable
  public String getDbPrivateKeyPassphrase() {
    return dbPrivateKeyPassphrase;
  }

  public void setDbPrivateKeyPassphrase(@javax.annotation.Nullable String dbPrivateKeyPassphrase) {
    this.dbPrivateKeyPassphrase = dbPrivateKeyPassphrase;
  }


  public DbTargetDetails dbPwd(@javax.annotation.Nullable String dbPwd) {
    this.dbPwd = dbPwd;
    return this;
  }

  /**
   * Get dbPwd
   * @return dbPwd
   */
  @javax.annotation.Nullable
  public String getDbPwd() {
    return dbPwd;
  }

  public void setDbPwd(@javax.annotation.Nullable String dbPwd) {
    this.dbPwd = dbPwd;
  }


  public DbTargetDetails dbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
    return this;
  }

  /**
   * (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host&#39;s root CA set.
   * @return dbServerCertificates
   */
  @javax.annotation.Nullable
  public String getDbServerCertificates() {
    return dbServerCertificates;
  }

  public void setDbServerCertificates(@javax.annotation.Nullable String dbServerCertificates) {
    this.dbServerCertificates = dbServerCertificates;
  }


  public DbTargetDetails dbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
    return this;
  }

  /**
   * (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client&#39;s handshake to support virtual hosting unless it is an IP address.
   * @return dbServerName
   */
  @javax.annotation.Nullable
  public String getDbServerName() {
    return dbServerName;
  }

  public void setDbServerName(@javax.annotation.Nullable String dbServerName) {
    this.dbServerName = dbServerName;
  }


  public DbTargetDetails dbTenantId(@javax.annotation.Nullable String dbTenantId) {
    this.dbTenantId = dbTenantId;
    return this;
  }

  /**
   * Get dbTenantId
   * @return dbTenantId
   */
  @javax.annotation.Nullable
  public String getDbTenantId() {
    return dbTenantId;
  }

  public void setDbTenantId(@javax.annotation.Nullable String dbTenantId) {
    this.dbTenantId = dbTenantId;
  }


  public DbTargetDetails dbUserName(@javax.annotation.Nullable String dbUserName) {
    this.dbUserName = dbUserName;
    return this;
  }

  /**
   * Get dbUserName
   * @return dbUserName
   */
  @javax.annotation.Nullable
  public String getDbUserName() {
    return dbUserName;
  }

  public void setDbUserName(@javax.annotation.Nullable String dbUserName) {
    this.dbUserName = dbUserName;
  }


  public DbTargetDetails oracleWalletDetails(@javax.annotation.Nullable WalletDetails oracleWalletDetails) {
    this.oracleWalletDetails = oracleWalletDetails;
    return this;
  }

  /**
   * Get oracleWalletDetails
   * @return oracleWalletDetails
   */
  @javax.annotation.Nullable
  public WalletDetails getOracleWalletDetails() {
    return oracleWalletDetails;
  }

  public void setOracleWalletDetails(@javax.annotation.Nullable WalletDetails oracleWalletDetails) {
    this.oracleWalletDetails = oracleWalletDetails;
  }


  public DbTargetDetails sfAccount(@javax.annotation.Nullable String sfAccount) {
    this.sfAccount = sfAccount;
    return this;
  }

  /**
   * Get sfAccount
   * @return sfAccount
   */
  @javax.annotation.Nullable
  public String getSfAccount() {
    return sfAccount;
  }

  public void setSfAccount(@javax.annotation.Nullable String sfAccount) {
    this.sfAccount = sfAccount;
  }


  public DbTargetDetails sslConnectionCertificate(@javax.annotation.Nullable String sslConnectionCertificate) {
    this.sslConnectionCertificate = sslConnectionCertificate;
    return this;
  }

  /**
   * (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field
   * @return sslConnectionCertificate
   */
  @javax.annotation.Nullable
  public String getSslConnectionCertificate() {
    return sslConnectionCertificate;
  }

  public void setSslConnectionCertificate(@javax.annotation.Nullable String sslConnectionCertificate) {
    this.sslConnectionCertificate = sslConnectionCertificate;
  }


  public DbTargetDetails sslConnectionMode(@javax.annotation.Nullable Boolean sslConnectionMode) {
    this.sslConnectionMode = sslConnectionMode;
    return this;
  }

  /**
   * (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB
   * @return sslConnectionMode
   */
  @javax.annotation.Nullable
  public Boolean getSslConnectionMode() {
    return sslConnectionMode;
  }

  public void setSslConnectionMode(@javax.annotation.Nullable Boolean sslConnectionMode) {
    this.sslConnectionMode = sslConnectionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbTargetDetails dbTargetDetails = (DbTargetDetails) o;
    return Objects.equals(this.cloudServiceProvider, dbTargetDetails.cloudServiceProvider) &&
        Objects.equals(this.clusterMode, dbTargetDetails.clusterMode) &&
        Objects.equals(this.connectionType, dbTargetDetails.connectionType) &&
        Objects.equals(this.dbClientId, dbTargetDetails.dbClientId) &&
        Objects.equals(this.dbClientSecret, dbTargetDetails.dbClientSecret) &&
        Objects.equals(this.dbHostName, dbTargetDetails.dbHostName) &&
        Objects.equals(this.dbName, dbTargetDetails.dbName) &&
        Objects.equals(this.dbPort, dbTargetDetails.dbPort) &&
        Objects.equals(this.dbPrivateKey, dbTargetDetails.dbPrivateKey) &&
        Objects.equals(this.dbPrivateKeyPassphrase, dbTargetDetails.dbPrivateKeyPassphrase) &&
        Objects.equals(this.dbPwd, dbTargetDetails.dbPwd) &&
        Objects.equals(this.dbServerCertificates, dbTargetDetails.dbServerCertificates) &&
        Objects.equals(this.dbServerName, dbTargetDetails.dbServerName) &&
        Objects.equals(this.dbTenantId, dbTargetDetails.dbTenantId) &&
        Objects.equals(this.dbUserName, dbTargetDetails.dbUserName) &&
        Objects.equals(this.oracleWalletDetails, dbTargetDetails.oracleWalletDetails) &&
        Objects.equals(this.sfAccount, dbTargetDetails.sfAccount) &&
        Objects.equals(this.sslConnectionCertificate, dbTargetDetails.sslConnectionCertificate) &&
        Objects.equals(this.sslConnectionMode, dbTargetDetails.sslConnectionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudServiceProvider, clusterMode, connectionType, dbClientId, dbClientSecret, dbHostName, dbName, dbPort, dbPrivateKey, dbPrivateKeyPassphrase, dbPwd, dbServerCertificates, dbServerName, dbTenantId, dbUserName, oracleWalletDetails, sfAccount, sslConnectionCertificate, sslConnectionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbTargetDetails {\n");
    sb.append("    cloudServiceProvider: ").append(toIndentedString(cloudServiceProvider)).append("\n");
    sb.append("    clusterMode: ").append(toIndentedString(clusterMode)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    dbClientId: ").append(toIndentedString(dbClientId)).append("\n");
    sb.append("    dbClientSecret: ").append(toIndentedString(dbClientSecret)).append("\n");
    sb.append("    dbHostName: ").append(toIndentedString(dbHostName)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    dbPort: ").append(toIndentedString(dbPort)).append("\n");
    sb.append("    dbPrivateKey: ").append(toIndentedString(dbPrivateKey)).append("\n");
    sb.append("    dbPrivateKeyPassphrase: ").append(toIndentedString(dbPrivateKeyPassphrase)).append("\n");
    sb.append("    dbPwd: ").append(toIndentedString(dbPwd)).append("\n");
    sb.append("    dbServerCertificates: ").append(toIndentedString(dbServerCertificates)).append("\n");
    sb.append("    dbServerName: ").append(toIndentedString(dbServerName)).append("\n");
    sb.append("    dbTenantId: ").append(toIndentedString(dbTenantId)).append("\n");
    sb.append("    dbUserName: ").append(toIndentedString(dbUserName)).append("\n");
    sb.append("    oracleWalletDetails: ").append(toIndentedString(oracleWalletDetails)).append("\n");
    sb.append("    sfAccount: ").append(toIndentedString(sfAccount)).append("\n");
    sb.append("    sslConnectionCertificate: ").append(toIndentedString(sslConnectionCertificate)).append("\n");
    sb.append("    sslConnectionMode: ").append(toIndentedString(sslConnectionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloud_service_provider");
    openapiFields.add("cluster_mode");
    openapiFields.add("connection_type");
    openapiFields.add("db_client_id");
    openapiFields.add("db_client_secret");
    openapiFields.add("db_host_name");
    openapiFields.add("db_name");
    openapiFields.add("db_port");
    openapiFields.add("db_private_key");
    openapiFields.add("db_private_key_passphrase");
    openapiFields.add("db_pwd");
    openapiFields.add("db_server_certificates");
    openapiFields.add("db_server_name");
    openapiFields.add("db_tenant_id");
    openapiFields.add("db_user_name");
    openapiFields.add("oracle_wallet_details");
    openapiFields.add("sf_account");
    openapiFields.add("ssl_connection_certificate");
    openapiFields.add("ssl_connection_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DbTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DbTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DbTargetDetails is not found in the empty JSON string", DbTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DbTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DbTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloud_service_provider") != null && !jsonObj.get("cloud_service_provider").isJsonNull()) && !jsonObj.get("cloud_service_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_service_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_service_provider").toString()));
      }
      if ((jsonObj.get("connection_type") != null && !jsonObj.get("connection_type").isJsonNull()) && !jsonObj.get("connection_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_type").toString()));
      }
      if ((jsonObj.get("db_client_id") != null && !jsonObj.get("db_client_id").isJsonNull()) && !jsonObj.get("db_client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_client_id").toString()));
      }
      if ((jsonObj.get("db_client_secret") != null && !jsonObj.get("db_client_secret").isJsonNull()) && !jsonObj.get("db_client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_client_secret").toString()));
      }
      if ((jsonObj.get("db_host_name") != null && !jsonObj.get("db_host_name").isJsonNull()) && !jsonObj.get("db_host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_host_name").toString()));
      }
      if ((jsonObj.get("db_name") != null && !jsonObj.get("db_name").isJsonNull()) && !jsonObj.get("db_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_name").toString()));
      }
      if ((jsonObj.get("db_port") != null && !jsonObj.get("db_port").isJsonNull()) && !jsonObj.get("db_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_port").toString()));
      }
      if ((jsonObj.get("db_private_key") != null && !jsonObj.get("db_private_key").isJsonNull()) && !jsonObj.get("db_private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_private_key").toString()));
      }
      if ((jsonObj.get("db_private_key_passphrase") != null && !jsonObj.get("db_private_key_passphrase").isJsonNull()) && !jsonObj.get("db_private_key_passphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_private_key_passphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_private_key_passphrase").toString()));
      }
      if ((jsonObj.get("db_pwd") != null && !jsonObj.get("db_pwd").isJsonNull()) && !jsonObj.get("db_pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_pwd").toString()));
      }
      if ((jsonObj.get("db_server_certificates") != null && !jsonObj.get("db_server_certificates").isJsonNull()) && !jsonObj.get("db_server_certificates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_server_certificates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_server_certificates").toString()));
      }
      if ((jsonObj.get("db_server_name") != null && !jsonObj.get("db_server_name").isJsonNull()) && !jsonObj.get("db_server_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_server_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_server_name").toString()));
      }
      if ((jsonObj.get("db_tenant_id") != null && !jsonObj.get("db_tenant_id").isJsonNull()) && !jsonObj.get("db_tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_tenant_id").toString()));
      }
      if ((jsonObj.get("db_user_name") != null && !jsonObj.get("db_user_name").isJsonNull()) && !jsonObj.get("db_user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_user_name").toString()));
      }
      // validate the optional field `oracle_wallet_details`
      if (jsonObj.get("oracle_wallet_details") != null && !jsonObj.get("oracle_wallet_details").isJsonNull()) {
        WalletDetails.validateJsonElement(jsonObj.get("oracle_wallet_details"));
      }
      if ((jsonObj.get("sf_account") != null && !jsonObj.get("sf_account").isJsonNull()) && !jsonObj.get("sf_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sf_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sf_account").toString()));
      }
      if ((jsonObj.get("ssl_connection_certificate") != null && !jsonObj.get("ssl_connection_certificate").isJsonNull()) && !jsonObj.get("ssl_connection_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl_connection_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl_connection_certificate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DbTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DbTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DbTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DbTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DbTargetDetails>() {
           @Override
           public void write(JsonWriter out, DbTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DbTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DbTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DbTargetDetails
   * @throws IOException if the JSON string is invalid with respect to DbTargetDetails
   */
  public static DbTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DbTargetDetails.class);
  }

  /**
   * Convert an instance of DbTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

