/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * OpenAITargetDetails defines details related to connecting to an OpenAI provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class OpenAITargetDetails {
  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_API_KEY_ID = "api_key_id";
  @SerializedName(SERIALIZED_NAME_API_KEY_ID)
  @javax.annotation.Nullable
  private String apiKeyId;

  public static final String SERIALIZED_NAME_OPENAI_URL = "openai_url";
  @SerializedName(SERIALIZED_NAME_OPENAI_URL)
  @javax.annotation.Nullable
  private String openaiUrl;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  @javax.annotation.Nullable
  private String organizationId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private String projectId;

  public OpenAITargetDetails() {
  }

  public OpenAITargetDetails apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public OpenAITargetDetails apiKeyId(@javax.annotation.Nullable String apiKeyId) {
    this.apiKeyId = apiKeyId;
    return this;
  }

  /**
   * Get apiKeyId
   * @return apiKeyId
   */
  @javax.annotation.Nullable
  public String getApiKeyId() {
    return apiKeyId;
  }

  public void setApiKeyId(@javax.annotation.Nullable String apiKeyId) {
    this.apiKeyId = apiKeyId;
  }


  public OpenAITargetDetails openaiUrl(@javax.annotation.Nullable String openaiUrl) {
    this.openaiUrl = openaiUrl;
    return this;
  }

  /**
   * Get openaiUrl
   * @return openaiUrl
   */
  @javax.annotation.Nullable
  public String getOpenaiUrl() {
    return openaiUrl;
  }

  public void setOpenaiUrl(@javax.annotation.Nullable String openaiUrl) {
    this.openaiUrl = openaiUrl;
  }


  public OpenAITargetDetails organizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
  }


  public OpenAITargetDetails projectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenAITargetDetails openAITargetDetails = (OpenAITargetDetails) o;
    return Objects.equals(this.apiKey, openAITargetDetails.apiKey) &&
        Objects.equals(this.apiKeyId, openAITargetDetails.apiKeyId) &&
        Objects.equals(this.openaiUrl, openAITargetDetails.openaiUrl) &&
        Objects.equals(this.organizationId, openAITargetDetails.organizationId) &&
        Objects.equals(this.projectId, openAITargetDetails.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, apiKeyId, openaiUrl, organizationId, projectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenAITargetDetails {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiKeyId: ").append(toIndentedString(apiKeyId)).append("\n");
    sb.append("    openaiUrl: ").append(toIndentedString(openaiUrl)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_key");
    openapiFields.add("api_key_id");
    openapiFields.add("openai_url");
    openapiFields.add("organization_id");
    openapiFields.add("project_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenAITargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenAITargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenAITargetDetails is not found in the empty JSON string", OpenAITargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenAITargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenAITargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if ((jsonObj.get("api_key_id") != null && !jsonObj.get("api_key_id").isJsonNull()) && !jsonObj.get("api_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key_id").toString()));
      }
      if ((jsonObj.get("openai_url") != null && !jsonObj.get("openai_url").isJsonNull()) && !jsonObj.get("openai_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openai_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openai_url").toString()));
      }
      if ((jsonObj.get("organization_id") != null && !jsonObj.get("organization_id").isJsonNull()) && !jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
      if ((jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull()) && !jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenAITargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenAITargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenAITargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenAITargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenAITargetDetails>() {
           @Override
           public void write(JsonWriter out, OpenAITargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenAITargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenAITargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenAITargetDetails
   * @throws IOException if the JSON string is invalid with respect to OpenAITargetDetails
   */
  public static OpenAITargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenAITargetDetails.class);
  }

  /**
   * Convert an instance of OpenAITargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

