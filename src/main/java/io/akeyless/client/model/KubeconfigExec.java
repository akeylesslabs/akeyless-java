/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * KubeconfigExec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class KubeconfigExec {
  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  @javax.annotation.Nullable
  private String apiVersion;

  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  @javax.annotation.Nullable
  private List<String> args = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  @javax.annotation.Nullable
  private String command;

  public static final String SERIALIZED_NAME_INTERACTIVE_MODE = "interactiveMode";
  @SerializedName(SERIALIZED_NAME_INTERACTIVE_MODE)
  @javax.annotation.Nullable
  private String interactiveMode;

  public KubeconfigExec() {
  }

  public KubeconfigExec apiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Get apiVersion
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(@javax.annotation.Nullable String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public KubeconfigExec args(@javax.annotation.Nullable List<String> args) {
    this.args = args;
    return this;
  }

  public KubeconfigExec addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @javax.annotation.Nullable
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(@javax.annotation.Nullable List<String> args) {
    this.args = args;
  }


  public KubeconfigExec command(@javax.annotation.Nullable String command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @javax.annotation.Nullable
  public String getCommand() {
    return command;
  }

  public void setCommand(@javax.annotation.Nullable String command) {
    this.command = command;
  }


  public KubeconfigExec interactiveMode(@javax.annotation.Nullable String interactiveMode) {
    this.interactiveMode = interactiveMode;
    return this;
  }

  /**
   * Get interactiveMode
   * @return interactiveMode
   */
  @javax.annotation.Nullable
  public String getInteractiveMode() {
    return interactiveMode;
  }

  public void setInteractiveMode(@javax.annotation.Nullable String interactiveMode) {
    this.interactiveMode = interactiveMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KubeconfigExec kubeconfigExec = (KubeconfigExec) o;
    return Objects.equals(this.apiVersion, kubeconfigExec.apiVersion) &&
        Objects.equals(this.args, kubeconfigExec.args) &&
        Objects.equals(this.command, kubeconfigExec.command) &&
        Objects.equals(this.interactiveMode, kubeconfigExec.interactiveMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, args, command, interactiveMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KubeconfigExec {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    interactiveMode: ").append(toIndentedString(interactiveMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersion");
    openapiFields.add("args");
    openapiFields.add("command");
    openapiFields.add("interactiveMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KubeconfigExec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KubeconfigExec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KubeconfigExec is not found in the empty JSON string", KubeconfigExec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KubeconfigExec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KubeconfigExec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull() && !jsonObj.get("args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be an array in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      if ((jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) && !jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if ((jsonObj.get("interactiveMode") != null && !jsonObj.get("interactiveMode").isJsonNull()) && !jsonObj.get("interactiveMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactiveMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactiveMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KubeconfigExec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KubeconfigExec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KubeconfigExec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KubeconfigExec.class));

       return (TypeAdapter<T>) new TypeAdapter<KubeconfigExec>() {
           @Override
           public void write(JsonWriter out, KubeconfigExec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KubeconfigExec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KubeconfigExec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KubeconfigExec
   * @throws IOException if the JSON string is invalid with respect to KubeconfigExec
   */
  public static KubeconfigExec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KubeconfigExec.class);
  }

  /**
   * Convert an instance of KubeconfigExec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

