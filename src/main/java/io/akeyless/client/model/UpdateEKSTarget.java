/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * updateEKSTarget is a command that updates an existing target. [Deprecated: Use target-update-eks command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateEKSTarget {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EKS_ACCESS_KEY_ID = "eks-access-key-id";
  @SerializedName(SERIALIZED_NAME_EKS_ACCESS_KEY_ID)
  @javax.annotation.Nonnull
  private String eksAccessKeyId;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_CA_CERT = "eks-cluster-ca-cert";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_CA_CERT)
  @javax.annotation.Nonnull
  private String eksClusterCaCert;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_ENDPOINT = "eks-cluster-endpoint";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_ENDPOINT)
  @javax.annotation.Nonnull
  private String eksClusterEndpoint;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_NAME = "eks-cluster-name";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_NAME)
  @javax.annotation.Nonnull
  private String eksClusterName;

  public static final String SERIALIZED_NAME_EKS_REGION = "eks-region";
  @SerializedName(SERIALIZED_NAME_EKS_REGION)
  @javax.annotation.Nullable
  private String eksRegion = "us-east-2";

  public static final String SERIALIZED_NAME_EKS_SECRET_ACCESS_KEY = "eks-secret-access-key";
  @SerializedName(SERIALIZED_NAME_EKS_SECRET_ACCESS_KEY)
  @javax.annotation.Nonnull
  private String eksSecretAccessKey;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_UPDATE_VERSION = "update-version";
  @SerializedName(SERIALIZED_NAME_UPDATE_VERSION)
  @javax.annotation.Nullable
  private Boolean updateVersion;

  public static final String SERIALIZED_NAME_USE_GW_CLOUD_IDENTITY = "use-gw-cloud-identity";
  @SerializedName(SERIALIZED_NAME_USE_GW_CLOUD_IDENTITY)
  @javax.annotation.Nullable
  private Boolean useGwCloudIdentity;

  public UpdateEKSTarget() {
  }

  public UpdateEKSTarget comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public UpdateEKSTarget description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateEKSTarget eksAccessKeyId(@javax.annotation.Nonnull String eksAccessKeyId) {
    this.eksAccessKeyId = eksAccessKeyId;
    return this;
  }

  /**
   * Access Key ID
   * @return eksAccessKeyId
   */
  @javax.annotation.Nonnull
  public String getEksAccessKeyId() {
    return eksAccessKeyId;
  }

  public void setEksAccessKeyId(@javax.annotation.Nonnull String eksAccessKeyId) {
    this.eksAccessKeyId = eksAccessKeyId;
  }


  public UpdateEKSTarget eksClusterCaCert(@javax.annotation.Nonnull String eksClusterCaCert) {
    this.eksClusterCaCert = eksClusterCaCert;
    return this;
  }

  /**
   * EKS cluster CA certificate
   * @return eksClusterCaCert
   */
  @javax.annotation.Nonnull
  public String getEksClusterCaCert() {
    return eksClusterCaCert;
  }

  public void setEksClusterCaCert(@javax.annotation.Nonnull String eksClusterCaCert) {
    this.eksClusterCaCert = eksClusterCaCert;
  }


  public UpdateEKSTarget eksClusterEndpoint(@javax.annotation.Nonnull String eksClusterEndpoint) {
    this.eksClusterEndpoint = eksClusterEndpoint;
    return this;
  }

  /**
   * EKS cluster URL endpoint
   * @return eksClusterEndpoint
   */
  @javax.annotation.Nonnull
  public String getEksClusterEndpoint() {
    return eksClusterEndpoint;
  }

  public void setEksClusterEndpoint(@javax.annotation.Nonnull String eksClusterEndpoint) {
    this.eksClusterEndpoint = eksClusterEndpoint;
  }


  public UpdateEKSTarget eksClusterName(@javax.annotation.Nonnull String eksClusterName) {
    this.eksClusterName = eksClusterName;
    return this;
  }

  /**
   * EKS cluster name
   * @return eksClusterName
   */
  @javax.annotation.Nonnull
  public String getEksClusterName() {
    return eksClusterName;
  }

  public void setEksClusterName(@javax.annotation.Nonnull String eksClusterName) {
    this.eksClusterName = eksClusterName;
  }


  public UpdateEKSTarget eksRegion(@javax.annotation.Nullable String eksRegion) {
    this.eksRegion = eksRegion;
    return this;
  }

  /**
   * Region
   * @return eksRegion
   */
  @javax.annotation.Nullable
  public String getEksRegion() {
    return eksRegion;
  }

  public void setEksRegion(@javax.annotation.Nullable String eksRegion) {
    this.eksRegion = eksRegion;
  }


  public UpdateEKSTarget eksSecretAccessKey(@javax.annotation.Nonnull String eksSecretAccessKey) {
    this.eksSecretAccessKey = eksSecretAccessKey;
    return this;
  }

  /**
   * Secret Access Key
   * @return eksSecretAccessKey
   */
  @javax.annotation.Nonnull
  public String getEksSecretAccessKey() {
    return eksSecretAccessKey;
  }

  public void setEksSecretAccessKey(@javax.annotation.Nonnull String eksSecretAccessKey) {
    this.eksSecretAccessKey = eksSecretAccessKey;
  }


  public UpdateEKSTarget json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateEKSTarget keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateEKSTarget key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public UpdateEKSTarget maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public UpdateEKSTarget name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateEKSTarget newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New target name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public UpdateEKSTarget token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateEKSTarget uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public UpdateEKSTarget updateVersion(@javax.annotation.Nullable Boolean updateVersion) {
    this.updateVersion = updateVersion;
    return this;
  }

  /**
   * Deprecated
   * @return updateVersion
   */
  @javax.annotation.Nullable
  public Boolean getUpdateVersion() {
    return updateVersion;
  }

  public void setUpdateVersion(@javax.annotation.Nullable Boolean updateVersion) {
    this.updateVersion = updateVersion;
  }


  public UpdateEKSTarget useGwCloudIdentity(@javax.annotation.Nullable Boolean useGwCloudIdentity) {
    this.useGwCloudIdentity = useGwCloudIdentity;
    return this;
  }

  /**
   * Get useGwCloudIdentity
   * @return useGwCloudIdentity
   */
  @javax.annotation.Nullable
  public Boolean getUseGwCloudIdentity() {
    return useGwCloudIdentity;
  }

  public void setUseGwCloudIdentity(@javax.annotation.Nullable Boolean useGwCloudIdentity) {
    this.useGwCloudIdentity = useGwCloudIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEKSTarget updateEKSTarget = (UpdateEKSTarget) o;
    return Objects.equals(this.comment, updateEKSTarget.comment) &&
        Objects.equals(this.description, updateEKSTarget.description) &&
        Objects.equals(this.eksAccessKeyId, updateEKSTarget.eksAccessKeyId) &&
        Objects.equals(this.eksClusterCaCert, updateEKSTarget.eksClusterCaCert) &&
        Objects.equals(this.eksClusterEndpoint, updateEKSTarget.eksClusterEndpoint) &&
        Objects.equals(this.eksClusterName, updateEKSTarget.eksClusterName) &&
        Objects.equals(this.eksRegion, updateEKSTarget.eksRegion) &&
        Objects.equals(this.eksSecretAccessKey, updateEKSTarget.eksSecretAccessKey) &&
        Objects.equals(this.json, updateEKSTarget.json) &&
        Objects.equals(this.keepPrevVersion, updateEKSTarget.keepPrevVersion) &&
        Objects.equals(this.key, updateEKSTarget.key) &&
        Objects.equals(this.maxVersions, updateEKSTarget.maxVersions) &&
        Objects.equals(this.name, updateEKSTarget.name) &&
        Objects.equals(this.newName, updateEKSTarget.newName) &&
        Objects.equals(this.token, updateEKSTarget.token) &&
        Objects.equals(this.uidToken, updateEKSTarget.uidToken) &&
        Objects.equals(this.updateVersion, updateEKSTarget.updateVersion) &&
        Objects.equals(this.useGwCloudIdentity, updateEKSTarget.useGwCloudIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, description, eksAccessKeyId, eksClusterCaCert, eksClusterEndpoint, eksClusterName, eksRegion, eksSecretAccessKey, json, keepPrevVersion, key, maxVersions, name, newName, token, uidToken, updateVersion, useGwCloudIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEKSTarget {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eksAccessKeyId: ").append(toIndentedString(eksAccessKeyId)).append("\n");
    sb.append("    eksClusterCaCert: ").append(toIndentedString(eksClusterCaCert)).append("\n");
    sb.append("    eksClusterEndpoint: ").append(toIndentedString(eksClusterEndpoint)).append("\n");
    sb.append("    eksClusterName: ").append(toIndentedString(eksClusterName)).append("\n");
    sb.append("    eksRegion: ").append(toIndentedString(eksRegion)).append("\n");
    sb.append("    eksSecretAccessKey: ").append(toIndentedString(eksSecretAccessKey)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    updateVersion: ").append(toIndentedString(updateVersion)).append("\n");
    sb.append("    useGwCloudIdentity: ").append(toIndentedString(useGwCloudIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("description");
    openapiFields.add("eks-access-key-id");
    openapiFields.add("eks-cluster-ca-cert");
    openapiFields.add("eks-cluster-endpoint");
    openapiFields.add("eks-cluster-name");
    openapiFields.add("eks-region");
    openapiFields.add("eks-secret-access-key");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("update-version");
    openapiFields.add("use-gw-cloud-identity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eks-access-key-id");
    openapiRequiredFields.add("eks-cluster-ca-cert");
    openapiRequiredFields.add("eks-cluster-endpoint");
    openapiRequiredFields.add("eks-cluster-name");
    openapiRequiredFields.add("eks-secret-access-key");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEKSTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEKSTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEKSTarget is not found in the empty JSON string", UpdateEKSTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEKSTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEKSTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateEKSTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("eks-access-key-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-access-key-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-access-key-id").toString()));
      }
      if (!jsonObj.get("eks-cluster-ca-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-cluster-ca-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-cluster-ca-cert").toString()));
      }
      if (!jsonObj.get("eks-cluster-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-cluster-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-cluster-endpoint").toString()));
      }
      if (!jsonObj.get("eks-cluster-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-cluster-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-cluster-name").toString()));
      }
      if ((jsonObj.get("eks-region") != null && !jsonObj.get("eks-region").isJsonNull()) && !jsonObj.get("eks-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-region").toString()));
      }
      if (!jsonObj.get("eks-secret-access-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks-secret-access-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks-secret-access-key").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEKSTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEKSTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEKSTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEKSTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEKSTarget>() {
           @Override
           public void write(JsonWriter out, UpdateEKSTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEKSTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEKSTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEKSTarget
   * @throws IOException if the JSON string is invalid with respect to UpdateEKSTarget
   */
  public static UpdateEKSTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEKSTarget.class);
  }

  /**
   * Convert an instance of UpdateEKSTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

