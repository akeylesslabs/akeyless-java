/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * uscUpdate is a command that updates a secret in a Universal Secrets Connector
 */
@ApiModel(description = "uscUpdate is a command that updates a secret in a Universal Secrets Connector")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UscUpdate {
  public static final String SERIALIZED_NAME_BINARY_VALUE = "binary-value";
  @SerializedName(SERIALIZED_NAME_BINARY_VALUE)
  private Boolean binaryValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_SECRET_ID = "secret-id";
  @SerializedName(SERIALIZED_NAME_SECRET_ID)
  private String secretId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_USC_NAME = "usc-name";
  @SerializedName(SERIALIZED_NAME_USC_NAME)
  private String uscName;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public UscUpdate() { 
  }

  public UscUpdate binaryValue(Boolean binaryValue) {
    
    this.binaryValue = binaryValue;
    return this;
  }

   /**
   * Use this option if the universal secrets value is a base64 encoded binary
   * @return binaryValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use this option if the universal secrets value is a base64 encoded binary")

  public Boolean getBinaryValue() {
    return binaryValue;
  }


  public void setBinaryValue(Boolean binaryValue) {
    this.binaryValue = binaryValue;
  }


  public UscUpdate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the universal secrets
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the universal secrets")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UscUpdate json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public UscUpdate secretId(String secretId) {
    
    this.secretId = secretId;
    return this;
  }

   /**
   * The universal secrets id (or name, for AWS, Azure or K8s targets) to update
   * @return secretId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The universal secrets id (or name, for AWS, Azure or K8s targets) to update")

  public String getSecretId() {
    return secretId;
  }


  public void setSecretId(String secretId) {
    this.secretId = secretId;
  }


  public UscUpdate tags(Map<String, String> tags) {
    
    this.tags = tags;
    return this;
  }

  public UscUpdate putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Tags for the universal secrets
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags for the universal secrets")

  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public UscUpdate token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public UscUpdate uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public UscUpdate uscName(String uscName) {
    
    this.uscName = uscName;
    return this;
  }

   /**
   * Name of the Universal Secrets Connector item
   * @return uscName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Universal Secrets Connector item")

  public String getUscName() {
    return uscName;
  }


  public void setUscName(String uscName) {
    this.uscName = uscName;
  }


  public UscUpdate value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Value of the universal secrets item, either text or base64 encoded binary
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Value of the universal secrets item, either text or base64 encoded binary")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UscUpdate uscUpdate = (UscUpdate) o;
    return Objects.equals(this.binaryValue, uscUpdate.binaryValue) &&
        Objects.equals(this.description, uscUpdate.description) &&
        Objects.equals(this.json, uscUpdate.json) &&
        Objects.equals(this.secretId, uscUpdate.secretId) &&
        Objects.equals(this.tags, uscUpdate.tags) &&
        Objects.equals(this.token, uscUpdate.token) &&
        Objects.equals(this.uidToken, uscUpdate.uidToken) &&
        Objects.equals(this.uscName, uscUpdate.uscName) &&
        Objects.equals(this.value, uscUpdate.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binaryValue, description, json, secretId, tags, token, uidToken, uscName, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UscUpdate {\n");
    sb.append("    binaryValue: ").append(toIndentedString(binaryValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    secretId: ").append(toIndentedString(secretId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uscName: ").append(toIndentedString(uscName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

