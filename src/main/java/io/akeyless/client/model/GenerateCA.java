/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * GenerateCA is a command that creates a new PKI CA and Intermediate issuers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GenerateCA {
  public static final String SERIALIZED_NAME_ALG = "alg";
  @SerializedName(SERIALIZED_NAME_ALG)
  @javax.annotation.Nullable
  private String alg;

  public static final String SERIALIZED_NAME_ALLOWED_DOMAINS = "allowed-domains";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DOMAINS)
  @javax.annotation.Nonnull
  private String allowedDomains;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_EXTENDED_KEY_USAGE = "extended-key-usage";
  @SerializedName(SERIALIZED_NAME_EXTENDED_KEY_USAGE)
  @javax.annotation.Nullable
  private String extendedKeyUsage = "serverauth,clientauth";

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEY_TYPE = "key-type";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  @javax.annotation.Nullable
  private String keyType;

  public static final String SERIALIZED_NAME_MAX_PATH_LEN = "max-path-len";
  @SerializedName(SERIALIZED_NAME_MAX_PATH_LEN)
  @javax.annotation.Nullable
  private Long maxPathLen = 1l;

  public static final String SERIALIZED_NAME_PKI_CHAIN_NAME = "pki-chain-name";
  @SerializedName(SERIALIZED_NAME_PKI_CHAIN_NAME)
  @javax.annotation.Nonnull
  private String pkiChainName;

  public static final String SERIALIZED_NAME_PROTECTION_KEY_NAME = "protection-key-name";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY_NAME)
  @javax.annotation.Nullable
  private String protectionKeyName;

  public static final String SERIALIZED_NAME_SPLIT_LEVEL = "split-level";
  @SerializedName(SERIALIZED_NAME_SPLIT_LEVEL)
  @javax.annotation.Nullable
  private Long splitLevel = 3l;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nonnull
  private String ttl;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public GenerateCA() {
  }

  public GenerateCA alg(@javax.annotation.Nullable String alg) {
    this.alg = alg;
    return this;
  }

  /**
   * Get alg
   * @return alg
   */
  @javax.annotation.Nullable
  public String getAlg() {
    return alg;
  }

  public void setAlg(@javax.annotation.Nullable String alg) {
    this.alg = alg;
  }


  public GenerateCA allowedDomains(@javax.annotation.Nonnull String allowedDomains) {
    this.allowedDomains = allowedDomains;
    return this;
  }

  /**
   * A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
   * @return allowedDomains
   */
  @javax.annotation.Nonnull
  public String getAllowedDomains() {
    return allowedDomains;
  }

  public void setAllowedDomains(@javax.annotation.Nonnull String allowedDomains) {
    this.allowedDomains = allowedDomains;
  }


  public GenerateCA deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public GenerateCA extendedKeyUsage(@javax.annotation.Nullable String extendedKeyUsage) {
    this.extendedKeyUsage = extendedKeyUsage;
    return this;
  }

  /**
   * A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)
   * @return extendedKeyUsage
   */
  @javax.annotation.Nullable
  public String getExtendedKeyUsage() {
    return extendedKeyUsage;
  }

  public void setExtendedKeyUsage(@javax.annotation.Nullable String extendedKeyUsage) {
    this.extendedKeyUsage = extendedKeyUsage;
  }


  public GenerateCA json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GenerateCA keyType(@javax.annotation.Nullable String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * Get keyType
   * @return keyType
   */
  @javax.annotation.Nullable
  public String getKeyType() {
    return keyType;
  }

  public void setKeyType(@javax.annotation.Nullable String keyType) {
    this.keyType = keyType;
  }


  public GenerateCA maxPathLen(@javax.annotation.Nullable Long maxPathLen) {
    this.maxPathLen = maxPathLen;
    return this;
  }

  /**
   * The maximum number of intermediate certificates that can appear in a certification path
   * @return maxPathLen
   */
  @javax.annotation.Nullable
  public Long getMaxPathLen() {
    return maxPathLen;
  }

  public void setMaxPathLen(@javax.annotation.Nullable Long maxPathLen) {
    this.maxPathLen = maxPathLen;
  }


  public GenerateCA pkiChainName(@javax.annotation.Nonnull String pkiChainName) {
    this.pkiChainName = pkiChainName;
    return this;
  }

  /**
   * PKI chain name
   * @return pkiChainName
   */
  @javax.annotation.Nonnull
  public String getPkiChainName() {
    return pkiChainName;
  }

  public void setPkiChainName(@javax.annotation.Nonnull String pkiChainName) {
    this.pkiChainName = pkiChainName;
  }


  public GenerateCA protectionKeyName(@javax.annotation.Nullable String protectionKeyName) {
    this.protectionKeyName = protectionKeyName;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)
   * @return protectionKeyName
   */
  @javax.annotation.Nullable
  public String getProtectionKeyName() {
    return protectionKeyName;
  }

  public void setProtectionKeyName(@javax.annotation.Nullable String protectionKeyName) {
    this.protectionKeyName = protectionKeyName;
  }


  public GenerateCA splitLevel(@javax.annotation.Nullable Long splitLevel) {
    this.splitLevel = splitLevel;
    return this;
  }

  /**
   * The number of fragments that the item will be split into
   * @return splitLevel
   */
  @javax.annotation.Nullable
  public Long getSplitLevel() {
    return splitLevel;
  }

  public void setSplitLevel(@javax.annotation.Nullable Long splitLevel) {
    this.splitLevel = splitLevel;
  }


  public GenerateCA token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GenerateCA ttl(@javax.annotation.Nonnull String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d
   * @return ttl
   */
  @javax.annotation.Nonnull
  public String getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nonnull String ttl) {
    this.ttl = ttl;
  }


  public GenerateCA uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateCA generateCA = (GenerateCA) o;
    return Objects.equals(this.alg, generateCA.alg) &&
        Objects.equals(this.allowedDomains, generateCA.allowedDomains) &&
        Objects.equals(this.deleteProtection, generateCA.deleteProtection) &&
        Objects.equals(this.extendedKeyUsage, generateCA.extendedKeyUsage) &&
        Objects.equals(this.json, generateCA.json) &&
        Objects.equals(this.keyType, generateCA.keyType) &&
        Objects.equals(this.maxPathLen, generateCA.maxPathLen) &&
        Objects.equals(this.pkiChainName, generateCA.pkiChainName) &&
        Objects.equals(this.protectionKeyName, generateCA.protectionKeyName) &&
        Objects.equals(this.splitLevel, generateCA.splitLevel) &&
        Objects.equals(this.token, generateCA.token) &&
        Objects.equals(this.ttl, generateCA.ttl) &&
        Objects.equals(this.uidToken, generateCA.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alg, allowedDomains, deleteProtection, extendedKeyUsage, json, keyType, maxPathLen, pkiChainName, protectionKeyName, splitLevel, token, ttl, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateCA {\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    allowedDomains: ").append(toIndentedString(allowedDomains)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    extendedKeyUsage: ").append(toIndentedString(extendedKeyUsage)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    maxPathLen: ").append(toIndentedString(maxPathLen)).append("\n");
    sb.append("    pkiChainName: ").append(toIndentedString(pkiChainName)).append("\n");
    sb.append("    protectionKeyName: ").append(toIndentedString(protectionKeyName)).append("\n");
    sb.append("    splitLevel: ").append(toIndentedString(splitLevel)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alg");
    openapiFields.add("allowed-domains");
    openapiFields.add("delete_protection");
    openapiFields.add("extended-key-usage");
    openapiFields.add("json");
    openapiFields.add("key-type");
    openapiFields.add("max-path-len");
    openapiFields.add("pki-chain-name");
    openapiFields.add("protection-key-name");
    openapiFields.add("split-level");
    openapiFields.add("token");
    openapiFields.add("ttl");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed-domains");
    openapiRequiredFields.add("pki-chain-name");
    openapiRequiredFields.add("ttl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateCA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateCA.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateCA is not found in the empty JSON string", GenerateCA.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateCA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateCA` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateCA.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alg") != null && !jsonObj.get("alg").isJsonNull()) && !jsonObj.get("alg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alg").toString()));
      }
      if (!jsonObj.get("allowed-domains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed-domains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed-domains").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("extended-key-usage") != null && !jsonObj.get("extended-key-usage").isJsonNull()) && !jsonObj.get("extended-key-usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended-key-usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extended-key-usage").toString()));
      }
      if ((jsonObj.get("key-type") != null && !jsonObj.get("key-type").isJsonNull()) && !jsonObj.get("key-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-type").toString()));
      }
      if (!jsonObj.get("pki-chain-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pki-chain-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pki-chain-name").toString()));
      }
      if ((jsonObj.get("protection-key-name") != null && !jsonObj.get("protection-key-name").isJsonNull()) && !jsonObj.get("protection-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection-key-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (!jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateCA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateCA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateCA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateCA.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateCA>() {
           @Override
           public void write(JsonWriter out, GenerateCA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateCA read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateCA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateCA
   * @throws IOException if the JSON string is invalid with respect to GenerateCA
   */
  public static GenerateCA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateCA.class);
  }

  /**
   * Convert an instance of GenerateCA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

