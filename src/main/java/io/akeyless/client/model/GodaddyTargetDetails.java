/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * GodaddyTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GodaddyTargetDetails {
  public static final String SERIALIZED_NAME_IMAP_FQDN = "imap_fqdn";
  @SerializedName(SERIALIZED_NAME_IMAP_FQDN)
  @javax.annotation.Nullable
  private String imapFqdn;

  public static final String SERIALIZED_NAME_IMAP_PASSWORD = "imap_password";
  @SerializedName(SERIALIZED_NAME_IMAP_PASSWORD)
  @javax.annotation.Nullable
  private String imapPassword;

  public static final String SERIALIZED_NAME_IMAP_PORT = "imap_port";
  @SerializedName(SERIALIZED_NAME_IMAP_PORT)
  @javax.annotation.Nullable
  private String imapPort;

  public static final String SERIALIZED_NAME_IMAP_USER = "imap_user";
  @SerializedName(SERIALIZED_NAME_IMAP_USER)
  @javax.annotation.Nullable
  private String imapUser;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  @javax.annotation.Nullable
  private String secret;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private Long timeout;

  public static final String SERIALIZED_NAME_VALIDATION_EMAIL = "validation_email";
  @SerializedName(SERIALIZED_NAME_VALIDATION_EMAIL)
  @javax.annotation.Nullable
  private String validationEmail;

  public GodaddyTargetDetails() {
  }

  public GodaddyTargetDetails imapFqdn(@javax.annotation.Nullable String imapFqdn) {
    this.imapFqdn = imapFqdn;
    return this;
  }

  /**
   * Get imapFqdn
   * @return imapFqdn
   */
  @javax.annotation.Nullable
  public String getImapFqdn() {
    return imapFqdn;
  }

  public void setImapFqdn(@javax.annotation.Nullable String imapFqdn) {
    this.imapFqdn = imapFqdn;
  }


  public GodaddyTargetDetails imapPassword(@javax.annotation.Nullable String imapPassword) {
    this.imapPassword = imapPassword;
    return this;
  }

  /**
   * Get imapPassword
   * @return imapPassword
   */
  @javax.annotation.Nullable
  public String getImapPassword() {
    return imapPassword;
  }

  public void setImapPassword(@javax.annotation.Nullable String imapPassword) {
    this.imapPassword = imapPassword;
  }


  public GodaddyTargetDetails imapPort(@javax.annotation.Nullable String imapPort) {
    this.imapPort = imapPort;
    return this;
  }

  /**
   * Get imapPort
   * @return imapPort
   */
  @javax.annotation.Nullable
  public String getImapPort() {
    return imapPort;
  }

  public void setImapPort(@javax.annotation.Nullable String imapPort) {
    this.imapPort = imapPort;
  }


  public GodaddyTargetDetails imapUser(@javax.annotation.Nullable String imapUser) {
    this.imapUser = imapUser;
    return this;
  }

  /**
   * Get imapUser
   * @return imapUser
   */
  @javax.annotation.Nullable
  public String getImapUser() {
    return imapUser;
  }

  public void setImapUser(@javax.annotation.Nullable String imapUser) {
    this.imapUser = imapUser;
  }


  public GodaddyTargetDetails key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public GodaddyTargetDetails secret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(@javax.annotation.Nullable String secret) {
    this.secret = secret;
  }


  public GodaddyTargetDetails timeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable Long timeout) {
    this.timeout = timeout;
  }


  public GodaddyTargetDetails validationEmail(@javax.annotation.Nullable String validationEmail) {
    this.validationEmail = validationEmail;
    return this;
  }

  /**
   * Get validationEmail
   * @return validationEmail
   */
  @javax.annotation.Nullable
  public String getValidationEmail() {
    return validationEmail;
  }

  public void setValidationEmail(@javax.annotation.Nullable String validationEmail) {
    this.validationEmail = validationEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GodaddyTargetDetails godaddyTargetDetails = (GodaddyTargetDetails) o;
    return Objects.equals(this.imapFqdn, godaddyTargetDetails.imapFqdn) &&
        Objects.equals(this.imapPassword, godaddyTargetDetails.imapPassword) &&
        Objects.equals(this.imapPort, godaddyTargetDetails.imapPort) &&
        Objects.equals(this.imapUser, godaddyTargetDetails.imapUser) &&
        Objects.equals(this.key, godaddyTargetDetails.key) &&
        Objects.equals(this.secret, godaddyTargetDetails.secret) &&
        Objects.equals(this.timeout, godaddyTargetDetails.timeout) &&
        Objects.equals(this.validationEmail, godaddyTargetDetails.validationEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imapFqdn, imapPassword, imapPort, imapUser, key, secret, timeout, validationEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GodaddyTargetDetails {\n");
    sb.append("    imapFqdn: ").append(toIndentedString(imapFqdn)).append("\n");
    sb.append("    imapPassword: ").append(toIndentedString(imapPassword)).append("\n");
    sb.append("    imapPort: ").append(toIndentedString(imapPort)).append("\n");
    sb.append("    imapUser: ").append(toIndentedString(imapUser)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    validationEmail: ").append(toIndentedString(validationEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imap_fqdn");
    openapiFields.add("imap_password");
    openapiFields.add("imap_port");
    openapiFields.add("imap_user");
    openapiFields.add("key");
    openapiFields.add("secret");
    openapiFields.add("timeout");
    openapiFields.add("validation_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GodaddyTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GodaddyTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GodaddyTargetDetails is not found in the empty JSON string", GodaddyTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GodaddyTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GodaddyTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imap_fqdn") != null && !jsonObj.get("imap_fqdn").isJsonNull()) && !jsonObj.get("imap_fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imap_fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imap_fqdn").toString()));
      }
      if ((jsonObj.get("imap_password") != null && !jsonObj.get("imap_password").isJsonNull()) && !jsonObj.get("imap_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imap_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imap_password").toString()));
      }
      if ((jsonObj.get("imap_port") != null && !jsonObj.get("imap_port").isJsonNull()) && !jsonObj.get("imap_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imap_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imap_port").toString()));
      }
      if ((jsonObj.get("imap_user") != null && !jsonObj.get("imap_user").isJsonNull()) && !jsonObj.get("imap_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imap_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imap_user").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("validation_email") != null && !jsonObj.get("validation_email").isJsonNull()) && !jsonObj.get("validation_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GodaddyTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GodaddyTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GodaddyTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GodaddyTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GodaddyTargetDetails>() {
           @Override
           public void write(JsonWriter out, GodaddyTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GodaddyTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GodaddyTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GodaddyTargetDetails
   * @throws IOException if the JSON string is invalid with respect to GodaddyTargetDetails
   */
  public static GodaddyTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GodaddyTargetDetails.class);
  }

  /**
   * Convert an instance of GodaddyTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

