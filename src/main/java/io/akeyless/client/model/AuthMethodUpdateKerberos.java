/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * authMethodUpdateKerberos is a command that updates an auth method that will be able to authenticate using Kerberos
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AuthMethodUpdateKerberos {
  public static final String SERIALIZED_NAME_ACCESS_EXPIRES = "access-expires";
  @SerializedName(SERIALIZED_NAME_ACCESS_EXPIRES)
  @javax.annotation.Nullable
  private Long accessExpires = 0l;

  public static final String SERIALIZED_NAME_AUDIT_LOGS_CLAIMS = "audit-logs-claims";
  @SerializedName(SERIALIZED_NAME_AUDIT_LOGS_CLAIMS)
  @javax.annotation.Nullable
  private List<String> auditLogsClaims = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIND_DN = "bind-dn";
  @SerializedName(SERIALIZED_NAME_BIND_DN)
  @javax.annotation.Nullable
  private String bindDn;

  public static final String SERIALIZED_NAME_BIND_DN_PASSWORD = "bind-dn-password";
  @SerializedName(SERIALIZED_NAME_BIND_DN_PASSWORD)
  @javax.annotation.Nullable
  private String bindDnPassword;

  public static final String SERIALIZED_NAME_BOUND_IPS = "bound-ips";
  @SerializedName(SERIALIZED_NAME_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> boundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXPIRATION_EVENT_IN = "expiration-event-in";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> expirationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_SUB_CLAIMS = "force-sub-claims";
  @SerializedName(SERIALIZED_NAME_FORCE_SUB_CLAIMS)
  @javax.annotation.Nullable
  private Boolean forceSubClaims;

  public static final String SERIALIZED_NAME_GROUP_ATTR = "group-attr";
  @SerializedName(SERIALIZED_NAME_GROUP_ATTR)
  @javax.annotation.Nullable
  private String groupAttr;

  public static final String SERIALIZED_NAME_GROUP_DN = "group-dn";
  @SerializedName(SERIALIZED_NAME_GROUP_DN)
  @javax.annotation.Nullable
  private String groupDn;

  public static final String SERIALIZED_NAME_GROUP_FILTER = "group-filter";
  @SerializedName(SERIALIZED_NAME_GROUP_FILTER)
  @javax.annotation.Nullable
  private String groupFilter;

  public static final String SERIALIZED_NAME_GW_BOUND_IPS = "gw-bound-ips";
  @SerializedName(SERIALIZED_NAME_GW_BOUND_IPS)
  @javax.annotation.Nullable
  private List<String> gwBoundIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_JWT_TTL = "jwt-ttl";
  @SerializedName(SERIALIZED_NAME_JWT_TTL)
  @javax.annotation.Nullable
  private Long jwtTtl = 0l;

  public static final String SERIALIZED_NAME_KEYTAB_FILE_DATA = "keytab-file-data";
  @SerializedName(SERIALIZED_NAME_KEYTAB_FILE_DATA)
  @javax.annotation.Nullable
  private String keytabFileData;

  public static final String SERIALIZED_NAME_KEYTAB_FILE_PATH = "keytab-file-path";
  @SerializedName(SERIALIZED_NAME_KEYTAB_FILE_PATH)
  @javax.annotation.Nullable
  private String keytabFilePath;

  public static final String SERIALIZED_NAME_KRB5_CONF_DATA = "krb5-conf-data";
  @SerializedName(SERIALIZED_NAME_KRB5_CONF_DATA)
  @javax.annotation.Nullable
  private String krb5ConfData;

  public static final String SERIALIZED_NAME_KRB5_CONF_PATH = "krb5-conf-path";
  @SerializedName(SERIALIZED_NAME_KRB5_CONF_PATH)
  @javax.annotation.Nullable
  private String krb5ConfPath;

  public static final String SERIALIZED_NAME_LDAP_ANONYMOUS_SEARCH = "ldap-anonymous-search";
  @SerializedName(SERIALIZED_NAME_LDAP_ANONYMOUS_SEARCH)
  @javax.annotation.Nullable
  private Boolean ldapAnonymousSearch;

  public static final String SERIALIZED_NAME_LDAP_CA_CERT = "ldap-ca-cert";
  @SerializedName(SERIALIZED_NAME_LDAP_CA_CERT)
  @javax.annotation.Nullable
  private String ldapCaCert;

  public static final String SERIALIZED_NAME_LDAP_URL = "ldap-url";
  @SerializedName(SERIALIZED_NAME_LDAP_URL)
  @javax.annotation.Nullable
  private String ldapUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product-type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  @javax.annotation.Nullable
  private List<String> productType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBCLAIMS_DELIMITERS = "subclaims-delimiters";
  @SerializedName(SERIALIZED_NAME_SUBCLAIMS_DELIMITERS)
  @javax.annotation.Nullable
  private List<String> subclaimsDelimiters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique-identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "user-attribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  @javax.annotation.Nullable
  private String userAttribute;

  public static final String SERIALIZED_NAME_USER_DN = "user-dn";
  @SerializedName(SERIALIZED_NAME_USER_DN)
  @javax.annotation.Nullable
  private String userDn;

  public AuthMethodUpdateKerberos() {
  }

  public AuthMethodUpdateKerberos accessExpires(@javax.annotation.Nullable Long accessExpires) {
    this.accessExpires = accessExpires;
    return this;
  }

  /**
   * Access expiration date in Unix timestamp (select 0 for access without expiry date)
   * @return accessExpires
   */
  @javax.annotation.Nullable
  public Long getAccessExpires() {
    return accessExpires;
  }

  public void setAccessExpires(@javax.annotation.Nullable Long accessExpires) {
    this.accessExpires = accessExpires;
  }


  public AuthMethodUpdateKerberos auditLogsClaims(@javax.annotation.Nullable List<String> auditLogsClaims) {
    this.auditLogsClaims = auditLogsClaims;
    return this;
  }

  public AuthMethodUpdateKerberos addAuditLogsClaimsItem(String auditLogsClaimsItem) {
    if (this.auditLogsClaims == null) {
      this.auditLogsClaims = new ArrayList<>();
    }
    this.auditLogsClaims.add(auditLogsClaimsItem);
    return this;
  }

  /**
   * Subclaims to include in audit logs, e.g \&quot;--audit-logs-claims email --audit-logs-claims username\&quot;
   * @return auditLogsClaims
   */
  @javax.annotation.Nullable
  public List<String> getAuditLogsClaims() {
    return auditLogsClaims;
  }

  public void setAuditLogsClaims(@javax.annotation.Nullable List<String> auditLogsClaims) {
    this.auditLogsClaims = auditLogsClaims;
  }


  public AuthMethodUpdateKerberos bindDn(@javax.annotation.Nullable String bindDn) {
    this.bindDn = bindDn;
    return this;
  }

  /**
   * Get bindDn
   * @return bindDn
   */
  @javax.annotation.Nullable
  public String getBindDn() {
    return bindDn;
  }

  public void setBindDn(@javax.annotation.Nullable String bindDn) {
    this.bindDn = bindDn;
  }


  public AuthMethodUpdateKerberos bindDnPassword(@javax.annotation.Nullable String bindDnPassword) {
    this.bindDnPassword = bindDnPassword;
    return this;
  }

  /**
   * Get bindDnPassword
   * @return bindDnPassword
   */
  @javax.annotation.Nullable
  public String getBindDnPassword() {
    return bindDnPassword;
  }

  public void setBindDnPassword(@javax.annotation.Nullable String bindDnPassword) {
    this.bindDnPassword = bindDnPassword;
  }


  public AuthMethodUpdateKerberos boundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
    return this;
  }

  public AuthMethodUpdateKerberos addBoundIpsItem(String boundIpsItem) {
    if (this.boundIps == null) {
      this.boundIps = new ArrayList<>();
    }
    this.boundIps.add(boundIpsItem);
    return this;
  }

  /**
   * A CIDR whitelist with the IPs that the access is restricted to
   * @return boundIps
   */
  @javax.annotation.Nullable
  public List<String> getBoundIps() {
    return boundIps;
  }

  public void setBoundIps(@javax.annotation.Nullable List<String> boundIps) {
    this.boundIps = boundIps;
  }


  public AuthMethodUpdateKerberos deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public AuthMethodUpdateKerberos description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Auth Method description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public AuthMethodUpdateKerberos expirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
    return this;
  }

  public AuthMethodUpdateKerberos addExpirationEventInItem(String expirationEventInItem) {
    if (this.expirationEventIn == null) {
      this.expirationEventIn = new ArrayList<>();
    }
    this.expirationEventIn.add(expirationEventInItem);
    return this;
  }

  /**
   * How many days before the expiration of the auth method would you like to be notified.
   * @return expirationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getExpirationEventIn() {
    return expirationEventIn;
  }

  public void setExpirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
  }


  public AuthMethodUpdateKerberos forceSubClaims(@javax.annotation.Nullable Boolean forceSubClaims) {
    this.forceSubClaims = forceSubClaims;
    return this;
  }

  /**
   * if true: enforce role-association must include sub claims
   * @return forceSubClaims
   */
  @javax.annotation.Nullable
  public Boolean getForceSubClaims() {
    return forceSubClaims;
  }

  public void setForceSubClaims(@javax.annotation.Nullable Boolean forceSubClaims) {
    this.forceSubClaims = forceSubClaims;
  }


  public AuthMethodUpdateKerberos groupAttr(@javax.annotation.Nullable String groupAttr) {
    this.groupAttr = groupAttr;
    return this;
  }

  /**
   * Get groupAttr
   * @return groupAttr
   */
  @javax.annotation.Nullable
  public String getGroupAttr() {
    return groupAttr;
  }

  public void setGroupAttr(@javax.annotation.Nullable String groupAttr) {
    this.groupAttr = groupAttr;
  }


  public AuthMethodUpdateKerberos groupDn(@javax.annotation.Nullable String groupDn) {
    this.groupDn = groupDn;
    return this;
  }

  /**
   * Get groupDn
   * @return groupDn
   */
  @javax.annotation.Nullable
  public String getGroupDn() {
    return groupDn;
  }

  public void setGroupDn(@javax.annotation.Nullable String groupDn) {
    this.groupDn = groupDn;
  }


  public AuthMethodUpdateKerberos groupFilter(@javax.annotation.Nullable String groupFilter) {
    this.groupFilter = groupFilter;
    return this;
  }

  /**
   * Get groupFilter
   * @return groupFilter
   */
  @javax.annotation.Nullable
  public String getGroupFilter() {
    return groupFilter;
  }

  public void setGroupFilter(@javax.annotation.Nullable String groupFilter) {
    this.groupFilter = groupFilter;
  }


  public AuthMethodUpdateKerberos gwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
    return this;
  }

  public AuthMethodUpdateKerberos addGwBoundIpsItem(String gwBoundIpsItem) {
    if (this.gwBoundIps == null) {
      this.gwBoundIps = new ArrayList<>();
    }
    this.gwBoundIps.add(gwBoundIpsItem);
    return this;
  }

  /**
   * A CIDR whitelist with the GW IPs that the access is restricted to
   * @return gwBoundIps
   */
  @javax.annotation.Nullable
  public List<String> getGwBoundIps() {
    return gwBoundIps;
  }

  public void setGwBoundIps(@javax.annotation.Nullable List<String> gwBoundIps) {
    this.gwBoundIps = gwBoundIps;
  }


  public AuthMethodUpdateKerberos json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public AuthMethodUpdateKerberos jwtTtl(@javax.annotation.Nullable Long jwtTtl) {
    this.jwtTtl = jwtTtl;
    return this;
  }

  /**
   * Jwt TTL
   * @return jwtTtl
   */
  @javax.annotation.Nullable
  public Long getJwtTtl() {
    return jwtTtl;
  }

  public void setJwtTtl(@javax.annotation.Nullable Long jwtTtl) {
    this.jwtTtl = jwtTtl;
  }


  public AuthMethodUpdateKerberos keytabFileData(@javax.annotation.Nullable String keytabFileData) {
    this.keytabFileData = keytabFileData;
    return this;
  }

  /**
   * Get keytabFileData
   * @return keytabFileData
   */
  @javax.annotation.Nullable
  public String getKeytabFileData() {
    return keytabFileData;
  }

  public void setKeytabFileData(@javax.annotation.Nullable String keytabFileData) {
    this.keytabFileData = keytabFileData;
  }


  public AuthMethodUpdateKerberos keytabFilePath(@javax.annotation.Nullable String keytabFilePath) {
    this.keytabFilePath = keytabFilePath;
    return this;
  }

  /**
   * Get keytabFilePath
   * @return keytabFilePath
   */
  @javax.annotation.Nullable
  public String getKeytabFilePath() {
    return keytabFilePath;
  }

  public void setKeytabFilePath(@javax.annotation.Nullable String keytabFilePath) {
    this.keytabFilePath = keytabFilePath;
  }


  public AuthMethodUpdateKerberos krb5ConfData(@javax.annotation.Nullable String krb5ConfData) {
    this.krb5ConfData = krb5ConfData;
    return this;
  }

  /**
   * Get krb5ConfData
   * @return krb5ConfData
   */
  @javax.annotation.Nullable
  public String getKrb5ConfData() {
    return krb5ConfData;
  }

  public void setKrb5ConfData(@javax.annotation.Nullable String krb5ConfData) {
    this.krb5ConfData = krb5ConfData;
  }


  public AuthMethodUpdateKerberos krb5ConfPath(@javax.annotation.Nullable String krb5ConfPath) {
    this.krb5ConfPath = krb5ConfPath;
    return this;
  }

  /**
   * Get krb5ConfPath
   * @return krb5ConfPath
   */
  @javax.annotation.Nullable
  public String getKrb5ConfPath() {
    return krb5ConfPath;
  }

  public void setKrb5ConfPath(@javax.annotation.Nullable String krb5ConfPath) {
    this.krb5ConfPath = krb5ConfPath;
  }


  public AuthMethodUpdateKerberos ldapAnonymousSearch(@javax.annotation.Nullable Boolean ldapAnonymousSearch) {
    this.ldapAnonymousSearch = ldapAnonymousSearch;
    return this;
  }

  /**
   * Get ldapAnonymousSearch
   * @return ldapAnonymousSearch
   */
  @javax.annotation.Nullable
  public Boolean getLdapAnonymousSearch() {
    return ldapAnonymousSearch;
  }

  public void setLdapAnonymousSearch(@javax.annotation.Nullable Boolean ldapAnonymousSearch) {
    this.ldapAnonymousSearch = ldapAnonymousSearch;
  }


  public AuthMethodUpdateKerberos ldapCaCert(@javax.annotation.Nullable String ldapCaCert) {
    this.ldapCaCert = ldapCaCert;
    return this;
  }

  /**
   * Get ldapCaCert
   * @return ldapCaCert
   */
  @javax.annotation.Nullable
  public String getLdapCaCert() {
    return ldapCaCert;
  }

  public void setLdapCaCert(@javax.annotation.Nullable String ldapCaCert) {
    this.ldapCaCert = ldapCaCert;
  }


  public AuthMethodUpdateKerberos ldapUrl(@javax.annotation.Nullable String ldapUrl) {
    this.ldapUrl = ldapUrl;
    return this;
  }

  /**
   * Get ldapUrl
   * @return ldapUrl
   */
  @javax.annotation.Nullable
  public String getLdapUrl() {
    return ldapUrl;
  }

  public void setLdapUrl(@javax.annotation.Nullable String ldapUrl) {
    this.ldapUrl = ldapUrl;
  }


  public AuthMethodUpdateKerberos name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Auth Method name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AuthMethodUpdateKerberos newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Get newName
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public AuthMethodUpdateKerberos productType(@javax.annotation.Nullable List<String> productType) {
    this.productType = productType;
    return this;
  }

  public AuthMethodUpdateKerberos addProductTypeItem(String productTypeItem) {
    if (this.productType == null) {
      this.productType = new ArrayList<>();
    }
    this.productType.add(productTypeItem);
    return this;
  }

  /**
   * Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]
   * @return productType
   */
  @javax.annotation.Nullable
  public List<String> getProductType() {
    return productType;
  }

  public void setProductType(@javax.annotation.Nullable List<String> productType) {
    this.productType = productType;
  }


  public AuthMethodUpdateKerberos subclaimsDelimiters(@javax.annotation.Nullable List<String> subclaimsDelimiters) {
    this.subclaimsDelimiters = subclaimsDelimiters;
    return this;
  }

  public AuthMethodUpdateKerberos addSubclaimsDelimitersItem(String subclaimsDelimitersItem) {
    if (this.subclaimsDelimiters == null) {
      this.subclaimsDelimiters = new ArrayList<>();
    }
    this.subclaimsDelimiters.add(subclaimsDelimitersItem);
    return this;
  }

  /**
   * A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)
   * @return subclaimsDelimiters
   */
  @javax.annotation.Nullable
  public List<String> getSubclaimsDelimiters() {
    return subclaimsDelimiters;
  }

  public void setSubclaimsDelimiters(@javax.annotation.Nullable List<String> subclaimsDelimiters) {
    this.subclaimsDelimiters = subclaimsDelimiters;
  }


  public AuthMethodUpdateKerberos token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public AuthMethodUpdateKerberos uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public AuthMethodUpdateKerberos uniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier (ID) value which is a \&quot;sub claim\&quot; name that contains details uniquely identifying that resource. This \&quot;sub claim\&quot; is used to distinguish between different identities.
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public AuthMethodUpdateKerberos userAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * Get userAttribute
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
  }


  public AuthMethodUpdateKerberos userDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
    return this;
  }

  /**
   * Get userDn
   * @return userDn
   */
  @javax.annotation.Nullable
  public String getUserDn() {
    return userDn;
  }

  public void setUserDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthMethodUpdateKerberos authMethodUpdateKerberos = (AuthMethodUpdateKerberos) o;
    return Objects.equals(this.accessExpires, authMethodUpdateKerberos.accessExpires) &&
        Objects.equals(this.auditLogsClaims, authMethodUpdateKerberos.auditLogsClaims) &&
        Objects.equals(this.bindDn, authMethodUpdateKerberos.bindDn) &&
        Objects.equals(this.bindDnPassword, authMethodUpdateKerberos.bindDnPassword) &&
        Objects.equals(this.boundIps, authMethodUpdateKerberos.boundIps) &&
        Objects.equals(this.deleteProtection, authMethodUpdateKerberos.deleteProtection) &&
        Objects.equals(this.description, authMethodUpdateKerberos.description) &&
        Objects.equals(this.expirationEventIn, authMethodUpdateKerberos.expirationEventIn) &&
        Objects.equals(this.forceSubClaims, authMethodUpdateKerberos.forceSubClaims) &&
        Objects.equals(this.groupAttr, authMethodUpdateKerberos.groupAttr) &&
        Objects.equals(this.groupDn, authMethodUpdateKerberos.groupDn) &&
        Objects.equals(this.groupFilter, authMethodUpdateKerberos.groupFilter) &&
        Objects.equals(this.gwBoundIps, authMethodUpdateKerberos.gwBoundIps) &&
        Objects.equals(this.json, authMethodUpdateKerberos.json) &&
        Objects.equals(this.jwtTtl, authMethodUpdateKerberos.jwtTtl) &&
        Objects.equals(this.keytabFileData, authMethodUpdateKerberos.keytabFileData) &&
        Objects.equals(this.keytabFilePath, authMethodUpdateKerberos.keytabFilePath) &&
        Objects.equals(this.krb5ConfData, authMethodUpdateKerberos.krb5ConfData) &&
        Objects.equals(this.krb5ConfPath, authMethodUpdateKerberos.krb5ConfPath) &&
        Objects.equals(this.ldapAnonymousSearch, authMethodUpdateKerberos.ldapAnonymousSearch) &&
        Objects.equals(this.ldapCaCert, authMethodUpdateKerberos.ldapCaCert) &&
        Objects.equals(this.ldapUrl, authMethodUpdateKerberos.ldapUrl) &&
        Objects.equals(this.name, authMethodUpdateKerberos.name) &&
        Objects.equals(this.newName, authMethodUpdateKerberos.newName) &&
        Objects.equals(this.productType, authMethodUpdateKerberos.productType) &&
        Objects.equals(this.subclaimsDelimiters, authMethodUpdateKerberos.subclaimsDelimiters) &&
        Objects.equals(this.token, authMethodUpdateKerberos.token) &&
        Objects.equals(this.uidToken, authMethodUpdateKerberos.uidToken) &&
        Objects.equals(this.uniqueIdentifier, authMethodUpdateKerberos.uniqueIdentifier) &&
        Objects.equals(this.userAttribute, authMethodUpdateKerberos.userAttribute) &&
        Objects.equals(this.userDn, authMethodUpdateKerberos.userDn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessExpires, auditLogsClaims, bindDn, bindDnPassword, boundIps, deleteProtection, description, expirationEventIn, forceSubClaims, groupAttr, groupDn, groupFilter, gwBoundIps, json, jwtTtl, keytabFileData, keytabFilePath, krb5ConfData, krb5ConfPath, ldapAnonymousSearch, ldapCaCert, ldapUrl, name, newName, productType, subclaimsDelimiters, token, uidToken, uniqueIdentifier, userAttribute, userDn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthMethodUpdateKerberos {\n");
    sb.append("    accessExpires: ").append(toIndentedString(accessExpires)).append("\n");
    sb.append("    auditLogsClaims: ").append(toIndentedString(auditLogsClaims)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    bindDnPassword: ").append(toIndentedString(bindDnPassword)).append("\n");
    sb.append("    boundIps: ").append(toIndentedString(boundIps)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationEventIn: ").append(toIndentedString(expirationEventIn)).append("\n");
    sb.append("    forceSubClaims: ").append(toIndentedString(forceSubClaims)).append("\n");
    sb.append("    groupAttr: ").append(toIndentedString(groupAttr)).append("\n");
    sb.append("    groupDn: ").append(toIndentedString(groupDn)).append("\n");
    sb.append("    groupFilter: ").append(toIndentedString(groupFilter)).append("\n");
    sb.append("    gwBoundIps: ").append(toIndentedString(gwBoundIps)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    jwtTtl: ").append(toIndentedString(jwtTtl)).append("\n");
    sb.append("    keytabFileData: ").append(toIndentedString(keytabFileData)).append("\n");
    sb.append("    keytabFilePath: ").append(toIndentedString(keytabFilePath)).append("\n");
    sb.append("    krb5ConfData: ").append(toIndentedString(krb5ConfData)).append("\n");
    sb.append("    krb5ConfPath: ").append(toIndentedString(krb5ConfPath)).append("\n");
    sb.append("    ldapAnonymousSearch: ").append(toIndentedString(ldapAnonymousSearch)).append("\n");
    sb.append("    ldapCaCert: ").append(toIndentedString(ldapCaCert)).append("\n");
    sb.append("    ldapUrl: ").append(toIndentedString(ldapUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    subclaimsDelimiters: ").append(toIndentedString(subclaimsDelimiters)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("    userDn: ").append(toIndentedString(userDn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access-expires");
    openapiFields.add("audit-logs-claims");
    openapiFields.add("bind-dn");
    openapiFields.add("bind-dn-password");
    openapiFields.add("bound-ips");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("expiration-event-in");
    openapiFields.add("force-sub-claims");
    openapiFields.add("group-attr");
    openapiFields.add("group-dn");
    openapiFields.add("group-filter");
    openapiFields.add("gw-bound-ips");
    openapiFields.add("json");
    openapiFields.add("jwt-ttl");
    openapiFields.add("keytab-file-data");
    openapiFields.add("keytab-file-path");
    openapiFields.add("krb5-conf-data");
    openapiFields.add("krb5-conf-path");
    openapiFields.add("ldap-anonymous-search");
    openapiFields.add("ldap-ca-cert");
    openapiFields.add("ldap-url");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("product-type");
    openapiFields.add("subclaims-delimiters");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("unique-identifier");
    openapiFields.add("user-attribute");
    openapiFields.add("user-dn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthMethodUpdateKerberos
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthMethodUpdateKerberos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthMethodUpdateKerberos is not found in the empty JSON string", AuthMethodUpdateKerberos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthMethodUpdateKerberos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthMethodUpdateKerberos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthMethodUpdateKerberos.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("audit-logs-claims") != null && !jsonObj.get("audit-logs-claims").isJsonNull() && !jsonObj.get("audit-logs-claims").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audit-logs-claims` to be an array in the JSON string but got `%s`", jsonObj.get("audit-logs-claims").toString()));
      }
      if ((jsonObj.get("bind-dn") != null && !jsonObj.get("bind-dn").isJsonNull()) && !jsonObj.get("bind-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind-dn").toString()));
      }
      if ((jsonObj.get("bind-dn-password") != null && !jsonObj.get("bind-dn-password").isJsonNull()) && !jsonObj.get("bind-dn-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind-dn-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind-dn-password").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bound-ips") != null && !jsonObj.get("bound-ips").isJsonNull() && !jsonObj.get("bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("bound-ips").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expiration-event-in") != null && !jsonObj.get("expiration-event-in").isJsonNull() && !jsonObj.get("expiration-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("expiration-event-in").toString()));
      }
      if ((jsonObj.get("group-attr") != null && !jsonObj.get("group-attr").isJsonNull()) && !jsonObj.get("group-attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-attr").toString()));
      }
      if ((jsonObj.get("group-dn") != null && !jsonObj.get("group-dn").isJsonNull()) && !jsonObj.get("group-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-dn").toString()));
      }
      if ((jsonObj.get("group-filter") != null && !jsonObj.get("group-filter").isJsonNull()) && !jsonObj.get("group-filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gw-bound-ips") != null && !jsonObj.get("gw-bound-ips").isJsonNull() && !jsonObj.get("gw-bound-ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gw-bound-ips` to be an array in the JSON string but got `%s`", jsonObj.get("gw-bound-ips").toString()));
      }
      if ((jsonObj.get("keytab-file-data") != null && !jsonObj.get("keytab-file-data").isJsonNull()) && !jsonObj.get("keytab-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keytab-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keytab-file-data").toString()));
      }
      if ((jsonObj.get("keytab-file-path") != null && !jsonObj.get("keytab-file-path").isJsonNull()) && !jsonObj.get("keytab-file-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keytab-file-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keytab-file-path").toString()));
      }
      if ((jsonObj.get("krb5-conf-data") != null && !jsonObj.get("krb5-conf-data").isJsonNull()) && !jsonObj.get("krb5-conf-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krb5-conf-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krb5-conf-data").toString()));
      }
      if ((jsonObj.get("krb5-conf-path") != null && !jsonObj.get("krb5-conf-path").isJsonNull()) && !jsonObj.get("krb5-conf-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `krb5-conf-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("krb5-conf-path").toString()));
      }
      if ((jsonObj.get("ldap-ca-cert") != null && !jsonObj.get("ldap-ca-cert").isJsonNull()) && !jsonObj.get("ldap-ca-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap-ca-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap-ca-cert").toString()));
      }
      if ((jsonObj.get("ldap-url") != null && !jsonObj.get("ldap-url").isJsonNull()) && !jsonObj.get("ldap-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap-url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product-type") != null && !jsonObj.get("product-type").isJsonNull() && !jsonObj.get("product-type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product-type` to be an array in the JSON string but got `%s`", jsonObj.get("product-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subclaims-delimiters") != null && !jsonObj.get("subclaims-delimiters").isJsonNull() && !jsonObj.get("subclaims-delimiters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subclaims-delimiters` to be an array in the JSON string but got `%s`", jsonObj.get("subclaims-delimiters").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("unique-identifier") != null && !jsonObj.get("unique-identifier").isJsonNull()) && !jsonObj.get("unique-identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique-identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique-identifier").toString()));
      }
      if ((jsonObj.get("user-attribute") != null && !jsonObj.get("user-attribute").isJsonNull()) && !jsonObj.get("user-attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-attribute").toString()));
      }
      if ((jsonObj.get("user-dn") != null && !jsonObj.get("user-dn").isJsonNull()) && !jsonObj.get("user-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-dn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthMethodUpdateKerberos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthMethodUpdateKerberos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthMethodUpdateKerberos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthMethodUpdateKerberos.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthMethodUpdateKerberos>() {
           @Override
           public void write(JsonWriter out, AuthMethodUpdateKerberos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthMethodUpdateKerberos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthMethodUpdateKerberos given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthMethodUpdateKerberos
   * @throws IOException if the JSON string is invalid with respect to AuthMethodUpdateKerberos
   */
  public static AuthMethodUpdateKerberos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthMethodUpdateKerberos.class);
  }

  /**
   * Convert an instance of AuthMethodUpdateKerberos to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

