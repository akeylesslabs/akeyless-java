/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * targetCreateK8s is a command that creates a new k8s target
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class TargetCreateK8s {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_K8S_AUTH_TYPE = "k8s-auth-type";
  @SerializedName(SERIALIZED_NAME_K8S_AUTH_TYPE)
  @javax.annotation.Nullable
  private String k8sAuthType = "token";

  public static final String SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE = "k8s-client-certificate";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_CERTIFICATE)
  @javax.annotation.Nullable
  private String k8sClientCertificate;

  public static final String SERIALIZED_NAME_K8S_CLIENT_KEY = "k8s-client-key";
  @SerializedName(SERIALIZED_NAME_K8S_CLIENT_KEY)
  @javax.annotation.Nullable
  private String k8sClientKey;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_CA_CERT = "k8s-cluster-ca-cert";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_CA_CERT)
  @javax.annotation.Nullable
  private String k8sClusterCaCert;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_ENDPOINT = "k8s-cluster-endpoint";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_ENDPOINT)
  @javax.annotation.Nullable
  private String k8sClusterEndpoint;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_NAME = "k8s-cluster-name";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_NAME)
  @javax.annotation.Nullable
  private String k8sClusterName;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_TOKEN = "k8s-cluster-token";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_TOKEN)
  @javax.annotation.Nullable
  private String k8sClusterToken;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USE_GW_SERVICE_ACCOUNT = "use-gw-service-account";
  @SerializedName(SERIALIZED_NAME_USE_GW_SERVICE_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean useGwServiceAccount;

  public TargetCreateK8s() {
  }

  public TargetCreateK8s description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TargetCreateK8s json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public TargetCreateK8s k8sAuthType(@javax.annotation.Nullable String k8sAuthType) {
    this.k8sAuthType = k8sAuthType;
    return this;
  }

  /**
   * K8S auth type [token/certificate]
   * @return k8sAuthType
   */
  @javax.annotation.Nullable
  public String getK8sAuthType() {
    return k8sAuthType;
  }

  public void setK8sAuthType(@javax.annotation.Nullable String k8sAuthType) {
    this.k8sAuthType = k8sAuthType;
  }


  public TargetCreateK8s k8sClientCertificate(@javax.annotation.Nullable String k8sClientCertificate) {
    this.k8sClientCertificate = k8sClientCertificate;
    return this;
  }

  /**
   * Content of the k8 client certificate (PEM format) in a Base64 format
   * @return k8sClientCertificate
   */
  @javax.annotation.Nullable
  public String getK8sClientCertificate() {
    return k8sClientCertificate;
  }

  public void setK8sClientCertificate(@javax.annotation.Nullable String k8sClientCertificate) {
    this.k8sClientCertificate = k8sClientCertificate;
  }


  public TargetCreateK8s k8sClientKey(@javax.annotation.Nullable String k8sClientKey) {
    this.k8sClientKey = k8sClientKey;
    return this;
  }

  /**
   * Content of the k8 client private key (PEM format) in a Base64 format
   * @return k8sClientKey
   */
  @javax.annotation.Nullable
  public String getK8sClientKey() {
    return k8sClientKey;
  }

  public void setK8sClientKey(@javax.annotation.Nullable String k8sClientKey) {
    this.k8sClientKey = k8sClientKey;
  }


  public TargetCreateK8s k8sClusterCaCert(@javax.annotation.Nullable String k8sClusterCaCert) {
    this.k8sClusterCaCert = k8sClusterCaCert;
    return this;
  }

  /**
   * K8S cluster CA certificate
   * @return k8sClusterCaCert
   */
  @javax.annotation.Nullable
  public String getK8sClusterCaCert() {
    return k8sClusterCaCert;
  }

  public void setK8sClusterCaCert(@javax.annotation.Nullable String k8sClusterCaCert) {
    this.k8sClusterCaCert = k8sClusterCaCert;
  }


  public TargetCreateK8s k8sClusterEndpoint(@javax.annotation.Nullable String k8sClusterEndpoint) {
    this.k8sClusterEndpoint = k8sClusterEndpoint;
    return this;
  }

  /**
   * K8S cluster URL endpoint
   * @return k8sClusterEndpoint
   */
  @javax.annotation.Nullable
  public String getK8sClusterEndpoint() {
    return k8sClusterEndpoint;
  }

  public void setK8sClusterEndpoint(@javax.annotation.Nullable String k8sClusterEndpoint) {
    this.k8sClusterEndpoint = k8sClusterEndpoint;
  }


  public TargetCreateK8s k8sClusterName(@javax.annotation.Nullable String k8sClusterName) {
    this.k8sClusterName = k8sClusterName;
    return this;
  }

  /**
   * K8S cluster name
   * @return k8sClusterName
   */
  @javax.annotation.Nullable
  public String getK8sClusterName() {
    return k8sClusterName;
  }

  public void setK8sClusterName(@javax.annotation.Nullable String k8sClusterName) {
    this.k8sClusterName = k8sClusterName;
  }


  public TargetCreateK8s k8sClusterToken(@javax.annotation.Nullable String k8sClusterToken) {
    this.k8sClusterToken = k8sClusterToken;
    return this;
  }

  /**
   * K8S cluster Bearer token
   * @return k8sClusterToken
   */
  @javax.annotation.Nullable
  public String getK8sClusterToken() {
    return k8sClusterToken;
  }

  public void setK8sClusterToken(@javax.annotation.Nullable String k8sClusterToken) {
    this.k8sClusterToken = k8sClusterToken;
  }


  public TargetCreateK8s key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public TargetCreateK8s maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public TargetCreateK8s name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public TargetCreateK8s token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public TargetCreateK8s uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public TargetCreateK8s useGwServiceAccount(@javax.annotation.Nullable Boolean useGwServiceAccount) {
    this.useGwServiceAccount = useGwServiceAccount;
    return this;
  }

  /**
   * Use the GW&#39;s service account
   * @return useGwServiceAccount
   */
  @javax.annotation.Nullable
  public Boolean getUseGwServiceAccount() {
    return useGwServiceAccount;
  }

  public void setUseGwServiceAccount(@javax.annotation.Nullable Boolean useGwServiceAccount) {
    this.useGwServiceAccount = useGwServiceAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetCreateK8s targetCreateK8s = (TargetCreateK8s) o;
    return Objects.equals(this.description, targetCreateK8s.description) &&
        Objects.equals(this.json, targetCreateK8s.json) &&
        Objects.equals(this.k8sAuthType, targetCreateK8s.k8sAuthType) &&
        Objects.equals(this.k8sClientCertificate, targetCreateK8s.k8sClientCertificate) &&
        Objects.equals(this.k8sClientKey, targetCreateK8s.k8sClientKey) &&
        Objects.equals(this.k8sClusterCaCert, targetCreateK8s.k8sClusterCaCert) &&
        Objects.equals(this.k8sClusterEndpoint, targetCreateK8s.k8sClusterEndpoint) &&
        Objects.equals(this.k8sClusterName, targetCreateK8s.k8sClusterName) &&
        Objects.equals(this.k8sClusterToken, targetCreateK8s.k8sClusterToken) &&
        Objects.equals(this.key, targetCreateK8s.key) &&
        Objects.equals(this.maxVersions, targetCreateK8s.maxVersions) &&
        Objects.equals(this.name, targetCreateK8s.name) &&
        Objects.equals(this.token, targetCreateK8s.token) &&
        Objects.equals(this.uidToken, targetCreateK8s.uidToken) &&
        Objects.equals(this.useGwServiceAccount, targetCreateK8s.useGwServiceAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, json, k8sAuthType, k8sClientCertificate, k8sClientKey, k8sClusterCaCert, k8sClusterEndpoint, k8sClusterName, k8sClusterToken, key, maxVersions, name, token, uidToken, useGwServiceAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetCreateK8s {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    k8sAuthType: ").append(toIndentedString(k8sAuthType)).append("\n");
    sb.append("    k8sClientCertificate: ").append(toIndentedString(k8sClientCertificate)).append("\n");
    sb.append("    k8sClientKey: ").append(toIndentedString(k8sClientKey)).append("\n");
    sb.append("    k8sClusterCaCert: ").append(toIndentedString(k8sClusterCaCert)).append("\n");
    sb.append("    k8sClusterEndpoint: ").append(toIndentedString(k8sClusterEndpoint)).append("\n");
    sb.append("    k8sClusterName: ").append(toIndentedString(k8sClusterName)).append("\n");
    sb.append("    k8sClusterToken: ").append(toIndentedString(k8sClusterToken)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    useGwServiceAccount: ").append(toIndentedString(useGwServiceAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("k8s-auth-type");
    openapiFields.add("k8s-client-certificate");
    openapiFields.add("k8s-client-key");
    openapiFields.add("k8s-cluster-ca-cert");
    openapiFields.add("k8s-cluster-endpoint");
    openapiFields.add("k8s-cluster-name");
    openapiFields.add("k8s-cluster-token");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("use-gw-service-account");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetCreateK8s
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetCreateK8s.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetCreateK8s is not found in the empty JSON string", TargetCreateK8s.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetCreateK8s.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetCreateK8s` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TargetCreateK8s.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("k8s-auth-type") != null && !jsonObj.get("k8s-auth-type").isJsonNull()) && !jsonObj.get("k8s-auth-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-auth-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-auth-type").toString()));
      }
      if ((jsonObj.get("k8s-client-certificate") != null && !jsonObj.get("k8s-client-certificate").isJsonNull()) && !jsonObj.get("k8s-client-certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-client-certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-client-certificate").toString()));
      }
      if ((jsonObj.get("k8s-client-key") != null && !jsonObj.get("k8s-client-key").isJsonNull()) && !jsonObj.get("k8s-client-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-client-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-client-key").toString()));
      }
      if ((jsonObj.get("k8s-cluster-ca-cert") != null && !jsonObj.get("k8s-cluster-ca-cert").isJsonNull()) && !jsonObj.get("k8s-cluster-ca-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-ca-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-ca-cert").toString()));
      }
      if ((jsonObj.get("k8s-cluster-endpoint") != null && !jsonObj.get("k8s-cluster-endpoint").isJsonNull()) && !jsonObj.get("k8s-cluster-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-endpoint").toString()));
      }
      if ((jsonObj.get("k8s-cluster-name") != null && !jsonObj.get("k8s-cluster-name").isJsonNull()) && !jsonObj.get("k8s-cluster-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-name").toString()));
      }
      if ((jsonObj.get("k8s-cluster-token") != null && !jsonObj.get("k8s-cluster-token").isJsonNull()) && !jsonObj.get("k8s-cluster-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-token").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetCreateK8s.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetCreateK8s' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetCreateK8s> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetCreateK8s.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetCreateK8s>() {
           @Override
           public void write(JsonWriter out, TargetCreateK8s value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetCreateK8s read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetCreateK8s given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetCreateK8s
   * @throws IOException if the JSON string is invalid with respect to TargetCreateK8s
   */
  public static TargetCreateK8s fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetCreateK8s.class);
  }

  /**
   * Convert an instance of TargetCreateK8s to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

