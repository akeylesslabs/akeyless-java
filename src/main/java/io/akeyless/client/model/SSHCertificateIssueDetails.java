/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SSHCertificateIssueDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SSHCertificateIssueDetails {
  public static final String SERIALIZED_NAME_ALLOWED_DOMAINS = "allowed_domains";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DOMAINS)
  @javax.annotation.Nullable
  private List<String> allowedDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_USER_KEY_LENGTHS = "allowed_user_key_lengths";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USER_KEY_LENGTHS)
  @javax.annotation.Nullable
  private Map<String, Long> allowedUserKeyLengths = new HashMap<>();

  public static final String SERIALIZED_NAME_ALLOWED_USERS = "allowed_users";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USERS)
  @javax.annotation.Nullable
  private List<String> allowedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERT_TYPE = "cert_type";
  @SerializedName(SERIALIZED_NAME_CERT_TYPE)
  @javax.annotation.Nullable
  private Integer certType;

  public static final String SERIALIZED_NAME_CRITICAL_OPTIONS = "critical_options";
  @SerializedName(SERIALIZED_NAME_CRITICAL_OPTIONS)
  @javax.annotation.Nullable
  private Map<String, String> criticalOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  @javax.annotation.Nullable
  private Map<String, String> extensions = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTERNALLY_PROVIDED_USER_SUB_CLAIM_KEY = "externally_provided_user_sub_claim_key";
  @SerializedName(SERIALIZED_NAME_EXTERNALLY_PROVIDED_USER_SUB_CLAIM_KEY)
  @javax.annotation.Nullable
  private String externallyProvidedUserSubClaimKey;

  public static final String SERIALIZED_NAME_IS_EXTERNALLY_PROVIDED_USER = "is_externally_provided_user";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNALLY_PROVIDED_USER)
  @javax.annotation.Nullable
  private Boolean isExternallyProvidedUser;

  public static final String SERIALIZED_NAME_PRINCIPALS = "principals";
  @SerializedName(SERIALIZED_NAME_PRINCIPALS)
  @javax.annotation.Nullable
  private List<String> principals = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_KEY_ID = "static_key_id";
  @SerializedName(SERIALIZED_NAME_STATIC_KEY_ID)
  @javax.annotation.Nullable
  private String staticKeyId;

  public SSHCertificateIssueDetails() {
  }

  public SSHCertificateIssueDetails allowedDomains(@javax.annotation.Nullable List<String> allowedDomains) {
    this.allowedDomains = allowedDomains;
    return this;
  }

  public SSHCertificateIssueDetails addAllowedDomainsItem(String allowedDomainsItem) {
    if (this.allowedDomains == null) {
      this.allowedDomains = new ArrayList<>();
    }
    this.allowedDomains.add(allowedDomainsItem);
    return this;
  }

  /**
   * Relevant for host certificate
   * @return allowedDomains
   */
  @javax.annotation.Nullable
  public List<String> getAllowedDomains() {
    return allowedDomains;
  }

  public void setAllowedDomains(@javax.annotation.Nullable List<String> allowedDomains) {
    this.allowedDomains = allowedDomains;
  }


  public SSHCertificateIssueDetails allowedUserKeyLengths(@javax.annotation.Nullable Map<String, Long> allowedUserKeyLengths) {
    this.allowedUserKeyLengths = allowedUserKeyLengths;
    return this;
  }

  public SSHCertificateIssueDetails putAllowedUserKeyLengthsItem(String key, Long allowedUserKeyLengthsItem) {
    if (this.allowedUserKeyLengths == null) {
      this.allowedUserKeyLengths = new HashMap<>();
    }
    this.allowedUserKeyLengths.put(key, allowedUserKeyLengthsItem);
    return this;
  }

  /**
   * Get allowedUserKeyLengths
   * @return allowedUserKeyLengths
   */
  @javax.annotation.Nullable
  public Map<String, Long> getAllowedUserKeyLengths() {
    return allowedUserKeyLengths;
  }

  public void setAllowedUserKeyLengths(@javax.annotation.Nullable Map<String, Long> allowedUserKeyLengths) {
    this.allowedUserKeyLengths = allowedUserKeyLengths;
  }


  public SSHCertificateIssueDetails allowedUsers(@javax.annotation.Nullable List<String> allowedUsers) {
    this.allowedUsers = allowedUsers;
    return this;
  }

  public SSHCertificateIssueDetails addAllowedUsersItem(String allowedUsersItem) {
    if (this.allowedUsers == null) {
      this.allowedUsers = new ArrayList<>();
    }
    this.allowedUsers.add(allowedUsersItem);
    return this;
  }

  /**
   * Relevant for user certificate
   * @return allowedUsers
   */
  @javax.annotation.Nullable
  public List<String> getAllowedUsers() {
    return allowedUsers;
  }

  public void setAllowedUsers(@javax.annotation.Nullable List<String> allowedUsers) {
    this.allowedUsers = allowedUsers;
  }


  public SSHCertificateIssueDetails certType(@javax.annotation.Nullable Integer certType) {
    this.certType = certType;
    return this;
  }

  /**
   * Get certType
   * @return certType
   */
  @javax.annotation.Nullable
  public Integer getCertType() {
    return certType;
  }

  public void setCertType(@javax.annotation.Nullable Integer certType) {
    this.certType = certType;
  }


  public SSHCertificateIssueDetails criticalOptions(@javax.annotation.Nullable Map<String, String> criticalOptions) {
    this.criticalOptions = criticalOptions;
    return this;
  }

  public SSHCertificateIssueDetails putCriticalOptionsItem(String key, String criticalOptionsItem) {
    if (this.criticalOptions == null) {
      this.criticalOptions = new HashMap<>();
    }
    this.criticalOptions.put(key, criticalOptionsItem);
    return this;
  }

  /**
   * Get criticalOptions
   * @return criticalOptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getCriticalOptions() {
    return criticalOptions;
  }

  public void setCriticalOptions(@javax.annotation.Nullable Map<String, String> criticalOptions) {
    this.criticalOptions = criticalOptions;
  }


  public SSHCertificateIssueDetails extensions(@javax.annotation.Nullable Map<String, String> extensions) {
    this.extensions = extensions;
    return this;
  }

  public SSHCertificateIssueDetails putExtensionsItem(String key, String extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new HashMap<>();
    }
    this.extensions.put(key, extensionsItem);
    return this;
  }

  /**
   * Get extensions
   * @return extensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtensions() {
    return extensions;
  }

  public void setExtensions(@javax.annotation.Nullable Map<String, String> extensions) {
    this.extensions = extensions;
  }


  public SSHCertificateIssueDetails externallyProvidedUserSubClaimKey(@javax.annotation.Nullable String externallyProvidedUserSubClaimKey) {
    this.externallyProvidedUserSubClaimKey = externallyProvidedUserSubClaimKey;
    return this;
  }

  /**
   * ExternallyProvidedUserSubClaimKey is the claim key name where the user name should be taken from
   * @return externallyProvidedUserSubClaimKey
   */
  @javax.annotation.Nullable
  public String getExternallyProvidedUserSubClaimKey() {
    return externallyProvidedUserSubClaimKey;
  }

  public void setExternallyProvidedUserSubClaimKey(@javax.annotation.Nullable String externallyProvidedUserSubClaimKey) {
    this.externallyProvidedUserSubClaimKey = externallyProvidedUserSubClaimKey;
  }


  public SSHCertificateIssueDetails isExternallyProvidedUser(@javax.annotation.Nullable Boolean isExternallyProvidedUser) {
    this.isExternallyProvidedUser = isExternallyProvidedUser;
    return this;
  }

  /**
   * IsExternallyProvidedUser is true if allow users should be taken from claims and not from AllowedUsers
   * @return isExternallyProvidedUser
   */
  @javax.annotation.Nullable
  public Boolean getIsExternallyProvidedUser() {
    return isExternallyProvidedUser;
  }

  public void setIsExternallyProvidedUser(@javax.annotation.Nullable Boolean isExternallyProvidedUser) {
    this.isExternallyProvidedUser = isExternallyProvidedUser;
  }


  public SSHCertificateIssueDetails principals(@javax.annotation.Nullable List<String> principals) {
    this.principals = principals;
    return this;
  }

  public SSHCertificateIssueDetails addPrincipalsItem(String principalsItem) {
    if (this.principals == null) {
      this.principals = new ArrayList<>();
    }
    this.principals.add(principalsItem);
    return this;
  }

  /**
   * Get principals
   * @return principals
   */
  @javax.annotation.Nullable
  public List<String> getPrincipals() {
    return principals;
  }

  public void setPrincipals(@javax.annotation.Nullable List<String> principals) {
    this.principals = principals;
  }


  public SSHCertificateIssueDetails staticKeyId(@javax.annotation.Nullable String staticKeyId) {
    this.staticKeyId = staticKeyId;
    return this;
  }

  /**
   * In case it is empty, the key ID will be combination of user identifiers and a random string
   * @return staticKeyId
   */
  @javax.annotation.Nullable
  public String getStaticKeyId() {
    return staticKeyId;
  }

  public void setStaticKeyId(@javax.annotation.Nullable String staticKeyId) {
    this.staticKeyId = staticKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSHCertificateIssueDetails ssHCertificateIssueDetails = (SSHCertificateIssueDetails) o;
    return Objects.equals(this.allowedDomains, ssHCertificateIssueDetails.allowedDomains) &&
        Objects.equals(this.allowedUserKeyLengths, ssHCertificateIssueDetails.allowedUserKeyLengths) &&
        Objects.equals(this.allowedUsers, ssHCertificateIssueDetails.allowedUsers) &&
        Objects.equals(this.certType, ssHCertificateIssueDetails.certType) &&
        Objects.equals(this.criticalOptions, ssHCertificateIssueDetails.criticalOptions) &&
        Objects.equals(this.extensions, ssHCertificateIssueDetails.extensions) &&
        Objects.equals(this.externallyProvidedUserSubClaimKey, ssHCertificateIssueDetails.externallyProvidedUserSubClaimKey) &&
        Objects.equals(this.isExternallyProvidedUser, ssHCertificateIssueDetails.isExternallyProvidedUser) &&
        Objects.equals(this.principals, ssHCertificateIssueDetails.principals) &&
        Objects.equals(this.staticKeyId, ssHCertificateIssueDetails.staticKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedDomains, allowedUserKeyLengths, allowedUsers, certType, criticalOptions, extensions, externallyProvidedUserSubClaimKey, isExternallyProvidedUser, principals, staticKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSHCertificateIssueDetails {\n");
    sb.append("    allowedDomains: ").append(toIndentedString(allowedDomains)).append("\n");
    sb.append("    allowedUserKeyLengths: ").append(toIndentedString(allowedUserKeyLengths)).append("\n");
    sb.append("    allowedUsers: ").append(toIndentedString(allowedUsers)).append("\n");
    sb.append("    certType: ").append(toIndentedString(certType)).append("\n");
    sb.append("    criticalOptions: ").append(toIndentedString(criticalOptions)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    externallyProvidedUserSubClaimKey: ").append(toIndentedString(externallyProvidedUserSubClaimKey)).append("\n");
    sb.append("    isExternallyProvidedUser: ").append(toIndentedString(isExternallyProvidedUser)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    staticKeyId: ").append(toIndentedString(staticKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_domains");
    openapiFields.add("allowed_user_key_lengths");
    openapiFields.add("allowed_users");
    openapiFields.add("cert_type");
    openapiFields.add("critical_options");
    openapiFields.add("extensions");
    openapiFields.add("externally_provided_user_sub_claim_key");
    openapiFields.add("is_externally_provided_user");
    openapiFields.add("principals");
    openapiFields.add("static_key_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSHCertificateIssueDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSHCertificateIssueDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSHCertificateIssueDetails is not found in the empty JSON string", SSHCertificateIssueDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SSHCertificateIssueDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSHCertificateIssueDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_domains") != null && !jsonObj.get("allowed_domains").isJsonNull() && !jsonObj.get("allowed_domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_domains` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_domains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_users") != null && !jsonObj.get("allowed_users").isJsonNull() && !jsonObj.get("allowed_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_users` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_users").toString()));
      }
      if ((jsonObj.get("externally_provided_user_sub_claim_key") != null && !jsonObj.get("externally_provided_user_sub_claim_key").isJsonNull()) && !jsonObj.get("externally_provided_user_sub_claim_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externally_provided_user_sub_claim_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externally_provided_user_sub_claim_key").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("principals") != null && !jsonObj.get("principals").isJsonNull() && !jsonObj.get("principals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principals` to be an array in the JSON string but got `%s`", jsonObj.get("principals").toString()));
      }
      if ((jsonObj.get("static_key_id") != null && !jsonObj.get("static_key_id").isJsonNull()) && !jsonObj.get("static_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static_key_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSHCertificateIssueDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSHCertificateIssueDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSHCertificateIssueDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSHCertificateIssueDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SSHCertificateIssueDetails>() {
           @Override
           public void write(JsonWriter out, SSHCertificateIssueDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSHCertificateIssueDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSHCertificateIssueDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSHCertificateIssueDetails
   * @throws IOException if the JSON string is invalid with respect to SSHCertificateIssueDetails
   */
  public static SSHCertificateIssueDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSHCertificateIssueDetails.class);
  }

  /**
   * Convert an instance of SSHCertificateIssueDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

