/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * EKSTargetDetails defines details related to connecting to a EKS (Elastic Container Service) target
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class EKSTargetDetails {
  public static final String SERIALIZED_NAME_EKS_ACCESS_KEY_ID = "eks_access_key_id";
  @SerializedName(SERIALIZED_NAME_EKS_ACCESS_KEY_ID)
  @javax.annotation.Nullable
  private String eksAccessKeyId;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_CA_CERTIFICATE = "eks_cluster_ca_certificate";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_CA_CERTIFICATE)
  @javax.annotation.Nullable
  private String eksClusterCaCertificate;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_ENDPOINT = "eks_cluster_endpoint";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_ENDPOINT)
  @javax.annotation.Nullable
  private String eksClusterEndpoint;

  public static final String SERIALIZED_NAME_EKS_CLUSTER_NAME = "eks_cluster_name";
  @SerializedName(SERIALIZED_NAME_EKS_CLUSTER_NAME)
  @javax.annotation.Nullable
  private String eksClusterName;

  public static final String SERIALIZED_NAME_EKS_REGION = "eks_region";
  @SerializedName(SERIALIZED_NAME_EKS_REGION)
  @javax.annotation.Nullable
  private String eksRegion;

  public static final String SERIALIZED_NAME_EKS_SECRET_ACCESS_KEY = "eks_secret_access_key";
  @SerializedName(SERIALIZED_NAME_EKS_SECRET_ACCESS_KEY)
  @javax.annotation.Nullable
  private String eksSecretAccessKey;

  public static final String SERIALIZED_NAME_USE_GW_CLOUD_IDENTITY = "use_gw_cloud_identity";
  @SerializedName(SERIALIZED_NAME_USE_GW_CLOUD_IDENTITY)
  @javax.annotation.Nullable
  private Boolean useGwCloudIdentity;

  public EKSTargetDetails() {
  }

  public EKSTargetDetails eksAccessKeyId(@javax.annotation.Nullable String eksAccessKeyId) {
    this.eksAccessKeyId = eksAccessKeyId;
    return this;
  }

  /**
   * Get eksAccessKeyId
   * @return eksAccessKeyId
   */
  @javax.annotation.Nullable
  public String getEksAccessKeyId() {
    return eksAccessKeyId;
  }

  public void setEksAccessKeyId(@javax.annotation.Nullable String eksAccessKeyId) {
    this.eksAccessKeyId = eksAccessKeyId;
  }


  public EKSTargetDetails eksClusterCaCertificate(@javax.annotation.Nullable String eksClusterCaCertificate) {
    this.eksClusterCaCertificate = eksClusterCaCertificate;
    return this;
  }

  /**
   * Get eksClusterCaCertificate
   * @return eksClusterCaCertificate
   */
  @javax.annotation.Nullable
  public String getEksClusterCaCertificate() {
    return eksClusterCaCertificate;
  }

  public void setEksClusterCaCertificate(@javax.annotation.Nullable String eksClusterCaCertificate) {
    this.eksClusterCaCertificate = eksClusterCaCertificate;
  }


  public EKSTargetDetails eksClusterEndpoint(@javax.annotation.Nullable String eksClusterEndpoint) {
    this.eksClusterEndpoint = eksClusterEndpoint;
    return this;
  }

  /**
   * Get eksClusterEndpoint
   * @return eksClusterEndpoint
   */
  @javax.annotation.Nullable
  public String getEksClusterEndpoint() {
    return eksClusterEndpoint;
  }

  public void setEksClusterEndpoint(@javax.annotation.Nullable String eksClusterEndpoint) {
    this.eksClusterEndpoint = eksClusterEndpoint;
  }


  public EKSTargetDetails eksClusterName(@javax.annotation.Nullable String eksClusterName) {
    this.eksClusterName = eksClusterName;
    return this;
  }

  /**
   * Get eksClusterName
   * @return eksClusterName
   */
  @javax.annotation.Nullable
  public String getEksClusterName() {
    return eksClusterName;
  }

  public void setEksClusterName(@javax.annotation.Nullable String eksClusterName) {
    this.eksClusterName = eksClusterName;
  }


  public EKSTargetDetails eksRegion(@javax.annotation.Nullable String eksRegion) {
    this.eksRegion = eksRegion;
    return this;
  }

  /**
   * Get eksRegion
   * @return eksRegion
   */
  @javax.annotation.Nullable
  public String getEksRegion() {
    return eksRegion;
  }

  public void setEksRegion(@javax.annotation.Nullable String eksRegion) {
    this.eksRegion = eksRegion;
  }


  public EKSTargetDetails eksSecretAccessKey(@javax.annotation.Nullable String eksSecretAccessKey) {
    this.eksSecretAccessKey = eksSecretAccessKey;
    return this;
  }

  /**
   * Get eksSecretAccessKey
   * @return eksSecretAccessKey
   */
  @javax.annotation.Nullable
  public String getEksSecretAccessKey() {
    return eksSecretAccessKey;
  }

  public void setEksSecretAccessKey(@javax.annotation.Nullable String eksSecretAccessKey) {
    this.eksSecretAccessKey = eksSecretAccessKey;
  }


  public EKSTargetDetails useGwCloudIdentity(@javax.annotation.Nullable Boolean useGwCloudIdentity) {
    this.useGwCloudIdentity = useGwCloudIdentity;
    return this;
  }

  /**
   * Get useGwCloudIdentity
   * @return useGwCloudIdentity
   */
  @javax.annotation.Nullable
  public Boolean getUseGwCloudIdentity() {
    return useGwCloudIdentity;
  }

  public void setUseGwCloudIdentity(@javax.annotation.Nullable Boolean useGwCloudIdentity) {
    this.useGwCloudIdentity = useGwCloudIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EKSTargetDetails ekSTargetDetails = (EKSTargetDetails) o;
    return Objects.equals(this.eksAccessKeyId, ekSTargetDetails.eksAccessKeyId) &&
        Objects.equals(this.eksClusterCaCertificate, ekSTargetDetails.eksClusterCaCertificate) &&
        Objects.equals(this.eksClusterEndpoint, ekSTargetDetails.eksClusterEndpoint) &&
        Objects.equals(this.eksClusterName, ekSTargetDetails.eksClusterName) &&
        Objects.equals(this.eksRegion, ekSTargetDetails.eksRegion) &&
        Objects.equals(this.eksSecretAccessKey, ekSTargetDetails.eksSecretAccessKey) &&
        Objects.equals(this.useGwCloudIdentity, ekSTargetDetails.useGwCloudIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eksAccessKeyId, eksClusterCaCertificate, eksClusterEndpoint, eksClusterName, eksRegion, eksSecretAccessKey, useGwCloudIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EKSTargetDetails {\n");
    sb.append("    eksAccessKeyId: ").append(toIndentedString(eksAccessKeyId)).append("\n");
    sb.append("    eksClusterCaCertificate: ").append(toIndentedString(eksClusterCaCertificate)).append("\n");
    sb.append("    eksClusterEndpoint: ").append(toIndentedString(eksClusterEndpoint)).append("\n");
    sb.append("    eksClusterName: ").append(toIndentedString(eksClusterName)).append("\n");
    sb.append("    eksRegion: ").append(toIndentedString(eksRegion)).append("\n");
    sb.append("    eksSecretAccessKey: ").append(toIndentedString(eksSecretAccessKey)).append("\n");
    sb.append("    useGwCloudIdentity: ").append(toIndentedString(useGwCloudIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eks_access_key_id");
    openapiFields.add("eks_cluster_ca_certificate");
    openapiFields.add("eks_cluster_endpoint");
    openapiFields.add("eks_cluster_name");
    openapiFields.add("eks_region");
    openapiFields.add("eks_secret_access_key");
    openapiFields.add("use_gw_cloud_identity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EKSTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EKSTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EKSTargetDetails is not found in the empty JSON string", EKSTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EKSTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EKSTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eks_access_key_id") != null && !jsonObj.get("eks_access_key_id").isJsonNull()) && !jsonObj.get("eks_access_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_access_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_access_key_id").toString()));
      }
      if ((jsonObj.get("eks_cluster_ca_certificate") != null && !jsonObj.get("eks_cluster_ca_certificate").isJsonNull()) && !jsonObj.get("eks_cluster_ca_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_cluster_ca_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_cluster_ca_certificate").toString()));
      }
      if ((jsonObj.get("eks_cluster_endpoint") != null && !jsonObj.get("eks_cluster_endpoint").isJsonNull()) && !jsonObj.get("eks_cluster_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_cluster_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_cluster_endpoint").toString()));
      }
      if ((jsonObj.get("eks_cluster_name") != null && !jsonObj.get("eks_cluster_name").isJsonNull()) && !jsonObj.get("eks_cluster_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_cluster_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_cluster_name").toString()));
      }
      if ((jsonObj.get("eks_region") != null && !jsonObj.get("eks_region").isJsonNull()) && !jsonObj.get("eks_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_region").toString()));
      }
      if ((jsonObj.get("eks_secret_access_key") != null && !jsonObj.get("eks_secret_access_key").isJsonNull()) && !jsonObj.get("eks_secret_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eks_secret_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eks_secret_access_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EKSTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EKSTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EKSTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EKSTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EKSTargetDetails>() {
           @Override
           public void write(JsonWriter out, EKSTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EKSTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EKSTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EKSTargetDetails
   * @throws IOException if the JSON string is invalid with respect to EKSTargetDetails
   */
  public static EKSTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EKSTargetDetails.class);
  }

  /**
   * Convert an instance of EKSTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

