/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * K8SPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class K8SPayload {
  public static final String SERIALIZED_NAME_CA = "ca";
  @SerializedName(SERIALIZED_NAME_CA)
  @javax.annotation.Nullable
  private List<Integer> ca = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_CERT = "client_cert";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT)
  @javax.annotation.Nullable
  private List<Integer> clientCert = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_KEY = "client_key";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  @javax.annotation.Nullable
  private List<Integer> clientKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  @javax.annotation.Nullable
  private String server;

  public static final String SERIALIZED_NAME_SKIP_SYSTEM = "skip_system";
  @SerializedName(SERIALIZED_NAME_SKIP_SYSTEM)
  @javax.annotation.Nullable
  private Boolean skipSystem;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public K8SPayload() {
  }

  public K8SPayload ca(@javax.annotation.Nullable List<Integer> ca) {
    this.ca = ca;
    return this;
  }

  public K8SPayload addCaItem(Integer caItem) {
    if (this.ca == null) {
      this.ca = new ArrayList<>();
    }
    this.ca.add(caItem);
    return this;
  }

  /**
   * Get ca
   * @return ca
   */
  @javax.annotation.Nullable
  public List<Integer> getCa() {
    return ca;
  }

  public void setCa(@javax.annotation.Nullable List<Integer> ca) {
    this.ca = ca;
  }


  public K8SPayload clientCert(@javax.annotation.Nullable List<Integer> clientCert) {
    this.clientCert = clientCert;
    return this;
  }

  public K8SPayload addClientCertItem(Integer clientCertItem) {
    if (this.clientCert == null) {
      this.clientCert = new ArrayList<>();
    }
    this.clientCert.add(clientCertItem);
    return this;
  }

  /**
   * Get clientCert
   * @return clientCert
   */
  @javax.annotation.Nullable
  public List<Integer> getClientCert() {
    return clientCert;
  }

  public void setClientCert(@javax.annotation.Nullable List<Integer> clientCert) {
    this.clientCert = clientCert;
  }


  public K8SPayload clientKey(@javax.annotation.Nullable List<Integer> clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  public K8SPayload addClientKeyItem(Integer clientKeyItem) {
    if (this.clientKey == null) {
      this.clientKey = new ArrayList<>();
    }
    this.clientKey.add(clientKeyItem);
    return this;
  }

  /**
   * Get clientKey
   * @return clientKey
   */
  @javax.annotation.Nullable
  public List<Integer> getClientKey() {
    return clientKey;
  }

  public void setClientKey(@javax.annotation.Nullable List<Integer> clientKey) {
    this.clientKey = clientKey;
  }


  public K8SPayload namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public K8SPayload password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public K8SPayload server(@javax.annotation.Nullable String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(@javax.annotation.Nullable String server) {
    this.server = server;
  }


  public K8SPayload skipSystem(@javax.annotation.Nullable Boolean skipSystem) {
    this.skipSystem = skipSystem;
    return this;
  }

  /**
   * Get skipSystem
   * @return skipSystem
   */
  @javax.annotation.Nullable
  public Boolean getSkipSystem() {
    return skipSystem;
  }

  public void setSkipSystem(@javax.annotation.Nullable Boolean skipSystem) {
    this.skipSystem = skipSystem;
  }


  public K8SPayload token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public K8SPayload username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    K8SPayload k8SPayload = (K8SPayload) o;
    return Objects.equals(this.ca, k8SPayload.ca) &&
        Objects.equals(this.clientCert, k8SPayload.clientCert) &&
        Objects.equals(this.clientKey, k8SPayload.clientKey) &&
        Objects.equals(this.namespace, k8SPayload.namespace) &&
        Objects.equals(this.password, k8SPayload.password) &&
        Objects.equals(this.server, k8SPayload.server) &&
        Objects.equals(this.skipSystem, k8SPayload.skipSystem) &&
        Objects.equals(this.token, k8SPayload.token) &&
        Objects.equals(this.username, k8SPayload.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, clientCert, clientKey, namespace, password, server, skipSystem, token, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class K8SPayload {\n");
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    clientCert: ").append(toIndentedString(clientCert)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    skipSystem: ").append(toIndentedString(skipSystem)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ca");
    openapiFields.add("client_cert");
    openapiFields.add("client_key");
    openapiFields.add("namespace");
    openapiFields.add("password");
    openapiFields.add("server");
    openapiFields.add("skip_system");
    openapiFields.add("token");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to K8SPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!K8SPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in K8SPayload is not found in the empty JSON string", K8SPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!K8SPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `K8SPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ca") != null && !jsonObj.get("ca").isJsonNull() && !jsonObj.get("ca").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca` to be an array in the JSON string but got `%s`", jsonObj.get("ca").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("client_cert") != null && !jsonObj.get("client_cert").isJsonNull() && !jsonObj.get("client_cert").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_cert` to be an array in the JSON string but got `%s`", jsonObj.get("client_cert").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("client_key") != null && !jsonObj.get("client_key").isJsonNull() && !jsonObj.get("client_key").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_key` to be an array in the JSON string but got `%s`", jsonObj.get("client_key").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!K8SPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'K8SPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<K8SPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(K8SPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<K8SPayload>() {
           @Override
           public void write(JsonWriter out, K8SPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public K8SPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of K8SPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of K8SPayload
   * @throws IOException if the JSON string is invalid with respect to K8SPayload
   */
  public static K8SPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, K8SPayload.class);
  }

  /**
   * Convert an instance of K8SPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

