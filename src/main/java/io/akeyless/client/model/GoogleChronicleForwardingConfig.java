/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * GoogleChronicleForwardingConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GoogleChronicleForwardingConfig {
  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  @javax.annotation.Nullable
  private String customerId;

  public static final String SERIALIZED_NAME_LOG_TYPE = "log_type";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  @javax.annotation.Nullable
  private String logType;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_KEY = "service_account_key";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_KEY)
  @javax.annotation.Nullable
  private String serviceAccountKey;

  public GoogleChronicleForwardingConfig() {
  }

  public GoogleChronicleForwardingConfig customerId(@javax.annotation.Nullable String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(@javax.annotation.Nullable String customerId) {
    this.customerId = customerId;
  }


  public GoogleChronicleForwardingConfig logType(@javax.annotation.Nullable String logType) {
    this.logType = logType;
    return this;
  }

  /**
   * Get logType
   * @return logType
   */
  @javax.annotation.Nullable
  public String getLogType() {
    return logType;
  }

  public void setLogType(@javax.annotation.Nullable String logType) {
    this.logType = logType;
  }


  public GoogleChronicleForwardingConfig region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }


  public GoogleChronicleForwardingConfig serviceAccountKey(@javax.annotation.Nullable String serviceAccountKey) {
    this.serviceAccountKey = serviceAccountKey;
    return this;
  }

  /**
   * Get serviceAccountKey
   * @return serviceAccountKey
   */
  @javax.annotation.Nullable
  public String getServiceAccountKey() {
    return serviceAccountKey;
  }

  public void setServiceAccountKey(@javax.annotation.Nullable String serviceAccountKey) {
    this.serviceAccountKey = serviceAccountKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChronicleForwardingConfig googleChronicleForwardingConfig = (GoogleChronicleForwardingConfig) o;
    return Objects.equals(this.customerId, googleChronicleForwardingConfig.customerId) &&
        Objects.equals(this.logType, googleChronicleForwardingConfig.logType) &&
        Objects.equals(this.region, googleChronicleForwardingConfig.region) &&
        Objects.equals(this.serviceAccountKey, googleChronicleForwardingConfig.serviceAccountKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerId, logType, region, serviceAccountKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChronicleForwardingConfig {\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    serviceAccountKey: ").append(toIndentedString(serviceAccountKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_id");
    openapiFields.add("log_type");
    openapiFields.add("region");
    openapiFields.add("service_account_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChronicleForwardingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChronicleForwardingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChronicleForwardingConfig is not found in the empty JSON string", GoogleChronicleForwardingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChronicleForwardingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChronicleForwardingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("log_type") != null && !jsonObj.get("log_type").isJsonNull()) && !jsonObj.get("log_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_type").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("service_account_key") != null && !jsonObj.get("service_account_key").isJsonNull()) && !jsonObj.get("service_account_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_account_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_account_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChronicleForwardingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChronicleForwardingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChronicleForwardingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChronicleForwardingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChronicleForwardingConfig>() {
           @Override
           public void write(JsonWriter out, GoogleChronicleForwardingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChronicleForwardingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChronicleForwardingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChronicleForwardingConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleChronicleForwardingConfig
   */
  public static GoogleChronicleForwardingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChronicleForwardingConfig.class);
  }

  /**
   * Convert an instance of GoogleChronicleForwardingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

