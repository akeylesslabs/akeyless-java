/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UpdateItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateItem {
  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  @javax.annotation.Nullable
  private String accessibility = "regular";

  public static final String SERIALIZED_NAME_ADD_TAG = "add-tag";
  @SerializedName(SERIALIZED_NAME_ADD_TAG)
  @javax.annotation.Nullable
  private List<String> addTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERT_FILE_DATA = "cert-file-data";
  @SerializedName(SERIALIZED_NAME_CERT_FILE_DATA)
  @javax.annotation.Nullable
  private String certFileData;

  public static final String SERIALIZED_NAME_CERTIFICATE_FORMAT = "certificate-format";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_FORMAT)
  @javax.annotation.Nullable
  private String certificateFormat;

  public static final String SERIALIZED_NAME_CHANGE_EVENT = "change-event";
  @SerializedName(SERIALIZED_NAME_CHANGE_EVENT)
  @javax.annotation.Nullable
  private String changeEvent;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description = "default_metadata";

  public static final String SERIALIZED_NAME_EXPIRATION_EVENT_IN = "expiration-event-in";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_EVENT_IN)
  @javax.annotation.Nullable
  private List<String> expirationEventIn = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_PROVIDER = "host-provider";
  @SerializedName(SERIALIZED_NAME_HOST_PROVIDER)
  @javax.annotation.Nullable
  private String hostProvider;

  public static final String SERIALIZED_NAME_ITEM_CUSTOM_FIELDS = "item-custom-fields";
  @SerializedName(SERIALIZED_NAME_ITEM_CUSTOM_FIELDS)
  @javax.annotation.Nullable
  private Map<String, String> itemCustomFields = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_METADATA = "new-metadata";
  @SerializedName(SERIALIZED_NAME_NEW_METADATA)
  @javax.annotation.Nullable
  private String newMetadata = "default_metadata";

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_RM_TAG = "rm-tag";
  @SerializedName(SERIALIZED_NAME_RM_TAG)
  @javax.annotation.Nullable
  private List<String> rmTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT = "rotate-after-disconnect";
  @SerializedName(SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT)
  @javax.annotation.Nullable
  private String rotateAfterDisconnect = "false";

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ADD_HOST = "secure-access-add-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ADD_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessAddHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER = "secure-access-allow-external-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER)
  @javax.annotation.Nullable
  private String secureAccessAllowExternalUser;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ALLOW_PORT_FORWADING = "secure-access-allow-port-forwading";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ALLOW_PORT_FORWADING)
  @javax.annotation.Nullable
  private Boolean secureAccessAllowPortForwading;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_API = "secure-access-api";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_API)
  @javax.annotation.Nullable
  private String secureAccessApi;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_AWS_ACCOUNT_ID = "secure-access-aws-account-id";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_AWS_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String secureAccessAwsAccountId;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_AWS_NATIVE_CLI = "secure-access-aws-native-cli";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_AWS_NATIVE_CLI)
  @javax.annotation.Nullable
  private Boolean secureAccessAwsNativeCli;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_AWS_REGION = "secure-access-aws-region";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_AWS_REGION)
  @javax.annotation.Nullable
  private String secureAccessAwsRegion;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_API = "secure-access-bastion-api";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_API)
  @javax.annotation.Nullable
  private String secureAccessBastionApi;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_SSH = "secure-access-bastion-ssh";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_SSH)
  @javax.annotation.Nullable
  private String secureAccessBastionSsh;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CLUSTER_ENDPOINT = "secure-access-cluster-endpoint";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CLUSTER_ENDPOINT)
  @javax.annotation.Nullable
  private String secureAccessClusterEndpoint;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DASHBOARD_URL = "secure-access-dashboard-url";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DASHBOARD_URL)
  @javax.annotation.Nullable
  private String secureAccessDashboardUrl;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_NAME = "secure-access-db-name";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_NAME)
  @javax.annotation.Nullable
  private String secureAccessDbName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA = "secure-access-db-schema";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA)
  @javax.annotation.Nullable
  private String secureAccessDbSchema;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_GATEWAY = "secure-access-gateway";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_GATEWAY)
  @javax.annotation.Nullable
  private String secureAccessGateway;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RD_GATEWAY_SERVER = "secure-access-rd-gateway-server";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RD_GATEWAY_SERVER)
  @javax.annotation.Nullable
  private String secureAccessRdGatewayServer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN = "secure-access-rdp-domain";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN)
  @javax.annotation.Nullable
  private String secureAccessRdpDomain;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_USER = "secure-access-rdp-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_USER)
  @javax.annotation.Nullable
  private String secureAccessRdpUser;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RM_HOST = "secure-access-rm-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RM_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessRmHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_SSH = "secure-access-ssh";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_SSH)
  @javax.annotation.Nullable
  private String secureAccessSsh;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS = "secure-access-ssh-creds";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS)
  @javax.annotation.Nullable
  private String secureAccessSshCreds;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS_USER = "secure-access-ssh-creds-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_SSH_CREDS_USER)
  @javax.annotation.Nullable
  private String secureAccessSshCredsUser;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_URL = "secure-access-url";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_URL)
  @javax.annotation.Nullable
  private String secureAccessUrl;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_BASTION = "secure-access-use-internal-bastion";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_BASTION)
  @javax.annotation.Nullable
  private Boolean secureAccessUseInternalBastion;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_SSH_ACCESS = "secure-access-use-internal-ssh-access";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_USE_INTERNAL_SSH_ACCESS)
  @javax.annotation.Nullable
  private Boolean secureAccessUseInternalSshAccess;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING = "secure-access-web-browsing";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING)
  @javax.annotation.Nullable
  private Boolean secureAccessWebBrowsing = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY = "secure-access-web-proxy";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY)
  @javax.annotation.Nullable
  private Boolean secureAccessWebProxy = false;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public UpdateItem() {
  }

  public UpdateItem providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }


  public UpdateItem accessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * for personal password manager
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
  }


  public UpdateItem addTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
    return this;
  }

  public UpdateItem addAddTagItem(String addTagItem) {
    if (this.addTag == null) {
      this.addTag = new ArrayList<>();
    }
    this.addTag.add(addTagItem);
    return this;
  }

  /**
   * List of the new tags that will be attached to this item
   * @return addTag
   */
  @javax.annotation.Nullable
  public List<String> getAddTag() {
    return addTag;
  }

  public void setAddTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
  }


  public UpdateItem certFileData(@javax.annotation.Nullable String certFileData) {
    this.certFileData = certFileData;
    return this;
  }

  /**
   * PEM Certificate in a Base64 format. Used for updating RSA keys&#39; certificates.
   * @return certFileData
   */
  @javax.annotation.Nullable
  public String getCertFileData() {
    return certFileData;
  }

  public void setCertFileData(@javax.annotation.Nullable String certFileData) {
    this.certFileData = certFileData;
  }


  public UpdateItem certificateFormat(@javax.annotation.Nullable String certificateFormat) {
    this.certificateFormat = certificateFormat;
    return this;
  }

  /**
   * Get certificateFormat
   * @return certificateFormat
   */
  @javax.annotation.Nullable
  public String getCertificateFormat() {
    return certificateFormat;
  }

  public void setCertificateFormat(@javax.annotation.Nullable String certificateFormat) {
    this.certificateFormat = certificateFormat;
  }


  public UpdateItem changeEvent(@javax.annotation.Nullable String changeEvent) {
    this.changeEvent = changeEvent;
    return this;
  }

  /**
   * Trigger an event when a secret value changed [true/false] (Relevant only for Static Secret)
   * @return changeEvent
   */
  @javax.annotation.Nullable
  public String getChangeEvent() {
    return changeEvent;
  }

  public void setChangeEvent(@javax.annotation.Nullable String changeEvent) {
    this.changeEvent = changeEvent;
  }


  public UpdateItem deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public UpdateItem description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateItem expirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
    return this;
  }

  public UpdateItem addExpirationEventInItem(String expirationEventInItem) {
    if (this.expirationEventIn == null) {
      this.expirationEventIn = new ArrayList<>();
    }
    this.expirationEventIn.add(expirationEventInItem);
    return this;
  }

  /**
   * How many days before the expiration of the certificate would you like to be notified.
   * @return expirationEventIn
   */
  @javax.annotation.Nullable
  public List<String> getExpirationEventIn() {
    return expirationEventIn;
  }

  public void setExpirationEventIn(@javax.annotation.Nullable List<String> expirationEventIn) {
    this.expirationEventIn = expirationEventIn;
  }


  public UpdateItem hostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
    return this;
  }

  /**
   * Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
   * @return hostProvider
   */
  @javax.annotation.Nullable
  public String getHostProvider() {
    return hostProvider;
  }

  public void setHostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
  }


  public UpdateItem itemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
    return this;
  }

  public UpdateItem putItemCustomFieldsItem(String key, String itemCustomFieldsItem) {
    if (this.itemCustomFields == null) {
      this.itemCustomFields = new HashMap<>();
    }
    this.itemCustomFields.put(key, itemCustomFieldsItem);
    return this;
  }

  /**
   * Additional custom fields to associate with the item
   * @return itemCustomFields
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemCustomFields() {
    return itemCustomFields;
  }

  public void setItemCustomFields(@javax.annotation.Nullable Map<String, String> itemCustomFields) {
    this.itemCustomFields = itemCustomFields;
  }


  public UpdateItem json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateItem maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public UpdateItem name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Current item name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateItem newMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
    return this;
  }

  /**
   * Deprecated - use description
   * @return newMetadata
   */
  @javax.annotation.Nullable
  public String getNewMetadata() {
    return newMetadata;
  }

  public void setNewMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
  }


  public UpdateItem newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New item name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public UpdateItem rmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
    return this;
  }

  public UpdateItem addRmTagItem(String rmTagItem) {
    if (this.rmTag == null) {
      this.rmTag = new ArrayList<>();
    }
    this.rmTag.add(rmTagItem);
    return this;
  }

  /**
   * List of the existent tags that will be removed from this item
   * @return rmTag
   */
  @javax.annotation.Nullable
  public List<String> getRmTag() {
    return rmTag;
  }

  public void setRmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
  }


  public UpdateItem rotateAfterDisconnect(@javax.annotation.Nullable String rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
    return this;
  }

  /**
   * Rotate the value of the secret after SRA session ends [true/false]
   * @return rotateAfterDisconnect
   */
  @javax.annotation.Nullable
  public String getRotateAfterDisconnect() {
    return rotateAfterDisconnect;
  }

  public void setRotateAfterDisconnect(@javax.annotation.Nullable String rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
  }


  public UpdateItem secureAccessAddHost(@javax.annotation.Nullable List<String> secureAccessAddHost) {
    this.secureAccessAddHost = secureAccessAddHost;
    return this;
  }

  public UpdateItem addSecureAccessAddHostItem(String secureAccessAddHostItem) {
    if (this.secureAccessAddHost == null) {
      this.secureAccessAddHost = new ArrayList<>();
    }
    this.secureAccessAddHost.add(secureAccessAddHostItem);
    return this;
  }

  /**
   * List of the new hosts that will be attached to SRA servers host
   * @return secureAccessAddHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessAddHost() {
    return secureAccessAddHost;
  }

  public void setSecureAccessAddHost(@javax.annotation.Nullable List<String> secureAccessAddHost) {
    this.secureAccessAddHost = secureAccessAddHost;
  }


  public UpdateItem secureAccessAllowExternalUser(@javax.annotation.Nullable String secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
    return this;
  }

  /**
   * Allow providing external user for a domain users [true/false]
   * @return secureAccessAllowExternalUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessAllowExternalUser() {
    return secureAccessAllowExternalUser;
  }

  public void setSecureAccessAllowExternalUser(@javax.annotation.Nullable String secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
  }


  public UpdateItem secureAccessAllowPortForwading(@javax.annotation.Nullable Boolean secureAccessAllowPortForwading) {
    this.secureAccessAllowPortForwading = secureAccessAllowPortForwading;
    return this;
  }

  /**
   * Enable Port forwarding while using CLI access (relevant only for EKS/GKE/K8s Dynamic-Secret)
   * @return secureAccessAllowPortForwading
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAllowPortForwading() {
    return secureAccessAllowPortForwading;
  }

  public void setSecureAccessAllowPortForwading(@javax.annotation.Nullable Boolean secureAccessAllowPortForwading) {
    this.secureAccessAllowPortForwading = secureAccessAllowPortForwading;
  }


  public UpdateItem secureAccessApi(@javax.annotation.Nullable String secureAccessApi) {
    this.secureAccessApi = secureAccessApi;
    return this;
  }

  /**
   * Bastion&#39;s SSH control API endpoint. E.g. https://my.sra-server:9900 (relevant only for ssh cert issuer)
   * @return secureAccessApi
   */
  @javax.annotation.Nullable
  public String getSecureAccessApi() {
    return secureAccessApi;
  }

  public void setSecureAccessApi(@javax.annotation.Nullable String secureAccessApi) {
    this.secureAccessApi = secureAccessApi;
  }


  public UpdateItem secureAccessAwsAccountId(@javax.annotation.Nullable String secureAccessAwsAccountId) {
    this.secureAccessAwsAccountId = secureAccessAwsAccountId;
    return this;
  }

  /**
   * The AWS account id (relevant only for aws)
   * @return secureAccessAwsAccountId
   */
  @javax.annotation.Nullable
  public String getSecureAccessAwsAccountId() {
    return secureAccessAwsAccountId;
  }

  public void setSecureAccessAwsAccountId(@javax.annotation.Nullable String secureAccessAwsAccountId) {
    this.secureAccessAwsAccountId = secureAccessAwsAccountId;
  }


  public UpdateItem secureAccessAwsNativeCli(@javax.annotation.Nullable Boolean secureAccessAwsNativeCli) {
    this.secureAccessAwsNativeCli = secureAccessAwsNativeCli;
    return this;
  }

  /**
   * The AWS native cli (relevant only for aws)
   * @return secureAccessAwsNativeCli
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAwsNativeCli() {
    return secureAccessAwsNativeCli;
  }

  public void setSecureAccessAwsNativeCli(@javax.annotation.Nullable Boolean secureAccessAwsNativeCli) {
    this.secureAccessAwsNativeCli = secureAccessAwsNativeCli;
  }


  public UpdateItem secureAccessAwsRegion(@javax.annotation.Nullable String secureAccessAwsRegion) {
    this.secureAccessAwsRegion = secureAccessAwsRegion;
    return this;
  }

  /**
   * The AWS region (relevant only for aws)
   * @return secureAccessAwsRegion
   */
  @javax.annotation.Nullable
  public String getSecureAccessAwsRegion() {
    return secureAccessAwsRegion;
  }

  public void setSecureAccessAwsRegion(@javax.annotation.Nullable String secureAccessAwsRegion) {
    this.secureAccessAwsRegion = secureAccessAwsRegion;
  }


  public UpdateItem secureAccessBastionApi(@javax.annotation.Nullable String secureAccessBastionApi) {
    this.secureAccessBastionApi = secureAccessBastionApi;
    return this;
  }

  /**
   * Deprecated. use secure-access-api
   * @return secureAccessBastionApi
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionApi() {
    return secureAccessBastionApi;
  }

  public void setSecureAccessBastionApi(@javax.annotation.Nullable String secureAccessBastionApi) {
    this.secureAccessBastionApi = secureAccessBastionApi;
  }


  public UpdateItem secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public UpdateItem secureAccessBastionSsh(@javax.annotation.Nullable String secureAccessBastionSsh) {
    this.secureAccessBastionSsh = secureAccessBastionSsh;
    return this;
  }

  /**
   * Deprecated. use secure-access-ssh
   * @return secureAccessBastionSsh
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionSsh() {
    return secureAccessBastionSsh;
  }

  public void setSecureAccessBastionSsh(@javax.annotation.Nullable String secureAccessBastionSsh) {
    this.secureAccessBastionSsh = secureAccessBastionSsh;
  }


  public UpdateItem secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public UpdateItem secureAccessClusterEndpoint(@javax.annotation.Nullable String secureAccessClusterEndpoint) {
    this.secureAccessClusterEndpoint = secureAccessClusterEndpoint;
    return this;
  }

  /**
   * The K8s cluster endpoint URL (relevant only for EKS/GKE/K8s Dynamic-Secret)
   * @return secureAccessClusterEndpoint
   */
  @javax.annotation.Nullable
  public String getSecureAccessClusterEndpoint() {
    return secureAccessClusterEndpoint;
  }

  public void setSecureAccessClusterEndpoint(@javax.annotation.Nullable String secureAccessClusterEndpoint) {
    this.secureAccessClusterEndpoint = secureAccessClusterEndpoint;
  }


  public UpdateItem secureAccessDashboardUrl(@javax.annotation.Nullable String secureAccessDashboardUrl) {
    this.secureAccessDashboardUrl = secureAccessDashboardUrl;
    return this;
  }

  /**
   * The K8s dashboard url (relevant only for k8s)
   * @return secureAccessDashboardUrl
   */
  @javax.annotation.Nullable
  public String getSecureAccessDashboardUrl() {
    return secureAccessDashboardUrl;
  }

  public void setSecureAccessDashboardUrl(@javax.annotation.Nullable String secureAccessDashboardUrl) {
    this.secureAccessDashboardUrl = secureAccessDashboardUrl;
  }


  public UpdateItem secureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
    return this;
  }

  /**
   * The DB name (relevant only for DB Dynamic-Secret)
   * @return secureAccessDbName
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbName() {
    return secureAccessDbName;
  }

  public void setSecureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
  }


  public UpdateItem secureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
    return this;
  }

  /**
   * The DB schema (relevant only for DB Dynamic-Secret)
   * @return secureAccessDbSchema
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbSchema() {
    return secureAccessDbSchema;
  }

  public void setSecureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
  }


  public UpdateItem secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public UpdateItem secureAccessGateway(@javax.annotation.Nullable String secureAccessGateway) {
    this.secureAccessGateway = secureAccessGateway;
    return this;
  }

  /**
   * Get secureAccessGateway
   * @return secureAccessGateway
   */
  @javax.annotation.Nullable
  public String getSecureAccessGateway() {
    return secureAccessGateway;
  }

  public void setSecureAccessGateway(@javax.annotation.Nullable String secureAccessGateway) {
    this.secureAccessGateway = secureAccessGateway;
  }


  public UpdateItem secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public UpdateItem addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public UpdateItem secureAccessRdGatewayServer(@javax.annotation.Nullable String secureAccessRdGatewayServer) {
    this.secureAccessRdGatewayServer = secureAccessRdGatewayServer;
    return this;
  }

  /**
   * RD Gateway server (relevant only for rdp)
   * @return secureAccessRdGatewayServer
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdGatewayServer() {
    return secureAccessRdGatewayServer;
  }

  public void setSecureAccessRdGatewayServer(@javax.annotation.Nullable String secureAccessRdGatewayServer) {
    this.secureAccessRdGatewayServer = secureAccessRdGatewayServer;
  }


  public UpdateItem secureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
    return this;
  }

  /**
   * Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)
   * @return secureAccessRdpDomain
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpDomain() {
    return secureAccessRdpDomain;
  }

  public void setSecureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
  }


  public UpdateItem secureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
    return this;
  }

  /**
   * Override the RDP Domain username
   * @return secureAccessRdpUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpUser() {
    return secureAccessRdpUser;
  }

  public void setSecureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
  }


  public UpdateItem secureAccessRmHost(@javax.annotation.Nullable List<String> secureAccessRmHost) {
    this.secureAccessRmHost = secureAccessRmHost;
    return this;
  }

  public UpdateItem addSecureAccessRmHostItem(String secureAccessRmHostItem) {
    if (this.secureAccessRmHost == null) {
      this.secureAccessRmHost = new ArrayList<>();
    }
    this.secureAccessRmHost.add(secureAccessRmHostItem);
    return this;
  }

  /**
   * List of the existent hosts that will be removed from SRA servers host
   * @return secureAccessRmHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessRmHost() {
    return secureAccessRmHost;
  }

  public void setSecureAccessRmHost(@javax.annotation.Nullable List<String> secureAccessRmHost) {
    this.secureAccessRmHost = secureAccessRmHost;
  }


  public UpdateItem secureAccessSsh(@javax.annotation.Nullable String secureAccessSsh) {
    this.secureAccessSsh = secureAccessSsh;
    return this;
  }

  /**
   * Bastion&#39;s SSH server. E.g. my.sra-server:22 (relevant only for ssh cert issuer)
   * @return secureAccessSsh
   */
  @javax.annotation.Nullable
  public String getSecureAccessSsh() {
    return secureAccessSsh;
  }

  public void setSecureAccessSsh(@javax.annotation.Nullable String secureAccessSsh) {
    this.secureAccessSsh = secureAccessSsh;
  }


  public UpdateItem secureAccessSshCreds(@javax.annotation.Nullable String secureAccessSshCreds) {
    this.secureAccessSshCreds = secureAccessSshCreds;
    return this;
  }

  /**
   * Secret values contains SSH Credentials, either Private Key or Password [password/private-key] (relevant only for Static-Secret or Rotated-secret)
   * @return secureAccessSshCreds
   */
  @javax.annotation.Nullable
  public String getSecureAccessSshCreds() {
    return secureAccessSshCreds;
  }

  public void setSecureAccessSshCreds(@javax.annotation.Nullable String secureAccessSshCreds) {
    this.secureAccessSshCreds = secureAccessSshCreds;
  }


  public UpdateItem secureAccessSshCredsUser(@javax.annotation.Nullable String secureAccessSshCredsUser) {
    this.secureAccessSshCredsUser = secureAccessSshCredsUser;
    return this;
  }

  /**
   * SSH username to connect to target server, must be in &#39;Allowed Users&#39; list (relevant only for ssh cert issuer)
   * @return secureAccessSshCredsUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessSshCredsUser() {
    return secureAccessSshCredsUser;
  }

  public void setSecureAccessSshCredsUser(@javax.annotation.Nullable String secureAccessSshCredsUser) {
    this.secureAccessSshCredsUser = secureAccessSshCredsUser;
  }


  public UpdateItem secureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
    return this;
  }

  /**
   * Destination URL to inject secrets
   * @return secureAccessUrl
   */
  @javax.annotation.Nullable
  public String getSecureAccessUrl() {
    return secureAccessUrl;
  }

  public void setSecureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
  }


  public UpdateItem secureAccessUseInternalBastion(@javax.annotation.Nullable Boolean secureAccessUseInternalBastion) {
    this.secureAccessUseInternalBastion = secureAccessUseInternalBastion;
    return this;
  }

  /**
   * Deprecated. Use secure-access-use-internal-ssh-access
   * @return secureAccessUseInternalBastion
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessUseInternalBastion() {
    return secureAccessUseInternalBastion;
  }

  public void setSecureAccessUseInternalBastion(@javax.annotation.Nullable Boolean secureAccessUseInternalBastion) {
    this.secureAccessUseInternalBastion = secureAccessUseInternalBastion;
  }


  public UpdateItem secureAccessUseInternalSshAccess(@javax.annotation.Nullable Boolean secureAccessUseInternalSshAccess) {
    this.secureAccessUseInternalSshAccess = secureAccessUseInternalSshAccess;
    return this;
  }

  /**
   * Use internal SSH Access
   * @return secureAccessUseInternalSshAccess
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessUseInternalSshAccess() {
    return secureAccessUseInternalSshAccess;
  }

  public void setSecureAccessUseInternalSshAccess(@javax.annotation.Nullable Boolean secureAccessUseInternalSshAccess) {
    this.secureAccessUseInternalSshAccess = secureAccessUseInternalSshAccess;
  }


  public UpdateItem secureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
    return this;
  }

  /**
   * Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebBrowsing
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebBrowsing() {
    return secureAccessWebBrowsing;
  }

  public void setSecureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
  }


  public UpdateItem secureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
    return this;
  }

  /**
   * Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebProxy
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebProxy() {
    return secureAccessWebProxy;
  }

  public void setSecureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
  }


  public UpdateItem token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateItem uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateItem updateItem = (UpdateItem) o;
    return Objects.equals(this.providerType, updateItem.providerType) &&
        Objects.equals(this.accessibility, updateItem.accessibility) &&
        Objects.equals(this.addTag, updateItem.addTag) &&
        Objects.equals(this.certFileData, updateItem.certFileData) &&
        Objects.equals(this.certificateFormat, updateItem.certificateFormat) &&
        Objects.equals(this.changeEvent, updateItem.changeEvent) &&
        Objects.equals(this.deleteProtection, updateItem.deleteProtection) &&
        Objects.equals(this.description, updateItem.description) &&
        Objects.equals(this.expirationEventIn, updateItem.expirationEventIn) &&
        Objects.equals(this.hostProvider, updateItem.hostProvider) &&
        Objects.equals(this.itemCustomFields, updateItem.itemCustomFields) &&
        Objects.equals(this.json, updateItem.json) &&
        Objects.equals(this.maxVersions, updateItem.maxVersions) &&
        Objects.equals(this.name, updateItem.name) &&
        Objects.equals(this.newMetadata, updateItem.newMetadata) &&
        Objects.equals(this.newName, updateItem.newName) &&
        Objects.equals(this.rmTag, updateItem.rmTag) &&
        Objects.equals(this.rotateAfterDisconnect, updateItem.rotateAfterDisconnect) &&
        Objects.equals(this.secureAccessAddHost, updateItem.secureAccessAddHost) &&
        Objects.equals(this.secureAccessAllowExternalUser, updateItem.secureAccessAllowExternalUser) &&
        Objects.equals(this.secureAccessAllowPortForwading, updateItem.secureAccessAllowPortForwading) &&
        Objects.equals(this.secureAccessApi, updateItem.secureAccessApi) &&
        Objects.equals(this.secureAccessAwsAccountId, updateItem.secureAccessAwsAccountId) &&
        Objects.equals(this.secureAccessAwsNativeCli, updateItem.secureAccessAwsNativeCli) &&
        Objects.equals(this.secureAccessAwsRegion, updateItem.secureAccessAwsRegion) &&
        Objects.equals(this.secureAccessBastionApi, updateItem.secureAccessBastionApi) &&
        Objects.equals(this.secureAccessBastionIssuer, updateItem.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessBastionSsh, updateItem.secureAccessBastionSsh) &&
        Objects.equals(this.secureAccessCertificateIssuer, updateItem.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessClusterEndpoint, updateItem.secureAccessClusterEndpoint) &&
        Objects.equals(this.secureAccessDashboardUrl, updateItem.secureAccessDashboardUrl) &&
        Objects.equals(this.secureAccessDbName, updateItem.secureAccessDbName) &&
        Objects.equals(this.secureAccessDbSchema, updateItem.secureAccessDbSchema) &&
        Objects.equals(this.secureAccessEnable, updateItem.secureAccessEnable) &&
        Objects.equals(this.secureAccessGateway, updateItem.secureAccessGateway) &&
        Objects.equals(this.secureAccessHost, updateItem.secureAccessHost) &&
        Objects.equals(this.secureAccessRdGatewayServer, updateItem.secureAccessRdGatewayServer) &&
        Objects.equals(this.secureAccessRdpDomain, updateItem.secureAccessRdpDomain) &&
        Objects.equals(this.secureAccessRdpUser, updateItem.secureAccessRdpUser) &&
        Objects.equals(this.secureAccessRmHost, updateItem.secureAccessRmHost) &&
        Objects.equals(this.secureAccessSsh, updateItem.secureAccessSsh) &&
        Objects.equals(this.secureAccessSshCreds, updateItem.secureAccessSshCreds) &&
        Objects.equals(this.secureAccessSshCredsUser, updateItem.secureAccessSshCredsUser) &&
        Objects.equals(this.secureAccessUrl, updateItem.secureAccessUrl) &&
        Objects.equals(this.secureAccessUseInternalBastion, updateItem.secureAccessUseInternalBastion) &&
        Objects.equals(this.secureAccessUseInternalSshAccess, updateItem.secureAccessUseInternalSshAccess) &&
        Objects.equals(this.secureAccessWebBrowsing, updateItem.secureAccessWebBrowsing) &&
        Objects.equals(this.secureAccessWebProxy, updateItem.secureAccessWebProxy) &&
        Objects.equals(this.token, updateItem.token) &&
        Objects.equals(this.uidToken, updateItem.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerType, accessibility, addTag, certFileData, certificateFormat, changeEvent, deleteProtection, description, expirationEventIn, hostProvider, itemCustomFields, json, maxVersions, name, newMetadata, newName, rmTag, rotateAfterDisconnect, secureAccessAddHost, secureAccessAllowExternalUser, secureAccessAllowPortForwading, secureAccessApi, secureAccessAwsAccountId, secureAccessAwsNativeCli, secureAccessAwsRegion, secureAccessBastionApi, secureAccessBastionIssuer, secureAccessBastionSsh, secureAccessCertificateIssuer, secureAccessClusterEndpoint, secureAccessDashboardUrl, secureAccessDbName, secureAccessDbSchema, secureAccessEnable, secureAccessGateway, secureAccessHost, secureAccessRdGatewayServer, secureAccessRdpDomain, secureAccessRdpUser, secureAccessRmHost, secureAccessSsh, secureAccessSshCreds, secureAccessSshCredsUser, secureAccessUrl, secureAccessUseInternalBastion, secureAccessUseInternalSshAccess, secureAccessWebBrowsing, secureAccessWebProxy, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateItem {\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    addTag: ").append(toIndentedString(addTag)).append("\n");
    sb.append("    certFileData: ").append(toIndentedString(certFileData)).append("\n");
    sb.append("    certificateFormat: ").append(toIndentedString(certificateFormat)).append("\n");
    sb.append("    changeEvent: ").append(toIndentedString(changeEvent)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationEventIn: ").append(toIndentedString(expirationEventIn)).append("\n");
    sb.append("    hostProvider: ").append(toIndentedString(hostProvider)).append("\n");
    sb.append("    itemCustomFields: ").append(toIndentedString(itemCustomFields)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newMetadata: ").append(toIndentedString(newMetadata)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    rmTag: ").append(toIndentedString(rmTag)).append("\n");
    sb.append("    rotateAfterDisconnect: ").append(toIndentedString(rotateAfterDisconnect)).append("\n");
    sb.append("    secureAccessAddHost: ").append(toIndentedString(secureAccessAddHost)).append("\n");
    sb.append("    secureAccessAllowExternalUser: ").append(toIndentedString(secureAccessAllowExternalUser)).append("\n");
    sb.append("    secureAccessAllowPortForwading: ").append(toIndentedString(secureAccessAllowPortForwading)).append("\n");
    sb.append("    secureAccessApi: ").append(toIndentedString(secureAccessApi)).append("\n");
    sb.append("    secureAccessAwsAccountId: ").append(toIndentedString(secureAccessAwsAccountId)).append("\n");
    sb.append("    secureAccessAwsNativeCli: ").append(toIndentedString(secureAccessAwsNativeCli)).append("\n");
    sb.append("    secureAccessAwsRegion: ").append(toIndentedString(secureAccessAwsRegion)).append("\n");
    sb.append("    secureAccessBastionApi: ").append(toIndentedString(secureAccessBastionApi)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessBastionSsh: ").append(toIndentedString(secureAccessBastionSsh)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessClusterEndpoint: ").append(toIndentedString(secureAccessClusterEndpoint)).append("\n");
    sb.append("    secureAccessDashboardUrl: ").append(toIndentedString(secureAccessDashboardUrl)).append("\n");
    sb.append("    secureAccessDbName: ").append(toIndentedString(secureAccessDbName)).append("\n");
    sb.append("    secureAccessDbSchema: ").append(toIndentedString(secureAccessDbSchema)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessGateway: ").append(toIndentedString(secureAccessGateway)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessRdGatewayServer: ").append(toIndentedString(secureAccessRdGatewayServer)).append("\n");
    sb.append("    secureAccessRdpDomain: ").append(toIndentedString(secureAccessRdpDomain)).append("\n");
    sb.append("    secureAccessRdpUser: ").append(toIndentedString(secureAccessRdpUser)).append("\n");
    sb.append("    secureAccessRmHost: ").append(toIndentedString(secureAccessRmHost)).append("\n");
    sb.append("    secureAccessSsh: ").append(toIndentedString(secureAccessSsh)).append("\n");
    sb.append("    secureAccessSshCreds: ").append(toIndentedString(secureAccessSshCreds)).append("\n");
    sb.append("    secureAccessSshCredsUser: ").append(toIndentedString(secureAccessSshCredsUser)).append("\n");
    sb.append("    secureAccessUrl: ").append(toIndentedString(secureAccessUrl)).append("\n");
    sb.append("    secureAccessUseInternalBastion: ").append(toIndentedString(secureAccessUseInternalBastion)).append("\n");
    sb.append("    secureAccessUseInternalSshAccess: ").append(toIndentedString(secureAccessUseInternalSshAccess)).append("\n");
    sb.append("    secureAccessWebBrowsing: ").append(toIndentedString(secureAccessWebBrowsing)).append("\n");
    sb.append("    secureAccessWebProxy: ").append(toIndentedString(secureAccessWebProxy)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProviderType");
    openapiFields.add("accessibility");
    openapiFields.add("add-tag");
    openapiFields.add("cert-file-data");
    openapiFields.add("certificate-format");
    openapiFields.add("change-event");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("expiration-event-in");
    openapiFields.add("host-provider");
    openapiFields.add("item-custom-fields");
    openapiFields.add("json");
    openapiFields.add("max-versions");
    openapiFields.add("name");
    openapiFields.add("new-metadata");
    openapiFields.add("new-name");
    openapiFields.add("rm-tag");
    openapiFields.add("rotate-after-disconnect");
    openapiFields.add("secure-access-add-host");
    openapiFields.add("secure-access-allow-external-user");
    openapiFields.add("secure-access-allow-port-forwading");
    openapiFields.add("secure-access-api");
    openapiFields.add("secure-access-aws-account-id");
    openapiFields.add("secure-access-aws-native-cli");
    openapiFields.add("secure-access-aws-region");
    openapiFields.add("secure-access-bastion-api");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-bastion-ssh");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-cluster-endpoint");
    openapiFields.add("secure-access-dashboard-url");
    openapiFields.add("secure-access-db-name");
    openapiFields.add("secure-access-db-schema");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-gateway");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-rd-gateway-server");
    openapiFields.add("secure-access-rdp-domain");
    openapiFields.add("secure-access-rdp-user");
    openapiFields.add("secure-access-rm-host");
    openapiFields.add("secure-access-ssh");
    openapiFields.add("secure-access-ssh-creds");
    openapiFields.add("secure-access-ssh-creds-user");
    openapiFields.add("secure-access-url");
    openapiFields.add("secure-access-use-internal-bastion");
    openapiFields.add("secure-access-use-internal-ssh-access");
    openapiFields.add("secure-access-web-browsing");
    openapiFields.add("secure-access-web-proxy");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateItem is not found in the empty JSON string", UpdateItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) && !jsonObj.get("ProviderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderType").toString()));
      }
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("add-tag") != null && !jsonObj.get("add-tag").isJsonNull() && !jsonObj.get("add-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add-tag` to be an array in the JSON string but got `%s`", jsonObj.get("add-tag").toString()));
      }
      if ((jsonObj.get("cert-file-data") != null && !jsonObj.get("cert-file-data").isJsonNull()) && !jsonObj.get("cert-file-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-file-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-file-data").toString()));
      }
      if ((jsonObj.get("certificate-format") != null && !jsonObj.get("certificate-format").isJsonNull()) && !jsonObj.get("certificate-format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate-format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate-format").toString()));
      }
      if ((jsonObj.get("change-event") != null && !jsonObj.get("change-event").isJsonNull()) && !jsonObj.get("change-event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change-event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change-event").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expiration-event-in") != null && !jsonObj.get("expiration-event-in").isJsonNull() && !jsonObj.get("expiration-event-in").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration-event-in` to be an array in the JSON string but got `%s`", jsonObj.get("expiration-event-in").toString()));
      }
      if ((jsonObj.get("host-provider") != null && !jsonObj.get("host-provider").isJsonNull()) && !jsonObj.get("host-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-provider").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-metadata") != null && !jsonObj.get("new-metadata").isJsonNull()) && !jsonObj.get("new-metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-metadata").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rm-tag") != null && !jsonObj.get("rm-tag").isJsonNull() && !jsonObj.get("rm-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rm-tag` to be an array in the JSON string but got `%s`", jsonObj.get("rm-tag").toString()));
      }
      if ((jsonObj.get("rotate-after-disconnect") != null && !jsonObj.get("rotate-after-disconnect").isJsonNull()) && !jsonObj.get("rotate-after-disconnect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotate-after-disconnect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotate-after-disconnect").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-add-host") != null && !jsonObj.get("secure-access-add-host").isJsonNull() && !jsonObj.get("secure-access-add-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-add-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-add-host").toString()));
      }
      if ((jsonObj.get("secure-access-allow-external-user") != null && !jsonObj.get("secure-access-allow-external-user").isJsonNull()) && !jsonObj.get("secure-access-allow-external-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-allow-external-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-allow-external-user").toString()));
      }
      if ((jsonObj.get("secure-access-api") != null && !jsonObj.get("secure-access-api").isJsonNull()) && !jsonObj.get("secure-access-api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-api").toString()));
      }
      if ((jsonObj.get("secure-access-aws-account-id") != null && !jsonObj.get("secure-access-aws-account-id").isJsonNull()) && !jsonObj.get("secure-access-aws-account-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-aws-account-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-aws-account-id").toString()));
      }
      if ((jsonObj.get("secure-access-aws-region") != null && !jsonObj.get("secure-access-aws-region").isJsonNull()) && !jsonObj.get("secure-access-aws-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-aws-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-aws-region").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-api") != null && !jsonObj.get("secure-access-bastion-api").isJsonNull()) && !jsonObj.get("secure-access-bastion-api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-api").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-ssh") != null && !jsonObj.get("secure-access-bastion-ssh").isJsonNull()) && !jsonObj.get("secure-access-bastion-ssh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-ssh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-ssh").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-cluster-endpoint") != null && !jsonObj.get("secure-access-cluster-endpoint").isJsonNull()) && !jsonObj.get("secure-access-cluster-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-cluster-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-cluster-endpoint").toString()));
      }
      if ((jsonObj.get("secure-access-dashboard-url") != null && !jsonObj.get("secure-access-dashboard-url").isJsonNull()) && !jsonObj.get("secure-access-dashboard-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-dashboard-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-dashboard-url").toString()));
      }
      if ((jsonObj.get("secure-access-db-name") != null && !jsonObj.get("secure-access-db-name").isJsonNull()) && !jsonObj.get("secure-access-db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-name").toString()));
      }
      if ((jsonObj.get("secure-access-db-schema") != null && !jsonObj.get("secure-access-db-schema").isJsonNull()) && !jsonObj.get("secure-access-db-schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-schema").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      if ((jsonObj.get("secure-access-gateway") != null && !jsonObj.get("secure-access-gateway").isJsonNull()) && !jsonObj.get("secure-access-gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-gateway").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      if ((jsonObj.get("secure-access-rd-gateway-server") != null && !jsonObj.get("secure-access-rd-gateway-server").isJsonNull()) && !jsonObj.get("secure-access-rd-gateway-server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rd-gateway-server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rd-gateway-server").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-domain") != null && !jsonObj.get("secure-access-rdp-domain").isJsonNull()) && !jsonObj.get("secure-access-rdp-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-domain").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-user") != null && !jsonObj.get("secure-access-rdp-user").isJsonNull()) && !jsonObj.get("secure-access-rdp-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-user").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-rm-host") != null && !jsonObj.get("secure-access-rm-host").isJsonNull() && !jsonObj.get("secure-access-rm-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rm-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-rm-host").toString()));
      }
      if ((jsonObj.get("secure-access-ssh") != null && !jsonObj.get("secure-access-ssh").isJsonNull()) && !jsonObj.get("secure-access-ssh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-ssh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-ssh").toString()));
      }
      if ((jsonObj.get("secure-access-ssh-creds") != null && !jsonObj.get("secure-access-ssh-creds").isJsonNull()) && !jsonObj.get("secure-access-ssh-creds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-ssh-creds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-ssh-creds").toString()));
      }
      if ((jsonObj.get("secure-access-ssh-creds-user") != null && !jsonObj.get("secure-access-ssh-creds-user").isJsonNull()) && !jsonObj.get("secure-access-ssh-creds-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-ssh-creds-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-ssh-creds-user").toString()));
      }
      if ((jsonObj.get("secure-access-url") != null && !jsonObj.get("secure-access-url").isJsonNull()) && !jsonObj.get("secure-access-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-url").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateItem.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateItem>() {
           @Override
           public void write(JsonWriter out, UpdateItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateItem
   * @throws IOException if the JSON string is invalid with respect to UpdateItem
   */
  public static UpdateItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateItem.class);
  }

  /**
   * Convert an instance of UpdateItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

