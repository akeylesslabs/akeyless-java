/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * gatewayUpdateLogForwardingElasticsearch is a command that updates log forwarding config (elasticsearch target)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GatewayUpdateLogForwardingElasticsearch {
  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth-type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  @javax.annotation.Nullable
  private String authType;

  public static final String SERIALIZED_NAME_CLOUD_ID = "cloud-id";
  @SerializedName(SERIALIZED_NAME_CLOUD_ID)
  @javax.annotation.Nullable
  private String cloudId;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  @javax.annotation.Nullable
  private String enable = "true";

  public static final String SERIALIZED_NAME_ENABLE_TLS = "enable-tls";
  @SerializedName(SERIALIZED_NAME_ENABLE_TLS)
  @javax.annotation.Nullable
  private Boolean enableTls;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  @javax.annotation.Nullable
  private String index;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  @javax.annotation.Nullable
  private String nodes;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "output-format";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  @javax.annotation.Nullable
  private String outputFormat = "text";

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_PULL_INTERVAL = "pull-interval";
  @SerializedName(SERIALIZED_NAME_PULL_INTERVAL)
  @javax.annotation.Nullable
  private String pullInterval = "10";

  public static final String SERIALIZED_NAME_SERVER_TYPE = "server-type";
  @SerializedName(SERIALIZED_NAME_SERVER_TYPE)
  @javax.annotation.Nullable
  private String serverType;

  public static final String SERIALIZED_NAME_TLS_CERTIFICATE = "tls-certificate";
  @SerializedName(SERIALIZED_NAME_TLS_CERTIFICATE)
  @javax.annotation.Nullable
  private String tlsCertificate = "use-existing";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_NAME = "user-name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nullable
  private String userName;

  public GatewayUpdateLogForwardingElasticsearch() {
  }

  public GatewayUpdateLogForwardingElasticsearch apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Elasticsearch api key relevant only for api_key auth-type
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public GatewayUpdateLogForwardingElasticsearch authType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Elasticsearch auth type [api_key/password]
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
  }


  public GatewayUpdateLogForwardingElasticsearch cloudId(@javax.annotation.Nullable String cloudId) {
    this.cloudId = cloudId;
    return this;
  }

  /**
   * Elasticsearch cloud id relevant only for cloud server-type
   * @return cloudId
   */
  @javax.annotation.Nullable
  public String getCloudId() {
    return cloudId;
  }

  public void setCloudId(@javax.annotation.Nullable String cloudId) {
    this.cloudId = cloudId;
  }


  public GatewayUpdateLogForwardingElasticsearch enable(@javax.annotation.Nullable String enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Enable Log Forwarding [true/false]
   * @return enable
   */
  @javax.annotation.Nullable
  public String getEnable() {
    return enable;
  }

  public void setEnable(@javax.annotation.Nullable String enable) {
    this.enable = enable;
  }


  public GatewayUpdateLogForwardingElasticsearch enableTls(@javax.annotation.Nullable Boolean enableTls) {
    this.enableTls = enableTls;
    return this;
  }

  /**
   * Enable tls
   * @return enableTls
   */
  @javax.annotation.Nullable
  public Boolean getEnableTls() {
    return enableTls;
  }

  public void setEnableTls(@javax.annotation.Nullable Boolean enableTls) {
    this.enableTls = enableTls;
  }


  public GatewayUpdateLogForwardingElasticsearch index(@javax.annotation.Nullable String index) {
    this.index = index;
    return this;
  }

  /**
   * Elasticsearch index
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(@javax.annotation.Nullable String index) {
    this.index = index;
  }


  public GatewayUpdateLogForwardingElasticsearch json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public GatewayUpdateLogForwardingElasticsearch nodes(@javax.annotation.Nullable String nodes) {
    this.nodes = nodes;
    return this;
  }

  /**
   * Elasticsearch nodes relevant only for nodes server-type
   * @return nodes
   */
  @javax.annotation.Nullable
  public String getNodes() {
    return nodes;
  }

  public void setNodes(@javax.annotation.Nullable String nodes) {
    this.nodes = nodes;
  }


  public GatewayUpdateLogForwardingElasticsearch outputFormat(@javax.annotation.Nullable String outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Logs format [text/json]
   * @return outputFormat
   */
  @javax.annotation.Nullable
  public String getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(@javax.annotation.Nullable String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public GatewayUpdateLogForwardingElasticsearch password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Elasticsearch password relevant only for password auth-type
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public GatewayUpdateLogForwardingElasticsearch pullInterval(@javax.annotation.Nullable String pullInterval) {
    this.pullInterval = pullInterval;
    return this;
  }

  /**
   * Pull interval in seconds
   * @return pullInterval
   */
  @javax.annotation.Nullable
  public String getPullInterval() {
    return pullInterval;
  }

  public void setPullInterval(@javax.annotation.Nullable String pullInterval) {
    this.pullInterval = pullInterval;
  }


  public GatewayUpdateLogForwardingElasticsearch serverType(@javax.annotation.Nullable String serverType) {
    this.serverType = serverType;
    return this;
  }

  /**
   * Elasticsearch server type [cloud/nodes]
   * @return serverType
   */
  @javax.annotation.Nullable
  public String getServerType() {
    return serverType;
  }

  public void setServerType(@javax.annotation.Nullable String serverType) {
    this.serverType = serverType;
  }


  public GatewayUpdateLogForwardingElasticsearch tlsCertificate(@javax.annotation.Nullable String tlsCertificate) {
    this.tlsCertificate = tlsCertificate;
    return this;
  }

  /**
   * Elasticsearch tls certificate
   * @return tlsCertificate
   */
  @javax.annotation.Nullable
  public String getTlsCertificate() {
    return tlsCertificate;
  }

  public void setTlsCertificate(@javax.annotation.Nullable String tlsCertificate) {
    this.tlsCertificate = tlsCertificate;
  }


  public GatewayUpdateLogForwardingElasticsearch token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public GatewayUpdateLogForwardingElasticsearch uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayUpdateLogForwardingElasticsearch userName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Elasticsearch user name relevant only for password auth-type
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateLogForwardingElasticsearch gatewayUpdateLogForwardingElasticsearch = (GatewayUpdateLogForwardingElasticsearch) o;
    return Objects.equals(this.apiKey, gatewayUpdateLogForwardingElasticsearch.apiKey) &&
        Objects.equals(this.authType, gatewayUpdateLogForwardingElasticsearch.authType) &&
        Objects.equals(this.cloudId, gatewayUpdateLogForwardingElasticsearch.cloudId) &&
        Objects.equals(this.enable, gatewayUpdateLogForwardingElasticsearch.enable) &&
        Objects.equals(this.enableTls, gatewayUpdateLogForwardingElasticsearch.enableTls) &&
        Objects.equals(this.index, gatewayUpdateLogForwardingElasticsearch.index) &&
        Objects.equals(this.json, gatewayUpdateLogForwardingElasticsearch.json) &&
        Objects.equals(this.nodes, gatewayUpdateLogForwardingElasticsearch.nodes) &&
        Objects.equals(this.outputFormat, gatewayUpdateLogForwardingElasticsearch.outputFormat) &&
        Objects.equals(this.password, gatewayUpdateLogForwardingElasticsearch.password) &&
        Objects.equals(this.pullInterval, gatewayUpdateLogForwardingElasticsearch.pullInterval) &&
        Objects.equals(this.serverType, gatewayUpdateLogForwardingElasticsearch.serverType) &&
        Objects.equals(this.tlsCertificate, gatewayUpdateLogForwardingElasticsearch.tlsCertificate) &&
        Objects.equals(this.token, gatewayUpdateLogForwardingElasticsearch.token) &&
        Objects.equals(this.uidToken, gatewayUpdateLogForwardingElasticsearch.uidToken) &&
        Objects.equals(this.userName, gatewayUpdateLogForwardingElasticsearch.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, authType, cloudId, enable, enableTls, index, json, nodes, outputFormat, password, pullInterval, serverType, tlsCertificate, token, uidToken, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateLogForwardingElasticsearch {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    cloudId: ").append(toIndentedString(cloudId)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    enableTls: ").append(toIndentedString(enableTls)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pullInterval: ").append(toIndentedString(pullInterval)).append("\n");
    sb.append("    serverType: ").append(toIndentedString(serverType)).append("\n");
    sb.append("    tlsCertificate: ").append(toIndentedString(tlsCertificate)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-key");
    openapiFields.add("auth-type");
    openapiFields.add("cloud-id");
    openapiFields.add("enable");
    openapiFields.add("enable-tls");
    openapiFields.add("index");
    openapiFields.add("json");
    openapiFields.add("nodes");
    openapiFields.add("output-format");
    openapiFields.add("password");
    openapiFields.add("pull-interval");
    openapiFields.add("server-type");
    openapiFields.add("tls-certificate");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayUpdateLogForwardingElasticsearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayUpdateLogForwardingElasticsearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayUpdateLogForwardingElasticsearch is not found in the empty JSON string", GatewayUpdateLogForwardingElasticsearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayUpdateLogForwardingElasticsearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayUpdateLogForwardingElasticsearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api-key") != null && !jsonObj.get("api-key").isJsonNull()) && !jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if ((jsonObj.get("auth-type") != null && !jsonObj.get("auth-type").isJsonNull()) && !jsonObj.get("auth-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-type").toString()));
      }
      if ((jsonObj.get("cloud-id") != null && !jsonObj.get("cloud-id").isJsonNull()) && !jsonObj.get("cloud-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud-id").toString()));
      }
      if ((jsonObj.get("enable") != null && !jsonObj.get("enable").isJsonNull()) && !jsonObj.get("enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enable").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if ((jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) && !jsonObj.get("nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
      }
      if ((jsonObj.get("output-format") != null && !jsonObj.get("output-format").isJsonNull()) && !jsonObj.get("output-format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `output-format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("output-format").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("pull-interval") != null && !jsonObj.get("pull-interval").isJsonNull()) && !jsonObj.get("pull-interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull-interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull-interval").toString()));
      }
      if ((jsonObj.get("server-type") != null && !jsonObj.get("server-type").isJsonNull()) && !jsonObj.get("server-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server-type").toString()));
      }
      if ((jsonObj.get("tls-certificate") != null && !jsonObj.get("tls-certificate").isJsonNull()) && !jsonObj.get("tls-certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls-certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls-certificate").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-name") != null && !jsonObj.get("user-name").isJsonNull()) && !jsonObj.get("user-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayUpdateLogForwardingElasticsearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayUpdateLogForwardingElasticsearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayUpdateLogForwardingElasticsearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayUpdateLogForwardingElasticsearch.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayUpdateLogForwardingElasticsearch>() {
           @Override
           public void write(JsonWriter out, GatewayUpdateLogForwardingElasticsearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayUpdateLogForwardingElasticsearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayUpdateLogForwardingElasticsearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayUpdateLogForwardingElasticsearch
   * @throws IOException if the JSON string is invalid with respect to GatewayUpdateLogForwardingElasticsearch
   */
  public static GatewayUpdateLogForwardingElasticsearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayUpdateLogForwardingElasticsearch.class);
  }

  /**
   * Convert an instance of GatewayUpdateLogForwardingElasticsearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

