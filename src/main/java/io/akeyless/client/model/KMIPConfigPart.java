/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.KMIPClient;
import io.akeyless.client.model.KMIPServer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * KMIPConfigPart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class KMIPConfigPart {
  public static final String SERIALIZED_NAME_CLIENTS = "clients";
  @SerializedName(SERIALIZED_NAME_CLIENTS)
  @javax.annotation.Nullable
  private Map<String, KMIPClient> clients = new HashMap<>();

  public static final String SERIALIZED_NAME_KEY_ENC = "key_enc";
  @SerializedName(SERIALIZED_NAME_KEY_ENC)
  @javax.annotation.Nullable
  private List<Integer> keyEnc = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  @javax.annotation.Nullable
  private KMIPServer server;

  public static final String SERIALIZED_NAME_SERVER_ENC = "server_enc";
  @SerializedName(SERIALIZED_NAME_SERVER_ENC)
  @javax.annotation.Nullable
  private List<Integer> serverEnc = new ArrayList<>();

  public KMIPConfigPart() {
  }

  public KMIPConfigPart clients(@javax.annotation.Nullable Map<String, KMIPClient> clients) {
    this.clients = clients;
    return this;
  }

  public KMIPConfigPart putClientsItem(String key, KMIPClient clientsItem) {
    if (this.clients == null) {
      this.clients = new HashMap<>();
    }
    this.clients.put(key, clientsItem);
    return this;
  }

  /**
   * Get clients
   * @return clients
   */
  @javax.annotation.Nullable
  public Map<String, KMIPClient> getClients() {
    return clients;
  }

  public void setClients(@javax.annotation.Nullable Map<String, KMIPClient> clients) {
    this.clients = clients;
  }


  public KMIPConfigPart keyEnc(@javax.annotation.Nullable List<Integer> keyEnc) {
    this.keyEnc = keyEnc;
    return this;
  }

  public KMIPConfigPart addKeyEncItem(Integer keyEncItem) {
    if (this.keyEnc == null) {
      this.keyEnc = new ArrayList<>();
    }
    this.keyEnc.add(keyEncItem);
    return this;
  }

  /**
   * Saves the private key of the cert issuer in encypted form
   * @return keyEnc
   */
  @javax.annotation.Nullable
  public List<Integer> getKeyEnc() {
    return keyEnc;
  }

  public void setKeyEnc(@javax.annotation.Nullable List<Integer> keyEnc) {
    this.keyEnc = keyEnc;
  }


  public KMIPConfigPart server(@javax.annotation.Nullable KMIPServer server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public KMIPServer getServer() {
    return server;
  }

  public void setServer(@javax.annotation.Nullable KMIPServer server) {
    this.server = server;
  }


  public KMIPConfigPart serverEnc(@javax.annotation.Nullable List<Integer> serverEnc) {
    this.serverEnc = serverEnc;
    return this;
  }

  public KMIPConfigPart addServerEncItem(Integer serverEncItem) {
    if (this.serverEnc == null) {
      this.serverEnc = new ArrayList<>();
    }
    this.serverEnc.add(serverEncItem);
    return this;
  }

  /**
   * Saved for backward compatibility TODO: remove this after all clients upgrade
   * @return serverEnc
   */
  @javax.annotation.Nullable
  public List<Integer> getServerEnc() {
    return serverEnc;
  }

  public void setServerEnc(@javax.annotation.Nullable List<Integer> serverEnc) {
    this.serverEnc = serverEnc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KMIPConfigPart kmIPConfigPart = (KMIPConfigPart) o;
    return Objects.equals(this.clients, kmIPConfigPart.clients) &&
        Objects.equals(this.keyEnc, kmIPConfigPart.keyEnc) &&
        Objects.equals(this.server, kmIPConfigPart.server) &&
        Objects.equals(this.serverEnc, kmIPConfigPart.serverEnc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clients, keyEnc, server, serverEnc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KMIPConfigPart {\n");
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    keyEnc: ").append(toIndentedString(keyEnc)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    serverEnc: ").append(toIndentedString(serverEnc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clients");
    openapiFields.add("key_enc");
    openapiFields.add("server");
    openapiFields.add("server_enc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KMIPConfigPart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KMIPConfigPart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KMIPConfigPart is not found in the empty JSON string", KMIPConfigPart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KMIPConfigPart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KMIPConfigPart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_enc") != null && !jsonObj.get("key_enc").isJsonNull() && !jsonObj.get("key_enc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_enc` to be an array in the JSON string but got `%s`", jsonObj.get("key_enc").toString()));
      }
      // validate the optional field `server`
      if (jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) {
        KMIPServer.validateJsonElement(jsonObj.get("server"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("server_enc") != null && !jsonObj.get("server_enc").isJsonNull() && !jsonObj.get("server_enc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_enc` to be an array in the JSON string but got `%s`", jsonObj.get("server_enc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KMIPConfigPart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KMIPConfigPart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KMIPConfigPart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KMIPConfigPart.class));

       return (TypeAdapter<T>) new TypeAdapter<KMIPConfigPart>() {
           @Override
           public void write(JsonWriter out, KMIPConfigPart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KMIPConfigPart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KMIPConfigPart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KMIPConfigPart
   * @throws IOException if the JSON string is invalid with respect to KMIPConfigPart
   */
  public static KMIPConfigPart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KMIPConfigPart.class);
  }

  /**
   * Convert an instance of KMIPConfigPart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

