/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.ResponseStopShareItem;
import io.akeyless.client.model.SharingItemFullInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ShareItemOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ShareItemOutput {
  public static final String SERIALIZED_NAME_EMAIL_ERROR = "email_error";
  @SerializedName(SERIALIZED_NAME_EMAIL_ERROR)
  @javax.annotation.Nullable
  private Map<String, String> emailError = new HashMap<>();

  public static final String SERIALIZED_NAME_ITEMS_ERROR = "items_error";
  @SerializedName(SERIALIZED_NAME_ITEMS_ERROR)
  @javax.annotation.Nullable
  private List<ResponseStopShareItem> itemsError = new ArrayList<>();

  public static final String SERIALIZED_NAME_S_TOKEN = "s_token";
  @SerializedName(SERIALIZED_NAME_S_TOKEN)
  @javax.annotation.Nullable
  private String sToken;

  public static final String SERIALIZED_NAME_SHARED_USERS = "shared_users";
  @SerializedName(SERIALIZED_NAME_SHARED_USERS)
  @javax.annotation.Nullable
  private List<String> sharedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED_USERS_FULL_INFO = "shared_users_full_info";
  @SerializedName(SERIALIZED_NAME_SHARED_USERS_FULL_INFO)
  @javax.annotation.Nullable
  private List<SharingItemFullInfo> sharedUsersFullInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARING_URL = "sharing_url";
  @SerializedName(SERIALIZED_NAME_SHARING_URL)
  @javax.annotation.Nullable
  private String sharingUrl;

  public ShareItemOutput() {
  }

  public ShareItemOutput emailError(@javax.annotation.Nullable Map<String, String> emailError) {
    this.emailError = emailError;
    return this;
  }

  public ShareItemOutput putEmailErrorItem(String key, String emailErrorItem) {
    if (this.emailError == null) {
      this.emailError = new HashMap<>();
    }
    this.emailError.put(key, emailErrorItem);
    return this;
  }

  /**
   * Get emailError
   * @return emailError
   */
  @javax.annotation.Nullable
  public Map<String, String> getEmailError() {
    return emailError;
  }

  public void setEmailError(@javax.annotation.Nullable Map<String, String> emailError) {
    this.emailError = emailError;
  }


  public ShareItemOutput itemsError(@javax.annotation.Nullable List<ResponseStopShareItem> itemsError) {
    this.itemsError = itemsError;
    return this;
  }

  public ShareItemOutput addItemsErrorItem(ResponseStopShareItem itemsErrorItem) {
    if (this.itemsError == null) {
      this.itemsError = new ArrayList<>();
    }
    this.itemsError.add(itemsErrorItem);
    return this;
  }

  /**
   * Get itemsError
   * @return itemsError
   */
  @javax.annotation.Nullable
  public List<ResponseStopShareItem> getItemsError() {
    return itemsError;
  }

  public void setItemsError(@javax.annotation.Nullable List<ResponseStopShareItem> itemsError) {
    this.itemsError = itemsError;
  }


  public ShareItemOutput sToken(@javax.annotation.Nullable String sToken) {
    this.sToken = sToken;
    return this;
  }

  /**
   * Get sToken
   * @return sToken
   */
  @javax.annotation.Nullable
  public String getsToken() {
    return sToken;
  }

  public void setsToken(@javax.annotation.Nullable String sToken) {
    this.sToken = sToken;
  }


  public ShareItemOutput sharedUsers(@javax.annotation.Nullable List<String> sharedUsers) {
    this.sharedUsers = sharedUsers;
    return this;
  }

  public ShareItemOutput addSharedUsersItem(String sharedUsersItem) {
    if (this.sharedUsers == null) {
      this.sharedUsers = new ArrayList<>();
    }
    this.sharedUsers.add(sharedUsersItem);
    return this;
  }

  /**
   * Get sharedUsers
   * @return sharedUsers
   */
  @javax.annotation.Nullable
  public List<String> getSharedUsers() {
    return sharedUsers;
  }

  public void setSharedUsers(@javax.annotation.Nullable List<String> sharedUsers) {
    this.sharedUsers = sharedUsers;
  }


  public ShareItemOutput sharedUsersFullInfo(@javax.annotation.Nullable List<SharingItemFullInfo> sharedUsersFullInfo) {
    this.sharedUsersFullInfo = sharedUsersFullInfo;
    return this;
  }

  public ShareItemOutput addSharedUsersFullInfoItem(SharingItemFullInfo sharedUsersFullInfoItem) {
    if (this.sharedUsersFullInfo == null) {
      this.sharedUsersFullInfo = new ArrayList<>();
    }
    this.sharedUsersFullInfo.add(sharedUsersFullInfoItem);
    return this;
  }

  /**
   * Get sharedUsersFullInfo
   * @return sharedUsersFullInfo
   */
  @javax.annotation.Nullable
  public List<SharingItemFullInfo> getSharedUsersFullInfo() {
    return sharedUsersFullInfo;
  }

  public void setSharedUsersFullInfo(@javax.annotation.Nullable List<SharingItemFullInfo> sharedUsersFullInfo) {
    this.sharedUsersFullInfo = sharedUsersFullInfo;
  }


  public ShareItemOutput sharingUrl(@javax.annotation.Nullable String sharingUrl) {
    this.sharingUrl = sharingUrl;
    return this;
  }

  /**
   * Get sharingUrl
   * @return sharingUrl
   */
  @javax.annotation.Nullable
  public String getSharingUrl() {
    return sharingUrl;
  }

  public void setSharingUrl(@javax.annotation.Nullable String sharingUrl) {
    this.sharingUrl = sharingUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareItemOutput shareItemOutput = (ShareItemOutput) o;
    return Objects.equals(this.emailError, shareItemOutput.emailError) &&
        Objects.equals(this.itemsError, shareItemOutput.itemsError) &&
        Objects.equals(this.sToken, shareItemOutput.sToken) &&
        Objects.equals(this.sharedUsers, shareItemOutput.sharedUsers) &&
        Objects.equals(this.sharedUsersFullInfo, shareItemOutput.sharedUsersFullInfo) &&
        Objects.equals(this.sharingUrl, shareItemOutput.sharingUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailError, itemsError, sToken, sharedUsers, sharedUsersFullInfo, sharingUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareItemOutput {\n");
    sb.append("    emailError: ").append(toIndentedString(emailError)).append("\n");
    sb.append("    itemsError: ").append(toIndentedString(itemsError)).append("\n");
    sb.append("    sToken: ").append(toIndentedString(sToken)).append("\n");
    sb.append("    sharedUsers: ").append(toIndentedString(sharedUsers)).append("\n");
    sb.append("    sharedUsersFullInfo: ").append(toIndentedString(sharedUsersFullInfo)).append("\n");
    sb.append("    sharingUrl: ").append(toIndentedString(sharingUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email_error");
    openapiFields.add("items_error");
    openapiFields.add("s_token");
    openapiFields.add("shared_users");
    openapiFields.add("shared_users_full_info");
    openapiFields.add("sharing_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareItemOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareItemOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareItemOutput is not found in the empty JSON string", ShareItemOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareItemOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareItemOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items_error") != null && !jsonObj.get("items_error").isJsonNull()) {
        JsonArray jsonArrayitemsError = jsonObj.getAsJsonArray("items_error");
        if (jsonArrayitemsError != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items_error").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items_error` to be an array in the JSON string but got `%s`", jsonObj.get("items_error").toString()));
          }

          // validate the optional field `items_error` (array)
          for (int i = 0; i < jsonArrayitemsError.size(); i++) {
            ResponseStopShareItem.validateJsonElement(jsonArrayitemsError.get(i));
          };
        }
      }
      if ((jsonObj.get("s_token") != null && !jsonObj.get("s_token").isJsonNull()) && !jsonObj.get("s_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s_token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shared_users") != null && !jsonObj.get("shared_users").isJsonNull() && !jsonObj.get("shared_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_users` to be an array in the JSON string but got `%s`", jsonObj.get("shared_users").toString()));
      }
      if (jsonObj.get("shared_users_full_info") != null && !jsonObj.get("shared_users_full_info").isJsonNull()) {
        JsonArray jsonArraysharedUsersFullInfo = jsonObj.getAsJsonArray("shared_users_full_info");
        if (jsonArraysharedUsersFullInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shared_users_full_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shared_users_full_info` to be an array in the JSON string but got `%s`", jsonObj.get("shared_users_full_info").toString()));
          }

          // validate the optional field `shared_users_full_info` (array)
          for (int i = 0; i < jsonArraysharedUsersFullInfo.size(); i++) {
            SharingItemFullInfo.validateJsonElement(jsonArraysharedUsersFullInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("sharing_url") != null && !jsonObj.get("sharing_url").isJsonNull()) && !jsonObj.get("sharing_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharing_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharing_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareItemOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareItemOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareItemOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareItemOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareItemOutput>() {
           @Override
           public void write(JsonWriter out, ShareItemOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareItemOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareItemOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareItemOutput
   * @throws IOException if the JSON string is invalid with respect to ShareItemOutput
   */
  public static ShareItemOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareItemOutput.class);
  }

  /**
   * Convert an instance of ShareItemOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

