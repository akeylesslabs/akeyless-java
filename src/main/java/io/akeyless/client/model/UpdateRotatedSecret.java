/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * updateRotatedSecret is a command that updates rotated secret. [Deprecated: Use rotated-secret update commands]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateRotatedSecret {
  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "ProviderType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nullable
  private String providerType;

  public static final String SERIALIZED_NAME_ADD_TAG = "add-tag";
  @SerializedName(SERIALIZED_NAME_ADD_TAG)
  @javax.annotation.Nullable
  private List<String> addTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_ID = "api-id";
  @SerializedName(SERIALIZED_NAME_API_ID)
  @javax.annotation.Nullable
  private String apiId;

  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nullable
  private String apiKey;

  public static final String SERIALIZED_NAME_AUTO_ROTATE = "auto-rotate";
  @SerializedName(SERIALIZED_NAME_AUTO_ROTATE)
  @javax.annotation.Nullable
  private String autoRotate;

  public static final String SERIALIZED_NAME_AWS_REGION = "aws-region";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  @javax.annotation.Nullable
  private String awsRegion = "us-east-2";

  public static final String SERIALIZED_NAME_CUSTOM_PAYLOAD = "custom-payload";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYLOAD)
  @javax.annotation.Nullable
  private String customPayload;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description = "default_metadata";

  public static final String SERIALIZED_NAME_GCP_KEY = "gcp-key";
  @SerializedName(SERIALIZED_NAME_GCP_KEY)
  @javax.annotation.Nullable
  private String gcpKey;

  public static final String SERIALIZED_NAME_GRACE_ROTATION = "grace-rotation";
  @SerializedName(SERIALIZED_NAME_GRACE_ROTATION)
  @javax.annotation.Nullable
  private String graceRotation;

  public static final String SERIALIZED_NAME_HOST_PROVIDER = "host-provider";
  @SerializedName(SERIALIZED_NAME_HOST_PROVIDER)
  @javax.annotation.Nullable
  private String hostProvider;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_METADATA = "new-metadata";
  @SerializedName(SERIALIZED_NAME_NEW_METADATA)
  @javax.annotation.Nullable
  private String newMetadata = "default_metadata";

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_NEW_VERSION = "new-version";
  @SerializedName(SERIALIZED_NAME_NEW_VERSION)
  @javax.annotation.Nullable
  private Boolean newVersion;

  public static final String SERIALIZED_NAME_RM_TAG = "rm-tag";
  @SerializedName(SERIALIZED_NAME_RM_TAG)
  @javax.annotation.Nullable
  private List<String> rmTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT = "rotate-after-disconnect";
  @SerializedName(SERIALIZED_NAME_ROTATE_AFTER_DISCONNECT)
  @javax.annotation.Nullable
  private String rotateAfterDisconnect = "false";

  public static final String SERIALIZED_NAME_ROTATED_PASSWORD = "rotated-password";
  @SerializedName(SERIALIZED_NAME_ROTATED_PASSWORD)
  @javax.annotation.Nullable
  private String rotatedPassword;

  public static final String SERIALIZED_NAME_ROTATED_USERNAME = "rotated-username";
  @SerializedName(SERIALIZED_NAME_ROTATED_USERNAME)
  @javax.annotation.Nullable
  private String rotatedUsername;

  public static final String SERIALIZED_NAME_ROTATION_HOUR = "rotation-hour";
  @SerializedName(SERIALIZED_NAME_ROTATION_HOUR)
  @javax.annotation.Nullable
  private Integer rotationHour;

  public static final String SERIALIZED_NAME_ROTATION_INTERVAL = "rotation-interval";
  @SerializedName(SERIALIZED_NAME_ROTATION_INTERVAL)
  @javax.annotation.Nullable
  private String rotationInterval;

  public static final String SERIALIZED_NAME_ROTATOR_CREDS_TYPE = "rotator-creds-type";
  @SerializedName(SERIALIZED_NAME_ROTATOR_CREDS_TYPE)
  @javax.annotation.Nullable
  private String rotatorCredsType = "use-self-creds";

  public static final String SERIALIZED_NAME_ROTATOR_CUSTOM_CMD = "rotator-custom-cmd";
  @SerializedName(SERIALIZED_NAME_ROTATOR_CUSTOM_CMD)
  @javax.annotation.Nullable
  private String rotatorCustomCmd;

  public static final String SERIALIZED_NAME_SAME_PASSWORD = "same-password";
  @SerializedName(SERIALIZED_NAME_SAME_PASSWORD)
  @javax.annotation.Nullable
  private String samePassword;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER = "secure-access-allow-external-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ALLOW_EXTERNAL_USER)
  @javax.annotation.Nullable
  private Boolean secureAccessAllowExternalUser = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_AWS_ACCOUNT_ID = "secure-access-aws-account-id";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_AWS_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String secureAccessAwsAccountId;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_AWS_NATIVE_CLI = "secure-access-aws-native-cli";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_AWS_NATIVE_CLI)
  @javax.annotation.Nullable
  private Boolean secureAccessAwsNativeCli;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_NAME = "secure-access-db-name";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_NAME)
  @javax.annotation.Nullable
  private String secureAccessDbName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA = "secure-access-db-schema";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DB_SCHEMA)
  @javax.annotation.Nullable
  private String secureAccessDbSchema;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DISABLE_CONCURRENT_CONNECTIONS = "secure-access-disable-concurrent-connections";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DISABLE_CONCURRENT_CONNECTIONS)
  @javax.annotation.Nullable
  private Boolean secureAccessDisableConcurrentConnections;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_HOST = "secure-access-host";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_HOST)
  @javax.annotation.Nullable
  private List<String> secureAccessHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN = "secure-access-rdp-domain";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_DOMAIN)
  @javax.annotation.Nullable
  private String secureAccessRdpDomain;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_RDP_USER = "secure-access-rdp-user";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_RDP_USER)
  @javax.annotation.Nullable
  private String secureAccessRdpUser;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_URL = "secure-access-url";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_URL)
  @javax.annotation.Nullable
  private String secureAccessUrl;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING = "secure-access-web-browsing";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING)
  @javax.annotation.Nullable
  private Boolean secureAccessWebBrowsing = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY = "secure-access-web-proxy";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY)
  @javax.annotation.Nullable
  private Boolean secureAccessWebProxy = false;

  public static final String SERIALIZED_NAME_SSH_PASSWORD = "ssh-password";
  @SerializedName(SERIALIZED_NAME_SSH_PASSWORD)
  @javax.annotation.Nullable
  private String sshPassword;

  public static final String SERIALIZED_NAME_SSH_USERNAME = "ssh-username";
  @SerializedName(SERIALIZED_NAME_SSH_USERNAME)
  @javax.annotation.Nullable
  private String sshUsername;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_KEY_NAME = "storage-account-key-name";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_KEY_NAME)
  @javax.annotation.Nullable
  private String storageAccountKeyName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "user-attribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  @javax.annotation.Nullable
  private String userAttribute = "cn";

  public static final String SERIALIZED_NAME_USER_DN = "user-dn";
  @SerializedName(SERIALIZED_NAME_USER_DN)
  @javax.annotation.Nullable
  private String userDn;

  public UpdateRotatedSecret() {
  }

  public UpdateRotatedSecret providerType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nullable
  public String getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nullable String providerType) {
    this.providerType = providerType;
  }


  public UpdateRotatedSecret addTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
    return this;
  }

  public UpdateRotatedSecret addAddTagItem(String addTagItem) {
    if (this.addTag == null) {
      this.addTag = new ArrayList<>();
    }
    this.addTag.add(addTagItem);
    return this;
  }

  /**
   * List of the new tags that will be attached to this item
   * @return addTag
   */
  @javax.annotation.Nullable
  public List<String> getAddTag() {
    return addTag;
  }

  public void setAddTag(@javax.annotation.Nullable List<String> addTag) {
    this.addTag = addTag;
  }


  public UpdateRotatedSecret apiId(@javax.annotation.Nullable String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * API ID to rotate
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(@javax.annotation.Nullable String apiId) {
    this.apiId = apiId;
  }


  public UpdateRotatedSecret apiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * API key to rotate
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nullable String apiKey) {
    this.apiKey = apiKey;
  }


  public UpdateRotatedSecret autoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
    return this;
  }

  /**
   * Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]
   * @return autoRotate
   */
  @javax.annotation.Nullable
  public String getAutoRotate() {
    return autoRotate;
  }

  public void setAutoRotate(@javax.annotation.Nullable String autoRotate) {
    this.autoRotate = autoRotate;
  }


  public UpdateRotatedSecret awsRegion(@javax.annotation.Nullable String awsRegion) {
    this.awsRegion = awsRegion;
    return this;
  }

  /**
   * Aws Region (relevant only for aws)
   * @return awsRegion
   */
  @javax.annotation.Nullable
  public String getAwsRegion() {
    return awsRegion;
  }

  public void setAwsRegion(@javax.annotation.Nullable String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public UpdateRotatedSecret customPayload(@javax.annotation.Nullable String customPayload) {
    this.customPayload = customPayload;
    return this;
  }

  /**
   * Secret payload to be sent with rotation request (relevant only for rotator-type&#x3D;custom)
   * @return customPayload
   */
  @javax.annotation.Nullable
  public String getCustomPayload() {
    return customPayload;
  }

  public void setCustomPayload(@javax.annotation.Nullable String customPayload) {
    this.customPayload = customPayload;
  }


  public UpdateRotatedSecret description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateRotatedSecret gcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
    return this;
  }

  /**
   * Base64-encoded service account private key text
   * @return gcpKey
   */
  @javax.annotation.Nullable
  public String getGcpKey() {
    return gcpKey;
  }

  public void setGcpKey(@javax.annotation.Nullable String gcpKey) {
    this.gcpKey = gcpKey;
  }


  public UpdateRotatedSecret graceRotation(@javax.annotation.Nullable String graceRotation) {
    this.graceRotation = graceRotation;
    return this;
  }

  /**
   * Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]
   * @return graceRotation
   */
  @javax.annotation.Nullable
  public String getGraceRotation() {
    return graceRotation;
  }

  public void setGraceRotation(@javax.annotation.Nullable String graceRotation) {
    this.graceRotation = graceRotation;
  }


  public UpdateRotatedSecret hostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
    return this;
  }

  /**
   * Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret
   * @return hostProvider
   */
  @javax.annotation.Nullable
  public String getHostProvider() {
    return hostProvider;
  }

  public void setHostProvider(@javax.annotation.Nullable String hostProvider) {
    this.hostProvider = hostProvider;
  }


  public UpdateRotatedSecret json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateRotatedSecret keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateRotatedSecret key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public UpdateRotatedSecret name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateRotatedSecret newMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
    return this;
  }

  /**
   * Deprecated - use description
   * @return newMetadata
   */
  @javax.annotation.Nullable
  public String getNewMetadata() {
    return newMetadata;
  }

  public void setNewMetadata(@javax.annotation.Nullable String newMetadata) {
    this.newMetadata = newMetadata;
  }


  public UpdateRotatedSecret newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New item name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public UpdateRotatedSecret newVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
    return this;
  }

  /**
   * Deprecated
   * @return newVersion
   */
  @javax.annotation.Nullable
  public Boolean getNewVersion() {
    return newVersion;
  }

  public void setNewVersion(@javax.annotation.Nullable Boolean newVersion) {
    this.newVersion = newVersion;
  }


  public UpdateRotatedSecret rmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
    return this;
  }

  public UpdateRotatedSecret addRmTagItem(String rmTagItem) {
    if (this.rmTag == null) {
      this.rmTag = new ArrayList<>();
    }
    this.rmTag.add(rmTagItem);
    return this;
  }

  /**
   * List of the existent tags that will be removed from this item
   * @return rmTag
   */
  @javax.annotation.Nullable
  public List<String> getRmTag() {
    return rmTag;
  }

  public void setRmTag(@javax.annotation.Nullable List<String> rmTag) {
    this.rmTag = rmTag;
  }


  public UpdateRotatedSecret rotateAfterDisconnect(@javax.annotation.Nullable String rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
    return this;
  }

  /**
   * Rotate the value of the secret after SRA session ends [true/false]
   * @return rotateAfterDisconnect
   */
  @javax.annotation.Nullable
  public String getRotateAfterDisconnect() {
    return rotateAfterDisconnect;
  }

  public void setRotateAfterDisconnect(@javax.annotation.Nullable String rotateAfterDisconnect) {
    this.rotateAfterDisconnect = rotateAfterDisconnect;
  }


  public UpdateRotatedSecret rotatedPassword(@javax.annotation.Nullable String rotatedPassword) {
    this.rotatedPassword = rotatedPassword;
    return this;
  }

  /**
   * rotated-username password
   * @return rotatedPassword
   */
  @javax.annotation.Nullable
  public String getRotatedPassword() {
    return rotatedPassword;
  }

  public void setRotatedPassword(@javax.annotation.Nullable String rotatedPassword) {
    this.rotatedPassword = rotatedPassword;
  }


  public UpdateRotatedSecret rotatedUsername(@javax.annotation.Nullable String rotatedUsername) {
    this.rotatedUsername = rotatedUsername;
    return this;
  }

  /**
   * username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it&#39;s own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password
   * @return rotatedUsername
   */
  @javax.annotation.Nullable
  public String getRotatedUsername() {
    return rotatedUsername;
  }

  public void setRotatedUsername(@javax.annotation.Nullable String rotatedUsername) {
    this.rotatedUsername = rotatedUsername;
  }


  public UpdateRotatedSecret rotationHour(@javax.annotation.Nullable Integer rotationHour) {
    this.rotationHour = rotationHour;
    return this;
  }

  /**
   * The Hour of the rotation in UTC
   * @return rotationHour
   */
  @javax.annotation.Nullable
  public Integer getRotationHour() {
    return rotationHour;
  }

  public void setRotationHour(@javax.annotation.Nullable Integer rotationHour) {
    this.rotationHour = rotationHour;
  }


  public UpdateRotatedSecret rotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
    return this;
  }

  /**
   * The number of days to wait between every automatic key rotation (7-365)
   * @return rotationInterval
   */
  @javax.annotation.Nullable
  public String getRotationInterval() {
    return rotationInterval;
  }

  public void setRotationInterval(@javax.annotation.Nullable String rotationInterval) {
    this.rotationInterval = rotationInterval;
  }


  public UpdateRotatedSecret rotatorCredsType(@javax.annotation.Nullable String rotatorCredsType) {
    this.rotatorCredsType = rotatorCredsType;
    return this;
  }

  /**
   * The credentials to connect with use-self-creds/use-target-creds
   * @return rotatorCredsType
   */
  @javax.annotation.Nullable
  public String getRotatorCredsType() {
    return rotatorCredsType;
  }

  public void setRotatorCredsType(@javax.annotation.Nullable String rotatorCredsType) {
    this.rotatorCredsType = rotatorCredsType;
  }


  public UpdateRotatedSecret rotatorCustomCmd(@javax.annotation.Nullable String rotatorCustomCmd) {
    this.rotatorCustomCmd = rotatorCustomCmd;
    return this;
  }

  /**
   * \&quot;Custom rotation command (relevant only for ssh target)
   * @return rotatorCustomCmd
   */
  @javax.annotation.Nullable
  public String getRotatorCustomCmd() {
    return rotatorCustomCmd;
  }

  public void setRotatorCustomCmd(@javax.annotation.Nullable String rotatorCustomCmd) {
    this.rotatorCustomCmd = rotatorCustomCmd;
  }


  public UpdateRotatedSecret samePassword(@javax.annotation.Nullable String samePassword) {
    this.samePassword = samePassword;
    return this;
  }

  /**
   * Rotate same password for each host from the Linked Target (relevant only for Linked Target)
   * @return samePassword
   */
  @javax.annotation.Nullable
  public String getSamePassword() {
    return samePassword;
  }

  public void setSamePassword(@javax.annotation.Nullable String samePassword) {
    this.samePassword = samePassword;
  }


  public UpdateRotatedSecret secureAccessAllowExternalUser(@javax.annotation.Nullable Boolean secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
    return this;
  }

  /**
   * Allow providing external user for a domain users (relevant only for rdp)
   * @return secureAccessAllowExternalUser
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAllowExternalUser() {
    return secureAccessAllowExternalUser;
  }

  public void setSecureAccessAllowExternalUser(@javax.annotation.Nullable Boolean secureAccessAllowExternalUser) {
    this.secureAccessAllowExternalUser = secureAccessAllowExternalUser;
  }


  public UpdateRotatedSecret secureAccessAwsAccountId(@javax.annotation.Nullable String secureAccessAwsAccountId) {
    this.secureAccessAwsAccountId = secureAccessAwsAccountId;
    return this;
  }

  /**
   * The AWS account id (relevant only for aws)
   * @return secureAccessAwsAccountId
   */
  @javax.annotation.Nullable
  public String getSecureAccessAwsAccountId() {
    return secureAccessAwsAccountId;
  }

  public void setSecureAccessAwsAccountId(@javax.annotation.Nullable String secureAccessAwsAccountId) {
    this.secureAccessAwsAccountId = secureAccessAwsAccountId;
  }


  public UpdateRotatedSecret secureAccessAwsNativeCli(@javax.annotation.Nullable Boolean secureAccessAwsNativeCli) {
    this.secureAccessAwsNativeCli = secureAccessAwsNativeCli;
    return this;
  }

  /**
   * The AWS native cli
   * @return secureAccessAwsNativeCli
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAwsNativeCli() {
    return secureAccessAwsNativeCli;
  }

  public void setSecureAccessAwsNativeCli(@javax.annotation.Nullable Boolean secureAccessAwsNativeCli) {
    this.secureAccessAwsNativeCli = secureAccessAwsNativeCli;
  }


  public UpdateRotatedSecret secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public UpdateRotatedSecret secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public UpdateRotatedSecret secureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
    return this;
  }

  /**
   * The DB name (relevant only for DB Dynamic-Secret)
   * @return secureAccessDbName
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbName() {
    return secureAccessDbName;
  }

  public void setSecureAccessDbName(@javax.annotation.Nullable String secureAccessDbName) {
    this.secureAccessDbName = secureAccessDbName;
  }


  public UpdateRotatedSecret secureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
    return this;
  }

  /**
   * The db schema (relevant only for mssql or postgresql)
   * @return secureAccessDbSchema
   */
  @javax.annotation.Nullable
  public String getSecureAccessDbSchema() {
    return secureAccessDbSchema;
  }

  public void setSecureAccessDbSchema(@javax.annotation.Nullable String secureAccessDbSchema) {
    this.secureAccessDbSchema = secureAccessDbSchema;
  }


  public UpdateRotatedSecret secureAccessDisableConcurrentConnections(@javax.annotation.Nullable Boolean secureAccessDisableConcurrentConnections) {
    this.secureAccessDisableConcurrentConnections = secureAccessDisableConcurrentConnections;
    return this;
  }

  /**
   * Enable this flag to prevent simultaneous use of the same secret
   * @return secureAccessDisableConcurrentConnections
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessDisableConcurrentConnections() {
    return secureAccessDisableConcurrentConnections;
  }

  public void setSecureAccessDisableConcurrentConnections(@javax.annotation.Nullable Boolean secureAccessDisableConcurrentConnections) {
    this.secureAccessDisableConcurrentConnections = secureAccessDisableConcurrentConnections;
  }


  public UpdateRotatedSecret secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public UpdateRotatedSecret secureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
    return this;
  }

  public UpdateRotatedSecret addSecureAccessHostItem(String secureAccessHostItem) {
    if (this.secureAccessHost == null) {
      this.secureAccessHost = new ArrayList<>();
    }
    this.secureAccessHost.add(secureAccessHostItem);
    return this;
  }

  /**
   * Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)
   * @return secureAccessHost
   */
  @javax.annotation.Nullable
  public List<String> getSecureAccessHost() {
    return secureAccessHost;
  }

  public void setSecureAccessHost(@javax.annotation.Nullable List<String> secureAccessHost) {
    this.secureAccessHost = secureAccessHost;
  }


  public UpdateRotatedSecret secureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
    return this;
  }

  /**
   * Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)
   * @return secureAccessRdpDomain
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpDomain() {
    return secureAccessRdpDomain;
  }

  public void setSecureAccessRdpDomain(@javax.annotation.Nullable String secureAccessRdpDomain) {
    this.secureAccessRdpDomain = secureAccessRdpDomain;
  }


  public UpdateRotatedSecret secureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
    return this;
  }

  /**
   * Override the RDP Domain username (relevant only for rdp)
   * @return secureAccessRdpUser
   */
  @javax.annotation.Nullable
  public String getSecureAccessRdpUser() {
    return secureAccessRdpUser;
  }

  public void setSecureAccessRdpUser(@javax.annotation.Nullable String secureAccessRdpUser) {
    this.secureAccessRdpUser = secureAccessRdpUser;
  }


  public UpdateRotatedSecret secureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
    return this;
  }

  /**
   * Destination URL to inject secrets
   * @return secureAccessUrl
   */
  @javax.annotation.Nullable
  public String getSecureAccessUrl() {
    return secureAccessUrl;
  }

  public void setSecureAccessUrl(@javax.annotation.Nullable String secureAccessUrl) {
    this.secureAccessUrl = secureAccessUrl;
  }


  public UpdateRotatedSecret secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public UpdateRotatedSecret secureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
    return this;
  }

  /**
   * Secure browser viaAkeyless&#39;s Secure Remote Access (SRA) (relevant only for aws or azure)
   * @return secureAccessWebBrowsing
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebBrowsing() {
    return secureAccessWebBrowsing;
  }

  public void setSecureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
  }


  public UpdateRotatedSecret secureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
    return this;
  }

  /**
   * Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA) (relevant only for aws or azure)
   * @return secureAccessWebProxy
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebProxy() {
    return secureAccessWebProxy;
  }

  public void setSecureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
  }


  public UpdateRotatedSecret sshPassword(@javax.annotation.Nullable String sshPassword) {
    this.sshPassword = sshPassword;
    return this;
  }

  /**
   * Deprecated: use RotatedPassword
   * @return sshPassword
   */
  @javax.annotation.Nullable
  public String getSshPassword() {
    return sshPassword;
  }

  public void setSshPassword(@javax.annotation.Nullable String sshPassword) {
    this.sshPassword = sshPassword;
  }


  public UpdateRotatedSecret sshUsername(@javax.annotation.Nullable String sshUsername) {
    this.sshUsername = sshUsername;
    return this;
  }

  /**
   * Deprecated: use RotatedUser
   * @return sshUsername
   */
  @javax.annotation.Nullable
  public String getSshUsername() {
    return sshUsername;
  }

  public void setSshUsername(@javax.annotation.Nullable String sshUsername) {
    this.sshUsername = sshUsername;
  }


  public UpdateRotatedSecret storageAccountKeyName(@javax.annotation.Nullable String storageAccountKeyName) {
    this.storageAccountKeyName = storageAccountKeyName;
    return this;
  }

  /**
   * The name of the storage account key to rotate [key1/key2/kerb1/kerb2]
   * @return storageAccountKeyName
   */
  @javax.annotation.Nullable
  public String getStorageAccountKeyName() {
    return storageAccountKeyName;
  }

  public void setStorageAccountKeyName(@javax.annotation.Nullable String storageAccountKeyName) {
    this.storageAccountKeyName = storageAccountKeyName;
  }


  public UpdateRotatedSecret token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateRotatedSecret uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public UpdateRotatedSecret userAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * LDAP User Attribute, Default value \&quot;cn\&quot;
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(@javax.annotation.Nullable String userAttribute) {
    this.userAttribute = userAttribute;
  }


  public UpdateRotatedSecret userDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
    return this;
  }

  /**
   * LDAP User Base DN
   * @return userDn
   */
  @javax.annotation.Nullable
  public String getUserDn() {
    return userDn;
  }

  public void setUserDn(@javax.annotation.Nullable String userDn) {
    this.userDn = userDn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRotatedSecret updateRotatedSecret = (UpdateRotatedSecret) o;
    return Objects.equals(this.providerType, updateRotatedSecret.providerType) &&
        Objects.equals(this.addTag, updateRotatedSecret.addTag) &&
        Objects.equals(this.apiId, updateRotatedSecret.apiId) &&
        Objects.equals(this.apiKey, updateRotatedSecret.apiKey) &&
        Objects.equals(this.autoRotate, updateRotatedSecret.autoRotate) &&
        Objects.equals(this.awsRegion, updateRotatedSecret.awsRegion) &&
        Objects.equals(this.customPayload, updateRotatedSecret.customPayload) &&
        Objects.equals(this.description, updateRotatedSecret.description) &&
        Objects.equals(this.gcpKey, updateRotatedSecret.gcpKey) &&
        Objects.equals(this.graceRotation, updateRotatedSecret.graceRotation) &&
        Objects.equals(this.hostProvider, updateRotatedSecret.hostProvider) &&
        Objects.equals(this.json, updateRotatedSecret.json) &&
        Objects.equals(this.keepPrevVersion, updateRotatedSecret.keepPrevVersion) &&
        Objects.equals(this.key, updateRotatedSecret.key) &&
        Objects.equals(this.name, updateRotatedSecret.name) &&
        Objects.equals(this.newMetadata, updateRotatedSecret.newMetadata) &&
        Objects.equals(this.newName, updateRotatedSecret.newName) &&
        Objects.equals(this.newVersion, updateRotatedSecret.newVersion) &&
        Objects.equals(this.rmTag, updateRotatedSecret.rmTag) &&
        Objects.equals(this.rotateAfterDisconnect, updateRotatedSecret.rotateAfterDisconnect) &&
        Objects.equals(this.rotatedPassword, updateRotatedSecret.rotatedPassword) &&
        Objects.equals(this.rotatedUsername, updateRotatedSecret.rotatedUsername) &&
        Objects.equals(this.rotationHour, updateRotatedSecret.rotationHour) &&
        Objects.equals(this.rotationInterval, updateRotatedSecret.rotationInterval) &&
        Objects.equals(this.rotatorCredsType, updateRotatedSecret.rotatorCredsType) &&
        Objects.equals(this.rotatorCustomCmd, updateRotatedSecret.rotatorCustomCmd) &&
        Objects.equals(this.samePassword, updateRotatedSecret.samePassword) &&
        Objects.equals(this.secureAccessAllowExternalUser, updateRotatedSecret.secureAccessAllowExternalUser) &&
        Objects.equals(this.secureAccessAwsAccountId, updateRotatedSecret.secureAccessAwsAccountId) &&
        Objects.equals(this.secureAccessAwsNativeCli, updateRotatedSecret.secureAccessAwsNativeCli) &&
        Objects.equals(this.secureAccessBastionIssuer, updateRotatedSecret.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, updateRotatedSecret.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessDbName, updateRotatedSecret.secureAccessDbName) &&
        Objects.equals(this.secureAccessDbSchema, updateRotatedSecret.secureAccessDbSchema) &&
        Objects.equals(this.secureAccessDisableConcurrentConnections, updateRotatedSecret.secureAccessDisableConcurrentConnections) &&
        Objects.equals(this.secureAccessEnable, updateRotatedSecret.secureAccessEnable) &&
        Objects.equals(this.secureAccessHost, updateRotatedSecret.secureAccessHost) &&
        Objects.equals(this.secureAccessRdpDomain, updateRotatedSecret.secureAccessRdpDomain) &&
        Objects.equals(this.secureAccessRdpUser, updateRotatedSecret.secureAccessRdpUser) &&
        Objects.equals(this.secureAccessUrl, updateRotatedSecret.secureAccessUrl) &&
        Objects.equals(this.secureAccessWeb, updateRotatedSecret.secureAccessWeb) &&
        Objects.equals(this.secureAccessWebBrowsing, updateRotatedSecret.secureAccessWebBrowsing) &&
        Objects.equals(this.secureAccessWebProxy, updateRotatedSecret.secureAccessWebProxy) &&
        Objects.equals(this.sshPassword, updateRotatedSecret.sshPassword) &&
        Objects.equals(this.sshUsername, updateRotatedSecret.sshUsername) &&
        Objects.equals(this.storageAccountKeyName, updateRotatedSecret.storageAccountKeyName) &&
        Objects.equals(this.token, updateRotatedSecret.token) &&
        Objects.equals(this.uidToken, updateRotatedSecret.uidToken) &&
        Objects.equals(this.userAttribute, updateRotatedSecret.userAttribute) &&
        Objects.equals(this.userDn, updateRotatedSecret.userDn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerType, addTag, apiId, apiKey, autoRotate, awsRegion, customPayload, description, gcpKey, graceRotation, hostProvider, json, keepPrevVersion, key, name, newMetadata, newName, newVersion, rmTag, rotateAfterDisconnect, rotatedPassword, rotatedUsername, rotationHour, rotationInterval, rotatorCredsType, rotatorCustomCmd, samePassword, secureAccessAllowExternalUser, secureAccessAwsAccountId, secureAccessAwsNativeCli, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessDbName, secureAccessDbSchema, secureAccessDisableConcurrentConnections, secureAccessEnable, secureAccessHost, secureAccessRdpDomain, secureAccessRdpUser, secureAccessUrl, secureAccessWeb, secureAccessWebBrowsing, secureAccessWebProxy, sshPassword, sshUsername, storageAccountKeyName, token, uidToken, userAttribute, userDn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRotatedSecret {\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    addTag: ").append(toIndentedString(addTag)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    autoRotate: ").append(toIndentedString(autoRotate)).append("\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    customPayload: ").append(toIndentedString(customPayload)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gcpKey: ").append(toIndentedString(gcpKey)).append("\n");
    sb.append("    graceRotation: ").append(toIndentedString(graceRotation)).append("\n");
    sb.append("    hostProvider: ").append(toIndentedString(hostProvider)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newMetadata: ").append(toIndentedString(newMetadata)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    newVersion: ").append(toIndentedString(newVersion)).append("\n");
    sb.append("    rmTag: ").append(toIndentedString(rmTag)).append("\n");
    sb.append("    rotateAfterDisconnect: ").append(toIndentedString(rotateAfterDisconnect)).append("\n");
    sb.append("    rotatedPassword: ").append(toIndentedString(rotatedPassword)).append("\n");
    sb.append("    rotatedUsername: ").append(toIndentedString(rotatedUsername)).append("\n");
    sb.append("    rotationHour: ").append(toIndentedString(rotationHour)).append("\n");
    sb.append("    rotationInterval: ").append(toIndentedString(rotationInterval)).append("\n");
    sb.append("    rotatorCredsType: ").append(toIndentedString(rotatorCredsType)).append("\n");
    sb.append("    rotatorCustomCmd: ").append(toIndentedString(rotatorCustomCmd)).append("\n");
    sb.append("    samePassword: ").append(toIndentedString(samePassword)).append("\n");
    sb.append("    secureAccessAllowExternalUser: ").append(toIndentedString(secureAccessAllowExternalUser)).append("\n");
    sb.append("    secureAccessAwsAccountId: ").append(toIndentedString(secureAccessAwsAccountId)).append("\n");
    sb.append("    secureAccessAwsNativeCli: ").append(toIndentedString(secureAccessAwsNativeCli)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessDbName: ").append(toIndentedString(secureAccessDbName)).append("\n");
    sb.append("    secureAccessDbSchema: ").append(toIndentedString(secureAccessDbSchema)).append("\n");
    sb.append("    secureAccessDisableConcurrentConnections: ").append(toIndentedString(secureAccessDisableConcurrentConnections)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessHost: ").append(toIndentedString(secureAccessHost)).append("\n");
    sb.append("    secureAccessRdpDomain: ").append(toIndentedString(secureAccessRdpDomain)).append("\n");
    sb.append("    secureAccessRdpUser: ").append(toIndentedString(secureAccessRdpUser)).append("\n");
    sb.append("    secureAccessUrl: ").append(toIndentedString(secureAccessUrl)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    secureAccessWebBrowsing: ").append(toIndentedString(secureAccessWebBrowsing)).append("\n");
    sb.append("    secureAccessWebProxy: ").append(toIndentedString(secureAccessWebProxy)).append("\n");
    sb.append("    sshPassword: ").append(toIndentedString(sshPassword)).append("\n");
    sb.append("    sshUsername: ").append(toIndentedString(sshUsername)).append("\n");
    sb.append("    storageAccountKeyName: ").append(toIndentedString(storageAccountKeyName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("    userDn: ").append(toIndentedString(userDn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProviderType");
    openapiFields.add("add-tag");
    openapiFields.add("api-id");
    openapiFields.add("api-key");
    openapiFields.add("auto-rotate");
    openapiFields.add("aws-region");
    openapiFields.add("custom-payload");
    openapiFields.add("description");
    openapiFields.add("gcp-key");
    openapiFields.add("grace-rotation");
    openapiFields.add("host-provider");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("new-metadata");
    openapiFields.add("new-name");
    openapiFields.add("new-version");
    openapiFields.add("rm-tag");
    openapiFields.add("rotate-after-disconnect");
    openapiFields.add("rotated-password");
    openapiFields.add("rotated-username");
    openapiFields.add("rotation-hour");
    openapiFields.add("rotation-interval");
    openapiFields.add("rotator-creds-type");
    openapiFields.add("rotator-custom-cmd");
    openapiFields.add("same-password");
    openapiFields.add("secure-access-allow-external-user");
    openapiFields.add("secure-access-aws-account-id");
    openapiFields.add("secure-access-aws-native-cli");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-db-name");
    openapiFields.add("secure-access-db-schema");
    openapiFields.add("secure-access-disable-concurrent-connections");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-host");
    openapiFields.add("secure-access-rdp-domain");
    openapiFields.add("secure-access-rdp-user");
    openapiFields.add("secure-access-url");
    openapiFields.add("secure-access-web");
    openapiFields.add("secure-access-web-browsing");
    openapiFields.add("secure-access-web-proxy");
    openapiFields.add("ssh-password");
    openapiFields.add("ssh-username");
    openapiFields.add("storage-account-key-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("user-attribute");
    openapiFields.add("user-dn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRotatedSecret
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRotatedSecret.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRotatedSecret is not found in the empty JSON string", UpdateRotatedSecret.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRotatedSecret.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRotatedSecret` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRotatedSecret.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ProviderType") != null && !jsonObj.get("ProviderType").isJsonNull()) && !jsonObj.get("ProviderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("add-tag") != null && !jsonObj.get("add-tag").isJsonNull() && !jsonObj.get("add-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add-tag` to be an array in the JSON string but got `%s`", jsonObj.get("add-tag").toString()));
      }
      if ((jsonObj.get("api-id") != null && !jsonObj.get("api-id").isJsonNull()) && !jsonObj.get("api-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-id").toString()));
      }
      if ((jsonObj.get("api-key") != null && !jsonObj.get("api-key").isJsonNull()) && !jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if ((jsonObj.get("auto-rotate") != null && !jsonObj.get("auto-rotate").isJsonNull()) && !jsonObj.get("auto-rotate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto-rotate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto-rotate").toString()));
      }
      if ((jsonObj.get("aws-region") != null && !jsonObj.get("aws-region").isJsonNull()) && !jsonObj.get("aws-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws-region").toString()));
      }
      if ((jsonObj.get("custom-payload") != null && !jsonObj.get("custom-payload").isJsonNull()) && !jsonObj.get("custom-payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-payload").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gcp-key") != null && !jsonObj.get("gcp-key").isJsonNull()) && !jsonObj.get("gcp-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp-key").toString()));
      }
      if ((jsonObj.get("grace-rotation") != null && !jsonObj.get("grace-rotation").isJsonNull()) && !jsonObj.get("grace-rotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grace-rotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grace-rotation").toString()));
      }
      if ((jsonObj.get("host-provider") != null && !jsonObj.get("host-provider").isJsonNull()) && !jsonObj.get("host-provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host-provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host-provider").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-metadata") != null && !jsonObj.get("new-metadata").isJsonNull()) && !jsonObj.get("new-metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-metadata").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rm-tag") != null && !jsonObj.get("rm-tag").isJsonNull() && !jsonObj.get("rm-tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rm-tag` to be an array in the JSON string but got `%s`", jsonObj.get("rm-tag").toString()));
      }
      if ((jsonObj.get("rotate-after-disconnect") != null && !jsonObj.get("rotate-after-disconnect").isJsonNull()) && !jsonObj.get("rotate-after-disconnect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotate-after-disconnect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotate-after-disconnect").toString()));
      }
      if ((jsonObj.get("rotated-password") != null && !jsonObj.get("rotated-password").isJsonNull()) && !jsonObj.get("rotated-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotated-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotated-password").toString()));
      }
      if ((jsonObj.get("rotated-username") != null && !jsonObj.get("rotated-username").isJsonNull()) && !jsonObj.get("rotated-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotated-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotated-username").toString()));
      }
      if ((jsonObj.get("rotation-interval") != null && !jsonObj.get("rotation-interval").isJsonNull()) && !jsonObj.get("rotation-interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation-interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation-interval").toString()));
      }
      if ((jsonObj.get("rotator-creds-type") != null && !jsonObj.get("rotator-creds-type").isJsonNull()) && !jsonObj.get("rotator-creds-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotator-creds-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotator-creds-type").toString()));
      }
      if ((jsonObj.get("rotator-custom-cmd") != null && !jsonObj.get("rotator-custom-cmd").isJsonNull()) && !jsonObj.get("rotator-custom-cmd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotator-custom-cmd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotator-custom-cmd").toString()));
      }
      if ((jsonObj.get("same-password") != null && !jsonObj.get("same-password").isJsonNull()) && !jsonObj.get("same-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `same-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("same-password").toString()));
      }
      if ((jsonObj.get("secure-access-aws-account-id") != null && !jsonObj.get("secure-access-aws-account-id").isJsonNull()) && !jsonObj.get("secure-access-aws-account-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-aws-account-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-aws-account-id").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-db-name") != null && !jsonObj.get("secure-access-db-name").isJsonNull()) && !jsonObj.get("secure-access-db-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-name").toString()));
      }
      if ((jsonObj.get("secure-access-db-schema") != null && !jsonObj.get("secure-access-db-schema").isJsonNull()) && !jsonObj.get("secure-access-db-schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-db-schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-db-schema").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secure-access-host") != null && !jsonObj.get("secure-access-host").isJsonNull() && !jsonObj.get("secure-access-host").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-host` to be an array in the JSON string but got `%s`", jsonObj.get("secure-access-host").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-domain") != null && !jsonObj.get("secure-access-rdp-domain").isJsonNull()) && !jsonObj.get("secure-access-rdp-domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-domain").toString()));
      }
      if ((jsonObj.get("secure-access-rdp-user") != null && !jsonObj.get("secure-access-rdp-user").isJsonNull()) && !jsonObj.get("secure-access-rdp-user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-rdp-user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-rdp-user").toString()));
      }
      if ((jsonObj.get("secure-access-url") != null && !jsonObj.get("secure-access-url").isJsonNull()) && !jsonObj.get("secure-access-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-url").toString()));
      }
      if ((jsonObj.get("ssh-password") != null && !jsonObj.get("ssh-password").isJsonNull()) && !jsonObj.get("ssh-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh-password").toString()));
      }
      if ((jsonObj.get("ssh-username") != null && !jsonObj.get("ssh-username").isJsonNull()) && !jsonObj.get("ssh-username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh-username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh-username").toString()));
      }
      if ((jsonObj.get("storage-account-key-name") != null && !jsonObj.get("storage-account-key-name").isJsonNull()) && !jsonObj.get("storage-account-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage-account-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage-account-key-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-attribute") != null && !jsonObj.get("user-attribute").isJsonNull()) && !jsonObj.get("user-attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-attribute").toString()));
      }
      if ((jsonObj.get("user-dn") != null && !jsonObj.get("user-dn").isJsonNull()) && !jsonObj.get("user-dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-dn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRotatedSecret.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRotatedSecret' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRotatedSecret> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRotatedSecret.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRotatedSecret>() {
           @Override
           public void write(JsonWriter out, UpdateRotatedSecret value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRotatedSecret read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRotatedSecret given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRotatedSecret
   * @throws IOException if the JSON string is invalid with respect to UpdateRotatedSecret
   */
  public static UpdateRotatedSecret fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRotatedSecret.class);
  }

  /**
   * Convert an instance of UpdateRotatedSecret to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

