/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.ClassicKeyStatusInfo;
import io.akeyless.client.model.ExternalKMSKeyId;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ClassicKeyTargetInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ClassicKeyTargetInfo {
  public static final String SERIALIZED_NAME_EXTERNAL_KMS_ID = "external_kms_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KMS_ID)
  @javax.annotation.Nullable
  private ExternalKMSKeyId externalKmsId;

  public static final String SERIALIZED_NAME_KEY_PURPOSE = "key_purpose";
  @SerializedName(SERIALIZED_NAME_KEY_PURPOSE)
  @javax.annotation.Nullable
  private List<String> keyPurpose = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_STATUS = "key_status";
  @SerializedName(SERIALIZED_NAME_KEY_STATUS)
  @javax.annotation.Nullable
  private ClassicKeyStatusInfo keyStatus;

  public static final String SERIALIZED_NAME_TARGET_ASSOC_ID = "target_assoc_id";
  @SerializedName(SERIALIZED_NAME_TARGET_ASSOC_ID)
  @javax.annotation.Nullable
  private String targetAssocId;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "target_type";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  @javax.annotation.Nullable
  private String targetType;

  public ClassicKeyTargetInfo() {
  }

  public ClassicKeyTargetInfo externalKmsId(@javax.annotation.Nullable ExternalKMSKeyId externalKmsId) {
    this.externalKmsId = externalKmsId;
    return this;
  }

  /**
   * Get externalKmsId
   * @return externalKmsId
   */
  @javax.annotation.Nullable
  public ExternalKMSKeyId getExternalKmsId() {
    return externalKmsId;
  }

  public void setExternalKmsId(@javax.annotation.Nullable ExternalKMSKeyId externalKmsId) {
    this.externalKmsId = externalKmsId;
  }


  public ClassicKeyTargetInfo keyPurpose(@javax.annotation.Nullable List<String> keyPurpose) {
    this.keyPurpose = keyPurpose;
    return this;
  }

  public ClassicKeyTargetInfo addKeyPurposeItem(String keyPurposeItem) {
    if (this.keyPurpose == null) {
      this.keyPurpose = new ArrayList<>();
    }
    this.keyPurpose.add(keyPurposeItem);
    return this;
  }

  /**
   * Get keyPurpose
   * @return keyPurpose
   */
  @javax.annotation.Nullable
  public List<String> getKeyPurpose() {
    return keyPurpose;
  }

  public void setKeyPurpose(@javax.annotation.Nullable List<String> keyPurpose) {
    this.keyPurpose = keyPurpose;
  }


  public ClassicKeyTargetInfo keyStatus(@javax.annotation.Nullable ClassicKeyStatusInfo keyStatus) {
    this.keyStatus = keyStatus;
    return this;
  }

  /**
   * Get keyStatus
   * @return keyStatus
   */
  @javax.annotation.Nullable
  public ClassicKeyStatusInfo getKeyStatus() {
    return keyStatus;
  }

  public void setKeyStatus(@javax.annotation.Nullable ClassicKeyStatusInfo keyStatus) {
    this.keyStatus = keyStatus;
  }


  public ClassicKeyTargetInfo targetAssocId(@javax.annotation.Nullable String targetAssocId) {
    this.targetAssocId = targetAssocId;
    return this;
  }

  /**
   * Get targetAssocId
   * @return targetAssocId
   */
  @javax.annotation.Nullable
  public String getTargetAssocId() {
    return targetAssocId;
  }

  public void setTargetAssocId(@javax.annotation.Nullable String targetAssocId) {
    this.targetAssocId = targetAssocId;
  }


  public ClassicKeyTargetInfo targetType(@javax.annotation.Nullable String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Get targetType
   * @return targetType
   */
  @javax.annotation.Nullable
  public String getTargetType() {
    return targetType;
  }

  public void setTargetType(@javax.annotation.Nullable String targetType) {
    this.targetType = targetType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassicKeyTargetInfo classicKeyTargetInfo = (ClassicKeyTargetInfo) o;
    return Objects.equals(this.externalKmsId, classicKeyTargetInfo.externalKmsId) &&
        Objects.equals(this.keyPurpose, classicKeyTargetInfo.keyPurpose) &&
        Objects.equals(this.keyStatus, classicKeyTargetInfo.keyStatus) &&
        Objects.equals(this.targetAssocId, classicKeyTargetInfo.targetAssocId) &&
        Objects.equals(this.targetType, classicKeyTargetInfo.targetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalKmsId, keyPurpose, keyStatus, targetAssocId, targetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassicKeyTargetInfo {\n");
    sb.append("    externalKmsId: ").append(toIndentedString(externalKmsId)).append("\n");
    sb.append("    keyPurpose: ").append(toIndentedString(keyPurpose)).append("\n");
    sb.append("    keyStatus: ").append(toIndentedString(keyStatus)).append("\n");
    sb.append("    targetAssocId: ").append(toIndentedString(targetAssocId)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external_kms_id");
    openapiFields.add("key_purpose");
    openapiFields.add("key_status");
    openapiFields.add("target_assoc_id");
    openapiFields.add("target_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassicKeyTargetInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassicKeyTargetInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassicKeyTargetInfo is not found in the empty JSON string", ClassicKeyTargetInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassicKeyTargetInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassicKeyTargetInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `external_kms_id`
      if (jsonObj.get("external_kms_id") != null && !jsonObj.get("external_kms_id").isJsonNull()) {
        ExternalKMSKeyId.validateJsonElement(jsonObj.get("external_kms_id"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_purpose") != null && !jsonObj.get("key_purpose").isJsonNull() && !jsonObj.get("key_purpose").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_purpose` to be an array in the JSON string but got `%s`", jsonObj.get("key_purpose").toString()));
      }
      // validate the optional field `key_status`
      if (jsonObj.get("key_status") != null && !jsonObj.get("key_status").isJsonNull()) {
        ClassicKeyStatusInfo.validateJsonElement(jsonObj.get("key_status"));
      }
      if ((jsonObj.get("target_assoc_id") != null && !jsonObj.get("target_assoc_id").isJsonNull()) && !jsonObj.get("target_assoc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_assoc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_assoc_id").toString()));
      }
      if ((jsonObj.get("target_type") != null && !jsonObj.get("target_type").isJsonNull()) && !jsonObj.get("target_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassicKeyTargetInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassicKeyTargetInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassicKeyTargetInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassicKeyTargetInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassicKeyTargetInfo>() {
           @Override
           public void write(JsonWriter out, ClassicKeyTargetInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassicKeyTargetInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassicKeyTargetInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassicKeyTargetInfo
   * @throws IOException if the JSON string is invalid with respect to ClassicKeyTargetInfo
   */
  public static ClassicKeyTargetInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassicKeyTargetInfo.class);
  }

  /**
   * Convert an instance of ClassicKeyTargetInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

