/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayUpdateLogForwardingAwsS3 is a command that updates log forwarding config (aws-s3 target)
 */
@ApiModel(description = "gatewayUpdateLogForwardingAwsS3 is a command that updates log forwarding config (aws-s3 target)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayUpdateLogForwardingAwsS3 {
  public static final String SERIALIZED_NAME_ACCESS_ID = "access-id";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  private String accessId;

  public static final String SERIALIZED_NAME_ACCESS_KEY = "access-key";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth-type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private String authType;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucket-name";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private String enable = "true";

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_LOG_FOLDER = "log-folder";
  @SerializedName(SERIALIZED_NAME_LOG_FOLDER)
  private String logFolder = "use-existing";

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "output-format";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private String outputFormat = "text";

  public static final String SERIALIZED_NAME_PULL_INTERVAL = "pull-interval";
  @SerializedName(SERIALIZED_NAME_PULL_INTERVAL)
  private String pullInterval = "10";

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_ROLE_ARN = "role-arn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public GatewayUpdateLogForwardingAwsS3() { 
  }

  public GatewayUpdateLogForwardingAwsS3 accessId(String accessId) {
    
    this.accessId = accessId;
    return this;
  }

   /**
   * AWS access id relevant for access_key auth-type
   * @return accessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS access id relevant for access_key auth-type")

  public String getAccessId() {
    return accessId;
  }


  public void setAccessId(String accessId) {
    this.accessId = accessId;
  }


  public GatewayUpdateLogForwardingAwsS3 accessKey(String accessKey) {
    
    this.accessKey = accessKey;
    return this;
  }

   /**
   * AWS access key relevant for access_key auth-type
   * @return accessKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS access key relevant for access_key auth-type")

  public String getAccessKey() {
    return accessKey;
  }


  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public GatewayUpdateLogForwardingAwsS3 authType(String authType) {
    
    this.authType = authType;
    return this;
  }

   /**
   * AWS auth type [access_key/cloud_id/assume_role]
   * @return authType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS auth type [access_key/cloud_id/assume_role]")

  public String getAuthType() {
    return authType;
  }


  public void setAuthType(String authType) {
    this.authType = authType;
  }


  public GatewayUpdateLogForwardingAwsS3 bucketName(String bucketName) {
    
    this.bucketName = bucketName;
    return this;
  }

   /**
   * AWS S3 bucket name
   * @return bucketName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS S3 bucket name")

  public String getBucketName() {
    return bucketName;
  }


  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public GatewayUpdateLogForwardingAwsS3 enable(String enable) {
    
    this.enable = enable;
    return this;
  }

   /**
   * Enable Log Forwarding [true/false]
   * @return enable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable Log Forwarding [true/false]")

  public String getEnable() {
    return enable;
  }


  public void setEnable(String enable) {
    this.enable = enable;
  }


  public GatewayUpdateLogForwardingAwsS3 json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public GatewayUpdateLogForwardingAwsS3 logFolder(String logFolder) {
    
    this.logFolder = logFolder;
    return this;
  }

   /**
   * AWS S3 destination folder for logs
   * @return logFolder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS S3 destination folder for logs")

  public String getLogFolder() {
    return logFolder;
  }


  public void setLogFolder(String logFolder) {
    this.logFolder = logFolder;
  }


  public GatewayUpdateLogForwardingAwsS3 outputFormat(String outputFormat) {
    
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * Logs format [text/json]
   * @return outputFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logs format [text/json]")

  public String getOutputFormat() {
    return outputFormat;
  }


  public void setOutputFormat(String outputFormat) {
    this.outputFormat = outputFormat;
  }


  public GatewayUpdateLogForwardingAwsS3 pullInterval(String pullInterval) {
    
    this.pullInterval = pullInterval;
    return this;
  }

   /**
   * Pull interval in seconds
   * @return pullInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pull interval in seconds")

  public String getPullInterval() {
    return pullInterval;
  }


  public void setPullInterval(String pullInterval) {
    this.pullInterval = pullInterval;
  }


  public GatewayUpdateLogForwardingAwsS3 region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * AWS region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS region")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public GatewayUpdateLogForwardingAwsS3 roleArn(String roleArn) {
    
    this.roleArn = roleArn;
    return this;
  }

   /**
   * AWS role arn relevant for assume_role auth-type
   * @return roleArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AWS role arn relevant for assume_role auth-type")

  public String getRoleArn() {
    return roleArn;
  }


  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public GatewayUpdateLogForwardingAwsS3 token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayUpdateLogForwardingAwsS3 uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayUpdateLogForwardingAwsS3 gatewayUpdateLogForwardingAwsS3 = (GatewayUpdateLogForwardingAwsS3) o;
    return Objects.equals(this.accessId, gatewayUpdateLogForwardingAwsS3.accessId) &&
        Objects.equals(this.accessKey, gatewayUpdateLogForwardingAwsS3.accessKey) &&
        Objects.equals(this.authType, gatewayUpdateLogForwardingAwsS3.authType) &&
        Objects.equals(this.bucketName, gatewayUpdateLogForwardingAwsS3.bucketName) &&
        Objects.equals(this.enable, gatewayUpdateLogForwardingAwsS3.enable) &&
        Objects.equals(this.json, gatewayUpdateLogForwardingAwsS3.json) &&
        Objects.equals(this.logFolder, gatewayUpdateLogForwardingAwsS3.logFolder) &&
        Objects.equals(this.outputFormat, gatewayUpdateLogForwardingAwsS3.outputFormat) &&
        Objects.equals(this.pullInterval, gatewayUpdateLogForwardingAwsS3.pullInterval) &&
        Objects.equals(this.region, gatewayUpdateLogForwardingAwsS3.region) &&
        Objects.equals(this.roleArn, gatewayUpdateLogForwardingAwsS3.roleArn) &&
        Objects.equals(this.token, gatewayUpdateLogForwardingAwsS3.token) &&
        Objects.equals(this.uidToken, gatewayUpdateLogForwardingAwsS3.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, accessKey, authType, bucketName, enable, json, logFolder, outputFormat, pullInterval, region, roleArn, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayUpdateLogForwardingAwsS3 {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    logFolder: ").append(toIndentedString(logFolder)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    pullInterval: ").append(toIndentedString(pullInterval)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

