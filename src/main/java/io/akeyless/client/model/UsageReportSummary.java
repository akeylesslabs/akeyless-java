/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * UsageReportSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UsageReportSummary {
  public static final String SERIALIZED_NAME_CLIENTS_BY_AUTH_METHOD_TYPES = "clients_by_auth_method_types";
  @SerializedName(SERIALIZED_NAME_CLIENTS_BY_AUTH_METHOD_TYPES)
  @javax.annotation.Nullable
  private Map<String, Long> clientsByAuthMethodTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  @javax.annotation.Nullable
  private String product;

  public static final String SERIALIZED_NAME_SECRETS_BY_TYPES = "secrets_by_types";
  @SerializedName(SERIALIZED_NAME_SECRETS_BY_TYPES)
  @javax.annotation.Nullable
  private Map<String, Long> secretsByTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nullable
  private Long time;

  public static final String SERIALIZED_NAME_TOTAL_CLIENTS = "total_clients";
  @SerializedName(SERIALIZED_NAME_TOTAL_CLIENTS)
  @javax.annotation.Nullable
  private Long totalClients;

  public static final String SERIALIZED_NAME_TOTAL_SECRETS = "total_secrets";
  @SerializedName(SERIALIZED_NAME_TOTAL_SECRETS)
  @javax.annotation.Nullable
  private Long totalSecrets;

  public UsageReportSummary() {
  }

  public UsageReportSummary clientsByAuthMethodTypes(@javax.annotation.Nullable Map<String, Long> clientsByAuthMethodTypes) {
    this.clientsByAuthMethodTypes = clientsByAuthMethodTypes;
    return this;
  }

  public UsageReportSummary putClientsByAuthMethodTypesItem(String key, Long clientsByAuthMethodTypesItem) {
    if (this.clientsByAuthMethodTypes == null) {
      this.clientsByAuthMethodTypes = new HashMap<>();
    }
    this.clientsByAuthMethodTypes.put(key, clientsByAuthMethodTypesItem);
    return this;
  }

  /**
   * Get clientsByAuthMethodTypes
   * @return clientsByAuthMethodTypes
   */
  @javax.annotation.Nullable
  public Map<String, Long> getClientsByAuthMethodTypes() {
    return clientsByAuthMethodTypes;
  }

  public void setClientsByAuthMethodTypes(@javax.annotation.Nullable Map<String, Long> clientsByAuthMethodTypes) {
    this.clientsByAuthMethodTypes = clientsByAuthMethodTypes;
  }


  public UsageReportSummary product(@javax.annotation.Nullable String product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }

  public void setProduct(@javax.annotation.Nullable String product) {
    this.product = product;
  }


  public UsageReportSummary secretsByTypes(@javax.annotation.Nullable Map<String, Long> secretsByTypes) {
    this.secretsByTypes = secretsByTypes;
    return this;
  }

  public UsageReportSummary putSecretsByTypesItem(String key, Long secretsByTypesItem) {
    if (this.secretsByTypes == null) {
      this.secretsByTypes = new HashMap<>();
    }
    this.secretsByTypes.put(key, secretsByTypesItem);
    return this;
  }

  /**
   * Get secretsByTypes
   * @return secretsByTypes
   */
  @javax.annotation.Nullable
  public Map<String, Long> getSecretsByTypes() {
    return secretsByTypes;
  }

  public void setSecretsByTypes(@javax.annotation.Nullable Map<String, Long> secretsByTypes) {
    this.secretsByTypes = secretsByTypes;
  }


  public UsageReportSummary time(@javax.annotation.Nullable Long time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public Long getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nullable Long time) {
    this.time = time;
  }


  public UsageReportSummary totalClients(@javax.annotation.Nullable Long totalClients) {
    this.totalClients = totalClients;
    return this;
  }

  /**
   * Get totalClients
   * @return totalClients
   */
  @javax.annotation.Nullable
  public Long getTotalClients() {
    return totalClients;
  }

  public void setTotalClients(@javax.annotation.Nullable Long totalClients) {
    this.totalClients = totalClients;
  }


  public UsageReportSummary totalSecrets(@javax.annotation.Nullable Long totalSecrets) {
    this.totalSecrets = totalSecrets;
    return this;
  }

  /**
   * Get totalSecrets
   * @return totalSecrets
   */
  @javax.annotation.Nullable
  public Long getTotalSecrets() {
    return totalSecrets;
  }

  public void setTotalSecrets(@javax.annotation.Nullable Long totalSecrets) {
    this.totalSecrets = totalSecrets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageReportSummary usageReportSummary = (UsageReportSummary) o;
    return Objects.equals(this.clientsByAuthMethodTypes, usageReportSummary.clientsByAuthMethodTypes) &&
        Objects.equals(this.product, usageReportSummary.product) &&
        Objects.equals(this.secretsByTypes, usageReportSummary.secretsByTypes) &&
        Objects.equals(this.time, usageReportSummary.time) &&
        Objects.equals(this.totalClients, usageReportSummary.totalClients) &&
        Objects.equals(this.totalSecrets, usageReportSummary.totalSecrets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientsByAuthMethodTypes, product, secretsByTypes, time, totalClients, totalSecrets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageReportSummary {\n");
    sb.append("    clientsByAuthMethodTypes: ").append(toIndentedString(clientsByAuthMethodTypes)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    secretsByTypes: ").append(toIndentedString(secretsByTypes)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    totalClients: ").append(toIndentedString(totalClients)).append("\n");
    sb.append("    totalSecrets: ").append(toIndentedString(totalSecrets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clients_by_auth_method_types");
    openapiFields.add("product");
    openapiFields.add("secrets_by_types");
    openapiFields.add("time");
    openapiFields.add("total_clients");
    openapiFields.add("total_secrets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageReportSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageReportSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageReportSummary is not found in the empty JSON string", UsageReportSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageReportSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageReportSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageReportSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageReportSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageReportSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageReportSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageReportSummary>() {
           @Override
           public void write(JsonWriter out, UsageReportSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageReportSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageReportSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageReportSummary
   * @throws IOException if the JSON string is invalid with respect to UsageReportSummary
   */
  public static UsageReportSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageReportSummary.class);
  }

  /**
   * Convert an instance of UsageReportSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

