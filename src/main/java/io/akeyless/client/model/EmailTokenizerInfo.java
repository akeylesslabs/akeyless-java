/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * EmailTokenizerInfo represents a tokenizer that specifically tokenizes emails
 */
@ApiModel(description = "EmailTokenizerInfo represents a tokenizer that specifically tokenizes emails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmailTokenizerInfo {
  public static final String SERIALIZED_NAME_DOMAIN_SUFFIX_LENGTH = "domain_suffix_length";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SUFFIX_LENGTH)
  private Long domainSuffixLength;

  public static final String SERIALIZED_NAME_FIXED_DOMAIN_SUFFIX = "fixed_domain_suffix";
  @SerializedName(SERIALIZED_NAME_FIXED_DOMAIN_SUFFIX)
  private String fixedDomainSuffix;

  public static final String SERIALIZED_NAME_KEEP_PREFIX_LENGTH = "keep_prefix_length";
  @SerializedName(SERIALIZED_NAME_KEEP_PREFIX_LENGTH)
  private Long keepPrefixLength;

  public EmailTokenizerInfo() { 
  }

  public EmailTokenizerInfo domainSuffixLength(Long domainSuffixLength) {
    
    this.domainSuffixLength = domainSuffixLength;
    return this;
  }

   /**
   * What length of a random domain suffix to generate used only if FixedDomainSuffix is empty
   * @return domainSuffixLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What length of a random domain suffix to generate used only if FixedDomainSuffix is empty")

  public Long getDomainSuffixLength() {
    return domainSuffixLength;
  }


  public void setDomainSuffixLength(Long domainSuffixLength) {
    this.domainSuffixLength = domainSuffixLength;
  }


  public EmailTokenizerInfo fixedDomainSuffix(String fixedDomainSuffix) {
    
    this.fixedDomainSuffix = fixedDomainSuffix;
    return this;
  }

   /**
   * if FixedDomainSuffix isn&#39;t empty, it will be appended to the output
   * @return fixedDomainSuffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if FixedDomainSuffix isn't empty, it will be appended to the output")

  public String getFixedDomainSuffix() {
    return fixedDomainSuffix;
  }


  public void setFixedDomainSuffix(String fixedDomainSuffix) {
    this.fixedDomainSuffix = fixedDomainSuffix;
  }


  public EmailTokenizerInfo keepPrefixLength(Long keepPrefixLength) {
    
    this.keepPrefixLength = keepPrefixLength;
    return this;
  }

   /**
   * How many letters of the plaintext to keep in the output
   * @return keepPrefixLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How many letters of the plaintext to keep in the output")

  public Long getKeepPrefixLength() {
    return keepPrefixLength;
  }


  public void setKeepPrefixLength(Long keepPrefixLength) {
    this.keepPrefixLength = keepPrefixLength;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailTokenizerInfo emailTokenizerInfo = (EmailTokenizerInfo) o;
    return Objects.equals(this.domainSuffixLength, emailTokenizerInfo.domainSuffixLength) &&
        Objects.equals(this.fixedDomainSuffix, emailTokenizerInfo.fixedDomainSuffix) &&
        Objects.equals(this.keepPrefixLength, emailTokenizerInfo.keepPrefixLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainSuffixLength, fixedDomainSuffix, keepPrefixLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailTokenizerInfo {\n");
    sb.append("    domainSuffixLength: ").append(toIndentedString(domainSuffixLength)).append("\n");
    sb.append("    fixedDomainSuffix: ").append(toIndentedString(fixedDomainSuffix)).append("\n");
    sb.append("    keepPrefixLength: ").append(toIndentedString(keepPrefixLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

