/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * dynamicSecretUpdateK8s is a command that updates k8s dynamic secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class DynamicSecretUpdateK8s {
  public static final String SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE = "custom-username-template";
  @SerializedName(SERIALIZED_NAME_CUSTOM_USERNAME_TEMPLATE)
  @javax.annotation.Nullable
  private String customUsernameTemplate;

  public static final String SERIALIZED_NAME_DELETE_PROTECTION = "delete_protection";
  @SerializedName(SERIALIZED_NAME_DELETE_PROTECTION)
  @javax.annotation.Nullable
  private String deleteProtection;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_K8S_ALLOWED_NAMESPACES = "k8s-allowed-namespaces";
  @SerializedName(SERIALIZED_NAME_K8S_ALLOWED_NAMESPACES)
  @javax.annotation.Nullable
  private String k8sAllowedNamespaces;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_CA_CERT = "k8s-cluster-ca-cert";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_CA_CERT)
  @javax.annotation.Nullable
  private String k8sClusterCaCert;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_ENDPOINT = "k8s-cluster-endpoint";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_ENDPOINT)
  @javax.annotation.Nullable
  private String k8sClusterEndpoint;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_NAME = "k8s-cluster-name";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_NAME)
  @javax.annotation.Nullable
  private String k8sClusterName;

  public static final String SERIALIZED_NAME_K8S_CLUSTER_TOKEN = "k8s-cluster-token";
  @SerializedName(SERIALIZED_NAME_K8S_CLUSTER_TOKEN)
  @javax.annotation.Nullable
  private String k8sClusterToken;

  public static final String SERIALIZED_NAME_K8S_NAMESPACE = "k8s-namespace";
  @SerializedName(SERIALIZED_NAME_K8S_NAMESPACE)
  @javax.annotation.Nullable
  private String k8sNamespace;

  public static final String SERIALIZED_NAME_K8S_PREDEFINED_ROLE_NAME = "k8s-predefined-role-name";
  @SerializedName(SERIALIZED_NAME_K8S_PREDEFINED_ROLE_NAME)
  @javax.annotation.Nullable
  private String k8sPredefinedRoleName;

  public static final String SERIALIZED_NAME_K8S_PREDEFINED_ROLE_TYPE = "k8s-predefined-role-type";
  @SerializedName(SERIALIZED_NAME_K8S_PREDEFINED_ROLE_TYPE)
  @javax.annotation.Nullable
  private String k8sPredefinedRoleType;

  public static final String SERIALIZED_NAME_K8S_ROLEBINDING_YAML_DEF = "k8s-rolebinding-yaml-def";
  @SerializedName(SERIALIZED_NAME_K8S_ROLEBINDING_YAML_DEF)
  @javax.annotation.Nullable
  private String k8sRolebindingYamlDef;

  public static final String SERIALIZED_NAME_K8S_SERVICE_ACCOUNT = "k8s-service-account";
  @SerializedName(SERIALIZED_NAME_K8S_SERVICE_ACCOUNT)
  @javax.annotation.Nullable
  private String k8sServiceAccount;

  public static final String SERIALIZED_NAME_K8S_SERVICE_ACCOUNT_TYPE = "k8s-service-account-type";
  @SerializedName(SERIALIZED_NAME_K8S_SERVICE_ACCOUNT_TYPE)
  @javax.annotation.Nullable
  private String k8sServiceAccountType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  @javax.annotation.Nullable
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ALLOW_PORT_FORWADING = "secure-access-allow-port-forwading";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ALLOW_PORT_FORWADING)
  @javax.annotation.Nullable
  private Boolean secureAccessAllowPortForwading;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER = "secure-access-bastion-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_BASTION_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessBastionIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER = "secure-access-certificate-issuer";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CERTIFICATE_ISSUER)
  @javax.annotation.Nullable
  private String secureAccessCertificateIssuer;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_CLUSTER_ENDPOINT = "secure-access-cluster-endpoint";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_CLUSTER_ENDPOINT)
  @javax.annotation.Nullable
  private String secureAccessClusterEndpoint;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DASHBOARD_URL = "secure-access-dashboard-url";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DASHBOARD_URL)
  @javax.annotation.Nullable
  private String secureAccessDashboardUrl;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_DELAY = "secure-access-delay";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_DELAY)
  @javax.annotation.Nullable
  private Long secureAccessDelay;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_ENABLE = "secure-access-enable";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_ENABLE)
  @javax.annotation.Nullable
  private String secureAccessEnable;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB = "secure-access-web";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB)
  @javax.annotation.Nullable
  private Boolean secureAccessWeb = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING = "secure-access-web-browsing";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_BROWSING)
  @javax.annotation.Nullable
  private Boolean secureAccessWebBrowsing = false;

  public static final String SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY = "secure-access-web-proxy";
  @SerializedName(SERIALIZED_NAME_SECURE_ACCESS_WEB_PROXY)
  @javax.annotation.Nullable
  private Boolean secureAccessWebProxy = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_NAME = "target-name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  @javax.annotation.Nullable
  private String targetName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_USE_GW_SERVICE_ACCOUNT = "use-gw-service-account";
  @SerializedName(SERIALIZED_NAME_USE_GW_SERVICE_ACCOUNT)
  @javax.annotation.Nullable
  private Boolean useGwServiceAccount;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  @javax.annotation.Nullable
  private String userTtl = "60m";

  public DynamicSecretUpdateK8s() {
  }

  public DynamicSecretUpdateK8s customUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
    return this;
  }

  /**
   * Customize how temporary usernames are generated using go template
   * @return customUsernameTemplate
   */
  @javax.annotation.Nullable
  public String getCustomUsernameTemplate() {
    return customUsernameTemplate;
  }

  public void setCustomUsernameTemplate(@javax.annotation.Nullable String customUsernameTemplate) {
    this.customUsernameTemplate = customUsernameTemplate;
  }


  public DynamicSecretUpdateK8s deleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
    return this;
  }

  /**
   * Protection from accidental deletion of this object [true/false]
   * @return deleteProtection
   */
  @javax.annotation.Nullable
  public String getDeleteProtection() {
    return deleteProtection;
  }

  public void setDeleteProtection(@javax.annotation.Nullable String deleteProtection) {
    this.deleteProtection = deleteProtection;
  }


  public DynamicSecretUpdateK8s description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public DynamicSecretUpdateK8s json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public DynamicSecretUpdateK8s k8sAllowedNamespaces(@javax.annotation.Nullable String k8sAllowedNamespaces) {
    this.k8sAllowedNamespaces = k8sAllowedNamespaces;
    return this;
  }

  /**
   * Comma-separated list of allowed K8S namespaces for the generated ServiceAccount (relevant only for k8s-service-account-type&#x3D;dynamic)
   * @return k8sAllowedNamespaces
   */
  @javax.annotation.Nullable
  public String getK8sAllowedNamespaces() {
    return k8sAllowedNamespaces;
  }

  public void setK8sAllowedNamespaces(@javax.annotation.Nullable String k8sAllowedNamespaces) {
    this.k8sAllowedNamespaces = k8sAllowedNamespaces;
  }


  public DynamicSecretUpdateK8s k8sClusterCaCert(@javax.annotation.Nullable String k8sClusterCaCert) {
    this.k8sClusterCaCert = k8sClusterCaCert;
    return this;
  }

  /**
   * K8S cluster CA certificate
   * @return k8sClusterCaCert
   */
  @javax.annotation.Nullable
  public String getK8sClusterCaCert() {
    return k8sClusterCaCert;
  }

  public void setK8sClusterCaCert(@javax.annotation.Nullable String k8sClusterCaCert) {
    this.k8sClusterCaCert = k8sClusterCaCert;
  }


  public DynamicSecretUpdateK8s k8sClusterEndpoint(@javax.annotation.Nullable String k8sClusterEndpoint) {
    this.k8sClusterEndpoint = k8sClusterEndpoint;
    return this;
  }

  /**
   * K8S cluster URL endpoint
   * @return k8sClusterEndpoint
   */
  @javax.annotation.Nullable
  public String getK8sClusterEndpoint() {
    return k8sClusterEndpoint;
  }

  public void setK8sClusterEndpoint(@javax.annotation.Nullable String k8sClusterEndpoint) {
    this.k8sClusterEndpoint = k8sClusterEndpoint;
  }


  public DynamicSecretUpdateK8s k8sClusterName(@javax.annotation.Nullable String k8sClusterName) {
    this.k8sClusterName = k8sClusterName;
    return this;
  }

  /**
   * K8S cluster name
   * @return k8sClusterName
   */
  @javax.annotation.Nullable
  public String getK8sClusterName() {
    return k8sClusterName;
  }

  public void setK8sClusterName(@javax.annotation.Nullable String k8sClusterName) {
    this.k8sClusterName = k8sClusterName;
  }


  public DynamicSecretUpdateK8s k8sClusterToken(@javax.annotation.Nullable String k8sClusterToken) {
    this.k8sClusterToken = k8sClusterToken;
    return this;
  }

  /**
   * K8S cluster Bearer token
   * @return k8sClusterToken
   */
  @javax.annotation.Nullable
  public String getK8sClusterToken() {
    return k8sClusterToken;
  }

  public void setK8sClusterToken(@javax.annotation.Nullable String k8sClusterToken) {
    this.k8sClusterToken = k8sClusterToken;
  }


  public DynamicSecretUpdateK8s k8sNamespace(@javax.annotation.Nullable String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
    return this;
  }

  /**
   * K8S Namespace where the ServiceAccount exists.
   * @return k8sNamespace
   */
  @javax.annotation.Nullable
  public String getK8sNamespace() {
    return k8sNamespace;
  }

  public void setK8sNamespace(@javax.annotation.Nullable String k8sNamespace) {
    this.k8sNamespace = k8sNamespace;
  }


  public DynamicSecretUpdateK8s k8sPredefinedRoleName(@javax.annotation.Nullable String k8sPredefinedRoleName) {
    this.k8sPredefinedRoleName = k8sPredefinedRoleName;
    return this;
  }

  /**
   * The pre-existing Role or ClusterRole name to bind the generated ServiceAccount to (relevant only for k8s-service-account-type&#x3D;dynamic)
   * @return k8sPredefinedRoleName
   */
  @javax.annotation.Nullable
  public String getK8sPredefinedRoleName() {
    return k8sPredefinedRoleName;
  }

  public void setK8sPredefinedRoleName(@javax.annotation.Nullable String k8sPredefinedRoleName) {
    this.k8sPredefinedRoleName = k8sPredefinedRoleName;
  }


  public DynamicSecretUpdateK8s k8sPredefinedRoleType(@javax.annotation.Nullable String k8sPredefinedRoleType) {
    this.k8sPredefinedRoleType = k8sPredefinedRoleType;
    return this;
  }

  /**
   * Specifies the type of the pre-existing K8S role [Role, ClusterRole] (relevant only for k8s-service-account-type&#x3D;dynamic)
   * @return k8sPredefinedRoleType
   */
  @javax.annotation.Nullable
  public String getK8sPredefinedRoleType() {
    return k8sPredefinedRoleType;
  }

  public void setK8sPredefinedRoleType(@javax.annotation.Nullable String k8sPredefinedRoleType) {
    this.k8sPredefinedRoleType = k8sPredefinedRoleType;
  }


  public DynamicSecretUpdateK8s k8sRolebindingYamlDef(@javax.annotation.Nullable String k8sRolebindingYamlDef) {
    this.k8sRolebindingYamlDef = k8sRolebindingYamlDef;
    return this;
  }

  /**
   * Path to yaml file that contains definitions of K8S role and role binding (relevant only for k8s-service-account-type&#x3D;dynamic)
   * @return k8sRolebindingYamlDef
   */
  @javax.annotation.Nullable
  public String getK8sRolebindingYamlDef() {
    return k8sRolebindingYamlDef;
  }

  public void setK8sRolebindingYamlDef(@javax.annotation.Nullable String k8sRolebindingYamlDef) {
    this.k8sRolebindingYamlDef = k8sRolebindingYamlDef;
  }


  public DynamicSecretUpdateK8s k8sServiceAccount(@javax.annotation.Nullable String k8sServiceAccount) {
    this.k8sServiceAccount = k8sServiceAccount;
    return this;
  }

  /**
   * K8S ServiceAccount to extract token from.
   * @return k8sServiceAccount
   */
  @javax.annotation.Nullable
  public String getK8sServiceAccount() {
    return k8sServiceAccount;
  }

  public void setK8sServiceAccount(@javax.annotation.Nullable String k8sServiceAccount) {
    this.k8sServiceAccount = k8sServiceAccount;
  }


  public DynamicSecretUpdateK8s k8sServiceAccountType(@javax.annotation.Nullable String k8sServiceAccountType) {
    this.k8sServiceAccountType = k8sServiceAccountType;
    return this;
  }

  /**
   * K8S ServiceAccount type [fixed, dynamic].
   * @return k8sServiceAccountType
   */
  @javax.annotation.Nullable
  public String getK8sServiceAccountType() {
    return k8sServiceAccountType;
  }

  public void setK8sServiceAccountType(@javax.annotation.Nullable String k8sServiceAccountType) {
    this.k8sServiceAccountType = k8sServiceAccountType;
  }


  public DynamicSecretUpdateK8s name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Dynamic secret name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public DynamicSecretUpdateK8s newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * Dynamic secret name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public DynamicSecretUpdateK8s producerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

  /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
   */
  @javax.annotation.Nullable
  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }

  public void setProducerEncryptionKeyName(@javax.annotation.Nullable String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public DynamicSecretUpdateK8s secureAccessAllowPortForwading(@javax.annotation.Nullable Boolean secureAccessAllowPortForwading) {
    this.secureAccessAllowPortForwading = secureAccessAllowPortForwading;
    return this;
  }

  /**
   * Enable Port forwarding while using CLI access
   * @return secureAccessAllowPortForwading
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessAllowPortForwading() {
    return secureAccessAllowPortForwading;
  }

  public void setSecureAccessAllowPortForwading(@javax.annotation.Nullable Boolean secureAccessAllowPortForwading) {
    this.secureAccessAllowPortForwading = secureAccessAllowPortForwading;
  }


  public DynamicSecretUpdateK8s secureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
    return this;
  }

  /**
   * Deprecated. use secure-access-certificate-issuer
   * @return secureAccessBastionIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessBastionIssuer() {
    return secureAccessBastionIssuer;
  }

  public void setSecureAccessBastionIssuer(@javax.annotation.Nullable String secureAccessBastionIssuer) {
    this.secureAccessBastionIssuer = secureAccessBastionIssuer;
  }


  public DynamicSecretUpdateK8s secureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
    return this;
  }

  /**
   * Path to the SSH Certificate Issuer for your Akeyless Secure Access
   * @return secureAccessCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getSecureAccessCertificateIssuer() {
    return secureAccessCertificateIssuer;
  }

  public void setSecureAccessCertificateIssuer(@javax.annotation.Nullable String secureAccessCertificateIssuer) {
    this.secureAccessCertificateIssuer = secureAccessCertificateIssuer;
  }


  public DynamicSecretUpdateK8s secureAccessClusterEndpoint(@javax.annotation.Nullable String secureAccessClusterEndpoint) {
    this.secureAccessClusterEndpoint = secureAccessClusterEndpoint;
    return this;
  }

  /**
   * The K8s cluster endpoint URL
   * @return secureAccessClusterEndpoint
   */
  @javax.annotation.Nullable
  public String getSecureAccessClusterEndpoint() {
    return secureAccessClusterEndpoint;
  }

  public void setSecureAccessClusterEndpoint(@javax.annotation.Nullable String secureAccessClusterEndpoint) {
    this.secureAccessClusterEndpoint = secureAccessClusterEndpoint;
  }


  public DynamicSecretUpdateK8s secureAccessDashboardUrl(@javax.annotation.Nullable String secureAccessDashboardUrl) {
    this.secureAccessDashboardUrl = secureAccessDashboardUrl;
    return this;
  }

  /**
   * The K8s dashboard url
   * @return secureAccessDashboardUrl
   */
  @javax.annotation.Nullable
  public String getSecureAccessDashboardUrl() {
    return secureAccessDashboardUrl;
  }

  public void setSecureAccessDashboardUrl(@javax.annotation.Nullable String secureAccessDashboardUrl) {
    this.secureAccessDashboardUrl = secureAccessDashboardUrl;
  }


  public DynamicSecretUpdateK8s secureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
    return this;
  }

  /**
   * The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds
   * @return secureAccessDelay
   */
  @javax.annotation.Nullable
  public Long getSecureAccessDelay() {
    return secureAccessDelay;
  }

  public void setSecureAccessDelay(@javax.annotation.Nullable Long secureAccessDelay) {
    this.secureAccessDelay = secureAccessDelay;
  }


  public DynamicSecretUpdateK8s secureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
    return this;
  }

  /**
   * Enable/Disable secure remote access [true/false]
   * @return secureAccessEnable
   */
  @javax.annotation.Nullable
  public String getSecureAccessEnable() {
    return secureAccessEnable;
  }

  public void setSecureAccessEnable(@javax.annotation.Nullable String secureAccessEnable) {
    this.secureAccessEnable = secureAccessEnable;
  }


  public DynamicSecretUpdateK8s secureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
    return this;
  }

  /**
   * Enable Web Secure Remote Access
   * @return secureAccessWeb
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWeb() {
    return secureAccessWeb;
  }

  public void setSecureAccessWeb(@javax.annotation.Nullable Boolean secureAccessWeb) {
    this.secureAccessWeb = secureAccessWeb;
  }


  public DynamicSecretUpdateK8s secureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
    return this;
  }

  /**
   * Secure browser via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebBrowsing
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebBrowsing() {
    return secureAccessWebBrowsing;
  }

  public void setSecureAccessWebBrowsing(@javax.annotation.Nullable Boolean secureAccessWebBrowsing) {
    this.secureAccessWebBrowsing = secureAccessWebBrowsing;
  }


  public DynamicSecretUpdateK8s secureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
    return this;
  }

  /**
   * Web-Proxy via Akeyless&#39;s Secure Remote Access (SRA)
   * @return secureAccessWebProxy
   */
  @javax.annotation.Nullable
  public Boolean getSecureAccessWebProxy() {
    return secureAccessWebProxy;
  }

  public void setSecureAccessWebProxy(@javax.annotation.Nullable Boolean secureAccessWebProxy) {
    this.secureAccessWebProxy = secureAccessWebProxy;
  }


  public DynamicSecretUpdateK8s tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DynamicSecretUpdateK8s addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Add tags attached to this object
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public DynamicSecretUpdateK8s targetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Target name
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(@javax.annotation.Nullable String targetName) {
    this.targetName = targetName;
  }


  public DynamicSecretUpdateK8s token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public DynamicSecretUpdateK8s uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public DynamicSecretUpdateK8s useGwServiceAccount(@javax.annotation.Nullable Boolean useGwServiceAccount) {
    this.useGwServiceAccount = useGwServiceAccount;
    return this;
  }

  /**
   * Use the GW&#39;s service account
   * @return useGwServiceAccount
   */
  @javax.annotation.Nullable
  public Boolean getUseGwServiceAccount() {
    return useGwServiceAccount;
  }

  public void setUseGwServiceAccount(@javax.annotation.Nullable Boolean useGwServiceAccount) {
    this.useGwServiceAccount = useGwServiceAccount;
  }


  public DynamicSecretUpdateK8s userTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
    return this;
  }

  /**
   * User TTL
   * @return userTtl
   */
  @javax.annotation.Nullable
  public String getUserTtl() {
    return userTtl;
  }

  public void setUserTtl(@javax.annotation.Nullable String userTtl) {
    this.userTtl = userTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicSecretUpdateK8s dynamicSecretUpdateK8s = (DynamicSecretUpdateK8s) o;
    return Objects.equals(this.customUsernameTemplate, dynamicSecretUpdateK8s.customUsernameTemplate) &&
        Objects.equals(this.deleteProtection, dynamicSecretUpdateK8s.deleteProtection) &&
        Objects.equals(this.description, dynamicSecretUpdateK8s.description) &&
        Objects.equals(this.json, dynamicSecretUpdateK8s.json) &&
        Objects.equals(this.k8sAllowedNamespaces, dynamicSecretUpdateK8s.k8sAllowedNamespaces) &&
        Objects.equals(this.k8sClusterCaCert, dynamicSecretUpdateK8s.k8sClusterCaCert) &&
        Objects.equals(this.k8sClusterEndpoint, dynamicSecretUpdateK8s.k8sClusterEndpoint) &&
        Objects.equals(this.k8sClusterName, dynamicSecretUpdateK8s.k8sClusterName) &&
        Objects.equals(this.k8sClusterToken, dynamicSecretUpdateK8s.k8sClusterToken) &&
        Objects.equals(this.k8sNamespace, dynamicSecretUpdateK8s.k8sNamespace) &&
        Objects.equals(this.k8sPredefinedRoleName, dynamicSecretUpdateK8s.k8sPredefinedRoleName) &&
        Objects.equals(this.k8sPredefinedRoleType, dynamicSecretUpdateK8s.k8sPredefinedRoleType) &&
        Objects.equals(this.k8sRolebindingYamlDef, dynamicSecretUpdateK8s.k8sRolebindingYamlDef) &&
        Objects.equals(this.k8sServiceAccount, dynamicSecretUpdateK8s.k8sServiceAccount) &&
        Objects.equals(this.k8sServiceAccountType, dynamicSecretUpdateK8s.k8sServiceAccountType) &&
        Objects.equals(this.name, dynamicSecretUpdateK8s.name) &&
        Objects.equals(this.newName, dynamicSecretUpdateK8s.newName) &&
        Objects.equals(this.producerEncryptionKeyName, dynamicSecretUpdateK8s.producerEncryptionKeyName) &&
        Objects.equals(this.secureAccessAllowPortForwading, dynamicSecretUpdateK8s.secureAccessAllowPortForwading) &&
        Objects.equals(this.secureAccessBastionIssuer, dynamicSecretUpdateK8s.secureAccessBastionIssuer) &&
        Objects.equals(this.secureAccessCertificateIssuer, dynamicSecretUpdateK8s.secureAccessCertificateIssuer) &&
        Objects.equals(this.secureAccessClusterEndpoint, dynamicSecretUpdateK8s.secureAccessClusterEndpoint) &&
        Objects.equals(this.secureAccessDashboardUrl, dynamicSecretUpdateK8s.secureAccessDashboardUrl) &&
        Objects.equals(this.secureAccessDelay, dynamicSecretUpdateK8s.secureAccessDelay) &&
        Objects.equals(this.secureAccessEnable, dynamicSecretUpdateK8s.secureAccessEnable) &&
        Objects.equals(this.secureAccessWeb, dynamicSecretUpdateK8s.secureAccessWeb) &&
        Objects.equals(this.secureAccessWebBrowsing, dynamicSecretUpdateK8s.secureAccessWebBrowsing) &&
        Objects.equals(this.secureAccessWebProxy, dynamicSecretUpdateK8s.secureAccessWebProxy) &&
        Objects.equals(this.tags, dynamicSecretUpdateK8s.tags) &&
        Objects.equals(this.targetName, dynamicSecretUpdateK8s.targetName) &&
        Objects.equals(this.token, dynamicSecretUpdateK8s.token) &&
        Objects.equals(this.uidToken, dynamicSecretUpdateK8s.uidToken) &&
        Objects.equals(this.useGwServiceAccount, dynamicSecretUpdateK8s.useGwServiceAccount) &&
        Objects.equals(this.userTtl, dynamicSecretUpdateK8s.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customUsernameTemplate, deleteProtection, description, json, k8sAllowedNamespaces, k8sClusterCaCert, k8sClusterEndpoint, k8sClusterName, k8sClusterToken, k8sNamespace, k8sPredefinedRoleName, k8sPredefinedRoleType, k8sRolebindingYamlDef, k8sServiceAccount, k8sServiceAccountType, name, newName, producerEncryptionKeyName, secureAccessAllowPortForwading, secureAccessBastionIssuer, secureAccessCertificateIssuer, secureAccessClusterEndpoint, secureAccessDashboardUrl, secureAccessDelay, secureAccessEnable, secureAccessWeb, secureAccessWebBrowsing, secureAccessWebProxy, tags, targetName, token, uidToken, useGwServiceAccount, userTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicSecretUpdateK8s {\n");
    sb.append("    customUsernameTemplate: ").append(toIndentedString(customUsernameTemplate)).append("\n");
    sb.append("    deleteProtection: ").append(toIndentedString(deleteProtection)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    k8sAllowedNamespaces: ").append(toIndentedString(k8sAllowedNamespaces)).append("\n");
    sb.append("    k8sClusterCaCert: ").append(toIndentedString(k8sClusterCaCert)).append("\n");
    sb.append("    k8sClusterEndpoint: ").append(toIndentedString(k8sClusterEndpoint)).append("\n");
    sb.append("    k8sClusterName: ").append(toIndentedString(k8sClusterName)).append("\n");
    sb.append("    k8sClusterToken: ").append(toIndentedString(k8sClusterToken)).append("\n");
    sb.append("    k8sNamespace: ").append(toIndentedString(k8sNamespace)).append("\n");
    sb.append("    k8sPredefinedRoleName: ").append(toIndentedString(k8sPredefinedRoleName)).append("\n");
    sb.append("    k8sPredefinedRoleType: ").append(toIndentedString(k8sPredefinedRoleType)).append("\n");
    sb.append("    k8sRolebindingYamlDef: ").append(toIndentedString(k8sRolebindingYamlDef)).append("\n");
    sb.append("    k8sServiceAccount: ").append(toIndentedString(k8sServiceAccount)).append("\n");
    sb.append("    k8sServiceAccountType: ").append(toIndentedString(k8sServiceAccountType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    secureAccessAllowPortForwading: ").append(toIndentedString(secureAccessAllowPortForwading)).append("\n");
    sb.append("    secureAccessBastionIssuer: ").append(toIndentedString(secureAccessBastionIssuer)).append("\n");
    sb.append("    secureAccessCertificateIssuer: ").append(toIndentedString(secureAccessCertificateIssuer)).append("\n");
    sb.append("    secureAccessClusterEndpoint: ").append(toIndentedString(secureAccessClusterEndpoint)).append("\n");
    sb.append("    secureAccessDashboardUrl: ").append(toIndentedString(secureAccessDashboardUrl)).append("\n");
    sb.append("    secureAccessDelay: ").append(toIndentedString(secureAccessDelay)).append("\n");
    sb.append("    secureAccessEnable: ").append(toIndentedString(secureAccessEnable)).append("\n");
    sb.append("    secureAccessWeb: ").append(toIndentedString(secureAccessWeb)).append("\n");
    sb.append("    secureAccessWebBrowsing: ").append(toIndentedString(secureAccessWebBrowsing)).append("\n");
    sb.append("    secureAccessWebProxy: ").append(toIndentedString(secureAccessWebProxy)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    useGwServiceAccount: ").append(toIndentedString(useGwServiceAccount)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom-username-template");
    openapiFields.add("delete_protection");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("k8s-allowed-namespaces");
    openapiFields.add("k8s-cluster-ca-cert");
    openapiFields.add("k8s-cluster-endpoint");
    openapiFields.add("k8s-cluster-name");
    openapiFields.add("k8s-cluster-token");
    openapiFields.add("k8s-namespace");
    openapiFields.add("k8s-predefined-role-name");
    openapiFields.add("k8s-predefined-role-type");
    openapiFields.add("k8s-rolebinding-yaml-def");
    openapiFields.add("k8s-service-account");
    openapiFields.add("k8s-service-account-type");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("producer-encryption-key-name");
    openapiFields.add("secure-access-allow-port-forwading");
    openapiFields.add("secure-access-bastion-issuer");
    openapiFields.add("secure-access-certificate-issuer");
    openapiFields.add("secure-access-cluster-endpoint");
    openapiFields.add("secure-access-dashboard-url");
    openapiFields.add("secure-access-delay");
    openapiFields.add("secure-access-enable");
    openapiFields.add("secure-access-web");
    openapiFields.add("secure-access-web-browsing");
    openapiFields.add("secure-access-web-proxy");
    openapiFields.add("tags");
    openapiFields.add("target-name");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("use-gw-service-account");
    openapiFields.add("user-ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicSecretUpdateK8s
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicSecretUpdateK8s.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicSecretUpdateK8s is not found in the empty JSON string", DynamicSecretUpdateK8s.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicSecretUpdateK8s.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicSecretUpdateK8s` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamicSecretUpdateK8s.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom-username-template") != null && !jsonObj.get("custom-username-template").isJsonNull()) && !jsonObj.get("custom-username-template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom-username-template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom-username-template").toString()));
      }
      if ((jsonObj.get("delete_protection") != null && !jsonObj.get("delete_protection").isJsonNull()) && !jsonObj.get("delete_protection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delete_protection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delete_protection").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("k8s-allowed-namespaces") != null && !jsonObj.get("k8s-allowed-namespaces").isJsonNull()) && !jsonObj.get("k8s-allowed-namespaces").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-allowed-namespaces` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-allowed-namespaces").toString()));
      }
      if ((jsonObj.get("k8s-cluster-ca-cert") != null && !jsonObj.get("k8s-cluster-ca-cert").isJsonNull()) && !jsonObj.get("k8s-cluster-ca-cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-ca-cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-ca-cert").toString()));
      }
      if ((jsonObj.get("k8s-cluster-endpoint") != null && !jsonObj.get("k8s-cluster-endpoint").isJsonNull()) && !jsonObj.get("k8s-cluster-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-endpoint").toString()));
      }
      if ((jsonObj.get("k8s-cluster-name") != null && !jsonObj.get("k8s-cluster-name").isJsonNull()) && !jsonObj.get("k8s-cluster-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-name").toString()));
      }
      if ((jsonObj.get("k8s-cluster-token") != null && !jsonObj.get("k8s-cluster-token").isJsonNull()) && !jsonObj.get("k8s-cluster-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-cluster-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-cluster-token").toString()));
      }
      if ((jsonObj.get("k8s-namespace") != null && !jsonObj.get("k8s-namespace").isJsonNull()) && !jsonObj.get("k8s-namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-namespace").toString()));
      }
      if ((jsonObj.get("k8s-predefined-role-name") != null && !jsonObj.get("k8s-predefined-role-name").isJsonNull()) && !jsonObj.get("k8s-predefined-role-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-predefined-role-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-predefined-role-name").toString()));
      }
      if ((jsonObj.get("k8s-predefined-role-type") != null && !jsonObj.get("k8s-predefined-role-type").isJsonNull()) && !jsonObj.get("k8s-predefined-role-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-predefined-role-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-predefined-role-type").toString()));
      }
      if ((jsonObj.get("k8s-rolebinding-yaml-def") != null && !jsonObj.get("k8s-rolebinding-yaml-def").isJsonNull()) && !jsonObj.get("k8s-rolebinding-yaml-def").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-rolebinding-yaml-def` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-rolebinding-yaml-def").toString()));
      }
      if ((jsonObj.get("k8s-service-account") != null && !jsonObj.get("k8s-service-account").isJsonNull()) && !jsonObj.get("k8s-service-account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-service-account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-service-account").toString()));
      }
      if ((jsonObj.get("k8s-service-account-type") != null && !jsonObj.get("k8s-service-account-type").isJsonNull()) && !jsonObj.get("k8s-service-account-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8s-service-account-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8s-service-account-type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("producer-encryption-key-name") != null && !jsonObj.get("producer-encryption-key-name").isJsonNull()) && !jsonObj.get("producer-encryption-key-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producer-encryption-key-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producer-encryption-key-name").toString()));
      }
      if ((jsonObj.get("secure-access-bastion-issuer") != null && !jsonObj.get("secure-access-bastion-issuer").isJsonNull()) && !jsonObj.get("secure-access-bastion-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-bastion-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-bastion-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-certificate-issuer") != null && !jsonObj.get("secure-access-certificate-issuer").isJsonNull()) && !jsonObj.get("secure-access-certificate-issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-certificate-issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-certificate-issuer").toString()));
      }
      if ((jsonObj.get("secure-access-cluster-endpoint") != null && !jsonObj.get("secure-access-cluster-endpoint").isJsonNull()) && !jsonObj.get("secure-access-cluster-endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-cluster-endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-cluster-endpoint").toString()));
      }
      if ((jsonObj.get("secure-access-dashboard-url") != null && !jsonObj.get("secure-access-dashboard-url").isJsonNull()) && !jsonObj.get("secure-access-dashboard-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-dashboard-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-dashboard-url").toString()));
      }
      if ((jsonObj.get("secure-access-enable") != null && !jsonObj.get("secure-access-enable").isJsonNull()) && !jsonObj.get("secure-access-enable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure-access-enable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure-access-enable").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("target-name") != null && !jsonObj.get("target-name").isJsonNull()) && !jsonObj.get("target-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-name").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("user-ttl") != null && !jsonObj.get("user-ttl").isJsonNull()) && !jsonObj.get("user-ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user-ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user-ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicSecretUpdateK8s.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicSecretUpdateK8s' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicSecretUpdateK8s> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicSecretUpdateK8s.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicSecretUpdateK8s>() {
           @Override
           public void write(JsonWriter out, DynamicSecretUpdateK8s value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicSecretUpdateK8s read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicSecretUpdateK8s given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicSecretUpdateK8s
   * @throws IOException if the JSON string is invalid with respect to DynamicSecretUpdateK8s
   */
  public static DynamicSecretUpdateK8s fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicSecretUpdateK8s.class);
  }

  /**
   * Convert an instance of DynamicSecretUpdateK8s to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

