/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * TargetUpdateGlobalSignAtlas
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class TargetUpdateGlobalSignAtlas {
  public static final String SERIALIZED_NAME_API_KEY = "api-key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  @javax.annotation.Nonnull
  private String apiKey;

  public static final String SERIALIZED_NAME_API_SECRET = "api-secret";
  @SerializedName(SERIALIZED_NAME_API_SECRET)
  @javax.annotation.Nonnull
  private String apiSecret;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_MTLS_CERT_DATA_BASE64 = "mtls-cert-data-base64";
  @SerializedName(SERIALIZED_NAME_MTLS_CERT_DATA_BASE64)
  @javax.annotation.Nullable
  private String mtlsCertDataBase64;

  public static final String SERIALIZED_NAME_MTLS_KEY_DATA_BASE64 = "mtls-key-data-base64";
  @SerializedName(SERIALIZED_NAME_MTLS_KEY_DATA_BASE64)
  @javax.annotation.Nullable
  private String mtlsKeyDataBase64;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private String timeout = "5m";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public TargetUpdateGlobalSignAtlas() {
  }

  public TargetUpdateGlobalSignAtlas apiKey(@javax.annotation.Nonnull String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * API Key of the GlobalSign Atlas account
   * @return apiKey
   */
  @javax.annotation.Nonnull
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(@javax.annotation.Nonnull String apiKey) {
    this.apiKey = apiKey;
  }


  public TargetUpdateGlobalSignAtlas apiSecret(@javax.annotation.Nonnull String apiSecret) {
    this.apiSecret = apiSecret;
    return this;
  }

  /**
   * API Secret of the GlobalSign Atlas account
   * @return apiSecret
   */
  @javax.annotation.Nonnull
  public String getApiSecret() {
    return apiSecret;
  }

  public void setApiSecret(@javax.annotation.Nonnull String apiSecret) {
    this.apiSecret = apiSecret;
  }


  public TargetUpdateGlobalSignAtlas description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TargetUpdateGlobalSignAtlas json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public TargetUpdateGlobalSignAtlas keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public TargetUpdateGlobalSignAtlas key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public TargetUpdateGlobalSignAtlas maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public TargetUpdateGlobalSignAtlas mtlsCertDataBase64(@javax.annotation.Nullable String mtlsCertDataBase64) {
    this.mtlsCertDataBase64 = mtlsCertDataBase64;
    return this;
  }

  /**
   * Mutual TLS Certificate contents of the GlobalSign Atlas account encoded in base64, either mtls-cert-file-path or mtls-cert-data-base64 must be supplied
   * @return mtlsCertDataBase64
   */
  @javax.annotation.Nullable
  public String getMtlsCertDataBase64() {
    return mtlsCertDataBase64;
  }

  public void setMtlsCertDataBase64(@javax.annotation.Nullable String mtlsCertDataBase64) {
    this.mtlsCertDataBase64 = mtlsCertDataBase64;
  }


  public TargetUpdateGlobalSignAtlas mtlsKeyDataBase64(@javax.annotation.Nullable String mtlsKeyDataBase64) {
    this.mtlsKeyDataBase64 = mtlsKeyDataBase64;
    return this;
  }

  /**
   * Mutual TLS Key contents of the GlobalSign Atlas account encoded in base64, either mtls-key-file-path or mtls-data-base64 must be supplied
   * @return mtlsKeyDataBase64
   */
  @javax.annotation.Nullable
  public String getMtlsKeyDataBase64() {
    return mtlsKeyDataBase64;
  }

  public void setMtlsKeyDataBase64(@javax.annotation.Nullable String mtlsKeyDataBase64) {
    this.mtlsKeyDataBase64 = mtlsKeyDataBase64;
  }


  public TargetUpdateGlobalSignAtlas name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public TargetUpdateGlobalSignAtlas newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New target name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public TargetUpdateGlobalSignAtlas timeout(@javax.annotation.Nullable String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable String timeout) {
    this.timeout = timeout;
  }


  public TargetUpdateGlobalSignAtlas token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public TargetUpdateGlobalSignAtlas uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetUpdateGlobalSignAtlas targetUpdateGlobalSignAtlas = (TargetUpdateGlobalSignAtlas) o;
    return Objects.equals(this.apiKey, targetUpdateGlobalSignAtlas.apiKey) &&
        Objects.equals(this.apiSecret, targetUpdateGlobalSignAtlas.apiSecret) &&
        Objects.equals(this.description, targetUpdateGlobalSignAtlas.description) &&
        Objects.equals(this.json, targetUpdateGlobalSignAtlas.json) &&
        Objects.equals(this.keepPrevVersion, targetUpdateGlobalSignAtlas.keepPrevVersion) &&
        Objects.equals(this.key, targetUpdateGlobalSignAtlas.key) &&
        Objects.equals(this.maxVersions, targetUpdateGlobalSignAtlas.maxVersions) &&
        Objects.equals(this.mtlsCertDataBase64, targetUpdateGlobalSignAtlas.mtlsCertDataBase64) &&
        Objects.equals(this.mtlsKeyDataBase64, targetUpdateGlobalSignAtlas.mtlsKeyDataBase64) &&
        Objects.equals(this.name, targetUpdateGlobalSignAtlas.name) &&
        Objects.equals(this.newName, targetUpdateGlobalSignAtlas.newName) &&
        Objects.equals(this.timeout, targetUpdateGlobalSignAtlas.timeout) &&
        Objects.equals(this.token, targetUpdateGlobalSignAtlas.token) &&
        Objects.equals(this.uidToken, targetUpdateGlobalSignAtlas.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, apiSecret, description, json, keepPrevVersion, key, maxVersions, mtlsCertDataBase64, mtlsKeyDataBase64, name, newName, timeout, token, uidToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetUpdateGlobalSignAtlas {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiSecret: ").append(toIndentedString(apiSecret)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    mtlsCertDataBase64: ").append(toIndentedString(mtlsCertDataBase64)).append("\n");
    sb.append("    mtlsKeyDataBase64: ").append(toIndentedString(mtlsKeyDataBase64)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-key");
    openapiFields.add("api-secret");
    openapiFields.add("description");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("mtls-cert-data-base64");
    openapiFields.add("mtls-key-data-base64");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("timeout");
    openapiFields.add("token");
    openapiFields.add("uid-token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("api-key");
    openapiRequiredFields.add("api-secret");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetUpdateGlobalSignAtlas
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetUpdateGlobalSignAtlas.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetUpdateGlobalSignAtlas is not found in the empty JSON string", TargetUpdateGlobalSignAtlas.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetUpdateGlobalSignAtlas.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetUpdateGlobalSignAtlas` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TargetUpdateGlobalSignAtlas.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("api-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-key").toString()));
      }
      if (!jsonObj.get("api-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-secret").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if ((jsonObj.get("mtls-cert-data-base64") != null && !jsonObj.get("mtls-cert-data-base64").isJsonNull()) && !jsonObj.get("mtls-cert-data-base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtls-cert-data-base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtls-cert-data-base64").toString()));
      }
      if ((jsonObj.get("mtls-key-data-base64") != null && !jsonObj.get("mtls-key-data-base64").isJsonNull()) && !jsonObj.get("mtls-key-data-base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtls-key-data-base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtls-key-data-base64").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetUpdateGlobalSignAtlas.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetUpdateGlobalSignAtlas' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetUpdateGlobalSignAtlas> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetUpdateGlobalSignAtlas.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetUpdateGlobalSignAtlas>() {
           @Override
           public void write(JsonWriter out, TargetUpdateGlobalSignAtlas value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetUpdateGlobalSignAtlas read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetUpdateGlobalSignAtlas given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetUpdateGlobalSignAtlas
   * @throws IOException if the JSON string is invalid with respect to TargetUpdateGlobalSignAtlas
   */
  public static TargetUpdateGlobalSignAtlas fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetUpdateGlobalSignAtlas.class);
  }

  /**
   * Convert an instance of TargetUpdateGlobalSignAtlas to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

