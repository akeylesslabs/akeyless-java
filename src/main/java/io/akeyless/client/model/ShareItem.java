/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * ShareItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ShareItem {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  @javax.annotation.Nullable
  private String accessibility = "regular";

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  @javax.annotation.Nonnull
  private String action;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  @javax.annotation.Nullable
  private List<String> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_NAME = "item-name";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  @javax.annotation.Nonnull
  private String itemName;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_SHARE_TYPE = "share-type";
  @SerializedName(SERIALIZED_NAME_SHARE_TYPE)
  @javax.annotation.Nullable
  private String shareType = "email";

  public static final String SERIALIZED_NAME_SHARED_TOKEN_ID = "shared-token-id";
  @SerializedName(SERIALIZED_NAME_SHARED_TOKEN_ID)
  @javax.annotation.Nullable
  private List<String> sharedTokenId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nullable
  private Integer ttl;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_VIEW_ONCE = "view-once";
  @SerializedName(SERIALIZED_NAME_VIEW_ONCE)
  @javax.annotation.Nullable
  private Boolean viewOnce = false;

  public ShareItem() {
  }

  public ShareItem accessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * for personal password manager
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
  }


  public ShareItem action(@javax.annotation.Nonnull String action) {
    this.action = action;
    return this;
  }

  /**
   * Action to be performed on the item [start/stop/describe]
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(@javax.annotation.Nonnull String action) {
    this.action = action;
  }


  public ShareItem emails(@javax.annotation.Nullable List<String> emails) {
    this.emails = emails;
    return this;
  }

  public ShareItem addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * List of emails to start/stop sharing the secret with
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(@javax.annotation.Nullable List<String> emails) {
    this.emails = emails;
  }


  public ShareItem itemName(@javax.annotation.Nonnull String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * Item name
   * @return itemName
   */
  @javax.annotation.Nonnull
  public String getItemName() {
    return itemName;
  }

  public void setItemName(@javax.annotation.Nonnull String itemName) {
    this.itemName = itemName;
  }


  public ShareItem json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public ShareItem shareType(@javax.annotation.Nullable String shareType) {
    this.shareType = shareType;
    return this;
  }

  /**
   * Share type [email/token]
   * @return shareType
   */
  @javax.annotation.Nullable
  public String getShareType() {
    return shareType;
  }

  public void setShareType(@javax.annotation.Nullable String shareType) {
    this.shareType = shareType;
  }


  public ShareItem sharedTokenId(@javax.annotation.Nullable List<String> sharedTokenId) {
    this.sharedTokenId = sharedTokenId;
    return this;
  }

  public ShareItem addSharedTokenIdItem(String sharedTokenIdItem) {
    if (this.sharedTokenId == null) {
      this.sharedTokenId = new ArrayList<>();
    }
    this.sharedTokenId.add(sharedTokenIdItem);
    return this;
  }

  /**
   * Shared token ids in order to stop sharing a secret
   * @return sharedTokenId
   */
  @javax.annotation.Nullable
  public List<String> getSharedTokenId() {
    return sharedTokenId;
  }

  public void setSharedTokenId(@javax.annotation.Nullable List<String> sharedTokenId) {
    this.sharedTokenId = sharedTokenId;
  }


  public ShareItem token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public ShareItem ttl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * TTL of the Availability of the shared secret in seconds
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nullable Integer ttl) {
    this.ttl = ttl;
  }


  public ShareItem uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public ShareItem viewOnce(@javax.annotation.Nullable Boolean viewOnce) {
    this.viewOnce = viewOnce;
    return this;
  }

  /**
   * ViewOnlyOnce Shared secrets can only be viewed once [true/false]
   * @return viewOnce
   */
  @javax.annotation.Nullable
  public Boolean getViewOnce() {
    return viewOnce;
  }

  public void setViewOnce(@javax.annotation.Nullable Boolean viewOnce) {
    this.viewOnce = viewOnce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareItem shareItem = (ShareItem) o;
    return Objects.equals(this.accessibility, shareItem.accessibility) &&
        Objects.equals(this.action, shareItem.action) &&
        Objects.equals(this.emails, shareItem.emails) &&
        Objects.equals(this.itemName, shareItem.itemName) &&
        Objects.equals(this.json, shareItem.json) &&
        Objects.equals(this.shareType, shareItem.shareType) &&
        Objects.equals(this.sharedTokenId, shareItem.sharedTokenId) &&
        Objects.equals(this.token, shareItem.token) &&
        Objects.equals(this.ttl, shareItem.ttl) &&
        Objects.equals(this.uidToken, shareItem.uidToken) &&
        Objects.equals(this.viewOnce, shareItem.viewOnce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, action, emails, itemName, json, shareType, sharedTokenId, token, ttl, uidToken, viewOnce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareItem {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    shareType: ").append(toIndentedString(shareType)).append("\n");
    sb.append("    sharedTokenId: ").append(toIndentedString(sharedTokenId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    viewOnce: ").append(toIndentedString(viewOnce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("action");
    openapiFields.add("emails");
    openapiFields.add("item-name");
    openapiFields.add("json");
    openapiFields.add("share-type");
    openapiFields.add("shared-token-id");
    openapiFields.add("token");
    openapiFields.add("ttl");
    openapiFields.add("uid-token");
    openapiFields.add("view-once");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("item-name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareItem is not found in the empty JSON string", ShareItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShareItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if (!jsonObj.get("item-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item-name").toString()));
      }
      if ((jsonObj.get("share-type") != null && !jsonObj.get("share-type").isJsonNull()) && !jsonObj.get("share-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share-type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shared-token-id") != null && !jsonObj.get("shared-token-id").isJsonNull() && !jsonObj.get("shared-token-id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared-token-id` to be an array in the JSON string but got `%s`", jsonObj.get("shared-token-id").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareItem>() {
           @Override
           public void write(JsonWriter out, ShareItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareItem
   * @throws IOException if the JSON string is invalid with respect to ShareItem
   */
  public static ShareItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareItem.class);
  }

  /**
   * Convert an instance of ShareItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

