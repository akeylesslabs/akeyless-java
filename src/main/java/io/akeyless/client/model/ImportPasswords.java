/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * importPasswords is a command that import passwords
 */
@ApiModel(description = "importPasswords is a command that import passwords")

public class ImportPasswords {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private String accessibility = "personal";

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format = "LastPass";

  public static final String SERIALIZED_NAME_IMPORT_PATH = "import-path";
  @SerializedName(SERIALIZED_NAME_IMPORT_PATH)
  private String importPath;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  private Boolean json = false;

  public static final String SERIALIZED_NAME_PROTECTION_KEY = "protection_key";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY)
  private String protectionKey;

  public static final String SERIALIZED_NAME_TARGET_FOLDER = "target-folder";
  @SerializedName(SERIALIZED_NAME_TARGET_FOLDER)
  private String targetFolder = "/";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;


  public ImportPasswords accessibility(String accessibility) {
    
    this.accessibility = accessibility;
    return this;
  }

   /**
   * for personal password manager
   * @return accessibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for personal password manager")

  public String getAccessibility() {
    return accessibility;
  }


  public void setAccessibility(String accessibility) {
    this.accessibility = accessibility;
  }


  public ImportPasswords format(String format) {
    
    this.format = format;
    return this;
  }

   /**
   * Password format type [LastPass/Chrome/Firefox]
   * @return format
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Password format type [LastPass/Chrome/Firefox]")

  public String getFormat() {
    return format;
  }


  public void setFormat(String format) {
    this.format = format;
  }


  public ImportPasswords importPath(String importPath) {
    
    this.importPath = importPath;
    return this;
  }

   /**
   * File path
   * @return importPath
  **/
  @ApiModelProperty(required = true, value = "File path")

  public String getImportPath() {
    return importPath;
  }


  public void setImportPath(String importPath) {
    this.importPath = importPath;
  }


  public ImportPasswords json(Boolean json) {
    
    this.json = json;
    return this;
  }

   /**
   * Set output format to JSON
   * @return json
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set output format to JSON")

  public Boolean getJson() {
    return json;
  }


  public void setJson(Boolean json) {
    this.json = json;
  }


  public ImportPasswords protectionKey(String protectionKey) {
    
    this.protectionKey = protectionKey;
    return this;
  }

   /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return protectionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)")

  public String getProtectionKey() {
    return protectionKey;
  }


  public void setProtectionKey(String protectionKey) {
    this.protectionKey = protectionKey;
  }


  public ImportPasswords targetFolder(String targetFolder) {
    
    this.targetFolder = targetFolder;
    return this;
  }

   /**
   * Target folder for imported passwords
   * @return targetFolder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Target folder for imported passwords")

  public String getTargetFolder() {
    return targetFolder;
  }


  public void setTargetFolder(String targetFolder) {
    this.targetFolder = targetFolder;
  }


  public ImportPasswords token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public ImportPasswords uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportPasswords importPasswords = (ImportPasswords) o;
    return Objects.equals(this.accessibility, importPasswords.accessibility) &&
        Objects.equals(this.format, importPasswords.format) &&
        Objects.equals(this.importPath, importPasswords.importPath) &&
        Objects.equals(this.json, importPasswords.json) &&
        Objects.equals(this.protectionKey, importPasswords.protectionKey) &&
        Objects.equals(this.targetFolder, importPasswords.targetFolder) &&
        Objects.equals(this.token, importPasswords.token) &&
        Objects.equals(this.uidToken, importPasswords.uidToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, format, importPath, json, protectionKey, targetFolder, token, uidToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportPasswords {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    importPath: ").append(toIndentedString(importPath)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    protectionKey: ").append(toIndentedString(protectionKey)).append("\n");
    sb.append("    targetFolder: ").append(toIndentedString(targetFolder)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

