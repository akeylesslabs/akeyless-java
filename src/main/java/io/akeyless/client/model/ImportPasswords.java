/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * importPasswords is a command that import passwords
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ImportPasswords {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  @javax.annotation.Nullable
  private String accessibility = "personal";

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private String format = "LastPass";

  public static final String SERIALIZED_NAME_IMPORT_PATH = "import-path";
  @SerializedName(SERIALIZED_NAME_IMPORT_PATH)
  @javax.annotation.Nonnull
  private String importPath;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_PROTECTION_KEY = "protection_key";
  @SerializedName(SERIALIZED_NAME_PROTECTION_KEY)
  @javax.annotation.Nullable
  private String protectionKey;

  public static final String SERIALIZED_NAME_TARGET_FOLDER = "target-folder";
  @SerializedName(SERIALIZED_NAME_TARGET_FOLDER)
  @javax.annotation.Nullable
  private String targetFolder = "/";

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_UPDATE_MODE = "update-mode";
  @SerializedName(SERIALIZED_NAME_UPDATE_MODE)
  @javax.annotation.Nullable
  private String updateMode;

  public ImportPasswords() {
  }

  public ImportPasswords accessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * for personal password manager
   * @return accessibility
   */
  @javax.annotation.Nullable
  public String getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(@javax.annotation.Nullable String accessibility) {
    this.accessibility = accessibility;
  }


  public ImportPasswords format(@javax.annotation.Nullable String format) {
    this.format = format;
    return this;
  }

  /**
   * Password format type [LastPass/Chrome/Firefox/1password/keeper/bitwarden/dashlane]
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = format;
  }


  public ImportPasswords importPath(@javax.annotation.Nonnull String importPath) {
    this.importPath = importPath;
    return this;
  }

  /**
   * File path
   * @return importPath
   */
  @javax.annotation.Nonnull
  public String getImportPath() {
    return importPath;
  }

  public void setImportPath(@javax.annotation.Nonnull String importPath) {
    this.importPath = importPath;
  }


  public ImportPasswords json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public ImportPasswords protectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
    return this;
  }

  /**
   * The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
   * @return protectionKey
   */
  @javax.annotation.Nullable
  public String getProtectionKey() {
    return protectionKey;
  }

  public void setProtectionKey(@javax.annotation.Nullable String protectionKey) {
    this.protectionKey = protectionKey;
  }


  public ImportPasswords targetFolder(@javax.annotation.Nullable String targetFolder) {
    this.targetFolder = targetFolder;
    return this;
  }

  /**
   * Target folder for imported passwords
   * @return targetFolder
   */
  @javax.annotation.Nullable
  public String getTargetFolder() {
    return targetFolder;
  }

  public void setTargetFolder(@javax.annotation.Nullable String targetFolder) {
    this.targetFolder = targetFolder;
  }


  public ImportPasswords token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public ImportPasswords uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public ImportPasswords updateMode(@javax.annotation.Nullable String updateMode) {
    this.updateMode = updateMode;
    return this;
  }

  /**
   * Get updateMode
   * @return updateMode
   */
  @javax.annotation.Nullable
  public String getUpdateMode() {
    return updateMode;
  }

  public void setUpdateMode(@javax.annotation.Nullable String updateMode) {
    this.updateMode = updateMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportPasswords importPasswords = (ImportPasswords) o;
    return Objects.equals(this.accessibility, importPasswords.accessibility) &&
        Objects.equals(this.format, importPasswords.format) &&
        Objects.equals(this.importPath, importPasswords.importPath) &&
        Objects.equals(this.json, importPasswords.json) &&
        Objects.equals(this.protectionKey, importPasswords.protectionKey) &&
        Objects.equals(this.targetFolder, importPasswords.targetFolder) &&
        Objects.equals(this.token, importPasswords.token) &&
        Objects.equals(this.uidToken, importPasswords.uidToken) &&
        Objects.equals(this.updateMode, importPasswords.updateMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, format, importPath, json, protectionKey, targetFolder, token, uidToken, updateMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportPasswords {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    importPath: ").append(toIndentedString(importPath)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    protectionKey: ").append(toIndentedString(protectionKey)).append("\n");
    sb.append("    targetFolder: ").append(toIndentedString(targetFolder)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    updateMode: ").append(toIndentedString(updateMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("format");
    openapiFields.add("import-path");
    openapiFields.add("json");
    openapiFields.add("protection_key");
    openapiFields.add("target-folder");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("update-mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("import-path");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportPasswords
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportPasswords.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportPasswords is not found in the empty JSON string", ImportPasswords.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportPasswords.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportPasswords` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportPasswords.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) && !jsonObj.get("accessibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibility").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if (!jsonObj.get("import-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `import-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("import-path").toString()));
      }
      if ((jsonObj.get("protection_key") != null && !jsonObj.get("protection_key").isJsonNull()) && !jsonObj.get("protection_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protection_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protection_key").toString()));
      }
      if ((jsonObj.get("target-folder") != null && !jsonObj.get("target-folder").isJsonNull()) && !jsonObj.get("target-folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target-folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target-folder").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
      if ((jsonObj.get("update-mode") != null && !jsonObj.get("update-mode").isJsonNull()) && !jsonObj.get("update-mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update-mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update-mode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportPasswords.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportPasswords' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportPasswords> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportPasswords.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportPasswords>() {
           @Override
           public void write(JsonWriter out, ImportPasswords value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportPasswords read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportPasswords given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportPasswords
   * @throws IOException if the JSON string is invalid with respect to ImportPasswords
   */
  public static ImportPasswords fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportPasswords.class);
  }

  /**
   * Convert an instance of ImportPasswords to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

