/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SalesforceTargetDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SalesforceTargetDetails {
  public static final String SERIALIZED_NAME_APP_PRIVATE_KEY = "app_private_key";
  @SerializedName(SERIALIZED_NAME_APP_PRIVATE_KEY)
  @javax.annotation.Nullable
  private List<Integer> appPrivateKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_FLOW = "auth_flow";
  @SerializedName(SERIALIZED_NAME_AUTH_FLOW)
  @javax.annotation.Nullable
  private String authFlow;

  public static final String SERIALIZED_NAME_CA_CERT_DATA = "ca_cert_data";
  @SerializedName(SERIALIZED_NAME_CA_CERT_DATA)
  @javax.annotation.Nullable
  private List<Integer> caCertData = new ArrayList<>();

  public static final String SERIALIZED_NAME_CA_CERT_NAME = "ca_cert_name";
  @SerializedName(SERIALIZED_NAME_CA_CERT_NAME)
  @javax.annotation.Nullable
  private String caCertName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String clientSecret;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_SECURITY_TOKEN = "security_token";
  @SerializedName(SERIALIZED_NAME_SECURITY_TOKEN)
  @javax.annotation.Nullable
  private String securityToken;

  public static final String SERIALIZED_NAME_TENANT_URL = "tenant_url";
  @SerializedName(SERIALIZED_NAME_TENANT_URL)
  @javax.annotation.Nullable
  private String tenantUrl;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nullable
  private String userName;

  public SalesforceTargetDetails() {
  }

  public SalesforceTargetDetails appPrivateKey(@javax.annotation.Nullable List<Integer> appPrivateKey) {
    this.appPrivateKey = appPrivateKey;
    return this;
  }

  public SalesforceTargetDetails addAppPrivateKeyItem(Integer appPrivateKeyItem) {
    if (this.appPrivateKey == null) {
      this.appPrivateKey = new ArrayList<>();
    }
    this.appPrivateKey.add(appPrivateKeyItem);
    return this;
  }

  /**
   * params needed for jwt auth AppPrivateKey is the rsa private key in PEM format
   * @return appPrivateKey
   */
  @javax.annotation.Nullable
  public List<Integer> getAppPrivateKey() {
    return appPrivateKey;
  }

  public void setAppPrivateKey(@javax.annotation.Nullable List<Integer> appPrivateKey) {
    this.appPrivateKey = appPrivateKey;
  }


  public SalesforceTargetDetails authFlow(@javax.annotation.Nullable String authFlow) {
    this.authFlow = authFlow;
    return this;
  }

  /**
   * Get authFlow
   * @return authFlow
   */
  @javax.annotation.Nullable
  public String getAuthFlow() {
    return authFlow;
  }

  public void setAuthFlow(@javax.annotation.Nullable String authFlow) {
    this.authFlow = authFlow;
  }


  public SalesforceTargetDetails caCertData(@javax.annotation.Nullable List<Integer> caCertData) {
    this.caCertData = caCertData;
    return this;
  }

  public SalesforceTargetDetails addCaCertDataItem(Integer caCertDataItem) {
    if (this.caCertData == null) {
      this.caCertData = new ArrayList<>();
    }
    this.caCertData.add(caCertDataItem);
    return this;
  }

  /**
   * CACertData is the rsa 4096 certificate data in PEM format
   * @return caCertData
   */
  @javax.annotation.Nullable
  public List<Integer> getCaCertData() {
    return caCertData;
  }

  public void setCaCertData(@javax.annotation.Nullable List<Integer> caCertData) {
    this.caCertData = caCertData;
  }


  public SalesforceTargetDetails caCertName(@javax.annotation.Nullable String caCertName) {
    this.caCertName = caCertName;
    return this;
  }

  /**
   * CACertName is the name of the certificate in SalesForce tenant
   * @return caCertName
   */
  @javax.annotation.Nullable
  public String getCaCertName() {
    return caCertName;
  }

  public void setCaCertName(@javax.annotation.Nullable String caCertName) {
    this.caCertName = caCertName;
  }


  public SalesforceTargetDetails clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public SalesforceTargetDetails clientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * params needed for password auth
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public SalesforceTargetDetails password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public SalesforceTargetDetails securityToken(@javax.annotation.Nullable String securityToken) {
    this.securityToken = securityToken;
    return this;
  }

  /**
   * Get securityToken
   * @return securityToken
   */
  @javax.annotation.Nullable
  public String getSecurityToken() {
    return securityToken;
  }

  public void setSecurityToken(@javax.annotation.Nullable String securityToken) {
    this.securityToken = securityToken;
  }


  public SalesforceTargetDetails tenantUrl(@javax.annotation.Nullable String tenantUrl) {
    this.tenantUrl = tenantUrl;
    return this;
  }

  /**
   * Get tenantUrl
   * @return tenantUrl
   */
  @javax.annotation.Nullable
  public String getTenantUrl() {
    return tenantUrl;
  }

  public void setTenantUrl(@javax.annotation.Nullable String tenantUrl) {
    this.tenantUrl = tenantUrl;
  }


  public SalesforceTargetDetails userName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesforceTargetDetails salesforceTargetDetails = (SalesforceTargetDetails) o;
    return Objects.equals(this.appPrivateKey, salesforceTargetDetails.appPrivateKey) &&
        Objects.equals(this.authFlow, salesforceTargetDetails.authFlow) &&
        Objects.equals(this.caCertData, salesforceTargetDetails.caCertData) &&
        Objects.equals(this.caCertName, salesforceTargetDetails.caCertName) &&
        Objects.equals(this.clientId, salesforceTargetDetails.clientId) &&
        Objects.equals(this.clientSecret, salesforceTargetDetails.clientSecret) &&
        Objects.equals(this.password, salesforceTargetDetails.password) &&
        Objects.equals(this.securityToken, salesforceTargetDetails.securityToken) &&
        Objects.equals(this.tenantUrl, salesforceTargetDetails.tenantUrl) &&
        Objects.equals(this.userName, salesforceTargetDetails.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPrivateKey, authFlow, caCertData, caCertName, clientId, clientSecret, password, securityToken, tenantUrl, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesforceTargetDetails {\n");
    sb.append("    appPrivateKey: ").append(toIndentedString(appPrivateKey)).append("\n");
    sb.append("    authFlow: ").append(toIndentedString(authFlow)).append("\n");
    sb.append("    caCertData: ").append(toIndentedString(caCertData)).append("\n");
    sb.append("    caCertName: ").append(toIndentedString(caCertName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    securityToken: ").append(toIndentedString(securityToken)).append("\n");
    sb.append("    tenantUrl: ").append(toIndentedString(tenantUrl)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_private_key");
    openapiFields.add("auth_flow");
    openapiFields.add("ca_cert_data");
    openapiFields.add("ca_cert_name");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("password");
    openapiFields.add("security_token");
    openapiFields.add("tenant_url");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesforceTargetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesforceTargetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesforceTargetDetails is not found in the empty JSON string", SalesforceTargetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesforceTargetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesforceTargetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("app_private_key") != null && !jsonObj.get("app_private_key").isJsonNull() && !jsonObj.get("app_private_key").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_private_key` to be an array in the JSON string but got `%s`", jsonObj.get("app_private_key").toString()));
      }
      if ((jsonObj.get("auth_flow") != null && !jsonObj.get("auth_flow").isJsonNull()) && !jsonObj.get("auth_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ca_cert_data") != null && !jsonObj.get("ca_cert_data").isJsonNull() && !jsonObj.get("ca_cert_data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca_cert_data` to be an array in the JSON string but got `%s`", jsonObj.get("ca_cert_data").toString()));
      }
      if ((jsonObj.get("ca_cert_name") != null && !jsonObj.get("ca_cert_name").isJsonNull()) && !jsonObj.get("ca_cert_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca_cert_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca_cert_name").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("security_token") != null && !jsonObj.get("security_token").isJsonNull()) && !jsonObj.get("security_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_token").toString()));
      }
      if ((jsonObj.get("tenant_url") != null && !jsonObj.get("tenant_url").isJsonNull()) && !jsonObj.get("tenant_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_url").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesforceTargetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesforceTargetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesforceTargetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesforceTargetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesforceTargetDetails>() {
           @Override
           public void write(JsonWriter out, SalesforceTargetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesforceTargetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesforceTargetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesforceTargetDetails
   * @throws IOException if the JSON string is invalid with respect to SalesforceTargetDetails
   */
  public static SalesforceTargetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesforceTargetDetails.class);
  }

  /**
   * Convert an instance of SalesforceTargetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

