/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SumologicLogForwardingConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SumologicLogForwardingConfig {
  public static final String SERIALIZED_NAME_SUMO_LOGIC_ENDPOINT = "sumo_logic_endpoint";
  @SerializedName(SERIALIZED_NAME_SUMO_LOGIC_ENDPOINT)
  private String sumoLogicEndpoint;

  public static final String SERIALIZED_NAME_SUMO_LOGIC_HOST = "sumo_logic_host";
  @SerializedName(SERIALIZED_NAME_SUMO_LOGIC_HOST)
  private String sumoLogicHost;

  public static final String SERIALIZED_NAME_SUMO_LOGIC_TAGS = "sumo_logic_tags";
  @SerializedName(SERIALIZED_NAME_SUMO_LOGIC_TAGS)
  private String sumoLogicTags;

  public SumologicLogForwardingConfig() { 
  }

  public SumologicLogForwardingConfig sumoLogicEndpoint(String sumoLogicEndpoint) {
    
    this.sumoLogicEndpoint = sumoLogicEndpoint;
    return this;
  }

   /**
   * Get sumoLogicEndpoint
   * @return sumoLogicEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSumoLogicEndpoint() {
    return sumoLogicEndpoint;
  }


  public void setSumoLogicEndpoint(String sumoLogicEndpoint) {
    this.sumoLogicEndpoint = sumoLogicEndpoint;
  }


  public SumologicLogForwardingConfig sumoLogicHost(String sumoLogicHost) {
    
    this.sumoLogicHost = sumoLogicHost;
    return this;
  }

   /**
   * Get sumoLogicHost
   * @return sumoLogicHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSumoLogicHost() {
    return sumoLogicHost;
  }


  public void setSumoLogicHost(String sumoLogicHost) {
    this.sumoLogicHost = sumoLogicHost;
  }


  public SumologicLogForwardingConfig sumoLogicTags(String sumoLogicTags) {
    
    this.sumoLogicTags = sumoLogicTags;
    return this;
  }

   /**
   * Get sumoLogicTags
   * @return sumoLogicTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSumoLogicTags() {
    return sumoLogicTags;
  }


  public void setSumoLogicTags(String sumoLogicTags) {
    this.sumoLogicTags = sumoLogicTags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SumologicLogForwardingConfig sumologicLogForwardingConfig = (SumologicLogForwardingConfig) o;
    return Objects.equals(this.sumoLogicEndpoint, sumologicLogForwardingConfig.sumoLogicEndpoint) &&
        Objects.equals(this.sumoLogicHost, sumologicLogForwardingConfig.sumoLogicHost) &&
        Objects.equals(this.sumoLogicTags, sumologicLogForwardingConfig.sumoLogicTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sumoLogicEndpoint, sumoLogicHost, sumoLogicTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SumologicLogForwardingConfig {\n");
    sb.append("    sumoLogicEndpoint: ").append(toIndentedString(sumoLogicEndpoint)).append("\n");
    sb.append("    sumoLogicHost: ").append(toIndentedString(sumoLogicHost)).append("\n");
    sb.append("    sumoLogicTags: ").append(toIndentedString(sumoLogicTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

