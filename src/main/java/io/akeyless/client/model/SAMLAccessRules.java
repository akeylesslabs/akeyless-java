/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.akeyless.client.model.SAMLAttribute;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * SAMLAccessRules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SAMLAccessRules {
  public static final String SERIALIZED_NAME_ALLOWED_REDIRECT_U_R_IS = "allowed_redirect_URIs";
  @SerializedName(SERIALIZED_NAME_ALLOWED_REDIRECT_U_R_IS)
  @javax.annotation.Nullable
  private List<String> allowedRedirectURIs = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUND_ATTRIBUTES = "bound_attributes";
  @SerializedName(SERIALIZED_NAME_BOUND_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<SAMLAttribute> boundAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDP_METADATA_URL = "idp_metadata_url";
  @SerializedName(SERIALIZED_NAME_IDP_METADATA_URL)
  @javax.annotation.Nullable
  private String idpMetadataUrl;

  public static final String SERIALIZED_NAME_IDP_METADATA_XML = "idp_metadata_xml";
  @SerializedName(SERIALIZED_NAME_IDP_METADATA_XML)
  @javax.annotation.Nullable
  private String idpMetadataXml;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  @javax.annotation.Nullable
  private String uniqueIdentifier;

  public SAMLAccessRules() {
  }

  public SAMLAccessRules allowedRedirectURIs(@javax.annotation.Nullable List<String> allowedRedirectURIs) {
    this.allowedRedirectURIs = allowedRedirectURIs;
    return this;
  }

  public SAMLAccessRules addAllowedRedirectURIsItem(String allowedRedirectURIsItem) {
    if (this.allowedRedirectURIs == null) {
      this.allowedRedirectURIs = new ArrayList<>();
    }
    this.allowedRedirectURIs.add(allowedRedirectURIsItem);
    return this;
  }

  /**
   * Allowed redirect URIs after the authentication
   * @return allowedRedirectURIs
   */
  @javax.annotation.Nullable
  public List<String> getAllowedRedirectURIs() {
    return allowedRedirectURIs;
  }

  public void setAllowedRedirectURIs(@javax.annotation.Nullable List<String> allowedRedirectURIs) {
    this.allowedRedirectURIs = allowedRedirectURIs;
  }


  public SAMLAccessRules boundAttributes(@javax.annotation.Nullable List<SAMLAttribute> boundAttributes) {
    this.boundAttributes = boundAttributes;
    return this;
  }

  public SAMLAccessRules addBoundAttributesItem(SAMLAttribute boundAttributesItem) {
    if (this.boundAttributes == null) {
      this.boundAttributes = new ArrayList<>();
    }
    this.boundAttributes.add(boundAttributesItem);
    return this;
  }

  /**
   * The attributes that login is restricted to.
   * @return boundAttributes
   */
  @javax.annotation.Nullable
  public List<SAMLAttribute> getBoundAttributes() {
    return boundAttributes;
  }

  public void setBoundAttributes(@javax.annotation.Nullable List<SAMLAttribute> boundAttributes) {
    this.boundAttributes = boundAttributes;
  }


  public SAMLAccessRules idpMetadataUrl(@javax.annotation.Nullable String idpMetadataUrl) {
    this.idpMetadataUrl = idpMetadataUrl;
    return this;
  }

  /**
   * IDP metadata url
   * @return idpMetadataUrl
   */
  @javax.annotation.Nullable
  public String getIdpMetadataUrl() {
    return idpMetadataUrl;
  }

  public void setIdpMetadataUrl(@javax.annotation.Nullable String idpMetadataUrl) {
    this.idpMetadataUrl = idpMetadataUrl;
  }


  public SAMLAccessRules idpMetadataXml(@javax.annotation.Nullable String idpMetadataXml) {
    this.idpMetadataXml = idpMetadataXml;
    return this;
  }

  /**
   * IDP metadata XML
   * @return idpMetadataXml
   */
  @javax.annotation.Nullable
  public String getIdpMetadataXml() {
    return idpMetadataXml;
  }

  public void setIdpMetadataXml(@javax.annotation.Nullable String idpMetadataXml) {
    this.idpMetadataXml = idpMetadataXml;
  }


  public SAMLAccessRules uniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * A unique identifier to distinguish different users
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(@javax.annotation.Nullable String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLAccessRules saMLAccessRules = (SAMLAccessRules) o;
    return Objects.equals(this.allowedRedirectURIs, saMLAccessRules.allowedRedirectURIs) &&
        Objects.equals(this.boundAttributes, saMLAccessRules.boundAttributes) &&
        Objects.equals(this.idpMetadataUrl, saMLAccessRules.idpMetadataUrl) &&
        Objects.equals(this.idpMetadataXml, saMLAccessRules.idpMetadataXml) &&
        Objects.equals(this.uniqueIdentifier, saMLAccessRules.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedRedirectURIs, boundAttributes, idpMetadataUrl, idpMetadataXml, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLAccessRules {\n");
    sb.append("    allowedRedirectURIs: ").append(toIndentedString(allowedRedirectURIs)).append("\n");
    sb.append("    boundAttributes: ").append(toIndentedString(boundAttributes)).append("\n");
    sb.append("    idpMetadataUrl: ").append(toIndentedString(idpMetadataUrl)).append("\n");
    sb.append("    idpMetadataXml: ").append(toIndentedString(idpMetadataXml)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_redirect_URIs");
    openapiFields.add("bound_attributes");
    openapiFields.add("idp_metadata_url");
    openapiFields.add("idp_metadata_xml");
    openapiFields.add("unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAMLAccessRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAMLAccessRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAMLAccessRules is not found in the empty JSON string", SAMLAccessRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAMLAccessRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAMLAccessRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_redirect_URIs") != null && !jsonObj.get("allowed_redirect_URIs").isJsonNull() && !jsonObj.get("allowed_redirect_URIs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_redirect_URIs` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_redirect_URIs").toString()));
      }
      if (jsonObj.get("bound_attributes") != null && !jsonObj.get("bound_attributes").isJsonNull()) {
        JsonArray jsonArrayboundAttributes = jsonObj.getAsJsonArray("bound_attributes");
        if (jsonArrayboundAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bound_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bound_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("bound_attributes").toString()));
          }

          // validate the optional field `bound_attributes` (array)
          for (int i = 0; i < jsonArrayboundAttributes.size(); i++) {
            SAMLAttribute.validateJsonElement(jsonArrayboundAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("idp_metadata_url") != null && !jsonObj.get("idp_metadata_url").isJsonNull()) && !jsonObj.get("idp_metadata_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_metadata_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_metadata_url").toString()));
      }
      if ((jsonObj.get("idp_metadata_xml") != null && !jsonObj.get("idp_metadata_xml").isJsonNull()) && !jsonObj.get("idp_metadata_xml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_metadata_xml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_metadata_xml").toString()));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAMLAccessRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAMLAccessRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAMLAccessRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAMLAccessRules.class));

       return (TypeAdapter<T>) new TypeAdapter<SAMLAccessRules>() {
           @Override
           public void write(JsonWriter out, SAMLAccessRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAMLAccessRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAMLAccessRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAMLAccessRules
   * @throws IOException if the JSON string is invalid with respect to SAMLAccessRules
   */
  public static SAMLAccessRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAMLAccessRules.class);
  }

  /**
   * Convert an instance of SAMLAccessRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

