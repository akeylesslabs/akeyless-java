/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.akeyless.client.JSON;

/**
 * updateSalesforceTarget is a command that updates a new target. [Deprecated: Use target-update-salesforce command]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateSalesforceTarget {
  public static final String SERIALIZED_NAME_APP_PRIVATE_KEY_DATA = "app-private-key-data";
  @SerializedName(SERIALIZED_NAME_APP_PRIVATE_KEY_DATA)
  @javax.annotation.Nullable
  private String appPrivateKeyData;

  public static final String SERIALIZED_NAME_AUTH_FLOW = "auth-flow";
  @SerializedName(SERIALIZED_NAME_AUTH_FLOW)
  @javax.annotation.Nonnull
  private String authFlow;

  public static final String SERIALIZED_NAME_CA_CERT_DATA = "ca-cert-data";
  @SerializedName(SERIALIZED_NAME_CA_CERT_DATA)
  @javax.annotation.Nullable
  private String caCertData;

  public static final String SERIALIZED_NAME_CA_CERT_NAME = "ca-cert-name";
  @SerializedName(SERIALIZED_NAME_CA_CERT_NAME)
  @javax.annotation.Nullable
  private String caCertName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client-id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nonnull
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client-secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String clientSecret;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nonnull
  private String email;

  public static final String SERIALIZED_NAME_JSON = "json";
  @SerializedName(SERIALIZED_NAME_JSON)
  @javax.annotation.Nullable
  private Boolean json = false;

  public static final String SERIALIZED_NAME_KEEP_PREV_VERSION = "keep-prev-version";
  @SerializedName(SERIALIZED_NAME_KEEP_PREV_VERSION)
  @javax.annotation.Nullable
  private String keepPrevVersion;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "max-versions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  @javax.annotation.Nullable
  private String maxVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_NEW_NAME = "new-name";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  @javax.annotation.Nullable
  private String newName;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_SECURITY_TOKEN = "security-token";
  @SerializedName(SERIALIZED_NAME_SECURITY_TOKEN)
  @javax.annotation.Nullable
  private String securityToken;

  public static final String SERIALIZED_NAME_TENANT_URL = "tenant-url";
  @SerializedName(SERIALIZED_NAME_TENANT_URL)
  @javax.annotation.Nonnull
  private String tenantUrl;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  @javax.annotation.Nullable
  private String uidToken;

  public static final String SERIALIZED_NAME_UPDATE_VERSION = "update-version";
  @SerializedName(SERIALIZED_NAME_UPDATE_VERSION)
  @javax.annotation.Nullable
  private Boolean updateVersion;

  public UpdateSalesforceTarget() {
  }

  public UpdateSalesforceTarget appPrivateKeyData(@javax.annotation.Nullable String appPrivateKeyData) {
    this.appPrivateKeyData = appPrivateKeyData;
    return this;
  }

  /**
   * Base64 encoded PEM of the connected app private key (relevant for JWT auth only)
   * @return appPrivateKeyData
   */
  @javax.annotation.Nullable
  public String getAppPrivateKeyData() {
    return appPrivateKeyData;
  }

  public void setAppPrivateKeyData(@javax.annotation.Nullable String appPrivateKeyData) {
    this.appPrivateKeyData = appPrivateKeyData;
  }


  public UpdateSalesforceTarget authFlow(@javax.annotation.Nonnull String authFlow) {
    this.authFlow = authFlow;
    return this;
  }

  /**
   * type of the auth flow (&#39;jwt&#39; / &#39;user-password&#39;)
   * @return authFlow
   */
  @javax.annotation.Nonnull
  public String getAuthFlow() {
    return authFlow;
  }

  public void setAuthFlow(@javax.annotation.Nonnull String authFlow) {
    this.authFlow = authFlow;
  }


  public UpdateSalesforceTarget caCertData(@javax.annotation.Nullable String caCertData) {
    this.caCertData = caCertData;
    return this;
  }

  /**
   * Base64 encoded PEM cert to use when uploading a new key to Salesforce
   * @return caCertData
   */
  @javax.annotation.Nullable
  public String getCaCertData() {
    return caCertData;
  }

  public void setCaCertData(@javax.annotation.Nullable String caCertData) {
    this.caCertData = caCertData;
  }


  public UpdateSalesforceTarget caCertName(@javax.annotation.Nullable String caCertName) {
    this.caCertName = caCertName;
    return this;
  }

  /**
   * name of the certificate in Salesforce tenant to use when uploading new key
   * @return caCertName
   */
  @javax.annotation.Nullable
  public String getCaCertName() {
    return caCertName;
  }

  public void setCaCertName(@javax.annotation.Nullable String caCertName) {
    this.caCertName = caCertName;
  }


  public UpdateSalesforceTarget clientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client ID of the oauth2 app to use for connecting to Salesforce
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
  }


  public UpdateSalesforceTarget clientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Client secret of the oauth2 app to use for connecting to Salesforce (required for password flow)
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public UpdateSalesforceTarget comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Deprecated - use description
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }


  public UpdateSalesforceTarget description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the object
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateSalesforceTarget email(@javax.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user attached to the oauth2 app used for connecting to Salesforce
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }


  public UpdateSalesforceTarget json(@javax.annotation.Nullable Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * Set output format to JSON
   * @return json
   */
  @javax.annotation.Nullable
  public Boolean getJson() {
    return json;
  }

  public void setJson(@javax.annotation.Nullable Boolean json) {
    this.json = json;
  }


  public UpdateSalesforceTarget keepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
    return this;
  }

  /**
   * Whether to keep previous version [true/false]. If not set, use default according to account settings
   * @return keepPrevVersion
   */
  @javax.annotation.Nullable
  public String getKeepPrevVersion() {
    return keepPrevVersion;
  }

  public void setKeepPrevVersion(@javax.annotation.Nullable String keepPrevVersion) {
    this.keepPrevVersion = keepPrevVersion;
  }


  public UpdateSalesforceTarget key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public UpdateSalesforceTarget maxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * Set the maximum number of versions, limited by the account settings defaults.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(@javax.annotation.Nullable String maxVersions) {
    this.maxVersions = maxVersions;
  }


  public UpdateSalesforceTarget name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Target name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public UpdateSalesforceTarget newName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
    return this;
  }

  /**
   * New target name
   * @return newName
   */
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(@javax.annotation.Nullable String newName) {
    this.newName = newName;
  }


  public UpdateSalesforceTarget password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of the user attached to the oauth2 app used for connecting to Salesforce (required for user-password flow)
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public UpdateSalesforceTarget securityToken(@javax.annotation.Nullable String securityToken) {
    this.securityToken = securityToken;
    return this;
  }

  /**
   * The security token of the user attached to the oauth2 app used for connecting to Salesforce  (required for user-password flow)
   * @return securityToken
   */
  @javax.annotation.Nullable
  public String getSecurityToken() {
    return securityToken;
  }

  public void setSecurityToken(@javax.annotation.Nullable String securityToken) {
    this.securityToken = securityToken;
  }


  public UpdateSalesforceTarget tenantUrl(@javax.annotation.Nonnull String tenantUrl) {
    this.tenantUrl = tenantUrl;
    return this;
  }

  /**
   * Url of the Salesforce tenant
   * @return tenantUrl
   */
  @javax.annotation.Nonnull
  public String getTenantUrl() {
    return tenantUrl;
  }

  public void setTenantUrl(@javax.annotation.Nonnull String tenantUrl) {
    this.tenantUrl = tenantUrl;
  }


  public UpdateSalesforceTarget token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public UpdateSalesforceTarget uidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
    return this;
  }

  /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
   */
  @javax.annotation.Nullable
  public String getUidToken() {
    return uidToken;
  }

  public void setUidToken(@javax.annotation.Nullable String uidToken) {
    this.uidToken = uidToken;
  }


  public UpdateSalesforceTarget updateVersion(@javax.annotation.Nullable Boolean updateVersion) {
    this.updateVersion = updateVersion;
    return this;
  }

  /**
   * Deprecated
   * @return updateVersion
   */
  @javax.annotation.Nullable
  public Boolean getUpdateVersion() {
    return updateVersion;
  }

  public void setUpdateVersion(@javax.annotation.Nullable Boolean updateVersion) {
    this.updateVersion = updateVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSalesforceTarget updateSalesforceTarget = (UpdateSalesforceTarget) o;
    return Objects.equals(this.appPrivateKeyData, updateSalesforceTarget.appPrivateKeyData) &&
        Objects.equals(this.authFlow, updateSalesforceTarget.authFlow) &&
        Objects.equals(this.caCertData, updateSalesforceTarget.caCertData) &&
        Objects.equals(this.caCertName, updateSalesforceTarget.caCertName) &&
        Objects.equals(this.clientId, updateSalesforceTarget.clientId) &&
        Objects.equals(this.clientSecret, updateSalesforceTarget.clientSecret) &&
        Objects.equals(this.comment, updateSalesforceTarget.comment) &&
        Objects.equals(this.description, updateSalesforceTarget.description) &&
        Objects.equals(this.email, updateSalesforceTarget.email) &&
        Objects.equals(this.json, updateSalesforceTarget.json) &&
        Objects.equals(this.keepPrevVersion, updateSalesforceTarget.keepPrevVersion) &&
        Objects.equals(this.key, updateSalesforceTarget.key) &&
        Objects.equals(this.maxVersions, updateSalesforceTarget.maxVersions) &&
        Objects.equals(this.name, updateSalesforceTarget.name) &&
        Objects.equals(this.newName, updateSalesforceTarget.newName) &&
        Objects.equals(this.password, updateSalesforceTarget.password) &&
        Objects.equals(this.securityToken, updateSalesforceTarget.securityToken) &&
        Objects.equals(this.tenantUrl, updateSalesforceTarget.tenantUrl) &&
        Objects.equals(this.token, updateSalesforceTarget.token) &&
        Objects.equals(this.uidToken, updateSalesforceTarget.uidToken) &&
        Objects.equals(this.updateVersion, updateSalesforceTarget.updateVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPrivateKeyData, authFlow, caCertData, caCertName, clientId, clientSecret, comment, description, email, json, keepPrevVersion, key, maxVersions, name, newName, password, securityToken, tenantUrl, token, uidToken, updateVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSalesforceTarget {\n");
    sb.append("    appPrivateKeyData: ").append(toIndentedString(appPrivateKeyData)).append("\n");
    sb.append("    authFlow: ").append(toIndentedString(authFlow)).append("\n");
    sb.append("    caCertData: ").append(toIndentedString(caCertData)).append("\n");
    sb.append("    caCertName: ").append(toIndentedString(caCertName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    keepPrevVersion: ").append(toIndentedString(keepPrevVersion)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    securityToken: ").append(toIndentedString(securityToken)).append("\n");
    sb.append("    tenantUrl: ").append(toIndentedString(tenantUrl)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    updateVersion: ").append(toIndentedString(updateVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app-private-key-data");
    openapiFields.add("auth-flow");
    openapiFields.add("ca-cert-data");
    openapiFields.add("ca-cert-name");
    openapiFields.add("client-id");
    openapiFields.add("client-secret");
    openapiFields.add("comment");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("json");
    openapiFields.add("keep-prev-version");
    openapiFields.add("key");
    openapiFields.add("max-versions");
    openapiFields.add("name");
    openapiFields.add("new-name");
    openapiFields.add("password");
    openapiFields.add("security-token");
    openapiFields.add("tenant-url");
    openapiFields.add("token");
    openapiFields.add("uid-token");
    openapiFields.add("update-version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auth-flow");
    openapiRequiredFields.add("client-id");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tenant-url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSalesforceTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSalesforceTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSalesforceTarget is not found in the empty JSON string", UpdateSalesforceTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSalesforceTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSalesforceTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSalesforceTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("app-private-key-data") != null && !jsonObj.get("app-private-key-data").isJsonNull()) && !jsonObj.get("app-private-key-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app-private-key-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app-private-key-data").toString()));
      }
      if (!jsonObj.get("auth-flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-flow").toString()));
      }
      if ((jsonObj.get("ca-cert-data") != null && !jsonObj.get("ca-cert-data").isJsonNull()) && !jsonObj.get("ca-cert-data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca-cert-data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca-cert-data").toString()));
      }
      if ((jsonObj.get("ca-cert-name") != null && !jsonObj.get("ca-cert-name").isJsonNull()) && !jsonObj.get("ca-cert-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca-cert-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca-cert-name").toString()));
      }
      if (!jsonObj.get("client-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-id").toString()));
      }
      if ((jsonObj.get("client-secret") != null && !jsonObj.get("client-secret").isJsonNull()) && !jsonObj.get("client-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-secret").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("keep-prev-version") != null && !jsonObj.get("keep-prev-version").isJsonNull()) && !jsonObj.get("keep-prev-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep-prev-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keep-prev-version").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("max-versions") != null && !jsonObj.get("max-versions").isJsonNull()) && !jsonObj.get("max-versions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max-versions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max-versions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("new-name") != null && !jsonObj.get("new-name").isJsonNull()) && !jsonObj.get("new-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new-name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("security-token") != null && !jsonObj.get("security-token").isJsonNull()) && !jsonObj.get("security-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security-token").toString()));
      }
      if (!jsonObj.get("tenant-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant-url").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("uid-token") != null && !jsonObj.get("uid-token").isJsonNull()) && !jsonObj.get("uid-token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid-token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid-token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSalesforceTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSalesforceTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSalesforceTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSalesforceTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSalesforceTarget>() {
           @Override
           public void write(JsonWriter out, UpdateSalesforceTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSalesforceTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSalesforceTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSalesforceTarget
   * @throws IOException if the JSON string is invalid with respect to UpdateSalesforceTarget
   */
  public static UpdateSalesforceTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSalesforceTarget.class);
  }

  /**
   * Convert an instance of UpdateSalesforceTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

