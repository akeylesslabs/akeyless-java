/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.api;

import io.akeyless.client.ApiException;
import io.akeyless.client.model.*;
//import io.akeyless.client.model.CreateAwsTarget;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Ignore
public class V2ApiTest {

    private final V2Api api = new V2Api();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assocRoleAuthMethodTest() throws ApiException {
        AssocRoleAuthMethod body = null;
        CreateRoleAuthMethodAssocOutput response = api.assocRoleAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assocTargetItemTest() throws ApiException {
        AssocTargetItem body = null;
        CreateTargetItemAssocOutput response = api.assocTargetItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authTest() throws ApiException {
        Auth body = null;
        AuthOutput response = api.auth(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureTest() throws ApiException {
        Configure body = null;
        ConfigureOutput response = api.configure(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodTest() throws ApiException {
        CreateAuthMethod body = null;
        CreateAuthMethodOutput response = api.createAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodAWSIAMTest() throws ApiException {
        CreateAuthMethodAWSIAM body = null;
        CreateAuthMethodAWSIAMOutput response = api.createAuthMethodAWSIAM(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodAzureADTest() throws ApiException {
        CreateAuthMethodAzureAD body = null;
        CreateAuthMethodAzureADOutput response = api.createAuthMethodAzureAD(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodHuaweiTest() throws ApiException {
        CreateAuthMethodHuawei body = null;
        CreateAuthMethodHuaweiOutput response = api.createAuthMethodHuawei(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodOAuth2Test() throws ApiException {
        CreateAuthMethodOAuth2 body = null;
        CreateAuthMethodOAuth2Output response = api.createAuthMethodOAuth2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodSAMLTest() throws ApiException {
        CreateAuthMethodSAML body = null;
        CreateAuthMethodSAMLOutput response = api.createAuthMethodSAML(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodUniversalIdentityTest() throws ApiException {
        CreateAuthMethodUniversalIdentity body = null;
        CreateAuthMethodUniversalIdentityOutput response = api.createAuthMethodUniversalIdentity(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAwsTargetTest() throws ApiException {
        CreateAWSTarget body = null;
        Object response = api.createAWSTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDBTargetTest() throws ApiException {
        CreateDBTarget body = null;
        Object response = api.createDBTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDynamicSecretTest() throws ApiException {
        CreateDynamicSecret body = null;
        Object response = api.createDynamicSecret(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        CreateKey body = null;
        CreateKeyOutput response = api.createKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPKICertIssuerTest() throws ApiException {
        CreatePKICertIssuer body = null;
        CreatePKICertIssuerOutput response = api.createPKICertIssuer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRabbitMQTargetTest() throws ApiException {
        CreateRabbitMQTarget body = null;
        Object response = api.createRabbitMQTarget(body);

        // TODO: test validations
    }

    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        CreateRole body = null;
        Object response = api.createRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHCertIssuerTest() throws ApiException {
        CreateSSHCertIssuer body = null;
        CreateSSHCertIssuerOutput response = api.createSSHCertIssuer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHTargetTest() throws ApiException {
        CreateSSHTarget body = null;
        Object response = api.createSSHTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecretTest() throws ApiException {
        CreateSecret body = null;
        CreateSecretOutput response = api.createSecret(body);

        // TODO: test validations
    }
    

    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebTargetTest() throws ApiException {
        CreateWebTarget body = null;
        Object response = api.createWebTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void decryptTest() throws ApiException {
        Decrypt body = null;
        DecryptOutput response = api.decrypt(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void decryptPKCS1Test() throws ApiException {
        DecryptPKCS1 body = null;
        DecryptPKCS1Output response = api.decryptPKCS1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthMethodTest() throws ApiException {
        DeleteAuthMethod body = null;
        DeleteAuthMethodOutput response = api.deleteAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthMethodsTest() throws ApiException {
        DeleteAuthMethods body = null;
        DeleteAuthMethodsOutput response = api.deleteAuthMethods(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        DeleteItem body = null;
        DeleteItemOutput response = api.deleteItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemsTest() throws ApiException {
        DeleteItems body = null;
        DeleteItemsOutput response = api.deleteItems(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        DeleteRole body = null;
        Object response = api.deleteRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleAssociationTest() throws ApiException {
        DeleteRoleAssociation body = null;
        Object response = api.deleteRoleAssociation(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleRuleTest() throws ApiException {
        DeleteRoleRule body = null;
        DeleteRoleRuleOutput response = api.deleteRoleRule(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRolesTest() throws ApiException {
        DeleteRoles body = null;
        Object response = api.deleteRoles(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetTest() throws ApiException {
        DeleteTarget body = null;
        Object response = api.deleteTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetAssociationTest() throws ApiException {
        DeleteTargetAssociation body = null;
        Object response = api.deleteTargetAssociation(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetsTest() throws ApiException {
        DeleteTargets body = null;
        Object response = api.deleteTargets(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void describeItemTest() throws ApiException {
        DescribeItem body = null;
        Item response = api.describeItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encryptTest() throws ApiException {
        Encrypt body = null;
        EncryptOutput response = api.encrypt(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerArtifactoryTest() throws ApiException {
        GatewayCreateProducerArtifactory body = null;
        GatewayCreateProducerArtifactoryOutput response = api.gatewayCreateProducerArtifactory(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerAwsTest() throws ApiException {
        GatewayCreateProducerAws body = null;
        GatewayCreateProducerAwsOutput response = api.gatewayCreateProducerAws(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerAzureTest() throws ApiException {
        GatewayCreateProducerAzure body = null;
        GatewayCreateProducerAzureOutput response = api.gatewayCreateProducerAzure(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerEksTest() throws ApiException {
        GatewayCreateProducerEks body = null;
        GatewayCreateProducerEksOutput response = api.gatewayCreateProducerEks(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerGkeTest() throws ApiException {
        GatewayCreateProducerGke body = null;
        GatewayCreateProducerGkeOutput response = api.gatewayCreateProducerGke(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMSSQLTest() throws ApiException {
        GatewayCreateProducerMSSQL body = null;
        GatewayCreateProducerMSSQLOutput response = api.gatewayCreateProducerMSSQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMongoTest() throws ApiException {
        GatewayCreateProducerMongo body = null;
        GatewayCreateProducerMongoOutput response = api.gatewayCreateProducerMongo(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMySQLTest() throws ApiException {
        GatewayCreateProducerMySQL body = null;
        GatewayCreateProducerMySQLOutput response = api.gatewayCreateProducerMySQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerPostgreSQLTest() throws ApiException {
        GatewayCreateProducerPostgreSQL body = null;
        GatewayCreateProducerPostgreSQLOutput response = api.gatewayCreateProducerPostgreSQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerRabbitMQTest() throws ApiException {
        GatewayCreateProducerRabbitMQ body = null;
        GatewayCreateProducerRabbitMQOutput response = api.gatewayCreateProducerRabbitMQ(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerRdpTest() throws ApiException {
        GatewayCreateProducerRdp body = null;
        GatewayCreateProducerRdpOutput response = api.gatewayCreateProducerRdp(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerVenafiTest() throws ApiException {
        GatewayCreateProducerCertificateAutomation body = null;
        GatewayCreateProducerCertificateAutomationOutput response = api.gatewayCreateProducerCertificateAutomation(body);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayDeleteProducerTest() throws ApiException {
        GatewayDeleteProducer body = null;
        GatewayDeleteProducerOutput response = api.gatewayDeleteProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetConfigTest() throws ApiException {
        GatewayGetConfig body = null;
        AkeylessGatewayConfig response = api.gatewayGetConfig(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetProducerTest() throws ApiException {
        GatewayGetProducer body = null;
        DSProducerDetails response = api.gatewayGetProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetTmpUsersTest() throws ApiException {
        GatewayGetTmpUsers body = null;
        List<TmpUserData> response = api.gatewayGetTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayListProducersTest() throws ApiException {
        GatewayListProducers body = null;
        GetProducersListReplyObj response = api.gatewayListProducers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayRevokeTmpUsersTest() throws ApiException {
        GatewayRevokeTmpUsers body = null;
        api.gatewayRevokeTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayStartProducerTest() throws ApiException {
        GatewayStartProducer body = null;
        GatewayStartProducerOutput response = api.gatewayStartProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayStopProducerTest() throws ApiException {
        GatewayStopProducer body = null;
        GatewayStopProducerOutput response = api.gatewayStopProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayUpdateTmpUsersTest() throws ApiException {
        GatewayUpdateTmpUsers body = null;
        api.gatewayUpdateTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountLogoTest() throws ApiException {
        Map<String, String> response = api.getAccountLogo();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthMethodTest() throws ApiException {
        GetAuthMethod body = null;
        AuthMethod response = api.getAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPkiCertificateTest() throws ApiException {
        GetPKICertificate body = null;
        GetPKICertificateOutput response = api.getPKICertificate(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDynamicSecretValueTest() throws ApiException {
        GetDynamicSecretValue body = null;
        Map<String, String> response = api.getDynamicSecretValue(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRSAPublicTest() throws ApiException {
        GetRSAPublic body = null;
        GetRSAPublicOutput response = api.getRSAPublic(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        GetRole body = null;
        Role response = api.getRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSSHCertificateTest() throws ApiException {
        GetSSHCertificate body = null;
        GetSSHCertificateOutput response = api.getSSHCertificate(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretValueTest() throws ApiException {
        GetSecretValue body = null;
        Map<String, String> response = api.getSecretValue(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetTest() throws ApiException {
        GetTarget body = null;
        Target response = api.getTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetDetailsTest() throws ApiException {
        GetTargetDetails body = null;
        GetTargetDetailsOutput response = api.getTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthMethodsTest() throws ApiException {
        ListAuthMethods body = null;
        ListAuthMethodsOutput response = api.listAuthMethods(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        ListItems body = null;
        ListItemsInPathOutput response = api.listItems(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRolesTest() throws ApiException {
        ListRoles body = null;
        ListRolesOutput response = api.listRoles(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTargetsTest() throws ApiException {
        ListTargets body = null;
        ListTargetsOutput response = api.listTargets(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveObjectsTest() throws ApiException {
        MoveObjects body = null;
        Object response = api.moveObjects(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawCredsTest() throws ApiException {
        RawCreds body = null;
        SystemAccessCredentialsReplyObj response = api.rawCreds(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshKeyTest() throws ApiException {
        RefreshKey body = null;
        RefreshKeyOutput response = api.refreshKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reverseRBACTest() throws ApiException {
        ReverseRBAC body = null;
        ReverseRBACOutput response = api.reverseRBAC(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rollbackSecretTest() throws ApiException {
        RollbackSecret body = null;
        RollbackSecretOutput response = api.rollbackSecret(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateKeyTest() throws ApiException {
        UpdateRotationSettings body = null;
        RotateKeyOutput response = api.rotateKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setItemStateTest() throws ApiException {
        SetItemState body = null;
        Object response = api.setItemState(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRoleRuleTest() throws ApiException {
        SetRoleRule body = null;
        Object response = api.setRoleRule(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signPKCS1Test() throws ApiException {
        SignPKCS1 body = null;
        SignPKCS1Output response = api.signPKCS1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staticCredsAuthTest() throws ApiException {
        StaticCredsAuth body = null;
        StaticCredsAuthOutput response = api.staticCredsAuth(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidCreateChildTokenTest() throws ApiException {
        UidCreateChildToken body = null;
        UidCreateChildTokenOutput response = api.uidCreateChildToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidGenerateTokenTest() throws ApiException {
        UidGenerateToken body = null;
        UidGenerateTokenOutput response = api.uidGenerateToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidListChildrenTest() throws ApiException {
        UidListChildren body = null;
        UniversalIdentityDetails response = api.uidListChildren(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidRevokeTokenTest() throws ApiException {
        UidRevokeToken body = null;
        Object response = api.uidRevokeToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidRotateTokenTest() throws ApiException {
        UidRotateToken body = null;
        UidRotateTokenOutput response = api.uidRotateToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAWSTargetDetailsTest() throws ApiException {
        UpdateAWSTargetDetails body = null;
        UpdateTargetOutput response = api.updateAWSTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDBTargetDetailsTest() throws ApiException {
        UpdateDBTargetDetails body = null;
        UpdateTargetOutput response = api.updateDBTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        UpdateItem body = null;
        UpdateItemOutput response = api.updateItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRDPTargetDetailsTest() throws ApiException {
        UpdateRDPTargetDetails body = null;
        UpdateTargetOutput response = api.updateRDPTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRabbitMQTargetDetailsTest() throws ApiException {
        UpdateRabbitMQTargetDetails body = null;
        UpdateTargetOutput response = api.updateRabbitMQTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        UpdateRole body = null;
        UpdateRoleOutput response = api.updateRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSSHTargetDetailsTest() throws ApiException {
        UpdateSSHTargetDetails body = null;
        UpdateTargetOutput response = api.updateSSHTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecretValTest() throws ApiException {
        UpdateSecretVal body = null;
        UpdateSecretValOutput response = api.updateSecretVal(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetTest() throws ApiException {
        UpdateTarget body = null;
        UpdateTargetOutput response = api.updateTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetDetailsTest() throws ApiException {
        UpdateTargetDetails body = null;
        UpdateTargetOutput response = api.updateTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebTargetDetailsTest() throws ApiException {
        UpdateWebTargetDetails body = null;
        UpdateTargetOutput response = api.updateWebTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadRSATest() throws ApiException {
        UploadRSA body = null;
        Object response = api.uploadRSA(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPKCS1Test() throws ApiException {
        VerifyPKCS1 body = null;
        Object response = api.verifyPKCS1(body);

        // TODO: test validations
    }
    
}
